
DE10_NANO_ADC.elf:     file format elf32-littlenios2
DE10_NANO_ADC.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401c0

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x000128f8 memsz 0x000128f8 flags r-x
    LOAD off    0x00013918 vaddr 0x00052918 paddr 0x00054444 align 2**12
         filesz 0x00001b2c memsz 0x00001b2c flags rw-
    LOAD off    0x00015f70 vaddr 0x00055f70 paddr 0x00055f70 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012370  000401c0  000401c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003e8  00052530  00052530  00013530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b2c  00052918  00054444  00013918  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  00055f70  00055f70  00015f70  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  000560cc  000560cc  00015444  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00015444  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000fd8  00000000  00000000  00015468  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002669f  00000000  00000000  00016440  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009d12  00000000  00000000  0003cadf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c3f8  00000000  00000000  000467f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000288c  00000000  00000000  00052bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003fe6  00000000  00000000  00055478  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00019687  00000000  00000000  0005945e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00072ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001be0  00000000  00000000  00072b48  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007811a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0007811d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00078127  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00078128  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00078129  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007812d  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00078131  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00078135  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0007813e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00078147  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000e  00000000  00000000  00078150  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000010  00000000  00000000  0007815e  2**0
                  CONTENTS, READONLY
 29 .jdi          00005b59  00000000  00000000  0007816e  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00060785  00000000  00000000  0007dcc7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401c0 l    d  .text	00000000 .text
00052530 l    d  .rodata	00000000 .rodata
00052918 l    d  .rwdata	00000000 .rwdata
00055f70 l    d  .bss	00000000 .bss
000560cc l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DE10_NANO_ADC_bsp//obj/HAL/src/crt0.o
00040208 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00040094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00052736 l     O .rodata	00000010 zeroes.4404
000437fc l     F .text	000000bc __sbprintf
00052746 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00043a0c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0004553c l     F .text	00000008 __fp_unlock
00045550 l     F .text	0000019c __sinit.part.1
000456ec l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00052918 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00052d5c l     O .rwdata	00000020 lc_ctype_charset
00052d3c l     O .rwdata	00000020 lc_message_charset
00052d7c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00052778 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00048ae8 l     F .text	000000fc __sprint_r.part.0
000528ac l     O .rodata	00000010 blanks.4348
0005289c l     O .rodata	00000010 zeroes.4349
0004a074 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0004dccc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004ddec l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004de18 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0004df18 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0004e00c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004e0f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0004e2e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0005442c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0004e540 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004e688 l     F .text	00000038 alt_dev_reg
00053364 l     O .rwdata	00000038 i2c_dac
0005339c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0004e750 l     F .text	00000110 optional_irq_callback
0004e8b0 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0005057c l     F .text	0000020c altera_avalon_jtag_uart_irq
00050788 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000510a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000515f0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00051730 l     F .text	00000050 alt_get_errno
00051780 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0004812c g     F .text	00000074 _mprec_log10
00048218 g     F .text	0000008c __any_on
0004a610 g     F .text	00000054 _isatty_r
00052784 g     O .rodata	00000028 __mprec_tinytens
0004e21c g     F .text	0000007c alt_main
0004147c g     F .text	000000c0 _puts_r
0004020c g     F .text	00000080 send_to_PCF
00055fcc g     O .bss	00000100 alt_irq
0004a664 g     F .text	00000060 _lseek_r
00054444 g       *ABS*	00000000 __flash_rwdata_start
0004c85c g     F .text	00000088 .hidden __eqdf2
000560cc g       *ABS*	00000000 __alt_heap_start
00041440 g     F .text	0000003c printf
0004a87c g     F .text	0000009c _wcrtomb_r
000489a8 g     F .text	0000005c __sseek
0004588c g     F .text	00000010 __sinit
0004a724 g     F .text	00000140 __swbuf_r
00046354 g     F .text	0000007c _setlocale_r
000456f4 g     F .text	00000068 __sfmoreglue
0004efa8 g     F .text	000000a8 alt_avalon_i2c_rx_read
0004e2bc g     F .text	00000024 __malloc_unlock
00040560 g     F .text	00000440 .hidden __divsf3
000501a8 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
0004ed2c g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00047024 g     F .text	0000015c memmove
00045874 g     F .text	00000018 _cleanup
0004fa04 g     F .text	00000208 alt_avalon_i2c_master_transmit_using_interrupts
000472a8 g     F .text	000000a8 _Balloc
0004133c g     F .text	00000070 .hidden __fixsfsi
0004c8e4 g     F .text	000000dc .hidden __gtdf2
00051db8 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
0004a5b4 g     F .text	0000005c _fstat_r
00055f88 g     O .bss	00000004 errno
00048924 g     F .text	00000008 __seofread
00055f90 g     O .bss	00000004 alt_argv
0005c3fc g       *ABS*	00000000 _gp
000501ec g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
00040e58 g     F .text	000004e4 .hidden __subsf3
0004eebc g     F .text	00000044 alt_avalon_i2c_is_busy
000531e4 g     O .rwdata	00000180 alt_fd_list
0004ec60 g     F .text	000000cc alt_avalon_i2c_master_config_set
0005125c g     F .text	00000090 alt_find_dev
00046edc g     F .text	00000148 memcpy
00045544 g     F .text	0000000c _cleanup_r
0004db48 g     F .text	000000dc .hidden __floatsidf
000516b4 g     F .text	0000007c alt_io_redirect
0004c9c0 g     F .text	000000f4 .hidden __ltdf2
00052530 g       *ABS*	00000000 __DTOR_END__
0004f848 g     F .text	000001bc alt_avalon_i2c_master_transmit
0004153c g     F .text	00000014 puts
00048808 g     F .text	00000074 __fpclassifyd
00048088 g     F .text	000000a4 __ratio
0004a058 g     F .text	0000001c __vfiprintf_internal
00050988 g     F .text	0000021c altera_avalon_jtag_uart_read
00041410 g     F .text	00000030 _printf_r
0004b60c g     F .text	00000064 .hidden __udivsi3
0004df68 g     F .text	000000a4 isatty
000527d4 g     O .rodata	000000c8 __mprec_tens
000463d0 g     F .text	0000000c __locale_charset
00051fa4 g     F .text	00000090 alt_icache_flush
0004eacc g     F .text	00000098 alt_avalon_i2c_enable
00055f84 g     O .bss	00000004 __malloc_top_pad
0004028c g     F .text	00000094 send_to_LTC2607
000500dc g     F .text	00000068 alt_avalon_i2c_int_disable
00054404 g     O .rwdata	00000004 __mb_cur_max
00046400 g     F .text	0000000c _localeconv_r
000476b4 g     F .text	0000003c __i2b
00045d10 g     F .text	000004bc __sfvwrite_r
0004887c g     F .text	00000054 _sbrk_r
0004a6c4 g     F .text	00000060 _read_r
00054424 g     O .rwdata	00000004 alt_max_fd
0004a2a8 g     F .text	000000f0 _fclose_r
0004550c g     F .text	00000030 fflush
00055f80 g     O .bss	00000004 __malloc_max_sbrked_mem
0004fc0c g     F .text	0000020c alt_avalon_i2c_master_receive
0004b6c8 g     F .text	000008ac .hidden __adddf3
00047e30 g     F .text	0000010c __b2d
0004afdc g     F .text	00000538 .hidden __umoddi3
0004e148 g     F .text	000000d4 lseek
00050144 g     F .text	00000064 alt_avalon_i2c_int_enable
000543fc g     O .rwdata	00000004 _global_impure_ptr
000482a4 g     F .text	00000564 _realloc_r
000560cc g       *ABS*	00000000 __bss_end
00051500 g     F .text	000000f0 alt_iic_isr_register
00051cb0 g     F .text	00000108 alt_tick
0004aa64 g     F .text	00000578 .hidden __udivdi3
00050004 g     F .text	00000058 alt_avalon_i2c_int_status_get
0004a510 g     F .text	00000024 _fputwc_r
000527ac g     O .rodata	00000028 __mprec_bigtens
00047498 g     F .text	00000104 __s2b
0004dc24 g     F .text	000000a8 .hidden __floatunsidf
00047b70 g     F .text	00000060 __mcmp
000458ac g     F .text	00000018 __fp_lock_all
000514b4 g     F .text	0000004c alt_ic_irq_enabled
00051c14 g     F .text	0000009c alt_alarm_stop
0004e94c g     F .text	00000054 alt_avalon_i2c_register_callback
00055f98 g     O .bss	00000004 alt_irq_active
0004e9a0 g     F .text	000000ec alt_avalon_i2c_init
000400ec g     F .exceptions	000000d4 alt_irq_handler
000531bc g     O .rwdata	00000028 alt_dev_null
00051060 g     F .text	00000048 alt_dcache_flush_all
0004759c g     F .text	00000068 __hi0bits
0004dac8 g     F .text	00000080 .hidden __fixdfsi
00054444 g       *ABS*	00000000 __ram_rwdata_end
0005441c g     O .rwdata	00000008 alt_dev_list
0004e590 g     F .text	000000f8 write
000520fc g     F .text	000000a0 _putc_r
0004f2dc g     F .text	0000004c alt_avalon_i2c_check_arblost
000409a0 g     F .text	000000bc .hidden __gtsf2
000500a0 g     F .text	0000003c alt_avalon_i2c_int_clear
00052918 g       *ABS*	00000000 __ram_rodata_end
0004de68 g     F .text	000000b0 fstat
0004c9c0 g     F .text	000000f4 .hidden __ledf2
00054430 g     O .rwdata	00000008 alt_avalon_i2c_list
000478e8 g     F .text	00000140 __pow5mult
00048bfc g     F .text	0000145c ___vfiprintf_internal_r
00055f78 g     O .bss	00000004 __nlocale_changed
0004b670 g     F .text	00000058 .hidden __umodsi3
000560cc g       *ABS*	00000000 end
000504b4 g     F .text	000000c8 altera_avalon_jtag_uart_init
0004ea8c g     F .text	00000040 alt_avalon_i2c_open
00052530 g       *ABS*	00000000 __CTOR_LIST__
00067100 g       *ABS*	00000000 __alt_stack_pointer
0004f45c g     F .text	000000e8 alt_avalon_i2c_master_tx
000413ac g     F .text	00000064 .hidden __clzsi2
00050ba4 g     F .text	00000224 altera_avalon_jtag_uart_write
0004589c g     F .text	00000004 __sfp_lock_acquire
00046df8 g     F .text	000000e4 memchr
000415e8 g     F .text	000021f8 ___vfprintf_internal_r
00045a00 g     F .text	00000310 _free_r
000519a4 g     F .text	0000022c alt_printf
000463dc g     F .text	00000010 __locale_mb_cur_max
0005237c g     F .text	00000180 __call_exitprocs
00055f74 g     O .bss	00000004 __mlocale_changed
0004e860 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
00054408 g     O .rwdata	00000004 __malloc_sbrk_base
000401c0 g     F .text	0000004c _start
00055f9c g     O .bss	00000004 _alt_tick_rate
0004fe18 g     F .text	000001ec alt_avalon_i2c_master_receive_using_interrupts
00050238 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
00047a28 g     F .text	00000148 __lshift
00055fa0 g     O .bss	00000004 _alt_nticks
0004e330 g     F .text	000000fc read
0004e6f8 g     F .text	00000058 alt_sys_init
00052264 g     F .text	00000118 __register_exitproc
0004f680 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
000476f0 g     F .text	000001f8 __multiply
00050830 g     F .text	00000068 altera_avalon_jtag_uart_close
00052918 g       *ABS*	00000000 __ram_rwdata_start
00052530 g       *ABS*	00000000 __ram_rodata_start
00055fa4 g     O .bss	00000028 __malloc_current_mallinfo
00047f3c g     F .text	0000014c __d2b
00050350 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00051ef0 g     F .text	000000b4 alt_get_fd
00050f08 g     F .text	00000158 alt_busy_sleep
0004a190 g     F .text	00000054 _close_r
00052080 g     F .text	0000007c memcmp
0004ef00 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
00050410 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000560cc g       *ABS*	00000000 __alt_stack_base
00050460 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000438b8 g     F .text	00000154 __swsetup_r
0004bf74 g     F .text	000008e8 .hidden __divdf3
0004575c g     F .text	00000118 __sfp
000481a0 g     F .text	00000078 __copybits
00052db4 g     O .rwdata	00000408 __malloc_av_
000458a8 g     F .text	00000004 __sinit_lock_release
0004cab4 g     F .text	00000718 .hidden __muldf3
000488d0 g     F .text	00000054 __sread
00051ddc g     F .text	00000114 alt_find_file
000510f8 g     F .text	000000a4 alt_dev_llist_insert
0004e298 g     F .text	00000024 __malloc_lock
0004e490 g     F .text	000000b0 sbrk
0004f328 g     F .text	00000134 alt_avalon_i2c_interrupt_transaction_status
0004f290 g     F .text	0000004c alt_avalon_i2c_check_nack
000454b0 g     F .text	0000005c _fflush_r
0004a1e4 g     F .text	000000c4 _calloc_r
00055f70 g       *ABS*	00000000 __bss_start
00047180 g     F .text	00000128 memset
000403b4 g     F .text	0000014c main
0004f25c g     F .text	00000034 alt_avalon_i2c_master_target_set
00055f94 g     O .bss	00000004 alt_envp
00055f7c g     O .bss	00000004 __malloc_max_total_mem
000503b0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004a864 g     F .text	00000018 __swbuf
0005005c g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
00048a04 g     F .text	00000008 __sclose
00067100 g       *ABS*	00000000 __alt_heap_limit
0004a398 g     F .text	00000014 fclose
00043c0c g     F .text	00001688 _dtoa_r
000465ec g     F .text	0000080c _malloc_r
0004a9d8 g     F .text	00000030 __ascii_wctomb
00054428 g     O .rwdata	00000004 alt_errno
000461cc g     F .text	000000c4 _fwalk
0005219c g     F .text	000000c8 putc
0004b514 g     F .text	00000084 .hidden __divsi3
000458dc g     F .text	00000124 _malloc_trim_r
00052530 g       *ABS*	00000000 __CTOR_END__
00040a5c g     F .text	000003fc .hidden __mulsf3
00048a0c g     F .text	000000dc strcmp
00052530 g       *ABS*	00000000 __flash_rodata_start
00052530 g       *ABS*	00000000 __DTOR_LIST__
0004c85c g     F .text	00000088 .hidden __nedf2
0004e6c0 g     F .text	00000038 alt_irq_init
0004e42c g     F .text	00000064 alt_release_fd
000525f0 g     O .rodata	00000100 .hidden __clz_tab
00055f70 g     O .bss	00000004 _PathLocale
00052034 g     F .text	00000014 atexit
000409a0 g     F .text	000000bc .hidden __gesf2
0004a130 g     F .text	00000060 _write_r
0004640c g     F .text	00000018 setlocale
00054400 g     O .rwdata	00000004 _impure_ptr
00055f8c g     O .bss	00000004 alt_argc
00045294 g     F .text	0000021c __sflush_r
000511fc g     F .text	00000060 _do_dtors
000463f8 g     F .text	00000008 __locale_cjk_lang
0004f224 g     F .text	00000038 alt_avalon_i2c_master_target_get
0004f134 g     F .text	000000f0 alt_avalon_i2c_send_address
00040020 g       .exceptions	00000000 alt_irq_entry
00047dcc g     F .text	00000064 __ulp
000458c4 g     F .text	00000018 __fp_unlock_all
00054414 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00046424 g     F .text	0000000c localeconv
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2
000502e8 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
00051320 g     F .text	00000050 alt_ic_isr_register
0004eb64 g     F .text	0000004c alt_avalon_i2c_disable
00054444 g       *ABS*	00000000 _edata
000560cc g       *ABS*	00000000 _end
0004a3ac g     F .text	00000164 __fputwc
000401c0 g       *ABS*	00000000 __ram_exceptions_end
00050898 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0004ebb0 g     F .text	000000b0 alt_avalon_i2c_master_config_get
00051410 g     F .text	000000a4 alt_ic_irq_disable
0004892c g     F .text	0000007c __swrite
0005440c g     O .rwdata	00000004 __malloc_trim_threshold
000463ec g     F .text	0000000c __locale_msgcharset
00052048 g     F .text	00000038 exit
00046290 g     F .text	000000c4 _fwalk_reent
00047bd0 g     F .text	000001fc __mdiff
0004b598 g     F .text	00000074 .hidden __modsi3
00067100 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
000458a0 g     F .text	00000004 __sfp_lock_release
0004edc0 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
0004f050 g     F .text	000000e4 alt_avalon_i2c_cmd_write
00040500 g     F .text	00000060 .hidden __fixunssfsi
000524fc g     F .text	00000034 _exit
00050dc8 g     F .text	00000140 alt_alarm_start
00046430 g     F .text	000001bc __smakebuf_r
00041550 g     F .text	00000098 strlen
0005184c g     F .text	00000158 open
0004c8e4 g     F .text	000000dc .hidden __gedf2
00051bd0 g     F .text	00000044 alt_putchar
00054410 g     O .rwdata	00000004 __wctomb
00048be4 g     F .text	00000018 __sprint_r
000512ec g     F .text	00000034 alt_icache_flush_all
00054438 g     O .rwdata	00000004 alt_priority_mask
00051370 g     F .text	000000a0 alt_ic_irq_enable
000437e0 g     F .text	0000001c __vfprintf_internal
0004aa08 g     F .text	0000005c _wctomb_r
0004d1cc g     F .text	000008fc .hidden __subdf3
00047604 g     F .text	000000b0 __lo0bits
0005443c g     O .rwdata	00000008 alt_alarm_list
0005119c g     F .text	00000060 _do_ctors
0004a918 g     F .text	000000c0 wcrtomb
0004dd1c g     F .text	000000d0 close
00040320 g     F .text	00000094 DAC_ADC_Convert
0005029c g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0004e074 g     F .text	00000084 alt_load
0004f544 g     F .text	0000013c alt_avalon_i2c_master_rx
0004a534 g     F .text	00000080 fputwc
000458a4 g     F .text	00000004 __sinit_lock_acquire
00047378 g     F .text	00000120 __multadd
00047350 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffd8f04>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08407014 	ori	at,at,448
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)

00040094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   400fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40100:	0005313a 	rdctl	r2,ipending
   40104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40114:	00800044 	movi	r2,1
   40118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4011c:	e0fffb17 	ldw	r3,-20(fp)
   40120:	e0bffc17 	ldw	r2,-16(fp)
   40124:	1884703a 	and	r2,r3,r2
   40128:	10001426 	beq	r2,zero,4017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	00800174 	movhi	r2,5
   40130:	1097f304 	addi	r2,r2,24524
   40134:	e0fffd17 	ldw	r3,-12(fp)
   40138:	180690fa 	slli	r3,r3,3
   4013c:	10c5883a 	add	r2,r2,r3
   40140:	10c00017 	ldw	r3,0(r2)
   40144:	00800174 	movhi	r2,5
   40148:	1097f304 	addi	r2,r2,24524
   4014c:	e13ffd17 	ldw	r4,-12(fp)
   40150:	200890fa 	slli	r4,r4,3
   40154:	1105883a 	add	r2,r2,r4
   40158:	10800104 	addi	r2,r2,4
   4015c:	10800017 	ldw	r2,0(r2)
   40160:	1009883a 	mov	r4,r2
   40164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4016c:	0005313a 	rdctl	r2,ipending
   40170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40174:	e0bfff17 	ldw	r2,-4(fp)
   40178:	00000706 	br	40198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4017c:	e0bffc17 	ldw	r2,-16(fp)
   40180:	1085883a 	add	r2,r2,r2
   40184:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40188:	e0bffd17 	ldw	r2,-12(fp)
   4018c:	10800044 	addi	r2,r2,1
   40190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   40194:	003fe106 	br	4011c <__alt_data_end+0xfffd901c>

    active = alt_irq_pending ();
   40198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   4019c:	e0bffb17 	ldw	r2,-20(fp)
   401a0:	103fdb1e 	bne	r2,zero,40110 <__alt_data_end+0xfffd9010>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401a4:	0001883a 	nop
}
   401a8:	0001883a 	nop
   401ac:	e037883a 	mov	sp,fp
   401b0:	dfc00117 	ldw	ra,4(sp)
   401b4:	df000017 	ldw	fp,0(sp)
   401b8:	dec00204 	addi	sp,sp,8
   401bc:	f800283a 	ret

Disassembly of section .text:

000401c0 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   401c0:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   401c4:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   401c8:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   401cc:	00bffd16 	blt	zero,r2,401c4 <__alt_data_end+0xfffd90c4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401d0:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   401d4:	dedc4014 	ori	sp,sp,28928
    movhi gp, %hi(_gp)
   401d8:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   401dc:	d6b0ff14 	ori	gp,gp,50172
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401e0:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   401e4:	1097dc14 	ori	r2,r2,24432

    movhi r3, %hi(__bss_end)
   401e8:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   401ec:	18d83314 	ori	r3,r3,24780

    beq r2, r3, 1f
   401f0:	10c00326 	beq	r2,r3,40200 <_start+0x40>

0:
    stw zero, (r2)
   401f4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401f8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401fc:	10fffd36 	bltu	r2,r3,401f4 <__alt_data_end+0xfffd90f4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40200:	004e0740 	call	4e074 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40204:	004e21c0 	call	4e21c <alt_main>

00040208 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40208:	003fff06 	br	40208 <__alt_data_end+0xfffd9108>

0004020c <send_to_PCF>:
#define ALT_CI_ADC_DAC_CONVERTER_0(A) __builtin_custom_ini(ALT_CI_ADC_DAC_CONVERTER_0_N,(A))
#define ALT_CI_ADC_DAC_CONVERTER_0_N 0x0


// Function to send data to the PCF8591T DAC
int send_to_PCF(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 dac_value) {
   4020c:	defffa04 	addi	sp,sp,-24
   40210:	dfc00515 	stw	ra,20(sp)
   40214:	df000415 	stw	fp,16(sp)
   40218:	df000404 	addi	fp,sp,16
   4021c:	e13ffe15 	stw	r4,-8(fp)
   40220:	2805883a 	mov	r2,r5
   40224:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 txbuffer[2];  // Buffer to hold data to send
    ALT_AVALON_I2C_STATUS_CODE status;

    // Prepare the control byte and DAC data
    txbuffer[0] = 0x40;     // Control byte: Enable DAC
   40228:	00801004 	movi	r2,64
   4022c:	e0bffd05 	stb	r2,-12(fp)
    txbuffer[1] = dac_value; // Data byte: Value to set DAC output
   40230:	e0bfff03 	ldbu	r2,-4(fp)
   40234:	e0bffd45 	stb	r2,-11(fp)

    // Write the data to the DAC
    status = alt_avalon_i2c_master_tx(i2c_dev, txbuffer, 2, ALT_AVALON_I2C_NO_INTERRUPTS);
   40238:	e0bffd04 	addi	r2,fp,-12
   4023c:	000f883a 	mov	r7,zero
   40240:	01800084 	movi	r6,2
   40244:	100b883a 	mov	r5,r2
   40248:	e13ffe17 	ldw	r4,-8(fp)
   4024c:	004f45c0 	call	4f45c <alt_avalon_i2c_master_tx>
   40250:	e0bffc15 	stw	r2,-16(fp)
    if (status != ALT_AVALON_I2C_SUCCESS) {
   40254:	e0bffc17 	ldw	r2,-16(fp)
   40258:	10000626 	beq	r2,zero,40274 <send_to_PCF+0x68>
        printf("Error: I2C write to DAC failed with status code: %d\n", status);
   4025c:	e17ffc17 	ldw	r5,-16(fp)
   40260:	01000174 	movhi	r4,5
   40264:	21094c04 	addi	r4,r4,9520
   40268:	00414400 	call	41440 <printf>
        return -1; // Return error
   4026c:	00bfffc4 	movi	r2,-1
   40270:	00000106 	br	40278 <send_to_PCF+0x6c>
    }

    return 0; // Success
   40274:	0005883a 	mov	r2,zero
}
   40278:	e037883a 	mov	sp,fp
   4027c:	dfc00117 	ldw	ra,4(sp)
   40280:	df000017 	ldw	fp,0(sp)
   40284:	dec00204 	addi	sp,sp,8
   40288:	f800283a 	ret

0004028c <send_to_LTC2607>:

int send_to_LTC2607(ALT_AVALON_I2C_DEV_t *i2c_dev, uint8_t dac_channel, uint16_t value) {
   4028c:	defff904 	addi	sp,sp,-28
   40290:	dfc00615 	stw	ra,24(sp)
   40294:	df000515 	stw	fp,20(sp)
   40298:	df000504 	addi	fp,sp,20
   4029c:	e13ffd15 	stw	r4,-12(fp)
   402a0:	2807883a 	mov	r3,r5
   402a4:	3005883a 	mov	r2,r6
   402a8:	e0fffe05 	stb	r3,-8(fp)
   402ac:	e0bfff0d 	sth	r2,-4(fp)
    uint8_t txbuffer[3];
    ALT_AVALON_I2C_STATUS_CODE status;

    // First byte: Command and DAC address
//    txbuffer[0] = (0b0011 << 4) | (dac_channel & 0x0F); // Write & Update command with DAC address
    txbuffer[0] = 0x30;
   402b0:	00800c04 	movi	r2,48
   402b4:	e0bffc05 	stb	r2,-16(fp)
    // Second and third bytes: 16-bit data (MSB first, then LSB)
    txbuffer[1] = (value >> 8) & 0xFF; // Upper 8 bits
   402b8:	e0bfff0b 	ldhu	r2,-4(fp)
   402bc:	1004d23a 	srli	r2,r2,8
   402c0:	e0bffc45 	stb	r2,-15(fp)
    txbuffer[2] = value & 0xFF;        // Lower 8 bits
   402c4:	e0bfff0b 	ldhu	r2,-4(fp)
   402c8:	e0bffc85 	stb	r2,-14(fp)

    // Send the data over I2C
    status = alt_avalon_i2c_master_tx(i2c_dev, txbuffer, 3, ALT_AVALON_I2C_NO_INTERRUPTS);
   402cc:	e0bffc04 	addi	r2,fp,-16
   402d0:	000f883a 	mov	r7,zero
   402d4:	018000c4 	movi	r6,3
   402d8:	100b883a 	mov	r5,r2
   402dc:	e13ffd17 	ldw	r4,-12(fp)
   402e0:	004f45c0 	call	4f45c <alt_avalon_i2c_master_tx>
   402e4:	e0bffb15 	stw	r2,-20(fp)
    if (status != ALT_AVALON_I2C_SUCCESS) {
   402e8:	e0bffb17 	ldw	r2,-20(fp)
   402ec:	10000626 	beq	r2,zero,40308 <send_to_LTC2607+0x7c>
        printf("Error: I2C write to LTC2607 failed with status code: %d\n", status);
   402f0:	e17ffb17 	ldw	r5,-20(fp)
   402f4:	01000174 	movhi	r4,5
   402f8:	21095a04 	addi	r4,r4,9576
   402fc:	00414400 	call	41440 <printf>
        return -1; // Failure
   40300:	00bfffc4 	movi	r2,-1
   40304:	00000106 	br	4030c <send_to_LTC2607+0x80>
    }

    return 0; // Success
   40308:	0005883a 	mov	r2,zero
}
   4030c:	e037883a 	mov	sp,fp
   40310:	dfc00117 	ldw	ra,4(sp)
   40314:	df000017 	ldw	fp,0(sp)
   40318:	dec00204 	addi	sp,sp,8
   4031c:	f800283a 	ret

00040320 <DAC_ADC_Convert>:



uint8_t DAC_ADC_Convert(float ADC_Val, float v_ref_ADC, float v_ref_DAC){
   40320:	defff804 	addi	sp,sp,-32
   40324:	dfc00715 	stw	ra,28(sp)
   40328:	df000615 	stw	fp,24(sp)
   4032c:	df000604 	addi	fp,sp,24
   40330:	e13ffd15 	stw	r4,-12(fp)
   40334:	e17ffe15 	stw	r5,-8(fp)
   40338:	e1bfff15 	stw	r6,-4(fp)
	uint8_t DAC_val=0;
   4033c:	e03ffa05 	stb	zero,-24(fp)
	float ADC_unit= v_ref_ADC/(4096);
   40340:	01516034 	movhi	r5,17792
   40344:	e13ffe17 	ldw	r4,-8(fp)
   40348:	00405600 	call	40560 <__divsf3>
   4034c:	1007883a 	mov	r3,r2
   40350:	e0fffb15 	stw	r3,-20(fp)
	float DAC_unit= v_ref_DAC/(256);
   40354:	0150e034 	movhi	r5,17280
   40358:	e13fff17 	ldw	r4,-4(fp)
   4035c:	00405600 	call	40560 <__divsf3>
   40360:	1007883a 	mov	r3,r2
   40364:	e0fffc15 	stw	r3,-16(fp)

	DAC_val=(uint8_t)(ADC_Val*ADC_unit/DAC_unit);
   40368:	e17ffb17 	ldw	r5,-20(fp)
   4036c:	e13ffd17 	ldw	r4,-12(fp)
   40370:	0040a5c0 	call	40a5c <__mulsf3>
   40374:	1007883a 	mov	r3,r2
   40378:	1805883a 	mov	r2,r3
   4037c:	e17ffc17 	ldw	r5,-16(fp)
   40380:	1009883a 	mov	r4,r2
   40384:	00405600 	call	40560 <__divsf3>
   40388:	1007883a 	mov	r3,r2
   4038c:	1805883a 	mov	r2,r3
   40390:	1009883a 	mov	r4,r2
   40394:	00405000 	call	40500 <__fixunssfsi>
   40398:	e0bffa05 	stb	r2,-24(fp)

	return DAC_val;
   4039c:	e0bffa03 	ldbu	r2,-24(fp)





}
   403a0:	e037883a 	mov	sp,fp
   403a4:	dfc00117 	ldw	ra,4(sp)
   403a8:	df000017 	ldw	fp,0(sp)
   403ac:	dec00204 	addi	sp,sp,8
   403b0:	f800283a 	ret

000403b4 <main>:




void main(void){
   403b4:	defff204 	addi	sp,sp,-56
   403b8:	dfc00d15 	stw	ra,52(sp)
   403bc:	df000c15 	stw	fp,48(sp)
   403c0:	df000c04 	addi	fp,sp,48
	int ch = 0;
   403c4:	e03ff515 	stw	zero,-44(fp)
	const int nReadNum = 1; // max 1024
   403c8:	00800044 	movi	r2,1
   403cc:	e0bff615 	stw	r2,-40(fp)
	int i, Value, nIndex=0;
   403d0:	e03ff715 	stw	zero,-36(fp)
	uint16_t DAC_val=0;
   403d4:	e03ff80d 	sth	zero,-32(fp)
    ALT_AVALON_I2C_DEV_t *i2c_dev;  // Pointer to I2C instance structure
   // int adc_value = 0;             // Example ADC value to send
    int result;

    // Open the I2C device instance
    i2c_dev = alt_avalon_i2c_open("/dev/i2c_dac");
   403d8:	01000174 	movhi	r4,5
   403dc:	21096904 	addi	r4,r4,9636
   403e0:	004ea8c0 	call	4ea8c <alt_avalon_i2c_open>
   403e4:	e0bff915 	stw	r2,-28(fp)
    if (NULL == i2c_dev) {
   403e8:	e0bff917 	ldw	r2,-28(fp)
   403ec:	1000041e 	bne	r2,zero,40400 <main+0x4c>
        printf("Error: Cannot find /dev/i2c_dac\n");
   403f0:	01000174 	movhi	r4,5
   403f4:	21096d04 	addi	r4,r4,9652
   403f8:	004153c0 	call	4153c <puts>
        return ;
   403fc:	00003b06 	br	404ec <main+0x138>
    }
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;


    // Set the target device address (PCF8591T address is typically 0x48)
   alt_avalon_i2c_master_target_set(i2c_dev, 0x48);
   40400:	01401204 	movi	r5,72
   40404:	e13ff917 	ldw	r4,-28(fp)
   40408:	004f25c0 	call	4f25c <alt_avalon_i2c_master_target_set>
//     alt_avalon_i2c_master_target_set(i2c_dev, 0x72);
     if (i2c_dev) {
   4040c:	e0bff917 	ldw	r2,-28(fp)
   40410:	10000a26 	beq	r2,zero,4043c <main+0x88>
         alt_avalon_i2c_master_config_speed_set(i2c_dev,&cfg, 400000); // Set 400 kHz
   40414:	e0bffc04 	addi	r2,fp,-16
   40418:	018001b4 	movhi	r6,6
   4041c:	3186a004 	addi	r6,r6,6784
   40420:	100b883a 	mov	r5,r2
   40424:	e13ff917 	ldw	r4,-28(fp)
   40428:	004edc00 	call	4edc0 <alt_avalon_i2c_master_config_speed_set>
         alt_avalon_i2c_master_config_set(i2c_dev, &cfg);
   4042c:	e0bffc04 	addi	r2,fp,-16
   40430:	100b883a 	mov	r5,r2
   40434:	e13ff917 	ldw	r4,-28(fp)
   40438:	004ec600 	call	4ec60 <alt_avalon_i2c_master_config_set>
     }



    IOWR(ADC_LTC2308_BASE, 0x01, nReadNum);
   4043c:	00800234 	movhi	r2,8
   40440:	10841504 	addi	r2,r2,4180
   40444:	e0fff617 	ldw	r3,-40(fp)
   40448:	10c00035 	stwio	r3,0(r2)

//		printf("======================= %d, ch=%d\r\n", nIndex++, ch);
		// set measure number for ADC convert

		// start measure
		IOWR(ADC_LTC2308_BASE, 0x00, (ch << 1) | 0x00);
   4044c:	e0bff517 	ldw	r2,-44(fp)
   40450:	1085883a 	add	r2,r2,r2
   40454:	1007883a 	mov	r3,r2
   40458:	00800234 	movhi	r2,8
   4045c:	10841404 	addi	r2,r2,4176
   40460:	10c00035 	stwio	r3,0(r2)
		IOWR(ADC_LTC2308_BASE, 0x00, (ch << 1) | 0x01);
   40464:	e0bff517 	ldw	r2,-44(fp)
   40468:	1085883a 	add	r2,r2,r2
   4046c:	10c00054 	ori	r3,r2,1
   40470:	00800234 	movhi	r2,8
   40474:	10841404 	addi	r2,r2,4176
   40478:	10c00035 	stwio	r3,0(r2)

		// wait measure done
//		while ((IORD(ADC_LTC2308_BASE,0x00) & 0x01) == 0x00);

		// read adc value
		for(i=0;i<nReadNum;i++){
   4047c:	e03ff415 	stw	zero,-48(fp)
   40480:	00001606 	br	404dc <main+0x128>
			Value = IORD(ADC_LTC2308_BASE, 0x01);
   40484:	00800234 	movhi	r2,8
   40488:	10841504 	addi	r2,r2,4180
   4048c:	10800037 	ldwio	r2,0(r2)
   40490:	e0bffa15 	stw	r2,-24(fp)
//			write_adc_value(Value);
			DAC_val=ALT_CI_ADC_DAC_CONVERTER_0(Value);
   40494:	e0bffa17 	ldw	r2,-24(fp)
   40498:	1005c032 	custom	0,r2,r2,zero
   4049c:	e0bff80d 	sth	r2,-32(fp)
//			DAC_val=DAC_ADC_Convert(Value,4.096,5);
			//pcf8591_write_dac(128);
//			printf("calculated adc_VAL %d.\n", Value);
//S			printf("calculated DAC_VAL %d.\n", DAC_val);

	        result = send_to_PCF(i2c_dev, DAC_val);
   404a0:	e0bff80b 	ldhu	r2,-32(fp)
   404a4:	10803fcc 	andi	r2,r2,255
   404a8:	100b883a 	mov	r5,r2
   404ac:	e13ff917 	ldw	r4,-28(fp)
   404b0:	004020c0 	call	4020c <send_to_PCF>
   404b4:	e0bffb15 	stw	r2,-20(fp)
//			result = send_to_LTC2607(i2c_dev,0, (alt_u16)Value);
	        if (result != 0) {
   404b8:	e0bffb17 	ldw	r2,-20(fp)
   404bc:	10000426 	beq	r2,zero,404d0 <main+0x11c>
	            printf("Failed to send data to DAC.\n");
   404c0:	01000174 	movhi	r4,5
   404c4:	21097504 	addi	r4,r4,9684
   404c8:	004153c0 	call	4153c <puts>
	            break;
   404cc:	00000606 	br	404e8 <main+0x134>

		// wait measure done
//		while ((IORD(ADC_LTC2308_BASE,0x00) & 0x01) == 0x00);

		// read adc value
		for(i=0;i<nReadNum;i++){
   404d0:	e0bff417 	ldw	r2,-48(fp)
   404d4:	10800044 	addi	r2,r2,1
   404d8:	e0bff415 	stw	r2,-48(fp)
   404dc:	e0fff417 	ldw	r3,-48(fp)
   404e0:	e0bff617 	ldw	r2,-40(fp)
   404e4:	18bfe716 	blt	r3,r2,40484 <__alt_data_end+0xfffd9384>

//			/printf("CH%d=%.3fV (0x%04x)\r\n", ch, (float)Value/1000.0, DAC_val);
		}

//		usleep(200);
	} // while
   404e8:	003fd806 	br	4044c <__alt_data_end+0xfffd934c>
}
   404ec:	e037883a 	mov	sp,fp
   404f0:	dfc00117 	ldw	ra,4(sp)
   404f4:	df000017 	ldw	fp,0(sp)
   404f8:	dec00204 	addi	sp,sp,8
   404fc:	f800283a 	ret

00040500 <__fixunssfsi>:
   40500:	defffd04 	addi	sp,sp,-12
   40504:	dc000015 	stw	r16,0(sp)
   40508:	0413c034 	movhi	r16,20224
   4050c:	800b883a 	mov	r5,r16
   40510:	dc400115 	stw	r17,4(sp)
   40514:	dfc00215 	stw	ra,8(sp)
   40518:	2023883a 	mov	r17,r4
   4051c:	00409a00 	call	409a0 <__gesf2>
   40520:	1000070e 	bge	r2,zero,40540 <__fixunssfsi+0x40>
   40524:	8809883a 	mov	r4,r17
   40528:	004133c0 	call	4133c <__fixsfsi>
   4052c:	dfc00217 	ldw	ra,8(sp)
   40530:	dc400117 	ldw	r17,4(sp)
   40534:	dc000017 	ldw	r16,0(sp)
   40538:	dec00304 	addi	sp,sp,12
   4053c:	f800283a 	ret
   40540:	800b883a 	mov	r5,r16
   40544:	8809883a 	mov	r4,r17
   40548:	0040e580 	call	40e58 <__subsf3>
   4054c:	1009883a 	mov	r4,r2
   40550:	004133c0 	call	4133c <__fixsfsi>
   40554:	00e00034 	movhi	r3,32768
   40558:	10c5883a 	add	r2,r2,r3
   4055c:	003ff306 	br	4052c <__alt_data_end+0xfffd942c>

00040560 <__divsf3>:
   40560:	defff504 	addi	sp,sp,-44
   40564:	200cd5fa 	srli	r6,r4,23
   40568:	dcc00415 	stw	r19,16(sp)
   4056c:	2026d7fa 	srli	r19,r4,31
   40570:	00c02034 	movhi	r3,128
   40574:	dd800715 	stw	r22,28(sp)
   40578:	dd000515 	stw	r20,20(sp)
   4057c:	dc800315 	stw	r18,12(sp)
   40580:	18ffffc4 	addi	r3,r3,-1
   40584:	dfc00a15 	stw	ra,40(sp)
   40588:	df000915 	stw	fp,36(sp)
   4058c:	ddc00815 	stw	r23,32(sp)
   40590:	dd400615 	stw	r21,24(sp)
   40594:	dc400215 	stw	r17,8(sp)
   40598:	dc000115 	stw	r16,4(sp)
   4059c:	35003fcc 	andi	r20,r6,255
   405a0:	1924703a 	and	r18,r3,r4
   405a4:	9d803fcc 	andi	r22,r19,255
   405a8:	a0005226 	beq	r20,zero,406f4 <__divsf3+0x194>
   405ac:	00803fc4 	movi	r2,255
   405b0:	a0802e26 	beq	r20,r2,4066c <__divsf3+0x10c>
   405b4:	91002034 	orhi	r4,r18,128
   405b8:	202490fa 	slli	r18,r4,3
   405bc:	a53fe044 	addi	r20,r20,-127
   405c0:	0021883a 	mov	r16,zero
   405c4:	002f883a 	mov	r23,zero
   405c8:	280cd5fa 	srli	r6,r5,23
   405cc:	282ad7fa 	srli	r21,r5,31
   405d0:	00c02034 	movhi	r3,128
   405d4:	18ffffc4 	addi	r3,r3,-1
   405d8:	31803fcc 	andi	r6,r6,255
   405dc:	1962703a 	and	r17,r3,r5
   405e0:	af003fcc 	andi	fp,r21,255
   405e4:	30004a26 	beq	r6,zero,40710 <__divsf3+0x1b0>
   405e8:	00803fc4 	movi	r2,255
   405ec:	30804526 	beq	r6,r2,40704 <__divsf3+0x1a4>
   405f0:	89402034 	orhi	r5,r17,128
   405f4:	282290fa 	slli	r17,r5,3
   405f8:	31bfe044 	addi	r6,r6,-127
   405fc:	000b883a 	mov	r5,zero
   40600:	2c20b03a 	or	r16,r5,r16
   40604:	802090ba 	slli	r16,r16,2
   40608:	00800134 	movhi	r2,4
   4060c:	10818b04 	addi	r2,r2,1580
   40610:	80a1883a 	add	r16,r16,r2
   40614:	81000017 	ldw	r4,0(r16)
   40618:	9d46f03a 	xor	r3,r19,r21
   4061c:	180f883a 	mov	r7,r3
   40620:	18803fcc 	andi	r2,r3,255
   40624:	a18dc83a 	sub	r6,r20,r6
   40628:	2000683a 	jmp	r4
   4062c:	00040810 	cmplti	zero,zero,4128
   40630:	00040694 	movui	zero,4122
   40634:	00040804 	movi	zero,4128
   40638:	00040680 	call	4068 <__alt_mem_onchip_memory2-0x3bf98>
   4063c:	00040804 	movi	zero,4128
   40640:	000407dc 	xori	zero,zero,4127
   40644:	00040804 	movi	zero,4128
   40648:	00040680 	call	4068 <__alt_mem_onchip_memory2-0x3bf98>
   4064c:	00040694 	movui	zero,4122
   40650:	00040694 	movui	zero,4122
   40654:	000407dc 	xori	zero,zero,4127
   40658:	00040680 	call	4068 <__alt_mem_onchip_memory2-0x3bf98>
   4065c:	000408f0 	cmpltui	zero,zero,4131
   40660:	000408f0 	cmpltui	zero,zero,4131
   40664:	000408f0 	cmpltui	zero,zero,4131
   40668:	000408a4 	muli	zero,zero,4130
   4066c:	9000581e 	bne	r18,zero,407d0 <__divsf3+0x270>
   40670:	04000204 	movi	r16,8
   40674:	05c00084 	movi	r23,2
   40678:	003fd306 	br	405c8 <__alt_data_end+0xfffd94c8>
   4067c:	0023883a 	mov	r17,zero
   40680:	e02d883a 	mov	r22,fp
   40684:	282f883a 	mov	r23,r5
   40688:	00800084 	movi	r2,2
   4068c:	b8808f1e 	bne	r23,r2,408cc <__divsf3+0x36c>
   40690:	b005883a 	mov	r2,r22
   40694:	11c0004c 	andi	r7,r2,1
   40698:	013fffc4 	movi	r4,-1
   4069c:	000d883a 	mov	r6,zero
   406a0:	21003fcc 	andi	r4,r4,255
   406a4:	200895fa 	slli	r4,r4,23
   406a8:	38803fcc 	andi	r2,r7,255
   406ac:	00c02034 	movhi	r3,128
   406b0:	100497fa 	slli	r2,r2,31
   406b4:	18ffffc4 	addi	r3,r3,-1
   406b8:	30c6703a 	and	r3,r6,r3
   406bc:	1906b03a 	or	r3,r3,r4
   406c0:	1884b03a 	or	r2,r3,r2
   406c4:	dfc00a17 	ldw	ra,40(sp)
   406c8:	df000917 	ldw	fp,36(sp)
   406cc:	ddc00817 	ldw	r23,32(sp)
   406d0:	dd800717 	ldw	r22,28(sp)
   406d4:	dd400617 	ldw	r21,24(sp)
   406d8:	dd000517 	ldw	r20,20(sp)
   406dc:	dcc00417 	ldw	r19,16(sp)
   406e0:	dc800317 	ldw	r18,12(sp)
   406e4:	dc400217 	ldw	r17,8(sp)
   406e8:	dc000117 	ldw	r16,4(sp)
   406ec:	dec00b04 	addi	sp,sp,44
   406f0:	f800283a 	ret
   406f4:	90002b1e 	bne	r18,zero,407a4 <__divsf3+0x244>
   406f8:	04000104 	movi	r16,4
   406fc:	05c00044 	movi	r23,1
   40700:	003fb106 	br	405c8 <__alt_data_end+0xfffd94c8>
   40704:	8800251e 	bne	r17,zero,4079c <__divsf3+0x23c>
   40708:	01400084 	movi	r5,2
   4070c:	00000206 	br	40718 <__divsf3+0x1b8>
   40710:	88001a1e 	bne	r17,zero,4077c <__divsf3+0x21c>
   40714:	01400044 	movi	r5,1
   40718:	8160b03a 	or	r16,r16,r5
   4071c:	802090ba 	slli	r16,r16,2
   40720:	00c00134 	movhi	r3,4
   40724:	18c1cf04 	addi	r3,r3,1852
   40728:	80e1883a 	add	r16,r16,r3
   4072c:	80c00017 	ldw	r3,0(r16)
   40730:	9d44f03a 	xor	r2,r19,r21
   40734:	a18dc83a 	sub	r6,r20,r6
   40738:	1800683a 	jmp	r3
   4073c:	00040694 	movui	zero,4122
   40740:	00040694 	movui	zero,4122
   40744:	000408e0 	cmpeqi	zero,zero,4131
   40748:	0004067c 	xorhi	zero,zero,4121
   4074c:	000408e0 	cmpeqi	zero,zero,4131
   40750:	000407dc 	xori	zero,zero,4127
   40754:	000408e0 	cmpeqi	zero,zero,4131
   40758:	0004067c 	xorhi	zero,zero,4121
   4075c:	00040694 	movui	zero,4122
   40760:	00040694 	movui	zero,4122
   40764:	000407dc 	xori	zero,zero,4127
   40768:	0004067c 	xorhi	zero,zero,4121
   4076c:	000408f0 	cmpltui	zero,zero,4131
   40770:	000408f0 	cmpltui	zero,zero,4131
   40774:	000408f0 	cmpltui	zero,zero,4131
   40778:	00040908 	cmpgei	zero,zero,4132
   4077c:	8809883a 	mov	r4,r17
   40780:	00413ac0 	call	413ac <__clzsi2>
   40784:	10fffec4 	addi	r3,r2,-5
   40788:	10801d84 	addi	r2,r2,118
   4078c:	88e2983a 	sll	r17,r17,r3
   40790:	008dc83a 	sub	r6,zero,r2
   40794:	000b883a 	mov	r5,zero
   40798:	003f9906 	br	40600 <__alt_data_end+0xfffd9500>
   4079c:	014000c4 	movi	r5,3
   407a0:	003f9706 	br	40600 <__alt_data_end+0xfffd9500>
   407a4:	9009883a 	mov	r4,r18
   407a8:	d9400015 	stw	r5,0(sp)
   407ac:	00413ac0 	call	413ac <__clzsi2>
   407b0:	10fffec4 	addi	r3,r2,-5
   407b4:	11801d84 	addi	r6,r2,118
   407b8:	90e4983a 	sll	r18,r18,r3
   407bc:	01a9c83a 	sub	r20,zero,r6
   407c0:	0021883a 	mov	r16,zero
   407c4:	002f883a 	mov	r23,zero
   407c8:	d9400017 	ldw	r5,0(sp)
   407cc:	003f7e06 	br	405c8 <__alt_data_end+0xfffd94c8>
   407d0:	04000304 	movi	r16,12
   407d4:	05c000c4 	movi	r23,3
   407d8:	003f7b06 	br	405c8 <__alt_data_end+0xfffd94c8>
   407dc:	01802034 	movhi	r6,128
   407e0:	000f883a 	mov	r7,zero
   407e4:	31bfffc4 	addi	r6,r6,-1
   407e8:	013fffc4 	movi	r4,-1
   407ec:	003fac06 	br	406a0 <__alt_data_end+0xfffd95a0>
   407f0:	01400044 	movi	r5,1
   407f4:	2909c83a 	sub	r4,r5,r4
   407f8:	00c006c4 	movi	r3,27
   407fc:	19004b0e 	bge	r3,r4,4092c <__divsf3+0x3cc>
   40800:	114e703a 	and	r7,r2,r5
   40804:	0009883a 	mov	r4,zero
   40808:	000d883a 	mov	r6,zero
   4080c:	003fa406 	br	406a0 <__alt_data_end+0xfffd95a0>
   40810:	9006917a 	slli	r3,r18,5
   40814:	8822917a 	slli	r17,r17,5
   40818:	1c40372e 	bgeu	r3,r17,408f8 <__divsf3+0x398>
   4081c:	31bfffc4 	addi	r6,r6,-1
   40820:	010006c4 	movi	r4,27
   40824:	000b883a 	mov	r5,zero
   40828:	180f883a 	mov	r7,r3
   4082c:	294b883a 	add	r5,r5,r5
   40830:	18c7883a 	add	r3,r3,r3
   40834:	38000116 	blt	r7,zero,4083c <__divsf3+0x2dc>
   40838:	1c400236 	bltu	r3,r17,40844 <__divsf3+0x2e4>
   4083c:	1c47c83a 	sub	r3,r3,r17
   40840:	29400054 	ori	r5,r5,1
   40844:	213fffc4 	addi	r4,r4,-1
   40848:	203ff71e 	bne	r4,zero,40828 <__alt_data_end+0xfffd9728>
   4084c:	1806c03a 	cmpne	r3,r3,zero
   40850:	1962b03a 	or	r17,r3,r5
   40854:	31001fc4 	addi	r4,r6,127
   40858:	013fe50e 	bge	zero,r4,407f0 <__alt_data_end+0xfffd96f0>
   4085c:	88c001cc 	andi	r3,r17,7
   40860:	18000426 	beq	r3,zero,40874 <__divsf3+0x314>
   40864:	88c003cc 	andi	r3,r17,15
   40868:	01400104 	movi	r5,4
   4086c:	19400126 	beq	r3,r5,40874 <__divsf3+0x314>
   40870:	8963883a 	add	r17,r17,r5
   40874:	88c2002c 	andhi	r3,r17,2048
   40878:	18000426 	beq	r3,zero,4088c <__divsf3+0x32c>
   4087c:	00fe0034 	movhi	r3,63488
   40880:	18ffffc4 	addi	r3,r3,-1
   40884:	31002004 	addi	r4,r6,128
   40888:	88e2703a 	and	r17,r17,r3
   4088c:	00c03f84 	movi	r3,254
   40890:	193f8016 	blt	r3,r4,40694 <__alt_data_end+0xfffd9594>
   40894:	880c91ba 	slli	r6,r17,6
   40898:	11c0004c 	andi	r7,r2,1
   4089c:	300cd27a 	srli	r6,r6,9
   408a0:	003f7f06 	br	406a0 <__alt_data_end+0xfffd95a0>
   408a4:	9080102c 	andhi	r2,r18,64
   408a8:	10000226 	beq	r2,zero,408b4 <__divsf3+0x354>
   408ac:	8880102c 	andhi	r2,r17,64
   408b0:	10001826 	beq	r2,zero,40914 <__divsf3+0x3b4>
   408b4:	00802034 	movhi	r2,128
   408b8:	91801034 	orhi	r6,r18,64
   408bc:	10bfffc4 	addi	r2,r2,-1
   408c0:	980f883a 	mov	r7,r19
   408c4:	308c703a 	and	r6,r6,r2
   408c8:	003fc706 	br	407e8 <__alt_data_end+0xfffd96e8>
   408cc:	008000c4 	movi	r2,3
   408d0:	b8802d26 	beq	r23,r2,40988 <__divsf3+0x428>
   408d4:	00c00044 	movi	r3,1
   408d8:	b005883a 	mov	r2,r22
   408dc:	b8ffdd1e 	bne	r23,r3,40854 <__alt_data_end+0xfffd9754>
   408e0:	11c0004c 	andi	r7,r2,1
   408e4:	0009883a 	mov	r4,zero
   408e8:	000d883a 	mov	r6,zero
   408ec:	003f6c06 	br	406a0 <__alt_data_end+0xfffd95a0>
   408f0:	9023883a 	mov	r17,r18
   408f4:	003f6406 	br	40688 <__alt_data_end+0xfffd9588>
   408f8:	1c47c83a 	sub	r3,r3,r17
   408fc:	01000684 	movi	r4,26
   40900:	01400044 	movi	r5,1
   40904:	003fc806 	br	40828 <__alt_data_end+0xfffd9728>
   40908:	9080102c 	andhi	r2,r18,64
   4090c:	103fe926 	beq	r2,zero,408b4 <__alt_data_end+0xfffd97b4>
   40910:	0023883a 	mov	r17,zero
   40914:	00802034 	movhi	r2,128
   40918:	89801034 	orhi	r6,r17,64
   4091c:	10bfffc4 	addi	r2,r2,-1
   40920:	a80f883a 	mov	r7,r21
   40924:	308c703a 	and	r6,r6,r2
   40928:	003faf06 	br	407e8 <__alt_data_end+0xfffd96e8>
   4092c:	01c00804 	movi	r7,32
   40930:	390fc83a 	sub	r7,r7,r4
   40934:	89ce983a 	sll	r7,r17,r7
   40938:	890ad83a 	srl	r5,r17,r4
   4093c:	380ec03a 	cmpne	r7,r7,zero
   40940:	29cab03a 	or	r5,r5,r7
   40944:	28c001cc 	andi	r3,r5,7
   40948:	18000426 	beq	r3,zero,4095c <__divsf3+0x3fc>
   4094c:	28c003cc 	andi	r3,r5,15
   40950:	01000104 	movi	r4,4
   40954:	19000126 	beq	r3,r4,4095c <__divsf3+0x3fc>
   40958:	290b883a 	add	r5,r5,r4
   4095c:	28c1002c 	andhi	r3,r5,1024
   40960:	18000426 	beq	r3,zero,40974 <__divsf3+0x414>
   40964:	11c0004c 	andi	r7,r2,1
   40968:	01000044 	movi	r4,1
   4096c:	000d883a 	mov	r6,zero
   40970:	003f4b06 	br	406a0 <__alt_data_end+0xfffd95a0>
   40974:	280a91ba 	slli	r5,r5,6
   40978:	11c0004c 	andi	r7,r2,1
   4097c:	0009883a 	mov	r4,zero
   40980:	280cd27a 	srli	r6,r5,9
   40984:	003f4606 	br	406a0 <__alt_data_end+0xfffd95a0>
   40988:	00802034 	movhi	r2,128
   4098c:	89801034 	orhi	r6,r17,64
   40990:	10bfffc4 	addi	r2,r2,-1
   40994:	b00f883a 	mov	r7,r22
   40998:	308c703a 	and	r6,r6,r2
   4099c:	003f9206 	br	407e8 <__alt_data_end+0xfffd96e8>

000409a0 <__gesf2>:
   409a0:	2004d5fa 	srli	r2,r4,23
   409a4:	2806d5fa 	srli	r3,r5,23
   409a8:	01802034 	movhi	r6,128
   409ac:	31bfffc4 	addi	r6,r6,-1
   409b0:	10803fcc 	andi	r2,r2,255
   409b4:	01c03fc4 	movi	r7,255
   409b8:	3110703a 	and	r8,r6,r4
   409bc:	18c03fcc 	andi	r3,r3,255
   409c0:	314c703a 	and	r6,r6,r5
   409c4:	2008d7fa 	srli	r4,r4,31
   409c8:	280ad7fa 	srli	r5,r5,31
   409cc:	11c01926 	beq	r2,r7,40a34 <__gesf2+0x94>
   409d0:	01c03fc4 	movi	r7,255
   409d4:	19c00f26 	beq	r3,r7,40a14 <__gesf2+0x74>
   409d8:	1000061e 	bne	r2,zero,409f4 <__gesf2+0x54>
   409dc:	400f003a 	cmpeq	r7,r8,zero
   409e0:	1800071e 	bne	r3,zero,40a00 <__gesf2+0x60>
   409e4:	3000061e 	bne	r6,zero,40a00 <__gesf2+0x60>
   409e8:	0005883a 	mov	r2,zero
   409ec:	40000e1e 	bne	r8,zero,40a28 <__gesf2+0x88>
   409f0:	f800283a 	ret
   409f4:	18000a1e 	bne	r3,zero,40a20 <__gesf2+0x80>
   409f8:	30000b26 	beq	r6,zero,40a28 <__gesf2+0x88>
   409fc:	000f883a 	mov	r7,zero
   40a00:	29403fcc 	andi	r5,r5,255
   40a04:	38000726 	beq	r7,zero,40a24 <__gesf2+0x84>
   40a08:	28000826 	beq	r5,zero,40a2c <__gesf2+0x8c>
   40a0c:	00800044 	movi	r2,1
   40a10:	f800283a 	ret
   40a14:	303ff026 	beq	r6,zero,409d8 <__alt_data_end+0xfffd98d8>
   40a18:	00bfff84 	movi	r2,-2
   40a1c:	f800283a 	ret
   40a20:	29403fcc 	andi	r5,r5,255
   40a24:	21400526 	beq	r4,r5,40a3c <__gesf2+0x9c>
   40a28:	203ff826 	beq	r4,zero,40a0c <__alt_data_end+0xfffd990c>
   40a2c:	00bfffc4 	movi	r2,-1
   40a30:	f800283a 	ret
   40a34:	403fe626 	beq	r8,zero,409d0 <__alt_data_end+0xfffd98d0>
   40a38:	003ff706 	br	40a18 <__alt_data_end+0xfffd9918>
   40a3c:	18bffa16 	blt	r3,r2,40a28 <__alt_data_end+0xfffd9928>
   40a40:	10c00216 	blt	r2,r3,40a4c <__gesf2+0xac>
   40a44:	323ff836 	bltu	r6,r8,40a28 <__alt_data_end+0xfffd9928>
   40a48:	4180022e 	bgeu	r8,r6,40a54 <__gesf2+0xb4>
   40a4c:	203fef1e 	bne	r4,zero,40a0c <__alt_data_end+0xfffd990c>
   40a50:	003ff606 	br	40a2c <__alt_data_end+0xfffd992c>
   40a54:	0005883a 	mov	r2,zero
   40a58:	f800283a 	ret

00040a5c <__mulsf3>:
   40a5c:	defff504 	addi	sp,sp,-44
   40a60:	dc000115 	stw	r16,4(sp)
   40a64:	2020d5fa 	srli	r16,r4,23
   40a68:	dd400615 	stw	r21,24(sp)
   40a6c:	202ad7fa 	srli	r21,r4,31
   40a70:	dc800315 	stw	r18,12(sp)
   40a74:	04802034 	movhi	r18,128
   40a78:	df000915 	stw	fp,36(sp)
   40a7c:	dd000515 	stw	r20,20(sp)
   40a80:	94bfffc4 	addi	r18,r18,-1
   40a84:	dfc00a15 	stw	ra,40(sp)
   40a88:	ddc00815 	stw	r23,32(sp)
   40a8c:	dd800715 	stw	r22,28(sp)
   40a90:	dcc00415 	stw	r19,16(sp)
   40a94:	dc400215 	stw	r17,8(sp)
   40a98:	84003fcc 	andi	r16,r16,255
   40a9c:	9124703a 	and	r18,r18,r4
   40aa0:	a829883a 	mov	r20,r21
   40aa4:	af003fcc 	andi	fp,r21,255
   40aa8:	80005426 	beq	r16,zero,40bfc <__mulsf3+0x1a0>
   40aac:	00803fc4 	movi	r2,255
   40ab0:	80802f26 	beq	r16,r2,40b70 <__mulsf3+0x114>
   40ab4:	91002034 	orhi	r4,r18,128
   40ab8:	202490fa 	slli	r18,r4,3
   40abc:	843fe044 	addi	r16,r16,-127
   40ac0:	0023883a 	mov	r17,zero
   40ac4:	002f883a 	mov	r23,zero
   40ac8:	2804d5fa 	srli	r2,r5,23
   40acc:	282cd7fa 	srli	r22,r5,31
   40ad0:	01002034 	movhi	r4,128
   40ad4:	213fffc4 	addi	r4,r4,-1
   40ad8:	10803fcc 	andi	r2,r2,255
   40adc:	2166703a 	and	r19,r4,r5
   40ae0:	b1803fcc 	andi	r6,r22,255
   40ae4:	10004c26 	beq	r2,zero,40c18 <__mulsf3+0x1bc>
   40ae8:	00c03fc4 	movi	r3,255
   40aec:	10c04726 	beq	r2,r3,40c0c <__mulsf3+0x1b0>
   40af0:	99002034 	orhi	r4,r19,128
   40af4:	202690fa 	slli	r19,r4,3
   40af8:	10bfe044 	addi	r2,r2,-127
   40afc:	0007883a 	mov	r3,zero
   40b00:	80a1883a 	add	r16,r16,r2
   40b04:	010003c4 	movi	r4,15
   40b08:	1c44b03a 	or	r2,r3,r17
   40b0c:	b56af03a 	xor	r21,r22,r21
   40b10:	81c00044 	addi	r7,r16,1
   40b14:	20806b36 	bltu	r4,r2,40cc4 <__mulsf3+0x268>
   40b18:	100490ba 	slli	r2,r2,2
   40b1c:	01000134 	movhi	r4,4
   40b20:	2102cc04 	addi	r4,r4,2864
   40b24:	1105883a 	add	r2,r2,r4
   40b28:	10800017 	ldw	r2,0(r2)
   40b2c:	1000683a 	jmp	r2
   40b30:	00040cc4 	movi	zero,4147
   40b34:	00040b84 	movi	zero,4142
   40b38:	00040b84 	movi	zero,4142
   40b3c:	00040b80 	call	40b8 <__alt_mem_onchip_memory2-0x3bf48>
   40b40:	00040ca8 	cmpgeui	zero,zero,4146
   40b44:	00040ca8 	cmpgeui	zero,zero,4146
   40b48:	00040c94 	movui	zero,4146
   40b4c:	00040b80 	call	40b8 <__alt_mem_onchip_memory2-0x3bf48>
   40b50:	00040ca8 	cmpgeui	zero,zero,4146
   40b54:	00040c94 	movui	zero,4146
   40b58:	00040ca8 	cmpgeui	zero,zero,4146
   40b5c:	00040b80 	call	40b8 <__alt_mem_onchip_memory2-0x3bf48>
   40b60:	00040cb4 	movhi	zero,4146
   40b64:	00040cb4 	movhi	zero,4146
   40b68:	00040cb4 	movhi	zero,4146
   40b6c:	00040d90 	cmplti	zero,zero,4150
   40b70:	90003b1e 	bne	r18,zero,40c60 <__mulsf3+0x204>
   40b74:	04400204 	movi	r17,8
   40b78:	05c00084 	movi	r23,2
   40b7c:	003fd206 	br	40ac8 <__alt_data_end+0xfffd99c8>
   40b80:	302b883a 	mov	r21,r6
   40b84:	00800084 	movi	r2,2
   40b88:	18802626 	beq	r3,r2,40c24 <__mulsf3+0x1c8>
   40b8c:	008000c4 	movi	r2,3
   40b90:	1880ab26 	beq	r3,r2,40e40 <__mulsf3+0x3e4>
   40b94:	00800044 	movi	r2,1
   40b98:	1880a21e 	bne	r3,r2,40e24 <__mulsf3+0x3c8>
   40b9c:	a829883a 	mov	r20,r21
   40ba0:	0007883a 	mov	r3,zero
   40ba4:	0009883a 	mov	r4,zero
   40ba8:	18803fcc 	andi	r2,r3,255
   40bac:	100695fa 	slli	r3,r2,23
   40bb0:	a0803fcc 	andi	r2,r20,255
   40bb4:	100a97fa 	slli	r5,r2,31
   40bb8:	00802034 	movhi	r2,128
   40bbc:	10bfffc4 	addi	r2,r2,-1
   40bc0:	2084703a 	and	r2,r4,r2
   40bc4:	10c4b03a 	or	r2,r2,r3
   40bc8:	1144b03a 	or	r2,r2,r5
   40bcc:	dfc00a17 	ldw	ra,40(sp)
   40bd0:	df000917 	ldw	fp,36(sp)
   40bd4:	ddc00817 	ldw	r23,32(sp)
   40bd8:	dd800717 	ldw	r22,28(sp)
   40bdc:	dd400617 	ldw	r21,24(sp)
   40be0:	dd000517 	ldw	r20,20(sp)
   40be4:	dcc00417 	ldw	r19,16(sp)
   40be8:	dc800317 	ldw	r18,12(sp)
   40bec:	dc400217 	ldw	r17,8(sp)
   40bf0:	dc000117 	ldw	r16,4(sp)
   40bf4:	dec00b04 	addi	sp,sp,44
   40bf8:	f800283a 	ret
   40bfc:	90000d1e 	bne	r18,zero,40c34 <__mulsf3+0x1d8>
   40c00:	04400104 	movi	r17,4
   40c04:	05c00044 	movi	r23,1
   40c08:	003faf06 	br	40ac8 <__alt_data_end+0xfffd99c8>
   40c0c:	9806c03a 	cmpne	r3,r19,zero
   40c10:	18c00084 	addi	r3,r3,2
   40c14:	003fba06 	br	40b00 <__alt_data_end+0xfffd9a00>
   40c18:	9800141e 	bne	r19,zero,40c6c <__mulsf3+0x210>
   40c1c:	00c00044 	movi	r3,1
   40c20:	003fb706 	br	40b00 <__alt_data_end+0xfffd9a00>
   40c24:	a829883a 	mov	r20,r21
   40c28:	00ffffc4 	movi	r3,-1
   40c2c:	0009883a 	mov	r4,zero
   40c30:	003fdd06 	br	40ba8 <__alt_data_end+0xfffd9aa8>
   40c34:	9009883a 	mov	r4,r18
   40c38:	d9400015 	stw	r5,0(sp)
   40c3c:	00413ac0 	call	413ac <__clzsi2>
   40c40:	10fffec4 	addi	r3,r2,-5
   40c44:	10801d84 	addi	r2,r2,118
   40c48:	90e4983a 	sll	r18,r18,r3
   40c4c:	00a1c83a 	sub	r16,zero,r2
   40c50:	0023883a 	mov	r17,zero
   40c54:	002f883a 	mov	r23,zero
   40c58:	d9400017 	ldw	r5,0(sp)
   40c5c:	003f9a06 	br	40ac8 <__alt_data_end+0xfffd99c8>
   40c60:	04400304 	movi	r17,12
   40c64:	05c000c4 	movi	r23,3
   40c68:	003f9706 	br	40ac8 <__alt_data_end+0xfffd99c8>
   40c6c:	9809883a 	mov	r4,r19
   40c70:	d9800015 	stw	r6,0(sp)
   40c74:	00413ac0 	call	413ac <__clzsi2>
   40c78:	10fffec4 	addi	r3,r2,-5
   40c7c:	10801d84 	addi	r2,r2,118
   40c80:	98e6983a 	sll	r19,r19,r3
   40c84:	0085c83a 	sub	r2,zero,r2
   40c88:	0007883a 	mov	r3,zero
   40c8c:	d9800017 	ldw	r6,0(sp)
   40c90:	003f9b06 	br	40b00 <__alt_data_end+0xfffd9a00>
   40c94:	01002034 	movhi	r4,128
   40c98:	0029883a 	mov	r20,zero
   40c9c:	213fffc4 	addi	r4,r4,-1
   40ca0:	00ffffc4 	movi	r3,-1
   40ca4:	003fc006 	br	40ba8 <__alt_data_end+0xfffd9aa8>
   40ca8:	9027883a 	mov	r19,r18
   40cac:	b807883a 	mov	r3,r23
   40cb0:	003fb406 	br	40b84 <__alt_data_end+0xfffd9a84>
   40cb4:	9027883a 	mov	r19,r18
   40cb8:	e02b883a 	mov	r21,fp
   40cbc:	b807883a 	mov	r3,r23
   40cc0:	003fb006 	br	40b84 <__alt_data_end+0xfffd9a84>
   40cc4:	9004d43a 	srli	r2,r18,16
   40cc8:	9810d43a 	srli	r8,r19,16
   40ccc:	94bfffcc 	andi	r18,r18,65535
   40cd0:	993fffcc 	andi	r4,r19,65535
   40cd4:	910d383a 	mul	r6,r18,r4
   40cd8:	20a7383a 	mul	r19,r4,r2
   40cdc:	9225383a 	mul	r18,r18,r8
   40ce0:	3006d43a 	srli	r3,r6,16
   40ce4:	1211383a 	mul	r8,r2,r8
   40ce8:	94e5883a 	add	r18,r18,r19
   40cec:	1c87883a 	add	r3,r3,r18
   40cf0:	1cc0022e 	bgeu	r3,r19,40cfc <__mulsf3+0x2a0>
   40cf4:	00800074 	movhi	r2,1
   40cf8:	4091883a 	add	r8,r8,r2
   40cfc:	1804943a 	slli	r2,r3,16
   40d00:	31bfffcc 	andi	r6,r6,65535
   40d04:	1806d43a 	srli	r3,r3,16
   40d08:	1185883a 	add	r2,r2,r6
   40d0c:	102691ba 	slli	r19,r2,6
   40d10:	1a07883a 	add	r3,r3,r8
   40d14:	1004d6ba 	srli	r2,r2,26
   40d18:	180891ba 	slli	r4,r3,6
   40d1c:	9826c03a 	cmpne	r19,r19,zero
   40d20:	9884b03a 	or	r2,r19,r2
   40d24:	1126b03a 	or	r19,r2,r4
   40d28:	9882002c 	andhi	r2,r19,2048
   40d2c:	10000426 	beq	r2,zero,40d40 <__mulsf3+0x2e4>
   40d30:	9804d07a 	srli	r2,r19,1
   40d34:	9900004c 	andi	r4,r19,1
   40d38:	3821883a 	mov	r16,r7
   40d3c:	1126b03a 	or	r19,r2,r4
   40d40:	80c01fc4 	addi	r3,r16,127
   40d44:	00c0210e 	bge	zero,r3,40dcc <__mulsf3+0x370>
   40d48:	988001cc 	andi	r2,r19,7
   40d4c:	10000426 	beq	r2,zero,40d60 <__mulsf3+0x304>
   40d50:	988003cc 	andi	r2,r19,15
   40d54:	01000104 	movi	r4,4
   40d58:	11000126 	beq	r2,r4,40d60 <__mulsf3+0x304>
   40d5c:	9927883a 	add	r19,r19,r4
   40d60:	9882002c 	andhi	r2,r19,2048
   40d64:	10000426 	beq	r2,zero,40d78 <__mulsf3+0x31c>
   40d68:	00be0034 	movhi	r2,63488
   40d6c:	10bfffc4 	addi	r2,r2,-1
   40d70:	80c02004 	addi	r3,r16,128
   40d74:	98a6703a 	and	r19,r19,r2
   40d78:	00803f84 	movi	r2,254
   40d7c:	10ffa916 	blt	r2,r3,40c24 <__alt_data_end+0xfffd9b24>
   40d80:	980891ba 	slli	r4,r19,6
   40d84:	a829883a 	mov	r20,r21
   40d88:	2008d27a 	srli	r4,r4,9
   40d8c:	003f8606 	br	40ba8 <__alt_data_end+0xfffd9aa8>
   40d90:	9080102c 	andhi	r2,r18,64
   40d94:	10000826 	beq	r2,zero,40db8 <__mulsf3+0x35c>
   40d98:	9880102c 	andhi	r2,r19,64
   40d9c:	1000061e 	bne	r2,zero,40db8 <__mulsf3+0x35c>
   40da0:	00802034 	movhi	r2,128
   40da4:	99001034 	orhi	r4,r19,64
   40da8:	10bfffc4 	addi	r2,r2,-1
   40dac:	b029883a 	mov	r20,r22
   40db0:	2088703a 	and	r4,r4,r2
   40db4:	003fba06 	br	40ca0 <__alt_data_end+0xfffd9ba0>
   40db8:	00802034 	movhi	r2,128
   40dbc:	91001034 	orhi	r4,r18,64
   40dc0:	10bfffc4 	addi	r2,r2,-1
   40dc4:	2088703a 	and	r4,r4,r2
   40dc8:	003fb506 	br	40ca0 <__alt_data_end+0xfffd9ba0>
   40dcc:	00800044 	movi	r2,1
   40dd0:	10c7c83a 	sub	r3,r2,r3
   40dd4:	008006c4 	movi	r2,27
   40dd8:	10ff7016 	blt	r2,r3,40b9c <__alt_data_end+0xfffd9a9c>
   40ddc:	00800804 	movi	r2,32
   40de0:	10c5c83a 	sub	r2,r2,r3
   40de4:	9884983a 	sll	r2,r19,r2
   40de8:	98c6d83a 	srl	r3,r19,r3
   40dec:	1004c03a 	cmpne	r2,r2,zero
   40df0:	1884b03a 	or	r2,r3,r2
   40df4:	10c001cc 	andi	r3,r2,7
   40df8:	18000426 	beq	r3,zero,40e0c <__mulsf3+0x3b0>
   40dfc:	10c003cc 	andi	r3,r2,15
   40e00:	01000104 	movi	r4,4
   40e04:	19000126 	beq	r3,r4,40e0c <__mulsf3+0x3b0>
   40e08:	1105883a 	add	r2,r2,r4
   40e0c:	10c1002c 	andhi	r3,r2,1024
   40e10:	18000626 	beq	r3,zero,40e2c <__mulsf3+0x3d0>
   40e14:	a829883a 	mov	r20,r21
   40e18:	00c00044 	movi	r3,1
   40e1c:	0009883a 	mov	r4,zero
   40e20:	003f6106 	br	40ba8 <__alt_data_end+0xfffd9aa8>
   40e24:	3821883a 	mov	r16,r7
   40e28:	003fc506 	br	40d40 <__alt_data_end+0xfffd9c40>
   40e2c:	100491ba 	slli	r2,r2,6
   40e30:	a829883a 	mov	r20,r21
   40e34:	0007883a 	mov	r3,zero
   40e38:	1008d27a 	srli	r4,r2,9
   40e3c:	003f5a06 	br	40ba8 <__alt_data_end+0xfffd9aa8>
   40e40:	00802034 	movhi	r2,128
   40e44:	99001034 	orhi	r4,r19,64
   40e48:	10bfffc4 	addi	r2,r2,-1
   40e4c:	a829883a 	mov	r20,r21
   40e50:	2088703a 	and	r4,r4,r2
   40e54:	003f9206 	br	40ca0 <__alt_data_end+0xfffd9ba0>

00040e58 <__subsf3>:
   40e58:	defffc04 	addi	sp,sp,-16
   40e5c:	280cd5fa 	srli	r6,r5,23
   40e60:	dc000015 	stw	r16,0(sp)
   40e64:	01c02034 	movhi	r7,128
   40e68:	2020d5fa 	srli	r16,r4,23
   40e6c:	39ffffc4 	addi	r7,r7,-1
   40e70:	3906703a 	and	r3,r7,r4
   40e74:	dc400115 	stw	r17,4(sp)
   40e78:	394e703a 	and	r7,r7,r5
   40e7c:	2022d7fa 	srli	r17,r4,31
   40e80:	dfc00315 	stw	ra,12(sp)
   40e84:	dc800215 	stw	r18,8(sp)
   40e88:	31803fcc 	andi	r6,r6,255
   40e8c:	01003fc4 	movi	r4,255
   40e90:	84003fcc 	andi	r16,r16,255
   40e94:	180690fa 	slli	r3,r3,3
   40e98:	2804d7fa 	srli	r2,r5,31
   40e9c:	380e90fa 	slli	r7,r7,3
   40ea0:	31006d26 	beq	r6,r4,41058 <__subsf3+0x200>
   40ea4:	1080005c 	xori	r2,r2,1
   40ea8:	8189c83a 	sub	r4,r16,r6
   40eac:	14404f26 	beq	r2,r17,40fec <__subsf3+0x194>
   40eb0:	0100770e 	bge	zero,r4,41090 <__subsf3+0x238>
   40eb4:	30001e1e 	bne	r6,zero,40f30 <__subsf3+0xd8>
   40eb8:	38006a1e 	bne	r7,zero,41064 <__subsf3+0x20c>
   40ebc:	188001cc 	andi	r2,r3,7
   40ec0:	10000426 	beq	r2,zero,40ed4 <__subsf3+0x7c>
   40ec4:	188003cc 	andi	r2,r3,15
   40ec8:	01000104 	movi	r4,4
   40ecc:	11000126 	beq	r2,r4,40ed4 <__subsf3+0x7c>
   40ed0:	1907883a 	add	r3,r3,r4
   40ed4:	1881002c 	andhi	r2,r3,1024
   40ed8:	10003926 	beq	r2,zero,40fc0 <__subsf3+0x168>
   40edc:	84000044 	addi	r16,r16,1
   40ee0:	00803fc4 	movi	r2,255
   40ee4:	80807526 	beq	r16,r2,410bc <__subsf3+0x264>
   40ee8:	180691ba 	slli	r3,r3,6
   40eec:	8880004c 	andi	r2,r17,1
   40ef0:	180ad27a 	srli	r5,r3,9
   40ef4:	84003fcc 	andi	r16,r16,255
   40ef8:	800695fa 	slli	r3,r16,23
   40efc:	10803fcc 	andi	r2,r2,255
   40f00:	01002034 	movhi	r4,128
   40f04:	213fffc4 	addi	r4,r4,-1
   40f08:	100497fa 	slli	r2,r2,31
   40f0c:	2920703a 	and	r16,r5,r4
   40f10:	80e0b03a 	or	r16,r16,r3
   40f14:	8084b03a 	or	r2,r16,r2
   40f18:	dfc00317 	ldw	ra,12(sp)
   40f1c:	dc800217 	ldw	r18,8(sp)
   40f20:	dc400117 	ldw	r17,4(sp)
   40f24:	dc000017 	ldw	r16,0(sp)
   40f28:	dec00404 	addi	sp,sp,16
   40f2c:	f800283a 	ret
   40f30:	00803fc4 	movi	r2,255
   40f34:	80bfe126 	beq	r16,r2,40ebc <__alt_data_end+0xfffd9dbc>
   40f38:	39c10034 	orhi	r7,r7,1024
   40f3c:	008006c4 	movi	r2,27
   40f40:	11007416 	blt	r2,r4,41114 <__subsf3+0x2bc>
   40f44:	00800804 	movi	r2,32
   40f48:	1105c83a 	sub	r2,r2,r4
   40f4c:	3884983a 	sll	r2,r7,r2
   40f50:	390ed83a 	srl	r7,r7,r4
   40f54:	1008c03a 	cmpne	r4,r2,zero
   40f58:	390eb03a 	or	r7,r7,r4
   40f5c:	19c7c83a 	sub	r3,r3,r7
   40f60:	1881002c 	andhi	r2,r3,1024
   40f64:	10001426 	beq	r2,zero,40fb8 <__subsf3+0x160>
   40f68:	04810034 	movhi	r18,1024
   40f6c:	94bfffc4 	addi	r18,r18,-1
   40f70:	1ca4703a 	and	r18,r3,r18
   40f74:	9009883a 	mov	r4,r18
   40f78:	00413ac0 	call	413ac <__clzsi2>
   40f7c:	10bffec4 	addi	r2,r2,-5
   40f80:	90a4983a 	sll	r18,r18,r2
   40f84:	14005116 	blt	r2,r16,410cc <__subsf3+0x274>
   40f88:	1405c83a 	sub	r2,r2,r16
   40f8c:	10c00044 	addi	r3,r2,1
   40f90:	00800804 	movi	r2,32
   40f94:	10c5c83a 	sub	r2,r2,r3
   40f98:	9084983a 	sll	r2,r18,r2
   40f9c:	90e4d83a 	srl	r18,r18,r3
   40fa0:	0021883a 	mov	r16,zero
   40fa4:	1006c03a 	cmpne	r3,r2,zero
   40fa8:	90c6b03a 	or	r3,r18,r3
   40fac:	003fc306 	br	40ebc <__alt_data_end+0xfffd9dbc>
   40fb0:	2000e026 	beq	r4,zero,41334 <__subsf3+0x4dc>
   40fb4:	2007883a 	mov	r3,r4
   40fb8:	188001cc 	andi	r2,r3,7
   40fbc:	103fc11e 	bne	r2,zero,40ec4 <__alt_data_end+0xfffd9dc4>
   40fc0:	180ad0fa 	srli	r5,r3,3
   40fc4:	00c03fc4 	movi	r3,255
   40fc8:	8880004c 	andi	r2,r17,1
   40fcc:	80c0031e 	bne	r16,r3,40fdc <__subsf3+0x184>
   40fd0:	28006d26 	beq	r5,zero,41188 <__subsf3+0x330>
   40fd4:	29401034 	orhi	r5,r5,64
   40fd8:	043fffc4 	movi	r16,-1
   40fdc:	00c02034 	movhi	r3,128
   40fe0:	18ffffc4 	addi	r3,r3,-1
   40fe4:	28ca703a 	and	r5,r5,r3
   40fe8:	003fc206 	br	40ef4 <__alt_data_end+0xfffd9df4>
   40fec:	01003c0e 	bge	zero,r4,410e0 <__subsf3+0x288>
   40ff0:	30002126 	beq	r6,zero,41078 <__subsf3+0x220>
   40ff4:	01403fc4 	movi	r5,255
   40ff8:	817fb026 	beq	r16,r5,40ebc <__alt_data_end+0xfffd9dbc>
   40ffc:	39c10034 	orhi	r7,r7,1024
   41000:	014006c4 	movi	r5,27
   41004:	29007416 	blt	r5,r4,411d8 <__subsf3+0x380>
   41008:	01400804 	movi	r5,32
   4100c:	290bc83a 	sub	r5,r5,r4
   41010:	394a983a 	sll	r5,r7,r5
   41014:	390ed83a 	srl	r7,r7,r4
   41018:	2808c03a 	cmpne	r4,r5,zero
   4101c:	390eb03a 	or	r7,r7,r4
   41020:	19c7883a 	add	r3,r3,r7
   41024:	1901002c 	andhi	r4,r3,1024
   41028:	20003826 	beq	r4,zero,4110c <__subsf3+0x2b4>
   4102c:	84000044 	addi	r16,r16,1
   41030:	01003fc4 	movi	r4,255
   41034:	81005426 	beq	r16,r4,41188 <__subsf3+0x330>
   41038:	1023883a 	mov	r17,r2
   4103c:	00bf0034 	movhi	r2,64512
   41040:	10bfffc4 	addi	r2,r2,-1
   41044:	1900004c 	andi	r4,r3,1
   41048:	1886703a 	and	r3,r3,r2
   4104c:	1806d07a 	srli	r3,r3,1
   41050:	1906b03a 	or	r3,r3,r4
   41054:	003f9906 	br	40ebc <__alt_data_end+0xfffd9dbc>
   41058:	383f9226 	beq	r7,zero,40ea4 <__alt_data_end+0xfffd9da4>
   4105c:	10803fcc 	andi	r2,r2,255
   41060:	003f9106 	br	40ea8 <__alt_data_end+0xfffd9da8>
   41064:	213fffc4 	addi	r4,r4,-1
   41068:	203fbc26 	beq	r4,zero,40f5c <__alt_data_end+0xfffd9e5c>
   4106c:	00803fc4 	movi	r2,255
   41070:	80bfb21e 	bne	r16,r2,40f3c <__alt_data_end+0xfffd9e3c>
   41074:	003f9106 	br	40ebc <__alt_data_end+0xfffd9dbc>
   41078:	383f9026 	beq	r7,zero,40ebc <__alt_data_end+0xfffd9dbc>
   4107c:	213fffc4 	addi	r4,r4,-1
   41080:	203fe726 	beq	r4,zero,41020 <__alt_data_end+0xfffd9f20>
   41084:	01403fc4 	movi	r5,255
   41088:	817fdd1e 	bne	r16,r5,41000 <__alt_data_end+0xfffd9f00>
   4108c:	003f8b06 	br	40ebc <__alt_data_end+0xfffd9dbc>
   41090:	2000221e 	bne	r4,zero,4111c <__subsf3+0x2c4>
   41094:	81000044 	addi	r4,r16,1
   41098:	21003fcc 	andi	r4,r4,255
   4109c:	01400044 	movi	r5,1
   410a0:	2900470e 	bge	r5,r4,411c0 <__subsf3+0x368>
   410a4:	19e5c83a 	sub	r18,r3,r7
   410a8:	9141002c 	andhi	r5,r18,1024
   410ac:	28002d26 	beq	r5,zero,41164 <__subsf3+0x30c>
   410b0:	38e5c83a 	sub	r18,r7,r3
   410b4:	1023883a 	mov	r17,r2
   410b8:	003fae06 	br	40f74 <__alt_data_end+0xfffd9e74>
   410bc:	8880004c 	andi	r2,r17,1
   410c0:	043fffc4 	movi	r16,-1
   410c4:	000b883a 	mov	r5,zero
   410c8:	003f8a06 	br	40ef4 <__alt_data_end+0xfffd9df4>
   410cc:	00ff0034 	movhi	r3,64512
   410d0:	18ffffc4 	addi	r3,r3,-1
   410d4:	80a1c83a 	sub	r16,r16,r2
   410d8:	90c6703a 	and	r3,r18,r3
   410dc:	003f7706 	br	40ebc <__alt_data_end+0xfffd9dbc>
   410e0:	2000431e 	bne	r4,zero,411f0 <__subsf3+0x398>
   410e4:	81000044 	addi	r4,r16,1
   410e8:	21803fcc 	andi	r6,r4,255
   410ec:	01400044 	movi	r5,1
   410f0:	2980280e 	bge	r5,r6,41194 <__subsf3+0x33c>
   410f4:	01403fc4 	movi	r5,255
   410f8:	21402326 	beq	r4,r5,41188 <__subsf3+0x330>
   410fc:	19c7883a 	add	r3,r3,r7
   41100:	1806d07a 	srli	r3,r3,1
   41104:	2021883a 	mov	r16,r4
   41108:	003f6c06 	br	40ebc <__alt_data_end+0xfffd9dbc>
   4110c:	1023883a 	mov	r17,r2
   41110:	003fa906 	br	40fb8 <__alt_data_end+0xfffd9eb8>
   41114:	01c00044 	movi	r7,1
   41118:	003f9006 	br	40f5c <__alt_data_end+0xfffd9e5c>
   4111c:	8000151e 	bne	r16,zero,41174 <__subsf3+0x31c>
   41120:	18002f26 	beq	r3,zero,411e0 <__subsf3+0x388>
   41124:	0108303a 	nor	r4,zero,r4
   41128:	20000a26 	beq	r4,zero,41154 <__subsf3+0x2fc>
   4112c:	01403fc4 	movi	r5,255
   41130:	31402b26 	beq	r6,r5,411e0 <__subsf3+0x388>
   41134:	014006c4 	movi	r5,27
   41138:	29006e16 	blt	r5,r4,412f4 <__subsf3+0x49c>
   4113c:	01400804 	movi	r5,32
   41140:	290bc83a 	sub	r5,r5,r4
   41144:	194a983a 	sll	r5,r3,r5
   41148:	1908d83a 	srl	r4,r3,r4
   4114c:	2806c03a 	cmpne	r3,r5,zero
   41150:	20c6b03a 	or	r3,r4,r3
   41154:	38c7c83a 	sub	r3,r7,r3
   41158:	3021883a 	mov	r16,r6
   4115c:	1023883a 	mov	r17,r2
   41160:	003f7f06 	br	40f60 <__alt_data_end+0xfffd9e60>
   41164:	903f831e 	bne	r18,zero,40f74 <__alt_data_end+0xfffd9e74>
   41168:	0005883a 	mov	r2,zero
   4116c:	0021883a 	mov	r16,zero
   41170:	003f9a06 	br	40fdc <__alt_data_end+0xfffd9edc>
   41174:	01403fc4 	movi	r5,255
   41178:	31401926 	beq	r6,r5,411e0 <__subsf3+0x388>
   4117c:	0109c83a 	sub	r4,zero,r4
   41180:	18c10034 	orhi	r3,r3,1024
   41184:	003feb06 	br	41134 <__alt_data_end+0xfffda034>
   41188:	043fffc4 	movi	r16,-1
   4118c:	000b883a 	mov	r5,zero
   41190:	003f5806 	br	40ef4 <__alt_data_end+0xfffd9df4>
   41194:	8000481e 	bne	r16,zero,412b8 <__subsf3+0x460>
   41198:	18006226 	beq	r3,zero,41324 <__subsf3+0x4cc>
   4119c:	383f4726 	beq	r7,zero,40ebc <__alt_data_end+0xfffd9dbc>
   411a0:	19c7883a 	add	r3,r3,r7
   411a4:	1881002c 	andhi	r2,r3,1024
   411a8:	103f8326 	beq	r2,zero,40fb8 <__alt_data_end+0xfffd9eb8>
   411ac:	00bf0034 	movhi	r2,64512
   411b0:	10bfffc4 	addi	r2,r2,-1
   411b4:	2821883a 	mov	r16,r5
   411b8:	1886703a 	and	r3,r3,r2
   411bc:	003f3f06 	br	40ebc <__alt_data_end+0xfffd9dbc>
   411c0:	80001c1e 	bne	r16,zero,41234 <__subsf3+0x3dc>
   411c4:	1800261e 	bne	r3,zero,41260 <__subsf3+0x408>
   411c8:	38004c26 	beq	r7,zero,412fc <__subsf3+0x4a4>
   411cc:	3807883a 	mov	r3,r7
   411d0:	1023883a 	mov	r17,r2
   411d4:	003f3906 	br	40ebc <__alt_data_end+0xfffd9dbc>
   411d8:	01c00044 	movi	r7,1
   411dc:	003f9006 	br	41020 <__alt_data_end+0xfffd9f20>
   411e0:	3807883a 	mov	r3,r7
   411e4:	3021883a 	mov	r16,r6
   411e8:	1023883a 	mov	r17,r2
   411ec:	003f3306 	br	40ebc <__alt_data_end+0xfffd9dbc>
   411f0:	8000161e 	bne	r16,zero,4124c <__subsf3+0x3f4>
   411f4:	18002d26 	beq	r3,zero,412ac <__subsf3+0x454>
   411f8:	0108303a 	nor	r4,zero,r4
   411fc:	20000a26 	beq	r4,zero,41228 <__subsf3+0x3d0>
   41200:	01403fc4 	movi	r5,255
   41204:	31402926 	beq	r6,r5,412ac <__subsf3+0x454>
   41208:	014006c4 	movi	r5,27
   4120c:	29004716 	blt	r5,r4,4132c <__subsf3+0x4d4>
   41210:	01400804 	movi	r5,32
   41214:	290bc83a 	sub	r5,r5,r4
   41218:	194a983a 	sll	r5,r3,r5
   4121c:	1908d83a 	srl	r4,r3,r4
   41220:	2806c03a 	cmpne	r3,r5,zero
   41224:	20c6b03a 	or	r3,r4,r3
   41228:	19c7883a 	add	r3,r3,r7
   4122c:	3021883a 	mov	r16,r6
   41230:	003f7c06 	br	41024 <__alt_data_end+0xfffd9f24>
   41234:	1800111e 	bne	r3,zero,4127c <__subsf3+0x424>
   41238:	38003326 	beq	r7,zero,41308 <__subsf3+0x4b0>
   4123c:	3807883a 	mov	r3,r7
   41240:	1023883a 	mov	r17,r2
   41244:	04003fc4 	movi	r16,255
   41248:	003f1c06 	br	40ebc <__alt_data_end+0xfffd9dbc>
   4124c:	01403fc4 	movi	r5,255
   41250:	31401626 	beq	r6,r5,412ac <__subsf3+0x454>
   41254:	0109c83a 	sub	r4,zero,r4
   41258:	18c10034 	orhi	r3,r3,1024
   4125c:	003fea06 	br	41208 <__alt_data_end+0xfffda108>
   41260:	383f1626 	beq	r7,zero,40ebc <__alt_data_end+0xfffd9dbc>
   41264:	19c9c83a 	sub	r4,r3,r7
   41268:	2141002c 	andhi	r5,r4,1024
   4126c:	283f5026 	beq	r5,zero,40fb0 <__alt_data_end+0xfffd9eb0>
   41270:	38c7c83a 	sub	r3,r7,r3
   41274:	1023883a 	mov	r17,r2
   41278:	003f1006 	br	40ebc <__alt_data_end+0xfffd9dbc>
   4127c:	38001b26 	beq	r7,zero,412ec <__subsf3+0x494>
   41280:	1806d0fa 	srli	r3,r3,3
   41284:	1900102c 	andhi	r4,r3,64
   41288:	20000526 	beq	r4,zero,412a0 <__subsf3+0x448>
   4128c:	380ed0fa 	srli	r7,r7,3
   41290:	3900102c 	andhi	r4,r7,64
   41294:	2000021e 	bne	r4,zero,412a0 <__subsf3+0x448>
   41298:	3807883a 	mov	r3,r7
   4129c:	1023883a 	mov	r17,r2
   412a0:	180690fa 	slli	r3,r3,3
   412a4:	04003fc4 	movi	r16,255
   412a8:	003f0406 	br	40ebc <__alt_data_end+0xfffd9dbc>
   412ac:	3807883a 	mov	r3,r7
   412b0:	3021883a 	mov	r16,r6
   412b4:	003f0106 	br	40ebc <__alt_data_end+0xfffd9dbc>
   412b8:	18001726 	beq	r3,zero,41318 <__subsf3+0x4c0>
   412bc:	38000b26 	beq	r7,zero,412ec <__subsf3+0x494>
   412c0:	1806d0fa 	srli	r3,r3,3
   412c4:	1900102c 	andhi	r4,r3,64
   412c8:	20000426 	beq	r4,zero,412dc <__subsf3+0x484>
   412cc:	380ed0fa 	srli	r7,r7,3
   412d0:	3900102c 	andhi	r4,r7,64
   412d4:	2000011e 	bne	r4,zero,412dc <__subsf3+0x484>
   412d8:	3807883a 	mov	r3,r7
   412dc:	180690fa 	slli	r3,r3,3
   412e0:	1023883a 	mov	r17,r2
   412e4:	04003fc4 	movi	r16,255
   412e8:	003ef406 	br	40ebc <__alt_data_end+0xfffd9dbc>
   412ec:	04003fc4 	movi	r16,255
   412f0:	003ef206 	br	40ebc <__alt_data_end+0xfffd9dbc>
   412f4:	00c00044 	movi	r3,1
   412f8:	003f9606 	br	41154 <__alt_data_end+0xfffda054>
   412fc:	000b883a 	mov	r5,zero
   41300:	0005883a 	mov	r2,zero
   41304:	003f3506 	br	40fdc <__alt_data_end+0xfffd9edc>
   41308:	01402034 	movhi	r5,128
   4130c:	297fffc4 	addi	r5,r5,-1
   41310:	0005883a 	mov	r2,zero
   41314:	003f2f06 	br	40fd4 <__alt_data_end+0xfffd9ed4>
   41318:	3807883a 	mov	r3,r7
   4131c:	04003fc4 	movi	r16,255
   41320:	003ee606 	br	40ebc <__alt_data_end+0xfffd9dbc>
   41324:	3807883a 	mov	r3,r7
   41328:	003ee406 	br	40ebc <__alt_data_end+0xfffd9dbc>
   4132c:	00c00044 	movi	r3,1
   41330:	003fbd06 	br	41228 <__alt_data_end+0xfffda128>
   41334:	0005883a 	mov	r2,zero
   41338:	003f2806 	br	40fdc <__alt_data_end+0xfffd9edc>

0004133c <__fixsfsi>:
   4133c:	200ad5fa 	srli	r5,r4,23
   41340:	00c02034 	movhi	r3,128
   41344:	18ffffc4 	addi	r3,r3,-1
   41348:	29403fcc 	andi	r5,r5,255
   4134c:	00801f84 	movi	r2,126
   41350:	1906703a 	and	r3,r3,r4
   41354:	2008d7fa 	srli	r4,r4,31
   41358:	11400e0e 	bge	r2,r5,41394 <__fixsfsi+0x58>
   4135c:	00802744 	movi	r2,157
   41360:	11400816 	blt	r2,r5,41384 <__fixsfsi+0x48>
   41364:	00802544 	movi	r2,149
   41368:	18c02034 	orhi	r3,r3,128
   4136c:	11400b0e 	bge	r2,r5,4139c <__fixsfsi+0x60>
   41370:	28bfda84 	addi	r2,r5,-150
   41374:	1884983a 	sll	r2,r3,r2
   41378:	20000726 	beq	r4,zero,41398 <__fixsfsi+0x5c>
   4137c:	0085c83a 	sub	r2,zero,r2
   41380:	f800283a 	ret
   41384:	00a00034 	movhi	r2,32768
   41388:	10bfffc4 	addi	r2,r2,-1
   4138c:	2085883a 	add	r2,r4,r2
   41390:	f800283a 	ret
   41394:	0005883a 	mov	r2,zero
   41398:	f800283a 	ret
   4139c:	00802584 	movi	r2,150
   413a0:	1145c83a 	sub	r2,r2,r5
   413a4:	1884d83a 	srl	r2,r3,r2
   413a8:	003ff306 	br	41378 <__alt_data_end+0xfffda278>

000413ac <__clzsi2>:
   413ac:	00bfffd4 	movui	r2,65535
   413b0:	11000536 	bltu	r2,r4,413c8 <__clzsi2+0x1c>
   413b4:	00803fc4 	movi	r2,255
   413b8:	11000f36 	bltu	r2,r4,413f8 <__clzsi2+0x4c>
   413bc:	00800804 	movi	r2,32
   413c0:	0007883a 	mov	r3,zero
   413c4:	00000506 	br	413dc <__clzsi2+0x30>
   413c8:	00804034 	movhi	r2,256
   413cc:	10bfffc4 	addi	r2,r2,-1
   413d0:	11000c2e 	bgeu	r2,r4,41404 <__clzsi2+0x58>
   413d4:	00800204 	movi	r2,8
   413d8:	00c00604 	movi	r3,24
   413dc:	20c8d83a 	srl	r4,r4,r3
   413e0:	00c00174 	movhi	r3,5
   413e4:	18c97c04 	addi	r3,r3,9712
   413e8:	1909883a 	add	r4,r3,r4
   413ec:	20c00003 	ldbu	r3,0(r4)
   413f0:	10c5c83a 	sub	r2,r2,r3
   413f4:	f800283a 	ret
   413f8:	00800604 	movi	r2,24
   413fc:	00c00204 	movi	r3,8
   41400:	003ff606 	br	413dc <__alt_data_end+0xfffda2dc>
   41404:	00800404 	movi	r2,16
   41408:	1007883a 	mov	r3,r2
   4140c:	003ff306 	br	413dc <__alt_data_end+0xfffda2dc>

00041410 <_printf_r>:
   41410:	defffd04 	addi	sp,sp,-12
   41414:	2805883a 	mov	r2,r5
   41418:	dfc00015 	stw	ra,0(sp)
   4141c:	d9800115 	stw	r6,4(sp)
   41420:	d9c00215 	stw	r7,8(sp)
   41424:	21400217 	ldw	r5,8(r4)
   41428:	d9c00104 	addi	r7,sp,4
   4142c:	100d883a 	mov	r6,r2
   41430:	00415e80 	call	415e8 <___vfprintf_internal_r>
   41434:	dfc00017 	ldw	ra,0(sp)
   41438:	dec00304 	addi	sp,sp,12
   4143c:	f800283a 	ret

00041440 <printf>:
   41440:	defffc04 	addi	sp,sp,-16
   41444:	dfc00015 	stw	ra,0(sp)
   41448:	d9400115 	stw	r5,4(sp)
   4144c:	d9800215 	stw	r6,8(sp)
   41450:	d9c00315 	stw	r7,12(sp)
   41454:	00800174 	movhi	r2,5
   41458:	10910004 	addi	r2,r2,17408
   4145c:	10800017 	ldw	r2,0(r2)
   41460:	200b883a 	mov	r5,r4
   41464:	d9800104 	addi	r6,sp,4
   41468:	11000217 	ldw	r4,8(r2)
   4146c:	00437e00 	call	437e0 <__vfprintf_internal>
   41470:	dfc00017 	ldw	ra,0(sp)
   41474:	dec00404 	addi	sp,sp,16
   41478:	f800283a 	ret

0004147c <_puts_r>:
   4147c:	defff604 	addi	sp,sp,-40
   41480:	dc000715 	stw	r16,28(sp)
   41484:	2021883a 	mov	r16,r4
   41488:	2809883a 	mov	r4,r5
   4148c:	dc400815 	stw	r17,32(sp)
   41490:	dfc00915 	stw	ra,36(sp)
   41494:	2823883a 	mov	r17,r5
   41498:	00415500 	call	41550 <strlen>
   4149c:	10c00044 	addi	r3,r2,1
   414a0:	d8800115 	stw	r2,4(sp)
   414a4:	00800174 	movhi	r2,5
   414a8:	1089bc04 	addi	r2,r2,9968
   414ac:	d8800215 	stw	r2,8(sp)
   414b0:	00800044 	movi	r2,1
   414b4:	d8800315 	stw	r2,12(sp)
   414b8:	00800084 	movi	r2,2
   414bc:	dc400015 	stw	r17,0(sp)
   414c0:	d8c00615 	stw	r3,24(sp)
   414c4:	dec00415 	stw	sp,16(sp)
   414c8:	d8800515 	stw	r2,20(sp)
   414cc:	80000226 	beq	r16,zero,414d8 <_puts_r+0x5c>
   414d0:	80800e17 	ldw	r2,56(r16)
   414d4:	10001426 	beq	r2,zero,41528 <_puts_r+0xac>
   414d8:	81400217 	ldw	r5,8(r16)
   414dc:	2880030b 	ldhu	r2,12(r5)
   414e0:	10c8000c 	andi	r3,r2,8192
   414e4:	1800061e 	bne	r3,zero,41500 <_puts_r+0x84>
   414e8:	29001917 	ldw	r4,100(r5)
   414ec:	00f7ffc4 	movi	r3,-8193
   414f0:	10880014 	ori	r2,r2,8192
   414f4:	20c6703a 	and	r3,r4,r3
   414f8:	2880030d 	sth	r2,12(r5)
   414fc:	28c01915 	stw	r3,100(r5)
   41500:	d9800404 	addi	r6,sp,16
   41504:	8009883a 	mov	r4,r16
   41508:	0045d100 	call	45d10 <__sfvwrite_r>
   4150c:	1000091e 	bne	r2,zero,41534 <_puts_r+0xb8>
   41510:	00800284 	movi	r2,10
   41514:	dfc00917 	ldw	ra,36(sp)
   41518:	dc400817 	ldw	r17,32(sp)
   4151c:	dc000717 	ldw	r16,28(sp)
   41520:	dec00a04 	addi	sp,sp,40
   41524:	f800283a 	ret
   41528:	8009883a 	mov	r4,r16
   4152c:	004588c0 	call	4588c <__sinit>
   41530:	003fe906 	br	414d8 <__alt_data_end+0xfffda3d8>
   41534:	00bfffc4 	movi	r2,-1
   41538:	003ff606 	br	41514 <__alt_data_end+0xfffda414>

0004153c <puts>:
   4153c:	00800174 	movhi	r2,5
   41540:	10910004 	addi	r2,r2,17408
   41544:	200b883a 	mov	r5,r4
   41548:	11000017 	ldw	r4,0(r2)
   4154c:	004147c1 	jmpi	4147c <_puts_r>

00041550 <strlen>:
   41550:	208000cc 	andi	r2,r4,3
   41554:	10002026 	beq	r2,zero,415d8 <strlen+0x88>
   41558:	20800007 	ldb	r2,0(r4)
   4155c:	10002026 	beq	r2,zero,415e0 <strlen+0x90>
   41560:	2005883a 	mov	r2,r4
   41564:	00000206 	br	41570 <strlen+0x20>
   41568:	10c00007 	ldb	r3,0(r2)
   4156c:	18001826 	beq	r3,zero,415d0 <strlen+0x80>
   41570:	10800044 	addi	r2,r2,1
   41574:	10c000cc 	andi	r3,r2,3
   41578:	183ffb1e 	bne	r3,zero,41568 <__alt_data_end+0xfffda468>
   4157c:	10c00017 	ldw	r3,0(r2)
   41580:	01ffbff4 	movhi	r7,65279
   41584:	39ffbfc4 	addi	r7,r7,-257
   41588:	00ca303a 	nor	r5,zero,r3
   4158c:	01a02074 	movhi	r6,32897
   41590:	19c7883a 	add	r3,r3,r7
   41594:	31a02004 	addi	r6,r6,-32640
   41598:	1946703a 	and	r3,r3,r5
   4159c:	1986703a 	and	r3,r3,r6
   415a0:	1800091e 	bne	r3,zero,415c8 <strlen+0x78>
   415a4:	10800104 	addi	r2,r2,4
   415a8:	10c00017 	ldw	r3,0(r2)
   415ac:	19cb883a 	add	r5,r3,r7
   415b0:	00c6303a 	nor	r3,zero,r3
   415b4:	28c6703a 	and	r3,r5,r3
   415b8:	1986703a 	and	r3,r3,r6
   415bc:	183ff926 	beq	r3,zero,415a4 <__alt_data_end+0xfffda4a4>
   415c0:	00000106 	br	415c8 <strlen+0x78>
   415c4:	10800044 	addi	r2,r2,1
   415c8:	10c00007 	ldb	r3,0(r2)
   415cc:	183ffd1e 	bne	r3,zero,415c4 <__alt_data_end+0xfffda4c4>
   415d0:	1105c83a 	sub	r2,r2,r4
   415d4:	f800283a 	ret
   415d8:	2005883a 	mov	r2,r4
   415dc:	003fe706 	br	4157c <__alt_data_end+0xfffda47c>
   415e0:	0005883a 	mov	r2,zero
   415e4:	f800283a 	ret

000415e8 <___vfprintf_internal_r>:
   415e8:	deffb804 	addi	sp,sp,-288
   415ec:	dfc04715 	stw	ra,284(sp)
   415f0:	ddc04515 	stw	r23,276(sp)
   415f4:	dd404315 	stw	r21,268(sp)
   415f8:	d9002c15 	stw	r4,176(sp)
   415fc:	282f883a 	mov	r23,r5
   41600:	302b883a 	mov	r21,r6
   41604:	d9c02d15 	stw	r7,180(sp)
   41608:	df004615 	stw	fp,280(sp)
   4160c:	dd804415 	stw	r22,272(sp)
   41610:	dd004215 	stw	r20,264(sp)
   41614:	dcc04115 	stw	r19,260(sp)
   41618:	dc804015 	stw	r18,256(sp)
   4161c:	dc403f15 	stw	r17,252(sp)
   41620:	dc003e15 	stw	r16,248(sp)
   41624:	00464000 	call	46400 <_localeconv_r>
   41628:	10800017 	ldw	r2,0(r2)
   4162c:	1009883a 	mov	r4,r2
   41630:	d8803415 	stw	r2,208(sp)
   41634:	00415500 	call	41550 <strlen>
   41638:	d8803715 	stw	r2,220(sp)
   4163c:	d8802c17 	ldw	r2,176(sp)
   41640:	10000226 	beq	r2,zero,4164c <___vfprintf_internal_r+0x64>
   41644:	10800e17 	ldw	r2,56(r2)
   41648:	1000f926 	beq	r2,zero,41a30 <___vfprintf_internal_r+0x448>
   4164c:	b880030b 	ldhu	r2,12(r23)
   41650:	10c8000c 	andi	r3,r2,8192
   41654:	1800061e 	bne	r3,zero,41670 <___vfprintf_internal_r+0x88>
   41658:	b9001917 	ldw	r4,100(r23)
   4165c:	00f7ffc4 	movi	r3,-8193
   41660:	10880014 	ori	r2,r2,8192
   41664:	20c6703a 	and	r3,r4,r3
   41668:	b880030d 	sth	r2,12(r23)
   4166c:	b8c01915 	stw	r3,100(r23)
   41670:	10c0020c 	andi	r3,r2,8
   41674:	1800c126 	beq	r3,zero,4197c <___vfprintf_internal_r+0x394>
   41678:	b8c00417 	ldw	r3,16(r23)
   4167c:	1800bf26 	beq	r3,zero,4197c <___vfprintf_internal_r+0x394>
   41680:	1080068c 	andi	r2,r2,26
   41684:	00c00284 	movi	r3,10
   41688:	10c0c426 	beq	r2,r3,4199c <___vfprintf_internal_r+0x3b4>
   4168c:	d8c00404 	addi	r3,sp,16
   41690:	05000174 	movhi	r20,5
   41694:	d9001e04 	addi	r4,sp,120
   41698:	a509cd84 	addi	r20,r20,10038
   4169c:	d8c01e15 	stw	r3,120(sp)
   416a0:	d8002015 	stw	zero,128(sp)
   416a4:	d8001f15 	stw	zero,124(sp)
   416a8:	d8003315 	stw	zero,204(sp)
   416ac:	d8003615 	stw	zero,216(sp)
   416b0:	d8003815 	stw	zero,224(sp)
   416b4:	1811883a 	mov	r8,r3
   416b8:	d8003915 	stw	zero,228(sp)
   416bc:	d8003a15 	stw	zero,232(sp)
   416c0:	d8002f15 	stw	zero,188(sp)
   416c4:	d9002815 	stw	r4,160(sp)
   416c8:	a8800007 	ldb	r2,0(r21)
   416cc:	10027b26 	beq	r2,zero,420bc <___vfprintf_internal_r+0xad4>
   416d0:	00c00944 	movi	r3,37
   416d4:	a821883a 	mov	r16,r21
   416d8:	10c0021e 	bne	r2,r3,416e4 <___vfprintf_internal_r+0xfc>
   416dc:	00001406 	br	41730 <___vfprintf_internal_r+0x148>
   416e0:	10c00326 	beq	r2,r3,416f0 <___vfprintf_internal_r+0x108>
   416e4:	84000044 	addi	r16,r16,1
   416e8:	80800007 	ldb	r2,0(r16)
   416ec:	103ffc1e 	bne	r2,zero,416e0 <__alt_data_end+0xfffda5e0>
   416f0:	8563c83a 	sub	r17,r16,r21
   416f4:	88000e26 	beq	r17,zero,41730 <___vfprintf_internal_r+0x148>
   416f8:	d8c02017 	ldw	r3,128(sp)
   416fc:	d8801f17 	ldw	r2,124(sp)
   41700:	45400015 	stw	r21,0(r8)
   41704:	1c47883a 	add	r3,r3,r17
   41708:	10800044 	addi	r2,r2,1
   4170c:	d8c02015 	stw	r3,128(sp)
   41710:	44400115 	stw	r17,4(r8)
   41714:	d8801f15 	stw	r2,124(sp)
   41718:	00c001c4 	movi	r3,7
   4171c:	1880a716 	blt	r3,r2,419bc <___vfprintf_internal_r+0x3d4>
   41720:	42000204 	addi	r8,r8,8
   41724:	d9402f17 	ldw	r5,188(sp)
   41728:	2c4b883a 	add	r5,r5,r17
   4172c:	d9402f15 	stw	r5,188(sp)
   41730:	80800007 	ldb	r2,0(r16)
   41734:	1000a826 	beq	r2,zero,419d8 <___vfprintf_internal_r+0x3f0>
   41738:	84400047 	ldb	r17,1(r16)
   4173c:	00bfffc4 	movi	r2,-1
   41740:	85400044 	addi	r21,r16,1
   41744:	d8002785 	stb	zero,158(sp)
   41748:	0007883a 	mov	r3,zero
   4174c:	000f883a 	mov	r7,zero
   41750:	d8802915 	stw	r2,164(sp)
   41754:	d8003115 	stw	zero,196(sp)
   41758:	0025883a 	mov	r18,zero
   4175c:	01401604 	movi	r5,88
   41760:	01800244 	movi	r6,9
   41764:	02800a84 	movi	r10,42
   41768:	02401b04 	movi	r9,108
   4176c:	ad400044 	addi	r21,r21,1
   41770:	88bff804 	addi	r2,r17,-32
   41774:	28830436 	bltu	r5,r2,42388 <___vfprintf_internal_r+0xda0>
   41778:	100490ba 	slli	r2,r2,2
   4177c:	01000134 	movhi	r4,4
   41780:	2105e404 	addi	r4,r4,6032
   41784:	1105883a 	add	r2,r2,r4
   41788:	10800017 	ldw	r2,0(r2)
   4178c:	1000683a 	jmp	r2
   41790:	000422a8 	cmpgeui	zero,zero,4234
   41794:	00042388 	cmpgei	zero,zero,4238
   41798:	00042388 	cmpgei	zero,zero,4238
   4179c:	000422c8 	cmpgei	zero,zero,4235
   417a0:	00042388 	cmpgei	zero,zero,4238
   417a4:	00042388 	cmpgei	zero,zero,4238
   417a8:	00042388 	cmpgei	zero,zero,4238
   417ac:	00042388 	cmpgei	zero,zero,4238
   417b0:	00042388 	cmpgei	zero,zero,4238
   417b4:	00042388 	cmpgei	zero,zero,4238
   417b8:	00041a3c 	xorhi	zero,zero,4200
   417bc:	000421e4 	muli	zero,zero,4231
   417c0:	00042388 	cmpgei	zero,zero,4238
   417c4:	00041904 	movi	zero,4196
   417c8:	00041a64 	muli	zero,zero,4201
   417cc:	00042388 	cmpgei	zero,zero,4238
   417d0:	00041aa4 	muli	zero,zero,4202
   417d4:	00041ab0 	cmpltui	zero,zero,4202
   417d8:	00041ab0 	cmpltui	zero,zero,4202
   417dc:	00041ab0 	cmpltui	zero,zero,4202
   417e0:	00041ab0 	cmpltui	zero,zero,4202
   417e4:	00041ab0 	cmpltui	zero,zero,4202
   417e8:	00041ab0 	cmpltui	zero,zero,4202
   417ec:	00041ab0 	cmpltui	zero,zero,4202
   417f0:	00041ab0 	cmpltui	zero,zero,4202
   417f4:	00041ab0 	cmpltui	zero,zero,4202
   417f8:	00042388 	cmpgei	zero,zero,4238
   417fc:	00042388 	cmpgei	zero,zero,4238
   41800:	00042388 	cmpgei	zero,zero,4238
   41804:	00042388 	cmpgei	zero,zero,4238
   41808:	00042388 	cmpgei	zero,zero,4238
   4180c:	00042388 	cmpgei	zero,zero,4238
   41810:	00042388 	cmpgei	zero,zero,4238
   41814:	00042388 	cmpgei	zero,zero,4238
   41818:	00042388 	cmpgei	zero,zero,4238
   4181c:	00042388 	cmpgei	zero,zero,4238
   41820:	00041ae4 	muli	zero,zero,4203
   41824:	00041ba0 	cmpeqi	zero,zero,4206
   41828:	00042388 	cmpgei	zero,zero,4238
   4182c:	00041ba0 	cmpeqi	zero,zero,4206
   41830:	00042388 	cmpgei	zero,zero,4238
   41834:	00042388 	cmpgei	zero,zero,4238
   41838:	00042388 	cmpgei	zero,zero,4238
   4183c:	00042388 	cmpgei	zero,zero,4238
   41840:	00041c40 	call	41c4 <__alt_mem_onchip_memory2-0x3be3c>
   41844:	00042388 	cmpgei	zero,zero,4238
   41848:	00042388 	cmpgei	zero,zero,4238
   4184c:	00041c4c 	andi	zero,zero,4209
   41850:	00042388 	cmpgei	zero,zero,4238
   41854:	00042388 	cmpgei	zero,zero,4238
   41858:	00042388 	cmpgei	zero,zero,4238
   4185c:	00042388 	cmpgei	zero,zero,4238
   41860:	00042388 	cmpgei	zero,zero,4238
   41864:	000420c4 	movi	zero,4227
   41868:	00042388 	cmpgei	zero,zero,4238
   4186c:	00042388 	cmpgei	zero,zero,4238
   41870:	00042124 	muli	zero,zero,4228
   41874:	00042388 	cmpgei	zero,zero,4238
   41878:	00042388 	cmpgei	zero,zero,4238
   4187c:	00042388 	cmpgei	zero,zero,4238
   41880:	00042388 	cmpgei	zero,zero,4238
   41884:	00042388 	cmpgei	zero,zero,4238
   41888:	00042388 	cmpgei	zero,zero,4238
   4188c:	00042388 	cmpgei	zero,zero,4238
   41890:	00042388 	cmpgei	zero,zero,4238
   41894:	00042388 	cmpgei	zero,zero,4238
   41898:	00042388 	cmpgei	zero,zero,4238
   4189c:	00042334 	movhi	zero,4236
   418a0:	000422d4 	movui	zero,4235
   418a4:	00041ba0 	cmpeqi	zero,zero,4206
   418a8:	00041ba0 	cmpeqi	zero,zero,4206
   418ac:	00041ba0 	cmpeqi	zero,zero,4206
   418b0:	000422e4 	muli	zero,zero,4235
   418b4:	000422d4 	movui	zero,4235
   418b8:	00042388 	cmpgei	zero,zero,4238
   418bc:	00042388 	cmpgei	zero,zero,4238
   418c0:	000422f0 	cmpltui	zero,zero,4235
   418c4:	00042388 	cmpgei	zero,zero,4238
   418c8:	00042300 	call	4230 <__alt_mem_onchip_memory2-0x3bdd0>
   418cc:	000421d4 	movui	zero,4231
   418d0:	00041910 	cmplti	zero,zero,4196
   418d4:	000421f4 	movhi	zero,4231
   418d8:	00042388 	cmpgei	zero,zero,4238
   418dc:	00042200 	call	4220 <__alt_mem_onchip_memory2-0x3bde0>
   418e0:	00042388 	cmpgei	zero,zero,4238
   418e4:	0004225c 	xori	zero,zero,4233
   418e8:	00042388 	cmpgei	zero,zero,4238
   418ec:	00042388 	cmpgei	zero,zero,4238
   418f0:	0004226c 	andhi	zero,zero,4233
   418f4:	d9003117 	ldw	r4,196(sp)
   418f8:	d8802d15 	stw	r2,180(sp)
   418fc:	0109c83a 	sub	r4,zero,r4
   41900:	d9003115 	stw	r4,196(sp)
   41904:	94800114 	ori	r18,r18,4
   41908:	ac400007 	ldb	r17,0(r21)
   4190c:	003f9706 	br	4176c <__alt_data_end+0xfffda66c>
   41910:	00800c04 	movi	r2,48
   41914:	d9002d17 	ldw	r4,180(sp)
   41918:	d9402917 	ldw	r5,164(sp)
   4191c:	d8802705 	stb	r2,156(sp)
   41920:	00801e04 	movi	r2,120
   41924:	d8802745 	stb	r2,157(sp)
   41928:	d8002785 	stb	zero,158(sp)
   4192c:	20c00104 	addi	r3,r4,4
   41930:	24c00017 	ldw	r19,0(r4)
   41934:	002d883a 	mov	r22,zero
   41938:	90800094 	ori	r2,r18,2
   4193c:	28029a16 	blt	r5,zero,423a8 <___vfprintf_internal_r+0xdc0>
   41940:	00bfdfc4 	movi	r2,-129
   41944:	90a4703a 	and	r18,r18,r2
   41948:	d8c02d15 	stw	r3,180(sp)
   4194c:	94800094 	ori	r18,r18,2
   41950:	9802871e 	bne	r19,zero,42370 <___vfprintf_internal_r+0xd88>
   41954:	00800174 	movhi	r2,5
   41958:	1089c604 	addi	r2,r2,10008
   4195c:	d8803915 	stw	r2,228(sp)
   41960:	04401e04 	movi	r17,120
   41964:	d8802917 	ldw	r2,164(sp)
   41968:	0039883a 	mov	fp,zero
   4196c:	1001e926 	beq	r2,zero,42114 <___vfprintf_internal_r+0xb2c>
   41970:	0027883a 	mov	r19,zero
   41974:	002d883a 	mov	r22,zero
   41978:	00020506 	br	42190 <___vfprintf_internal_r+0xba8>
   4197c:	d9002c17 	ldw	r4,176(sp)
   41980:	b80b883a 	mov	r5,r23
   41984:	00438b80 	call	438b8 <__swsetup_r>
   41988:	1005ac1e 	bne	r2,zero,4303c <___vfprintf_internal_r+0x1a54>
   4198c:	b880030b 	ldhu	r2,12(r23)
   41990:	00c00284 	movi	r3,10
   41994:	1080068c 	andi	r2,r2,26
   41998:	10ff3c1e 	bne	r2,r3,4168c <__alt_data_end+0xfffda58c>
   4199c:	b880038f 	ldh	r2,14(r23)
   419a0:	103f3a16 	blt	r2,zero,4168c <__alt_data_end+0xfffda58c>
   419a4:	d9c02d17 	ldw	r7,180(sp)
   419a8:	d9002c17 	ldw	r4,176(sp)
   419ac:	a80d883a 	mov	r6,r21
   419b0:	b80b883a 	mov	r5,r23
   419b4:	00437fc0 	call	437fc <__sbprintf>
   419b8:	00001106 	br	41a00 <___vfprintf_internal_r+0x418>
   419bc:	d9002c17 	ldw	r4,176(sp)
   419c0:	d9801e04 	addi	r6,sp,120
   419c4:	b80b883a 	mov	r5,r23
   419c8:	0048be40 	call	48be4 <__sprint_r>
   419cc:	1000081e 	bne	r2,zero,419f0 <___vfprintf_internal_r+0x408>
   419d0:	da000404 	addi	r8,sp,16
   419d4:	003f5306 	br	41724 <__alt_data_end+0xfffda624>
   419d8:	d8802017 	ldw	r2,128(sp)
   419dc:	10000426 	beq	r2,zero,419f0 <___vfprintf_internal_r+0x408>
   419e0:	d9002c17 	ldw	r4,176(sp)
   419e4:	d9801e04 	addi	r6,sp,120
   419e8:	b80b883a 	mov	r5,r23
   419ec:	0048be40 	call	48be4 <__sprint_r>
   419f0:	b880030b 	ldhu	r2,12(r23)
   419f4:	1080100c 	andi	r2,r2,64
   419f8:	1005901e 	bne	r2,zero,4303c <___vfprintf_internal_r+0x1a54>
   419fc:	d8802f17 	ldw	r2,188(sp)
   41a00:	dfc04717 	ldw	ra,284(sp)
   41a04:	df004617 	ldw	fp,280(sp)
   41a08:	ddc04517 	ldw	r23,276(sp)
   41a0c:	dd804417 	ldw	r22,272(sp)
   41a10:	dd404317 	ldw	r21,268(sp)
   41a14:	dd004217 	ldw	r20,264(sp)
   41a18:	dcc04117 	ldw	r19,260(sp)
   41a1c:	dc804017 	ldw	r18,256(sp)
   41a20:	dc403f17 	ldw	r17,252(sp)
   41a24:	dc003e17 	ldw	r16,248(sp)
   41a28:	dec04804 	addi	sp,sp,288
   41a2c:	f800283a 	ret
   41a30:	d9002c17 	ldw	r4,176(sp)
   41a34:	004588c0 	call	4588c <__sinit>
   41a38:	003f0406 	br	4164c <__alt_data_end+0xfffda54c>
   41a3c:	d8802d17 	ldw	r2,180(sp)
   41a40:	d9002d17 	ldw	r4,180(sp)
   41a44:	10800017 	ldw	r2,0(r2)
   41a48:	d8803115 	stw	r2,196(sp)
   41a4c:	20800104 	addi	r2,r4,4
   41a50:	d9003117 	ldw	r4,196(sp)
   41a54:	203fa716 	blt	r4,zero,418f4 <__alt_data_end+0xfffda7f4>
   41a58:	d8802d15 	stw	r2,180(sp)
   41a5c:	ac400007 	ldb	r17,0(r21)
   41a60:	003f4206 	br	4176c <__alt_data_end+0xfffda66c>
   41a64:	ac400007 	ldb	r17,0(r21)
   41a68:	aac00044 	addi	r11,r21,1
   41a6c:	8a872826 	beq	r17,r10,43710 <___vfprintf_internal_r+0x2128>
   41a70:	88bff404 	addi	r2,r17,-48
   41a74:	0009883a 	mov	r4,zero
   41a78:	30867d36 	bltu	r6,r2,43470 <___vfprintf_internal_r+0x1e88>
   41a7c:	5c400007 	ldb	r17,0(r11)
   41a80:	210002a4 	muli	r4,r4,10
   41a84:	5d400044 	addi	r21,r11,1
   41a88:	a817883a 	mov	r11,r21
   41a8c:	2089883a 	add	r4,r4,r2
   41a90:	88bff404 	addi	r2,r17,-48
   41a94:	30bff92e 	bgeu	r6,r2,41a7c <__alt_data_end+0xfffda97c>
   41a98:	2005c916 	blt	r4,zero,431c0 <___vfprintf_internal_r+0x1bd8>
   41a9c:	d9002915 	stw	r4,164(sp)
   41aa0:	003f3306 	br	41770 <__alt_data_end+0xfffda670>
   41aa4:	94802014 	ori	r18,r18,128
   41aa8:	ac400007 	ldb	r17,0(r21)
   41aac:	003f2f06 	br	4176c <__alt_data_end+0xfffda66c>
   41ab0:	a809883a 	mov	r4,r21
   41ab4:	d8003115 	stw	zero,196(sp)
   41ab8:	88bff404 	addi	r2,r17,-48
   41abc:	0017883a 	mov	r11,zero
   41ac0:	24400007 	ldb	r17,0(r4)
   41ac4:	5ac002a4 	muli	r11,r11,10
   41ac8:	ad400044 	addi	r21,r21,1
   41acc:	a809883a 	mov	r4,r21
   41ad0:	12d7883a 	add	r11,r2,r11
   41ad4:	88bff404 	addi	r2,r17,-48
   41ad8:	30bff92e 	bgeu	r6,r2,41ac0 <__alt_data_end+0xfffda9c0>
   41adc:	dac03115 	stw	r11,196(sp)
   41ae0:	003f2306 	br	41770 <__alt_data_end+0xfffda670>
   41ae4:	18c03fcc 	andi	r3,r3,255
   41ae8:	18072b1e 	bne	r3,zero,43798 <___vfprintf_internal_r+0x21b0>
   41aec:	94800414 	ori	r18,r18,16
   41af0:	9080080c 	andi	r2,r18,32
   41af4:	10037b26 	beq	r2,zero,428e4 <___vfprintf_internal_r+0x12fc>
   41af8:	d9402d17 	ldw	r5,180(sp)
   41afc:	28800117 	ldw	r2,4(r5)
   41b00:	2cc00017 	ldw	r19,0(r5)
   41b04:	29400204 	addi	r5,r5,8
   41b08:	d9402d15 	stw	r5,180(sp)
   41b0c:	102d883a 	mov	r22,r2
   41b10:	10044b16 	blt	r2,zero,42c40 <___vfprintf_internal_r+0x1658>
   41b14:	d9402917 	ldw	r5,164(sp)
   41b18:	df002783 	ldbu	fp,158(sp)
   41b1c:	2803bc16 	blt	r5,zero,42a10 <___vfprintf_internal_r+0x1428>
   41b20:	00ffdfc4 	movi	r3,-129
   41b24:	9d84b03a 	or	r2,r19,r22
   41b28:	90e4703a 	and	r18,r18,r3
   41b2c:	10017726 	beq	r2,zero,4210c <___vfprintf_internal_r+0xb24>
   41b30:	b0038326 	beq	r22,zero,42940 <___vfprintf_internal_r+0x1358>
   41b34:	dc402a15 	stw	r17,168(sp)
   41b38:	dc001e04 	addi	r16,sp,120
   41b3c:	b023883a 	mov	r17,r22
   41b40:	402d883a 	mov	r22,r8
   41b44:	9809883a 	mov	r4,r19
   41b48:	880b883a 	mov	r5,r17
   41b4c:	01800284 	movi	r6,10
   41b50:	000f883a 	mov	r7,zero
   41b54:	004afdc0 	call	4afdc <__umoddi3>
   41b58:	10800c04 	addi	r2,r2,48
   41b5c:	843fffc4 	addi	r16,r16,-1
   41b60:	9809883a 	mov	r4,r19
   41b64:	880b883a 	mov	r5,r17
   41b68:	80800005 	stb	r2,0(r16)
   41b6c:	01800284 	movi	r6,10
   41b70:	000f883a 	mov	r7,zero
   41b74:	004aa640 	call	4aa64 <__udivdi3>
   41b78:	1027883a 	mov	r19,r2
   41b7c:	10c4b03a 	or	r2,r2,r3
   41b80:	1823883a 	mov	r17,r3
   41b84:	103fef1e 	bne	r2,zero,41b44 <__alt_data_end+0xfffdaa44>
   41b88:	d8c02817 	ldw	r3,160(sp)
   41b8c:	dc402a17 	ldw	r17,168(sp)
   41b90:	b011883a 	mov	r8,r22
   41b94:	1c07c83a 	sub	r3,r3,r16
   41b98:	d8c02e15 	stw	r3,184(sp)
   41b9c:	00005906 	br	41d04 <___vfprintf_internal_r+0x71c>
   41ba0:	18c03fcc 	andi	r3,r3,255
   41ba4:	1806fa1e 	bne	r3,zero,43790 <___vfprintf_internal_r+0x21a8>
   41ba8:	9080020c 	andi	r2,r18,8
   41bac:	10048a26 	beq	r2,zero,42dd8 <___vfprintf_internal_r+0x17f0>
   41bb0:	d8c02d17 	ldw	r3,180(sp)
   41bb4:	d9002d17 	ldw	r4,180(sp)
   41bb8:	d9402d17 	ldw	r5,180(sp)
   41bbc:	18c00017 	ldw	r3,0(r3)
   41bc0:	21000117 	ldw	r4,4(r4)
   41bc4:	29400204 	addi	r5,r5,8
   41bc8:	d8c03615 	stw	r3,216(sp)
   41bcc:	d9003815 	stw	r4,224(sp)
   41bd0:	d9402d15 	stw	r5,180(sp)
   41bd4:	d9003617 	ldw	r4,216(sp)
   41bd8:	d9403817 	ldw	r5,224(sp)
   41bdc:	da003d15 	stw	r8,244(sp)
   41be0:	04000044 	movi	r16,1
   41be4:	00488080 	call	48808 <__fpclassifyd>
   41be8:	da003d17 	ldw	r8,244(sp)
   41bec:	14041f1e 	bne	r2,r16,42c6c <___vfprintf_internal_r+0x1684>
   41bf0:	d9003617 	ldw	r4,216(sp)
   41bf4:	d9403817 	ldw	r5,224(sp)
   41bf8:	000d883a 	mov	r6,zero
   41bfc:	000f883a 	mov	r7,zero
   41c00:	004c9c00 	call	4c9c0 <__ledf2>
   41c04:	da003d17 	ldw	r8,244(sp)
   41c08:	1005be16 	blt	r2,zero,43304 <___vfprintf_internal_r+0x1d1c>
   41c0c:	df002783 	ldbu	fp,158(sp)
   41c10:	008011c4 	movi	r2,71
   41c14:	1445330e 	bge	r2,r17,430e4 <___vfprintf_internal_r+0x1afc>
   41c18:	04000174 	movhi	r16,5
   41c1c:	8409be04 	addi	r16,r16,9976
   41c20:	00c000c4 	movi	r3,3
   41c24:	00bfdfc4 	movi	r2,-129
   41c28:	d8c02a15 	stw	r3,168(sp)
   41c2c:	90a4703a 	and	r18,r18,r2
   41c30:	d8c02e15 	stw	r3,184(sp)
   41c34:	d8002915 	stw	zero,164(sp)
   41c38:	d8003215 	stw	zero,200(sp)
   41c3c:	00003706 	br	41d1c <___vfprintf_internal_r+0x734>
   41c40:	94800214 	ori	r18,r18,8
   41c44:	ac400007 	ldb	r17,0(r21)
   41c48:	003ec806 	br	4176c <__alt_data_end+0xfffda66c>
   41c4c:	18c03fcc 	andi	r3,r3,255
   41c50:	1806db1e 	bne	r3,zero,437c0 <___vfprintf_internal_r+0x21d8>
   41c54:	94800414 	ori	r18,r18,16
   41c58:	9080080c 	andi	r2,r18,32
   41c5c:	1002d826 	beq	r2,zero,427c0 <___vfprintf_internal_r+0x11d8>
   41c60:	d9402d17 	ldw	r5,180(sp)
   41c64:	d8c02917 	ldw	r3,164(sp)
   41c68:	d8002785 	stb	zero,158(sp)
   41c6c:	28800204 	addi	r2,r5,8
   41c70:	2cc00017 	ldw	r19,0(r5)
   41c74:	2d800117 	ldw	r22,4(r5)
   41c78:	18048f16 	blt	r3,zero,42eb8 <___vfprintf_internal_r+0x18d0>
   41c7c:	013fdfc4 	movi	r4,-129
   41c80:	9d86b03a 	or	r3,r19,r22
   41c84:	d8802d15 	stw	r2,180(sp)
   41c88:	9124703a 	and	r18,r18,r4
   41c8c:	1802d91e 	bne	r3,zero,427f4 <___vfprintf_internal_r+0x120c>
   41c90:	d8c02917 	ldw	r3,164(sp)
   41c94:	0039883a 	mov	fp,zero
   41c98:	1805c326 	beq	r3,zero,433a8 <___vfprintf_internal_r+0x1dc0>
   41c9c:	0027883a 	mov	r19,zero
   41ca0:	002d883a 	mov	r22,zero
   41ca4:	dc001e04 	addi	r16,sp,120
   41ca8:	9806d0fa 	srli	r3,r19,3
   41cac:	b008977a 	slli	r4,r22,29
   41cb0:	b02cd0fa 	srli	r22,r22,3
   41cb4:	9cc001cc 	andi	r19,r19,7
   41cb8:	98800c04 	addi	r2,r19,48
   41cbc:	843fffc4 	addi	r16,r16,-1
   41cc0:	20e6b03a 	or	r19,r4,r3
   41cc4:	80800005 	stb	r2,0(r16)
   41cc8:	9d86b03a 	or	r3,r19,r22
   41ccc:	183ff61e 	bne	r3,zero,41ca8 <__alt_data_end+0xfffdaba8>
   41cd0:	90c0004c 	andi	r3,r18,1
   41cd4:	18013b26 	beq	r3,zero,421c4 <___vfprintf_internal_r+0xbdc>
   41cd8:	10803fcc 	andi	r2,r2,255
   41cdc:	1080201c 	xori	r2,r2,128
   41ce0:	10bfe004 	addi	r2,r2,-128
   41ce4:	00c00c04 	movi	r3,48
   41ce8:	10c13626 	beq	r2,r3,421c4 <___vfprintf_internal_r+0xbdc>
   41cec:	80ffffc5 	stb	r3,-1(r16)
   41cf0:	d8c02817 	ldw	r3,160(sp)
   41cf4:	80bfffc4 	addi	r2,r16,-1
   41cf8:	1021883a 	mov	r16,r2
   41cfc:	1887c83a 	sub	r3,r3,r2
   41d00:	d8c02e15 	stw	r3,184(sp)
   41d04:	d8802e17 	ldw	r2,184(sp)
   41d08:	d9002917 	ldw	r4,164(sp)
   41d0c:	1100010e 	bge	r2,r4,41d14 <___vfprintf_internal_r+0x72c>
   41d10:	2005883a 	mov	r2,r4
   41d14:	d8802a15 	stw	r2,168(sp)
   41d18:	d8003215 	stw	zero,200(sp)
   41d1c:	e7003fcc 	andi	fp,fp,255
   41d20:	e700201c 	xori	fp,fp,128
   41d24:	e73fe004 	addi	fp,fp,-128
   41d28:	e0000326 	beq	fp,zero,41d38 <___vfprintf_internal_r+0x750>
   41d2c:	d8c02a17 	ldw	r3,168(sp)
   41d30:	18c00044 	addi	r3,r3,1
   41d34:	d8c02a15 	stw	r3,168(sp)
   41d38:	90c0008c 	andi	r3,r18,2
   41d3c:	d8c02b15 	stw	r3,172(sp)
   41d40:	18000326 	beq	r3,zero,41d50 <___vfprintf_internal_r+0x768>
   41d44:	d8c02a17 	ldw	r3,168(sp)
   41d48:	18c00084 	addi	r3,r3,2
   41d4c:	d8c02a15 	stw	r3,168(sp)
   41d50:	90c0210c 	andi	r3,r18,132
   41d54:	d8c03015 	stw	r3,192(sp)
   41d58:	1801a31e 	bne	r3,zero,423e8 <___vfprintf_internal_r+0xe00>
   41d5c:	d9003117 	ldw	r4,196(sp)
   41d60:	d8c02a17 	ldw	r3,168(sp)
   41d64:	20e7c83a 	sub	r19,r4,r3
   41d68:	04c19f0e 	bge	zero,r19,423e8 <___vfprintf_internal_r+0xe00>
   41d6c:	02400404 	movi	r9,16
   41d70:	d8c02017 	ldw	r3,128(sp)
   41d74:	d8801f17 	ldw	r2,124(sp)
   41d78:	4cc50d0e 	bge	r9,r19,431b0 <___vfprintf_internal_r+0x1bc8>
   41d7c:	01400174 	movhi	r5,5
   41d80:	2949d184 	addi	r5,r5,10054
   41d84:	dc403b15 	stw	r17,236(sp)
   41d88:	d9403515 	stw	r5,212(sp)
   41d8c:	9823883a 	mov	r17,r19
   41d90:	482d883a 	mov	r22,r9
   41d94:	9027883a 	mov	r19,r18
   41d98:	070001c4 	movi	fp,7
   41d9c:	8025883a 	mov	r18,r16
   41da0:	dc002c17 	ldw	r16,176(sp)
   41da4:	00000306 	br	41db4 <___vfprintf_internal_r+0x7cc>
   41da8:	8c7ffc04 	addi	r17,r17,-16
   41dac:	42000204 	addi	r8,r8,8
   41db0:	b440130e 	bge	r22,r17,41e00 <___vfprintf_internal_r+0x818>
   41db4:	01000174 	movhi	r4,5
   41db8:	18c00404 	addi	r3,r3,16
   41dbc:	10800044 	addi	r2,r2,1
   41dc0:	2109d184 	addi	r4,r4,10054
   41dc4:	41000015 	stw	r4,0(r8)
   41dc8:	45800115 	stw	r22,4(r8)
   41dcc:	d8c02015 	stw	r3,128(sp)
   41dd0:	d8801f15 	stw	r2,124(sp)
   41dd4:	e0bff40e 	bge	fp,r2,41da8 <__alt_data_end+0xfffdaca8>
   41dd8:	d9801e04 	addi	r6,sp,120
   41ddc:	b80b883a 	mov	r5,r23
   41de0:	8009883a 	mov	r4,r16
   41de4:	0048be40 	call	48be4 <__sprint_r>
   41de8:	103f011e 	bne	r2,zero,419f0 <__alt_data_end+0xfffda8f0>
   41dec:	8c7ffc04 	addi	r17,r17,-16
   41df0:	d8c02017 	ldw	r3,128(sp)
   41df4:	d8801f17 	ldw	r2,124(sp)
   41df8:	da000404 	addi	r8,sp,16
   41dfc:	b47fed16 	blt	r22,r17,41db4 <__alt_data_end+0xfffdacb4>
   41e00:	9021883a 	mov	r16,r18
   41e04:	9825883a 	mov	r18,r19
   41e08:	8827883a 	mov	r19,r17
   41e0c:	dc403b17 	ldw	r17,236(sp)
   41e10:	d9403517 	ldw	r5,212(sp)
   41e14:	98c7883a 	add	r3,r19,r3
   41e18:	10800044 	addi	r2,r2,1
   41e1c:	41400015 	stw	r5,0(r8)
   41e20:	44c00115 	stw	r19,4(r8)
   41e24:	d8c02015 	stw	r3,128(sp)
   41e28:	d8801f15 	stw	r2,124(sp)
   41e2c:	010001c4 	movi	r4,7
   41e30:	2082a316 	blt	r4,r2,428c0 <___vfprintf_internal_r+0x12d8>
   41e34:	df002787 	ldb	fp,158(sp)
   41e38:	42000204 	addi	r8,r8,8
   41e3c:	e0000c26 	beq	fp,zero,41e70 <___vfprintf_internal_r+0x888>
   41e40:	d8801f17 	ldw	r2,124(sp)
   41e44:	d9002784 	addi	r4,sp,158
   41e48:	18c00044 	addi	r3,r3,1
   41e4c:	10800044 	addi	r2,r2,1
   41e50:	41000015 	stw	r4,0(r8)
   41e54:	01000044 	movi	r4,1
   41e58:	41000115 	stw	r4,4(r8)
   41e5c:	d8c02015 	stw	r3,128(sp)
   41e60:	d8801f15 	stw	r2,124(sp)
   41e64:	010001c4 	movi	r4,7
   41e68:	20823c16 	blt	r4,r2,4275c <___vfprintf_internal_r+0x1174>
   41e6c:	42000204 	addi	r8,r8,8
   41e70:	d8802b17 	ldw	r2,172(sp)
   41e74:	10000c26 	beq	r2,zero,41ea8 <___vfprintf_internal_r+0x8c0>
   41e78:	d8801f17 	ldw	r2,124(sp)
   41e7c:	d9002704 	addi	r4,sp,156
   41e80:	18c00084 	addi	r3,r3,2
   41e84:	10800044 	addi	r2,r2,1
   41e88:	41000015 	stw	r4,0(r8)
   41e8c:	01000084 	movi	r4,2
   41e90:	41000115 	stw	r4,4(r8)
   41e94:	d8c02015 	stw	r3,128(sp)
   41e98:	d8801f15 	stw	r2,124(sp)
   41e9c:	010001c4 	movi	r4,7
   41ea0:	20823616 	blt	r4,r2,4277c <___vfprintf_internal_r+0x1194>
   41ea4:	42000204 	addi	r8,r8,8
   41ea8:	d9003017 	ldw	r4,192(sp)
   41eac:	00802004 	movi	r2,128
   41eb0:	20819926 	beq	r4,r2,42518 <___vfprintf_internal_r+0xf30>
   41eb4:	d9402917 	ldw	r5,164(sp)
   41eb8:	d8802e17 	ldw	r2,184(sp)
   41ebc:	28adc83a 	sub	r22,r5,r2
   41ec0:	0580310e 	bge	zero,r22,41f88 <___vfprintf_internal_r+0x9a0>
   41ec4:	07000404 	movi	fp,16
   41ec8:	d8801f17 	ldw	r2,124(sp)
   41ecc:	e584140e 	bge	fp,r22,42f20 <___vfprintf_internal_r+0x1938>
   41ed0:	01400174 	movhi	r5,5
   41ed4:	2949cd84 	addi	r5,r5,10038
   41ed8:	dc402915 	stw	r17,164(sp)
   41edc:	d9402b15 	stw	r5,172(sp)
   41ee0:	b023883a 	mov	r17,r22
   41ee4:	04c001c4 	movi	r19,7
   41ee8:	a82d883a 	mov	r22,r21
   41eec:	902b883a 	mov	r21,r18
   41ef0:	8025883a 	mov	r18,r16
   41ef4:	dc002c17 	ldw	r16,176(sp)
   41ef8:	00000306 	br	41f08 <___vfprintf_internal_r+0x920>
   41efc:	8c7ffc04 	addi	r17,r17,-16
   41f00:	42000204 	addi	r8,r8,8
   41f04:	e440110e 	bge	fp,r17,41f4c <___vfprintf_internal_r+0x964>
   41f08:	18c00404 	addi	r3,r3,16
   41f0c:	10800044 	addi	r2,r2,1
   41f10:	45000015 	stw	r20,0(r8)
   41f14:	47000115 	stw	fp,4(r8)
   41f18:	d8c02015 	stw	r3,128(sp)
   41f1c:	d8801f15 	stw	r2,124(sp)
   41f20:	98bff60e 	bge	r19,r2,41efc <__alt_data_end+0xfffdadfc>
   41f24:	d9801e04 	addi	r6,sp,120
   41f28:	b80b883a 	mov	r5,r23
   41f2c:	8009883a 	mov	r4,r16
   41f30:	0048be40 	call	48be4 <__sprint_r>
   41f34:	103eae1e 	bne	r2,zero,419f0 <__alt_data_end+0xfffda8f0>
   41f38:	8c7ffc04 	addi	r17,r17,-16
   41f3c:	d8c02017 	ldw	r3,128(sp)
   41f40:	d8801f17 	ldw	r2,124(sp)
   41f44:	da000404 	addi	r8,sp,16
   41f48:	e47fef16 	blt	fp,r17,41f08 <__alt_data_end+0xfffdae08>
   41f4c:	9021883a 	mov	r16,r18
   41f50:	a825883a 	mov	r18,r21
   41f54:	b02b883a 	mov	r21,r22
   41f58:	882d883a 	mov	r22,r17
   41f5c:	dc402917 	ldw	r17,164(sp)
   41f60:	d9002b17 	ldw	r4,172(sp)
   41f64:	1d87883a 	add	r3,r3,r22
   41f68:	10800044 	addi	r2,r2,1
   41f6c:	41000015 	stw	r4,0(r8)
   41f70:	45800115 	stw	r22,4(r8)
   41f74:	d8c02015 	stw	r3,128(sp)
   41f78:	d8801f15 	stw	r2,124(sp)
   41f7c:	010001c4 	movi	r4,7
   41f80:	2081ee16 	blt	r4,r2,4273c <___vfprintf_internal_r+0x1154>
   41f84:	42000204 	addi	r8,r8,8
   41f88:	9080400c 	andi	r2,r18,256
   41f8c:	1001181e 	bne	r2,zero,423f0 <___vfprintf_internal_r+0xe08>
   41f90:	d9402e17 	ldw	r5,184(sp)
   41f94:	d8801f17 	ldw	r2,124(sp)
   41f98:	44000015 	stw	r16,0(r8)
   41f9c:	1947883a 	add	r3,r3,r5
   41fa0:	10800044 	addi	r2,r2,1
   41fa4:	41400115 	stw	r5,4(r8)
   41fa8:	d8c02015 	stw	r3,128(sp)
   41fac:	d8801f15 	stw	r2,124(sp)
   41fb0:	010001c4 	movi	r4,7
   41fb4:	2081d316 	blt	r4,r2,42704 <___vfprintf_internal_r+0x111c>
   41fb8:	42000204 	addi	r8,r8,8
   41fbc:	9480010c 	andi	r18,r18,4
   41fc0:	90003226 	beq	r18,zero,4208c <___vfprintf_internal_r+0xaa4>
   41fc4:	d9403117 	ldw	r5,196(sp)
   41fc8:	d8802a17 	ldw	r2,168(sp)
   41fcc:	28a1c83a 	sub	r16,r5,r2
   41fd0:	04002e0e 	bge	zero,r16,4208c <___vfprintf_internal_r+0xaa4>
   41fd4:	04400404 	movi	r17,16
   41fd8:	d8801f17 	ldw	r2,124(sp)
   41fdc:	8c04a20e 	bge	r17,r16,43268 <___vfprintf_internal_r+0x1c80>
   41fe0:	01400174 	movhi	r5,5
   41fe4:	2949d184 	addi	r5,r5,10054
   41fe8:	d9403515 	stw	r5,212(sp)
   41fec:	048001c4 	movi	r18,7
   41ff0:	dcc02c17 	ldw	r19,176(sp)
   41ff4:	00000306 	br	42004 <___vfprintf_internal_r+0xa1c>
   41ff8:	843ffc04 	addi	r16,r16,-16
   41ffc:	42000204 	addi	r8,r8,8
   42000:	8c00130e 	bge	r17,r16,42050 <___vfprintf_internal_r+0xa68>
   42004:	01000174 	movhi	r4,5
   42008:	18c00404 	addi	r3,r3,16
   4200c:	10800044 	addi	r2,r2,1
   42010:	2109d184 	addi	r4,r4,10054
   42014:	41000015 	stw	r4,0(r8)
   42018:	44400115 	stw	r17,4(r8)
   4201c:	d8c02015 	stw	r3,128(sp)
   42020:	d8801f15 	stw	r2,124(sp)
   42024:	90bff40e 	bge	r18,r2,41ff8 <__alt_data_end+0xfffdaef8>
   42028:	d9801e04 	addi	r6,sp,120
   4202c:	b80b883a 	mov	r5,r23
   42030:	9809883a 	mov	r4,r19
   42034:	0048be40 	call	48be4 <__sprint_r>
   42038:	103e6d1e 	bne	r2,zero,419f0 <__alt_data_end+0xfffda8f0>
   4203c:	843ffc04 	addi	r16,r16,-16
   42040:	d8c02017 	ldw	r3,128(sp)
   42044:	d8801f17 	ldw	r2,124(sp)
   42048:	da000404 	addi	r8,sp,16
   4204c:	8c3fed16 	blt	r17,r16,42004 <__alt_data_end+0xfffdaf04>
   42050:	d9403517 	ldw	r5,212(sp)
   42054:	1c07883a 	add	r3,r3,r16
   42058:	10800044 	addi	r2,r2,1
   4205c:	41400015 	stw	r5,0(r8)
   42060:	44000115 	stw	r16,4(r8)
   42064:	d8c02015 	stw	r3,128(sp)
   42068:	d8801f15 	stw	r2,124(sp)
   4206c:	010001c4 	movi	r4,7
   42070:	2080060e 	bge	r4,r2,4208c <___vfprintf_internal_r+0xaa4>
   42074:	d9002c17 	ldw	r4,176(sp)
   42078:	d9801e04 	addi	r6,sp,120
   4207c:	b80b883a 	mov	r5,r23
   42080:	0048be40 	call	48be4 <__sprint_r>
   42084:	103e5a1e 	bne	r2,zero,419f0 <__alt_data_end+0xfffda8f0>
   42088:	d8c02017 	ldw	r3,128(sp)
   4208c:	d8803117 	ldw	r2,196(sp)
   42090:	d9002a17 	ldw	r4,168(sp)
   42094:	1100010e 	bge	r2,r4,4209c <___vfprintf_internal_r+0xab4>
   42098:	2005883a 	mov	r2,r4
   4209c:	d9402f17 	ldw	r5,188(sp)
   420a0:	288b883a 	add	r5,r5,r2
   420a4:	d9402f15 	stw	r5,188(sp)
   420a8:	18019e1e 	bne	r3,zero,42724 <___vfprintf_internal_r+0x113c>
   420ac:	a8800007 	ldb	r2,0(r21)
   420b0:	d8001f15 	stw	zero,124(sp)
   420b4:	da000404 	addi	r8,sp,16
   420b8:	103d851e 	bne	r2,zero,416d0 <__alt_data_end+0xfffda5d0>
   420bc:	a821883a 	mov	r16,r21
   420c0:	003d9b06 	br	41730 <__alt_data_end+0xfffda630>
   420c4:	18c03fcc 	andi	r3,r3,255
   420c8:	1805c11e 	bne	r3,zero,437d0 <___vfprintf_internal_r+0x21e8>
   420cc:	94800414 	ori	r18,r18,16
   420d0:	9080080c 	andi	r2,r18,32
   420d4:	10020c26 	beq	r2,zero,42908 <___vfprintf_internal_r+0x1320>
   420d8:	d8802d17 	ldw	r2,180(sp)
   420dc:	d9002917 	ldw	r4,164(sp)
   420e0:	d8002785 	stb	zero,158(sp)
   420e4:	10c00204 	addi	r3,r2,8
   420e8:	14c00017 	ldw	r19,0(r2)
   420ec:	15800117 	ldw	r22,4(r2)
   420f0:	20040f16 	blt	r4,zero,43130 <___vfprintf_internal_r+0x1b48>
   420f4:	013fdfc4 	movi	r4,-129
   420f8:	9d84b03a 	or	r2,r19,r22
   420fc:	d8c02d15 	stw	r3,180(sp)
   42100:	9124703a 	and	r18,r18,r4
   42104:	0039883a 	mov	fp,zero
   42108:	103e891e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdaa30>
   4210c:	d9002917 	ldw	r4,164(sp)
   42110:	2002c11e 	bne	r4,zero,42c18 <___vfprintf_internal_r+0x1630>
   42114:	d8002915 	stw	zero,164(sp)
   42118:	d8002e15 	stw	zero,184(sp)
   4211c:	dc001e04 	addi	r16,sp,120
   42120:	003ef806 	br	41d04 <__alt_data_end+0xfffdac04>
   42124:	18c03fcc 	andi	r3,r3,255
   42128:	18059d1e 	bne	r3,zero,437a0 <___vfprintf_internal_r+0x21b8>
   4212c:	01400174 	movhi	r5,5
   42130:	2949c104 	addi	r5,r5,9988
   42134:	d9403915 	stw	r5,228(sp)
   42138:	9080080c 	andi	r2,r18,32
   4213c:	10005226 	beq	r2,zero,42288 <___vfprintf_internal_r+0xca0>
   42140:	d8802d17 	ldw	r2,180(sp)
   42144:	14c00017 	ldw	r19,0(r2)
   42148:	15800117 	ldw	r22,4(r2)
   4214c:	10800204 	addi	r2,r2,8
   42150:	d8802d15 	stw	r2,180(sp)
   42154:	9080004c 	andi	r2,r18,1
   42158:	10019026 	beq	r2,zero,4279c <___vfprintf_internal_r+0x11b4>
   4215c:	9d84b03a 	or	r2,r19,r22
   42160:	10036926 	beq	r2,zero,42f08 <___vfprintf_internal_r+0x1920>
   42164:	d8c02917 	ldw	r3,164(sp)
   42168:	00800c04 	movi	r2,48
   4216c:	d8802705 	stb	r2,156(sp)
   42170:	dc402745 	stb	r17,157(sp)
   42174:	d8002785 	stb	zero,158(sp)
   42178:	90800094 	ori	r2,r18,2
   4217c:	18045d16 	blt	r3,zero,432f4 <___vfprintf_internal_r+0x1d0c>
   42180:	00bfdfc4 	movi	r2,-129
   42184:	90a4703a 	and	r18,r18,r2
   42188:	94800094 	ori	r18,r18,2
   4218c:	0039883a 	mov	fp,zero
   42190:	d9003917 	ldw	r4,228(sp)
   42194:	dc001e04 	addi	r16,sp,120
   42198:	988003cc 	andi	r2,r19,15
   4219c:	b006973a 	slli	r3,r22,28
   421a0:	2085883a 	add	r2,r4,r2
   421a4:	9826d13a 	srli	r19,r19,4
   421a8:	10800003 	ldbu	r2,0(r2)
   421ac:	b02cd13a 	srli	r22,r22,4
   421b0:	843fffc4 	addi	r16,r16,-1
   421b4:	1ce6b03a 	or	r19,r3,r19
   421b8:	80800005 	stb	r2,0(r16)
   421bc:	9d84b03a 	or	r2,r19,r22
   421c0:	103ff51e 	bne	r2,zero,42198 <__alt_data_end+0xfffdb098>
   421c4:	d8c02817 	ldw	r3,160(sp)
   421c8:	1c07c83a 	sub	r3,r3,r16
   421cc:	d8c02e15 	stw	r3,184(sp)
   421d0:	003ecc06 	br	41d04 <__alt_data_end+0xfffdac04>
   421d4:	18c03fcc 	andi	r3,r3,255
   421d8:	183e9f26 	beq	r3,zero,41c58 <__alt_data_end+0xfffdab58>
   421dc:	d9c02785 	stb	r7,158(sp)
   421e0:	003e9d06 	br	41c58 <__alt_data_end+0xfffdab58>
   421e4:	00c00044 	movi	r3,1
   421e8:	01c00ac4 	movi	r7,43
   421ec:	ac400007 	ldb	r17,0(r21)
   421f0:	003d5e06 	br	4176c <__alt_data_end+0xfffda66c>
   421f4:	94800814 	ori	r18,r18,32
   421f8:	ac400007 	ldb	r17,0(r21)
   421fc:	003d5b06 	br	4176c <__alt_data_end+0xfffda66c>
   42200:	d8c02d17 	ldw	r3,180(sp)
   42204:	d8002785 	stb	zero,158(sp)
   42208:	1c000017 	ldw	r16,0(r3)
   4220c:	1cc00104 	addi	r19,r3,4
   42210:	80041926 	beq	r16,zero,43278 <___vfprintf_internal_r+0x1c90>
   42214:	d9002917 	ldw	r4,164(sp)
   42218:	2003d016 	blt	r4,zero,4315c <___vfprintf_internal_r+0x1b74>
   4221c:	200d883a 	mov	r6,r4
   42220:	000b883a 	mov	r5,zero
   42224:	8009883a 	mov	r4,r16
   42228:	da003d15 	stw	r8,244(sp)
   4222c:	0046df80 	call	46df8 <memchr>
   42230:	da003d17 	ldw	r8,244(sp)
   42234:	10045426 	beq	r2,zero,43388 <___vfprintf_internal_r+0x1da0>
   42238:	1405c83a 	sub	r2,r2,r16
   4223c:	d8802e15 	stw	r2,184(sp)
   42240:	1003cc16 	blt	r2,zero,43174 <___vfprintf_internal_r+0x1b8c>
   42244:	df002783 	ldbu	fp,158(sp)
   42248:	d8802a15 	stw	r2,168(sp)
   4224c:	dcc02d15 	stw	r19,180(sp)
   42250:	d8002915 	stw	zero,164(sp)
   42254:	d8003215 	stw	zero,200(sp)
   42258:	003eb006 	br	41d1c <__alt_data_end+0xfffdac1c>
   4225c:	18c03fcc 	andi	r3,r3,255
   42260:	183f9b26 	beq	r3,zero,420d0 <__alt_data_end+0xfffdafd0>
   42264:	d9c02785 	stb	r7,158(sp)
   42268:	003f9906 	br	420d0 <__alt_data_end+0xfffdafd0>
   4226c:	18c03fcc 	andi	r3,r3,255
   42270:	1805551e 	bne	r3,zero,437c8 <___vfprintf_internal_r+0x21e0>
   42274:	01400174 	movhi	r5,5
   42278:	2949c604 	addi	r5,r5,10008
   4227c:	d9403915 	stw	r5,228(sp)
   42280:	9080080c 	andi	r2,r18,32
   42284:	103fae1e 	bne	r2,zero,42140 <__alt_data_end+0xfffdb040>
   42288:	9080040c 	andi	r2,r18,16
   4228c:	1002de26 	beq	r2,zero,42e08 <___vfprintf_internal_r+0x1820>
   42290:	d8c02d17 	ldw	r3,180(sp)
   42294:	002d883a 	mov	r22,zero
   42298:	1cc00017 	ldw	r19,0(r3)
   4229c:	18c00104 	addi	r3,r3,4
   422a0:	d8c02d15 	stw	r3,180(sp)
   422a4:	003fab06 	br	42154 <__alt_data_end+0xfffdb054>
   422a8:	38803fcc 	andi	r2,r7,255
   422ac:	1080201c 	xori	r2,r2,128
   422b0:	10bfe004 	addi	r2,r2,-128
   422b4:	1002d21e 	bne	r2,zero,42e00 <___vfprintf_internal_r+0x1818>
   422b8:	00c00044 	movi	r3,1
   422bc:	01c00804 	movi	r7,32
   422c0:	ac400007 	ldb	r17,0(r21)
   422c4:	003d2906 	br	4176c <__alt_data_end+0xfffda66c>
   422c8:	94800054 	ori	r18,r18,1
   422cc:	ac400007 	ldb	r17,0(r21)
   422d0:	003d2606 	br	4176c <__alt_data_end+0xfffda66c>
   422d4:	18c03fcc 	andi	r3,r3,255
   422d8:	183e0526 	beq	r3,zero,41af0 <__alt_data_end+0xfffda9f0>
   422dc:	d9c02785 	stb	r7,158(sp)
   422e0:	003e0306 	br	41af0 <__alt_data_end+0xfffda9f0>
   422e4:	94801014 	ori	r18,r18,64
   422e8:	ac400007 	ldb	r17,0(r21)
   422ec:	003d1f06 	br	4176c <__alt_data_end+0xfffda66c>
   422f0:	ac400007 	ldb	r17,0(r21)
   422f4:	8a438726 	beq	r17,r9,43114 <___vfprintf_internal_r+0x1b2c>
   422f8:	94800414 	ori	r18,r18,16
   422fc:	003d1b06 	br	4176c <__alt_data_end+0xfffda66c>
   42300:	18c03fcc 	andi	r3,r3,255
   42304:	1805341e 	bne	r3,zero,437d8 <___vfprintf_internal_r+0x21f0>
   42308:	9080080c 	andi	r2,r18,32
   4230c:	1002cd26 	beq	r2,zero,42e44 <___vfprintf_internal_r+0x185c>
   42310:	d9402d17 	ldw	r5,180(sp)
   42314:	d9002f17 	ldw	r4,188(sp)
   42318:	28800017 	ldw	r2,0(r5)
   4231c:	2007d7fa 	srai	r3,r4,31
   42320:	29400104 	addi	r5,r5,4
   42324:	d9402d15 	stw	r5,180(sp)
   42328:	11000015 	stw	r4,0(r2)
   4232c:	10c00115 	stw	r3,4(r2)
   42330:	003ce506 	br	416c8 <__alt_data_end+0xfffda5c8>
   42334:	d8c02d17 	ldw	r3,180(sp)
   42338:	d9002d17 	ldw	r4,180(sp)
   4233c:	d8002785 	stb	zero,158(sp)
   42340:	18800017 	ldw	r2,0(r3)
   42344:	21000104 	addi	r4,r4,4
   42348:	00c00044 	movi	r3,1
   4234c:	d8c02a15 	stw	r3,168(sp)
   42350:	d8801405 	stb	r2,80(sp)
   42354:	d9002d15 	stw	r4,180(sp)
   42358:	d8c02e15 	stw	r3,184(sp)
   4235c:	d8002915 	stw	zero,164(sp)
   42360:	d8003215 	stw	zero,200(sp)
   42364:	dc001404 	addi	r16,sp,80
   42368:	0039883a 	mov	fp,zero
   4236c:	003e7206 	br	41d38 <__alt_data_end+0xfffdac38>
   42370:	01000174 	movhi	r4,5
   42374:	2109c604 	addi	r4,r4,10008
   42378:	0039883a 	mov	fp,zero
   4237c:	d9003915 	stw	r4,228(sp)
   42380:	04401e04 	movi	r17,120
   42384:	003f8206 	br	42190 <__alt_data_end+0xfffdb090>
   42388:	18c03fcc 	andi	r3,r3,255
   4238c:	1805061e 	bne	r3,zero,437a8 <___vfprintf_internal_r+0x21c0>
   42390:	883d9126 	beq	r17,zero,419d8 <__alt_data_end+0xfffda8d8>
   42394:	00c00044 	movi	r3,1
   42398:	d8c02a15 	stw	r3,168(sp)
   4239c:	dc401405 	stb	r17,80(sp)
   423a0:	d8002785 	stb	zero,158(sp)
   423a4:	003fec06 	br	42358 <__alt_data_end+0xfffdb258>
   423a8:	01400174 	movhi	r5,5
   423ac:	2949c604 	addi	r5,r5,10008
   423b0:	d9403915 	stw	r5,228(sp)
   423b4:	d8c02d15 	stw	r3,180(sp)
   423b8:	1025883a 	mov	r18,r2
   423bc:	04401e04 	movi	r17,120
   423c0:	9d84b03a 	or	r2,r19,r22
   423c4:	1000fc1e 	bne	r2,zero,427b8 <___vfprintf_internal_r+0x11d0>
   423c8:	0039883a 	mov	fp,zero
   423cc:	00800084 	movi	r2,2
   423d0:	10803fcc 	andi	r2,r2,255
   423d4:	00c00044 	movi	r3,1
   423d8:	10c20f26 	beq	r2,r3,42c18 <___vfprintf_internal_r+0x1630>
   423dc:	00c00084 	movi	r3,2
   423e0:	10fd6326 	beq	r2,r3,41970 <__alt_data_end+0xfffda870>
   423e4:	003e2d06 	br	41c9c <__alt_data_end+0xfffdab9c>
   423e8:	d8c02017 	ldw	r3,128(sp)
   423ec:	003e9306 	br	41e3c <__alt_data_end+0xfffdad3c>
   423f0:	00801944 	movi	r2,101
   423f4:	14407e0e 	bge	r2,r17,425f0 <___vfprintf_internal_r+0x1008>
   423f8:	d9003617 	ldw	r4,216(sp)
   423fc:	d9403817 	ldw	r5,224(sp)
   42400:	000d883a 	mov	r6,zero
   42404:	000f883a 	mov	r7,zero
   42408:	d8c03c15 	stw	r3,240(sp)
   4240c:	da003d15 	stw	r8,244(sp)
   42410:	004c85c0 	call	4c85c <__eqdf2>
   42414:	d8c03c17 	ldw	r3,240(sp)
   42418:	da003d17 	ldw	r8,244(sp)
   4241c:	1000f71e 	bne	r2,zero,427fc <___vfprintf_internal_r+0x1214>
   42420:	d8801f17 	ldw	r2,124(sp)
   42424:	01000174 	movhi	r4,5
   42428:	2109cd04 	addi	r4,r4,10036
   4242c:	18c00044 	addi	r3,r3,1
   42430:	10800044 	addi	r2,r2,1
   42434:	41000015 	stw	r4,0(r8)
   42438:	01000044 	movi	r4,1
   4243c:	41000115 	stw	r4,4(r8)
   42440:	d8c02015 	stw	r3,128(sp)
   42444:	d8801f15 	stw	r2,124(sp)
   42448:	010001c4 	movi	r4,7
   4244c:	2082b816 	blt	r4,r2,42f30 <___vfprintf_internal_r+0x1948>
   42450:	42000204 	addi	r8,r8,8
   42454:	d8802617 	ldw	r2,152(sp)
   42458:	d9403317 	ldw	r5,204(sp)
   4245c:	11400216 	blt	r2,r5,42468 <___vfprintf_internal_r+0xe80>
   42460:	9080004c 	andi	r2,r18,1
   42464:	103ed526 	beq	r2,zero,41fbc <__alt_data_end+0xfffdaebc>
   42468:	d8803717 	ldw	r2,220(sp)
   4246c:	d9003417 	ldw	r4,208(sp)
   42470:	d9403717 	ldw	r5,220(sp)
   42474:	1887883a 	add	r3,r3,r2
   42478:	d8801f17 	ldw	r2,124(sp)
   4247c:	41000015 	stw	r4,0(r8)
   42480:	41400115 	stw	r5,4(r8)
   42484:	10800044 	addi	r2,r2,1
   42488:	d8c02015 	stw	r3,128(sp)
   4248c:	d8801f15 	stw	r2,124(sp)
   42490:	010001c4 	movi	r4,7
   42494:	20832916 	blt	r4,r2,4313c <___vfprintf_internal_r+0x1b54>
   42498:	42000204 	addi	r8,r8,8
   4249c:	d8803317 	ldw	r2,204(sp)
   424a0:	143fffc4 	addi	r16,r2,-1
   424a4:	043ec50e 	bge	zero,r16,41fbc <__alt_data_end+0xfffdaebc>
   424a8:	04400404 	movi	r17,16
   424ac:	d8801f17 	ldw	r2,124(sp)
   424b0:	8c00880e 	bge	r17,r16,426d4 <___vfprintf_internal_r+0x10ec>
   424b4:	01400174 	movhi	r5,5
   424b8:	2949cd84 	addi	r5,r5,10038
   424bc:	d9402b15 	stw	r5,172(sp)
   424c0:	058001c4 	movi	r22,7
   424c4:	dcc02c17 	ldw	r19,176(sp)
   424c8:	00000306 	br	424d8 <___vfprintf_internal_r+0xef0>
   424cc:	42000204 	addi	r8,r8,8
   424d0:	843ffc04 	addi	r16,r16,-16
   424d4:	8c00820e 	bge	r17,r16,426e0 <___vfprintf_internal_r+0x10f8>
   424d8:	18c00404 	addi	r3,r3,16
   424dc:	10800044 	addi	r2,r2,1
   424e0:	45000015 	stw	r20,0(r8)
   424e4:	44400115 	stw	r17,4(r8)
   424e8:	d8c02015 	stw	r3,128(sp)
   424ec:	d8801f15 	stw	r2,124(sp)
   424f0:	b0bff60e 	bge	r22,r2,424cc <__alt_data_end+0xfffdb3cc>
   424f4:	d9801e04 	addi	r6,sp,120
   424f8:	b80b883a 	mov	r5,r23
   424fc:	9809883a 	mov	r4,r19
   42500:	0048be40 	call	48be4 <__sprint_r>
   42504:	103d3a1e 	bne	r2,zero,419f0 <__alt_data_end+0xfffda8f0>
   42508:	d8c02017 	ldw	r3,128(sp)
   4250c:	d8801f17 	ldw	r2,124(sp)
   42510:	da000404 	addi	r8,sp,16
   42514:	003fee06 	br	424d0 <__alt_data_end+0xfffdb3d0>
   42518:	d9403117 	ldw	r5,196(sp)
   4251c:	d8802a17 	ldw	r2,168(sp)
   42520:	28adc83a 	sub	r22,r5,r2
   42524:	05be630e 	bge	zero,r22,41eb4 <__alt_data_end+0xfffdadb4>
   42528:	07000404 	movi	fp,16
   4252c:	d8801f17 	ldw	r2,124(sp)
   42530:	e5838f0e 	bge	fp,r22,43370 <___vfprintf_internal_r+0x1d88>
   42534:	01400174 	movhi	r5,5
   42538:	2949cd84 	addi	r5,r5,10038
   4253c:	dc403015 	stw	r17,192(sp)
   42540:	d9402b15 	stw	r5,172(sp)
   42544:	b023883a 	mov	r17,r22
   42548:	04c001c4 	movi	r19,7
   4254c:	a82d883a 	mov	r22,r21
   42550:	902b883a 	mov	r21,r18
   42554:	8025883a 	mov	r18,r16
   42558:	dc002c17 	ldw	r16,176(sp)
   4255c:	00000306 	br	4256c <___vfprintf_internal_r+0xf84>
   42560:	8c7ffc04 	addi	r17,r17,-16
   42564:	42000204 	addi	r8,r8,8
   42568:	e440110e 	bge	fp,r17,425b0 <___vfprintf_internal_r+0xfc8>
   4256c:	18c00404 	addi	r3,r3,16
   42570:	10800044 	addi	r2,r2,1
   42574:	45000015 	stw	r20,0(r8)
   42578:	47000115 	stw	fp,4(r8)
   4257c:	d8c02015 	stw	r3,128(sp)
   42580:	d8801f15 	stw	r2,124(sp)
   42584:	98bff60e 	bge	r19,r2,42560 <__alt_data_end+0xfffdb460>
   42588:	d9801e04 	addi	r6,sp,120
   4258c:	b80b883a 	mov	r5,r23
   42590:	8009883a 	mov	r4,r16
   42594:	0048be40 	call	48be4 <__sprint_r>
   42598:	103d151e 	bne	r2,zero,419f0 <__alt_data_end+0xfffda8f0>
   4259c:	8c7ffc04 	addi	r17,r17,-16
   425a0:	d8c02017 	ldw	r3,128(sp)
   425a4:	d8801f17 	ldw	r2,124(sp)
   425a8:	da000404 	addi	r8,sp,16
   425ac:	e47fef16 	blt	fp,r17,4256c <__alt_data_end+0xfffdb46c>
   425b0:	9021883a 	mov	r16,r18
   425b4:	a825883a 	mov	r18,r21
   425b8:	b02b883a 	mov	r21,r22
   425bc:	882d883a 	mov	r22,r17
   425c0:	dc403017 	ldw	r17,192(sp)
   425c4:	d9002b17 	ldw	r4,172(sp)
   425c8:	1d87883a 	add	r3,r3,r22
   425cc:	10800044 	addi	r2,r2,1
   425d0:	41000015 	stw	r4,0(r8)
   425d4:	45800115 	stw	r22,4(r8)
   425d8:	d8c02015 	stw	r3,128(sp)
   425dc:	d8801f15 	stw	r2,124(sp)
   425e0:	010001c4 	movi	r4,7
   425e4:	20818e16 	blt	r4,r2,42c20 <___vfprintf_internal_r+0x1638>
   425e8:	42000204 	addi	r8,r8,8
   425ec:	003e3106 	br	41eb4 <__alt_data_end+0xfffdadb4>
   425f0:	d9403317 	ldw	r5,204(sp)
   425f4:	00800044 	movi	r2,1
   425f8:	18c00044 	addi	r3,r3,1
   425fc:	1141530e 	bge	r2,r5,42b4c <___vfprintf_internal_r+0x1564>
   42600:	dc401f17 	ldw	r17,124(sp)
   42604:	00800044 	movi	r2,1
   42608:	40800115 	stw	r2,4(r8)
   4260c:	8c400044 	addi	r17,r17,1
   42610:	44000015 	stw	r16,0(r8)
   42614:	d8c02015 	stw	r3,128(sp)
   42618:	dc401f15 	stw	r17,124(sp)
   4261c:	008001c4 	movi	r2,7
   42620:	14416b16 	blt	r2,r17,42bd0 <___vfprintf_internal_r+0x15e8>
   42624:	42000204 	addi	r8,r8,8
   42628:	d8803717 	ldw	r2,220(sp)
   4262c:	d9003417 	ldw	r4,208(sp)
   42630:	8c400044 	addi	r17,r17,1
   42634:	10c7883a 	add	r3,r2,r3
   42638:	40800115 	stw	r2,4(r8)
   4263c:	41000015 	stw	r4,0(r8)
   42640:	d8c02015 	stw	r3,128(sp)
   42644:	dc401f15 	stw	r17,124(sp)
   42648:	008001c4 	movi	r2,7
   4264c:	14416916 	blt	r2,r17,42bf4 <___vfprintf_internal_r+0x160c>
   42650:	45800204 	addi	r22,r8,8
   42654:	d9003617 	ldw	r4,216(sp)
   42658:	d9403817 	ldw	r5,224(sp)
   4265c:	000d883a 	mov	r6,zero
   42660:	000f883a 	mov	r7,zero
   42664:	d8c03c15 	stw	r3,240(sp)
   42668:	004c85c0 	call	4c85c <__eqdf2>
   4266c:	d8c03c17 	ldw	r3,240(sp)
   42670:	1000bc26 	beq	r2,zero,42964 <___vfprintf_internal_r+0x137c>
   42674:	d9403317 	ldw	r5,204(sp)
   42678:	84000044 	addi	r16,r16,1
   4267c:	8c400044 	addi	r17,r17,1
   42680:	28bfffc4 	addi	r2,r5,-1
   42684:	1887883a 	add	r3,r3,r2
   42688:	b0800115 	stw	r2,4(r22)
   4268c:	b4000015 	stw	r16,0(r22)
   42690:	d8c02015 	stw	r3,128(sp)
   42694:	dc401f15 	stw	r17,124(sp)
   42698:	008001c4 	movi	r2,7
   4269c:	14414316 	blt	r2,r17,42bac <___vfprintf_internal_r+0x15c4>
   426a0:	b5800204 	addi	r22,r22,8
   426a4:	d9003a17 	ldw	r4,232(sp)
   426a8:	df0022c4 	addi	fp,sp,139
   426ac:	8c400044 	addi	r17,r17,1
   426b0:	20c7883a 	add	r3,r4,r3
   426b4:	b7000015 	stw	fp,0(r22)
   426b8:	b1000115 	stw	r4,4(r22)
   426bc:	d8c02015 	stw	r3,128(sp)
   426c0:	dc401f15 	stw	r17,124(sp)
   426c4:	008001c4 	movi	r2,7
   426c8:	14400e16 	blt	r2,r17,42704 <___vfprintf_internal_r+0x111c>
   426cc:	b2000204 	addi	r8,r22,8
   426d0:	003e3a06 	br	41fbc <__alt_data_end+0xfffdaebc>
   426d4:	01000174 	movhi	r4,5
   426d8:	2109cd84 	addi	r4,r4,10038
   426dc:	d9002b15 	stw	r4,172(sp)
   426e0:	d9002b17 	ldw	r4,172(sp)
   426e4:	1c07883a 	add	r3,r3,r16
   426e8:	44000115 	stw	r16,4(r8)
   426ec:	41000015 	stw	r4,0(r8)
   426f0:	10800044 	addi	r2,r2,1
   426f4:	d8c02015 	stw	r3,128(sp)
   426f8:	d8801f15 	stw	r2,124(sp)
   426fc:	010001c4 	movi	r4,7
   42700:	20be2d0e 	bge	r4,r2,41fb8 <__alt_data_end+0xfffdaeb8>
   42704:	d9002c17 	ldw	r4,176(sp)
   42708:	d9801e04 	addi	r6,sp,120
   4270c:	b80b883a 	mov	r5,r23
   42710:	0048be40 	call	48be4 <__sprint_r>
   42714:	103cb61e 	bne	r2,zero,419f0 <__alt_data_end+0xfffda8f0>
   42718:	d8c02017 	ldw	r3,128(sp)
   4271c:	da000404 	addi	r8,sp,16
   42720:	003e2606 	br	41fbc <__alt_data_end+0xfffdaebc>
   42724:	d9002c17 	ldw	r4,176(sp)
   42728:	d9801e04 	addi	r6,sp,120
   4272c:	b80b883a 	mov	r5,r23
   42730:	0048be40 	call	48be4 <__sprint_r>
   42734:	103e5d26 	beq	r2,zero,420ac <__alt_data_end+0xfffdafac>
   42738:	003cad06 	br	419f0 <__alt_data_end+0xfffda8f0>
   4273c:	d9002c17 	ldw	r4,176(sp)
   42740:	d9801e04 	addi	r6,sp,120
   42744:	b80b883a 	mov	r5,r23
   42748:	0048be40 	call	48be4 <__sprint_r>
   4274c:	103ca81e 	bne	r2,zero,419f0 <__alt_data_end+0xfffda8f0>
   42750:	d8c02017 	ldw	r3,128(sp)
   42754:	da000404 	addi	r8,sp,16
   42758:	003e0b06 	br	41f88 <__alt_data_end+0xfffdae88>
   4275c:	d9002c17 	ldw	r4,176(sp)
   42760:	d9801e04 	addi	r6,sp,120
   42764:	b80b883a 	mov	r5,r23
   42768:	0048be40 	call	48be4 <__sprint_r>
   4276c:	103ca01e 	bne	r2,zero,419f0 <__alt_data_end+0xfffda8f0>
   42770:	d8c02017 	ldw	r3,128(sp)
   42774:	da000404 	addi	r8,sp,16
   42778:	003dbd06 	br	41e70 <__alt_data_end+0xfffdad70>
   4277c:	d9002c17 	ldw	r4,176(sp)
   42780:	d9801e04 	addi	r6,sp,120
   42784:	b80b883a 	mov	r5,r23
   42788:	0048be40 	call	48be4 <__sprint_r>
   4278c:	103c981e 	bne	r2,zero,419f0 <__alt_data_end+0xfffda8f0>
   42790:	d8c02017 	ldw	r3,128(sp)
   42794:	da000404 	addi	r8,sp,16
   42798:	003dc306 	br	41ea8 <__alt_data_end+0xfffdada8>
   4279c:	d8802917 	ldw	r2,164(sp)
   427a0:	d8002785 	stb	zero,158(sp)
   427a4:	103f0616 	blt	r2,zero,423c0 <__alt_data_end+0xfffdb2c0>
   427a8:	00ffdfc4 	movi	r3,-129
   427ac:	9d84b03a 	or	r2,r19,r22
   427b0:	90e4703a 	and	r18,r18,r3
   427b4:	103c6b26 	beq	r2,zero,41964 <__alt_data_end+0xfffda864>
   427b8:	0039883a 	mov	fp,zero
   427bc:	003e7406 	br	42190 <__alt_data_end+0xfffdb090>
   427c0:	9080040c 	andi	r2,r18,16
   427c4:	1001b326 	beq	r2,zero,42e94 <___vfprintf_internal_r+0x18ac>
   427c8:	d9002d17 	ldw	r4,180(sp)
   427cc:	d9402917 	ldw	r5,164(sp)
   427d0:	d8002785 	stb	zero,158(sp)
   427d4:	20800104 	addi	r2,r4,4
   427d8:	24c00017 	ldw	r19,0(r4)
   427dc:	002d883a 	mov	r22,zero
   427e0:	2801b516 	blt	r5,zero,42eb8 <___vfprintf_internal_r+0x18d0>
   427e4:	00ffdfc4 	movi	r3,-129
   427e8:	d8802d15 	stw	r2,180(sp)
   427ec:	90e4703a 	and	r18,r18,r3
   427f0:	983d2726 	beq	r19,zero,41c90 <__alt_data_end+0xfffdab90>
   427f4:	0039883a 	mov	fp,zero
   427f8:	003d2a06 	br	41ca4 <__alt_data_end+0xfffdaba4>
   427fc:	dc402617 	ldw	r17,152(sp)
   42800:	0441d30e 	bge	zero,r17,42f50 <___vfprintf_internal_r+0x1968>
   42804:	dc403217 	ldw	r17,200(sp)
   42808:	d8803317 	ldw	r2,204(sp)
   4280c:	1440010e 	bge	r2,r17,42814 <___vfprintf_internal_r+0x122c>
   42810:	1023883a 	mov	r17,r2
   42814:	04400a0e 	bge	zero,r17,42840 <___vfprintf_internal_r+0x1258>
   42818:	d8801f17 	ldw	r2,124(sp)
   4281c:	1c47883a 	add	r3,r3,r17
   42820:	44000015 	stw	r16,0(r8)
   42824:	10800044 	addi	r2,r2,1
   42828:	44400115 	stw	r17,4(r8)
   4282c:	d8c02015 	stw	r3,128(sp)
   42830:	d8801f15 	stw	r2,124(sp)
   42834:	010001c4 	movi	r4,7
   42838:	20826516 	blt	r4,r2,431d0 <___vfprintf_internal_r+0x1be8>
   4283c:	42000204 	addi	r8,r8,8
   42840:	88026116 	blt	r17,zero,431c8 <___vfprintf_internal_r+0x1be0>
   42844:	d9003217 	ldw	r4,200(sp)
   42848:	2463c83a 	sub	r17,r4,r17
   4284c:	04407b0e 	bge	zero,r17,42a3c <___vfprintf_internal_r+0x1454>
   42850:	05800404 	movi	r22,16
   42854:	d8801f17 	ldw	r2,124(sp)
   42858:	b4419d0e 	bge	r22,r17,42ed0 <___vfprintf_internal_r+0x18e8>
   4285c:	01000174 	movhi	r4,5
   42860:	2109cd84 	addi	r4,r4,10038
   42864:	d9002b15 	stw	r4,172(sp)
   42868:	070001c4 	movi	fp,7
   4286c:	dcc02c17 	ldw	r19,176(sp)
   42870:	00000306 	br	42880 <___vfprintf_internal_r+0x1298>
   42874:	42000204 	addi	r8,r8,8
   42878:	8c7ffc04 	addi	r17,r17,-16
   4287c:	b441970e 	bge	r22,r17,42edc <___vfprintf_internal_r+0x18f4>
   42880:	18c00404 	addi	r3,r3,16
   42884:	10800044 	addi	r2,r2,1
   42888:	45000015 	stw	r20,0(r8)
   4288c:	45800115 	stw	r22,4(r8)
   42890:	d8c02015 	stw	r3,128(sp)
   42894:	d8801f15 	stw	r2,124(sp)
   42898:	e0bff60e 	bge	fp,r2,42874 <__alt_data_end+0xfffdb774>
   4289c:	d9801e04 	addi	r6,sp,120
   428a0:	b80b883a 	mov	r5,r23
   428a4:	9809883a 	mov	r4,r19
   428a8:	0048be40 	call	48be4 <__sprint_r>
   428ac:	103c501e 	bne	r2,zero,419f0 <__alt_data_end+0xfffda8f0>
   428b0:	d8c02017 	ldw	r3,128(sp)
   428b4:	d8801f17 	ldw	r2,124(sp)
   428b8:	da000404 	addi	r8,sp,16
   428bc:	003fee06 	br	42878 <__alt_data_end+0xfffdb778>
   428c0:	d9002c17 	ldw	r4,176(sp)
   428c4:	d9801e04 	addi	r6,sp,120
   428c8:	b80b883a 	mov	r5,r23
   428cc:	0048be40 	call	48be4 <__sprint_r>
   428d0:	103c471e 	bne	r2,zero,419f0 <__alt_data_end+0xfffda8f0>
   428d4:	d8c02017 	ldw	r3,128(sp)
   428d8:	df002787 	ldb	fp,158(sp)
   428dc:	da000404 	addi	r8,sp,16
   428e0:	003d5606 	br	41e3c <__alt_data_end+0xfffdad3c>
   428e4:	9080040c 	andi	r2,r18,16
   428e8:	10016126 	beq	r2,zero,42e70 <___vfprintf_internal_r+0x1888>
   428ec:	d8802d17 	ldw	r2,180(sp)
   428f0:	14c00017 	ldw	r19,0(r2)
   428f4:	10800104 	addi	r2,r2,4
   428f8:	d8802d15 	stw	r2,180(sp)
   428fc:	982dd7fa 	srai	r22,r19,31
   42900:	b005883a 	mov	r2,r22
   42904:	003c8206 	br	41b10 <__alt_data_end+0xfffdaa10>
   42908:	9080040c 	andi	r2,r18,16
   4290c:	10003526 	beq	r2,zero,429e4 <___vfprintf_internal_r+0x13fc>
   42910:	d9402d17 	ldw	r5,180(sp)
   42914:	d8c02917 	ldw	r3,164(sp)
   42918:	d8002785 	stb	zero,158(sp)
   4291c:	28800104 	addi	r2,r5,4
   42920:	2cc00017 	ldw	r19,0(r5)
   42924:	002d883a 	mov	r22,zero
   42928:	18003716 	blt	r3,zero,42a08 <___vfprintf_internal_r+0x1420>
   4292c:	00ffdfc4 	movi	r3,-129
   42930:	d8802d15 	stw	r2,180(sp)
   42934:	90e4703a 	and	r18,r18,r3
   42938:	0039883a 	mov	fp,zero
   4293c:	983df326 	beq	r19,zero,4210c <__alt_data_end+0xfffdb00c>
   42940:	00800244 	movi	r2,9
   42944:	14fc7b36 	bltu	r2,r19,41b34 <__alt_data_end+0xfffdaa34>
   42948:	d8c02817 	ldw	r3,160(sp)
   4294c:	dc001dc4 	addi	r16,sp,119
   42950:	9cc00c04 	addi	r19,r19,48
   42954:	1c07c83a 	sub	r3,r3,r16
   42958:	dcc01dc5 	stb	r19,119(sp)
   4295c:	d8c02e15 	stw	r3,184(sp)
   42960:	003ce806 	br	41d04 <__alt_data_end+0xfffdac04>
   42964:	d8803317 	ldw	r2,204(sp)
   42968:	143fffc4 	addi	r16,r2,-1
   4296c:	043f4d0e 	bge	zero,r16,426a4 <__alt_data_end+0xfffdb5a4>
   42970:	07000404 	movi	fp,16
   42974:	e400810e 	bge	fp,r16,42b7c <___vfprintf_internal_r+0x1594>
   42978:	01400174 	movhi	r5,5
   4297c:	2949cd84 	addi	r5,r5,10038
   42980:	d9402b15 	stw	r5,172(sp)
   42984:	01c001c4 	movi	r7,7
   42988:	dcc02c17 	ldw	r19,176(sp)
   4298c:	00000306 	br	4299c <___vfprintf_internal_r+0x13b4>
   42990:	b5800204 	addi	r22,r22,8
   42994:	843ffc04 	addi	r16,r16,-16
   42998:	e4007b0e 	bge	fp,r16,42b88 <___vfprintf_internal_r+0x15a0>
   4299c:	18c00404 	addi	r3,r3,16
   429a0:	8c400044 	addi	r17,r17,1
   429a4:	b5000015 	stw	r20,0(r22)
   429a8:	b7000115 	stw	fp,4(r22)
   429ac:	d8c02015 	stw	r3,128(sp)
   429b0:	dc401f15 	stw	r17,124(sp)
   429b4:	3c7ff60e 	bge	r7,r17,42990 <__alt_data_end+0xfffdb890>
   429b8:	d9801e04 	addi	r6,sp,120
   429bc:	b80b883a 	mov	r5,r23
   429c0:	9809883a 	mov	r4,r19
   429c4:	d9c03c15 	stw	r7,240(sp)
   429c8:	0048be40 	call	48be4 <__sprint_r>
   429cc:	d9c03c17 	ldw	r7,240(sp)
   429d0:	103c071e 	bne	r2,zero,419f0 <__alt_data_end+0xfffda8f0>
   429d4:	d8c02017 	ldw	r3,128(sp)
   429d8:	dc401f17 	ldw	r17,124(sp)
   429dc:	dd800404 	addi	r22,sp,16
   429e0:	003fec06 	br	42994 <__alt_data_end+0xfffdb894>
   429e4:	9080100c 	andi	r2,r18,64
   429e8:	d8002785 	stb	zero,158(sp)
   429ec:	10010e26 	beq	r2,zero,42e28 <___vfprintf_internal_r+0x1840>
   429f0:	d9002d17 	ldw	r4,180(sp)
   429f4:	d9402917 	ldw	r5,164(sp)
   429f8:	002d883a 	mov	r22,zero
   429fc:	20800104 	addi	r2,r4,4
   42a00:	24c0000b 	ldhu	r19,0(r4)
   42a04:	283fc90e 	bge	r5,zero,4292c <__alt_data_end+0xfffdb82c>
   42a08:	d8802d15 	stw	r2,180(sp)
   42a0c:	0039883a 	mov	fp,zero
   42a10:	9d84b03a 	or	r2,r19,r22
   42a14:	103c461e 	bne	r2,zero,41b30 <__alt_data_end+0xfffdaa30>
   42a18:	00800044 	movi	r2,1
   42a1c:	003e6c06 	br	423d0 <__alt_data_end+0xfffdb2d0>
   42a20:	d9002c17 	ldw	r4,176(sp)
   42a24:	d9801e04 	addi	r6,sp,120
   42a28:	b80b883a 	mov	r5,r23
   42a2c:	0048be40 	call	48be4 <__sprint_r>
   42a30:	103bef1e 	bne	r2,zero,419f0 <__alt_data_end+0xfffda8f0>
   42a34:	d8c02017 	ldw	r3,128(sp)
   42a38:	da000404 	addi	r8,sp,16
   42a3c:	d9003217 	ldw	r4,200(sp)
   42a40:	d8802617 	ldw	r2,152(sp)
   42a44:	d9403317 	ldw	r5,204(sp)
   42a48:	8123883a 	add	r17,r16,r4
   42a4c:	11400216 	blt	r2,r5,42a58 <___vfprintf_internal_r+0x1470>
   42a50:	9100004c 	andi	r4,r18,1
   42a54:	20000d26 	beq	r4,zero,42a8c <___vfprintf_internal_r+0x14a4>
   42a58:	d9003717 	ldw	r4,220(sp)
   42a5c:	d9403417 	ldw	r5,208(sp)
   42a60:	1907883a 	add	r3,r3,r4
   42a64:	d9001f17 	ldw	r4,124(sp)
   42a68:	41400015 	stw	r5,0(r8)
   42a6c:	d9403717 	ldw	r5,220(sp)
   42a70:	21000044 	addi	r4,r4,1
   42a74:	d8c02015 	stw	r3,128(sp)
   42a78:	41400115 	stw	r5,4(r8)
   42a7c:	d9001f15 	stw	r4,124(sp)
   42a80:	014001c4 	movi	r5,7
   42a84:	2901e816 	blt	r5,r4,43228 <___vfprintf_internal_r+0x1c40>
   42a88:	42000204 	addi	r8,r8,8
   42a8c:	d9003317 	ldw	r4,204(sp)
   42a90:	8121883a 	add	r16,r16,r4
   42a94:	2085c83a 	sub	r2,r4,r2
   42a98:	8461c83a 	sub	r16,r16,r17
   42a9c:	1400010e 	bge	r2,r16,42aa4 <___vfprintf_internal_r+0x14bc>
   42aa0:	1021883a 	mov	r16,r2
   42aa4:	04000a0e 	bge	zero,r16,42ad0 <___vfprintf_internal_r+0x14e8>
   42aa8:	d9001f17 	ldw	r4,124(sp)
   42aac:	1c07883a 	add	r3,r3,r16
   42ab0:	44400015 	stw	r17,0(r8)
   42ab4:	21000044 	addi	r4,r4,1
   42ab8:	44000115 	stw	r16,4(r8)
   42abc:	d8c02015 	stw	r3,128(sp)
   42ac0:	d9001f15 	stw	r4,124(sp)
   42ac4:	014001c4 	movi	r5,7
   42ac8:	2901fb16 	blt	r5,r4,432b8 <___vfprintf_internal_r+0x1cd0>
   42acc:	42000204 	addi	r8,r8,8
   42ad0:	8001f716 	blt	r16,zero,432b0 <___vfprintf_internal_r+0x1cc8>
   42ad4:	1421c83a 	sub	r16,r2,r16
   42ad8:	043d380e 	bge	zero,r16,41fbc <__alt_data_end+0xfffdaebc>
   42adc:	04400404 	movi	r17,16
   42ae0:	d8801f17 	ldw	r2,124(sp)
   42ae4:	8c3efb0e 	bge	r17,r16,426d4 <__alt_data_end+0xfffdb5d4>
   42ae8:	01400174 	movhi	r5,5
   42aec:	2949cd84 	addi	r5,r5,10038
   42af0:	d9402b15 	stw	r5,172(sp)
   42af4:	058001c4 	movi	r22,7
   42af8:	dcc02c17 	ldw	r19,176(sp)
   42afc:	00000306 	br	42b0c <___vfprintf_internal_r+0x1524>
   42b00:	42000204 	addi	r8,r8,8
   42b04:	843ffc04 	addi	r16,r16,-16
   42b08:	8c3ef50e 	bge	r17,r16,426e0 <__alt_data_end+0xfffdb5e0>
   42b0c:	18c00404 	addi	r3,r3,16
   42b10:	10800044 	addi	r2,r2,1
   42b14:	45000015 	stw	r20,0(r8)
   42b18:	44400115 	stw	r17,4(r8)
   42b1c:	d8c02015 	stw	r3,128(sp)
   42b20:	d8801f15 	stw	r2,124(sp)
   42b24:	b0bff60e 	bge	r22,r2,42b00 <__alt_data_end+0xfffdba00>
   42b28:	d9801e04 	addi	r6,sp,120
   42b2c:	b80b883a 	mov	r5,r23
   42b30:	9809883a 	mov	r4,r19
   42b34:	0048be40 	call	48be4 <__sprint_r>
   42b38:	103bad1e 	bne	r2,zero,419f0 <__alt_data_end+0xfffda8f0>
   42b3c:	d8c02017 	ldw	r3,128(sp)
   42b40:	d8801f17 	ldw	r2,124(sp)
   42b44:	da000404 	addi	r8,sp,16
   42b48:	003fee06 	br	42b04 <__alt_data_end+0xfffdba04>
   42b4c:	9088703a 	and	r4,r18,r2
   42b50:	203eab1e 	bne	r4,zero,42600 <__alt_data_end+0xfffdb500>
   42b54:	dc401f17 	ldw	r17,124(sp)
   42b58:	40800115 	stw	r2,4(r8)
   42b5c:	44000015 	stw	r16,0(r8)
   42b60:	8c400044 	addi	r17,r17,1
   42b64:	d8c02015 	stw	r3,128(sp)
   42b68:	dc401f15 	stw	r17,124(sp)
   42b6c:	008001c4 	movi	r2,7
   42b70:	14400e16 	blt	r2,r17,42bac <___vfprintf_internal_r+0x15c4>
   42b74:	45800204 	addi	r22,r8,8
   42b78:	003eca06 	br	426a4 <__alt_data_end+0xfffdb5a4>
   42b7c:	01000174 	movhi	r4,5
   42b80:	2109cd84 	addi	r4,r4,10038
   42b84:	d9002b15 	stw	r4,172(sp)
   42b88:	d8802b17 	ldw	r2,172(sp)
   42b8c:	1c07883a 	add	r3,r3,r16
   42b90:	8c400044 	addi	r17,r17,1
   42b94:	b0800015 	stw	r2,0(r22)
   42b98:	b4000115 	stw	r16,4(r22)
   42b9c:	d8c02015 	stw	r3,128(sp)
   42ba0:	dc401f15 	stw	r17,124(sp)
   42ba4:	008001c4 	movi	r2,7
   42ba8:	147ebd0e 	bge	r2,r17,426a0 <__alt_data_end+0xfffdb5a0>
   42bac:	d9002c17 	ldw	r4,176(sp)
   42bb0:	d9801e04 	addi	r6,sp,120
   42bb4:	b80b883a 	mov	r5,r23
   42bb8:	0048be40 	call	48be4 <__sprint_r>
   42bbc:	103b8c1e 	bne	r2,zero,419f0 <__alt_data_end+0xfffda8f0>
   42bc0:	d8c02017 	ldw	r3,128(sp)
   42bc4:	dc401f17 	ldw	r17,124(sp)
   42bc8:	dd800404 	addi	r22,sp,16
   42bcc:	003eb506 	br	426a4 <__alt_data_end+0xfffdb5a4>
   42bd0:	d9002c17 	ldw	r4,176(sp)
   42bd4:	d9801e04 	addi	r6,sp,120
   42bd8:	b80b883a 	mov	r5,r23
   42bdc:	0048be40 	call	48be4 <__sprint_r>
   42be0:	103b831e 	bne	r2,zero,419f0 <__alt_data_end+0xfffda8f0>
   42be4:	d8c02017 	ldw	r3,128(sp)
   42be8:	dc401f17 	ldw	r17,124(sp)
   42bec:	da000404 	addi	r8,sp,16
   42bf0:	003e8d06 	br	42628 <__alt_data_end+0xfffdb528>
   42bf4:	d9002c17 	ldw	r4,176(sp)
   42bf8:	d9801e04 	addi	r6,sp,120
   42bfc:	b80b883a 	mov	r5,r23
   42c00:	0048be40 	call	48be4 <__sprint_r>
   42c04:	103b7a1e 	bne	r2,zero,419f0 <__alt_data_end+0xfffda8f0>
   42c08:	d8c02017 	ldw	r3,128(sp)
   42c0c:	dc401f17 	ldw	r17,124(sp)
   42c10:	dd800404 	addi	r22,sp,16
   42c14:	003e8f06 	br	42654 <__alt_data_end+0xfffdb554>
   42c18:	0027883a 	mov	r19,zero
   42c1c:	003f4a06 	br	42948 <__alt_data_end+0xfffdb848>
   42c20:	d9002c17 	ldw	r4,176(sp)
   42c24:	d9801e04 	addi	r6,sp,120
   42c28:	b80b883a 	mov	r5,r23
   42c2c:	0048be40 	call	48be4 <__sprint_r>
   42c30:	103b6f1e 	bne	r2,zero,419f0 <__alt_data_end+0xfffda8f0>
   42c34:	d8c02017 	ldw	r3,128(sp)
   42c38:	da000404 	addi	r8,sp,16
   42c3c:	003c9d06 	br	41eb4 <__alt_data_end+0xfffdadb4>
   42c40:	04e7c83a 	sub	r19,zero,r19
   42c44:	9804c03a 	cmpne	r2,r19,zero
   42c48:	05adc83a 	sub	r22,zero,r22
   42c4c:	b0adc83a 	sub	r22,r22,r2
   42c50:	d8802917 	ldw	r2,164(sp)
   42c54:	07000b44 	movi	fp,45
   42c58:	df002785 	stb	fp,158(sp)
   42c5c:	10017b16 	blt	r2,zero,4324c <___vfprintf_internal_r+0x1c64>
   42c60:	00bfdfc4 	movi	r2,-129
   42c64:	90a4703a 	and	r18,r18,r2
   42c68:	003bb106 	br	41b30 <__alt_data_end+0xfffdaa30>
   42c6c:	d9003617 	ldw	r4,216(sp)
   42c70:	d9403817 	ldw	r5,224(sp)
   42c74:	da003d15 	stw	r8,244(sp)
   42c78:	00488080 	call	48808 <__fpclassifyd>
   42c7c:	da003d17 	ldw	r8,244(sp)
   42c80:	1000f026 	beq	r2,zero,43044 <___vfprintf_internal_r+0x1a5c>
   42c84:	d9002917 	ldw	r4,164(sp)
   42c88:	05bff7c4 	movi	r22,-33
   42c8c:	00bfffc4 	movi	r2,-1
   42c90:	8dac703a 	and	r22,r17,r22
   42c94:	20820026 	beq	r4,r2,43498 <___vfprintf_internal_r+0x1eb0>
   42c98:	008011c4 	movi	r2,71
   42c9c:	b081f726 	beq	r22,r2,4347c <___vfprintf_internal_r+0x1e94>
   42ca0:	d9003817 	ldw	r4,224(sp)
   42ca4:	90c04014 	ori	r3,r18,256
   42ca8:	d8c02b15 	stw	r3,172(sp)
   42cac:	20021516 	blt	r4,zero,43504 <___vfprintf_internal_r+0x1f1c>
   42cb0:	dcc03817 	ldw	r19,224(sp)
   42cb4:	d8002a05 	stb	zero,168(sp)
   42cb8:	00801984 	movi	r2,102
   42cbc:	8881f926 	beq	r17,r2,434a4 <___vfprintf_internal_r+0x1ebc>
   42cc0:	00801184 	movi	r2,70
   42cc4:	88821c26 	beq	r17,r2,43538 <___vfprintf_internal_r+0x1f50>
   42cc8:	00801144 	movi	r2,69
   42ccc:	b081ef26 	beq	r22,r2,4348c <___vfprintf_internal_r+0x1ea4>
   42cd0:	d8c02917 	ldw	r3,164(sp)
   42cd4:	d8802104 	addi	r2,sp,132
   42cd8:	d8800315 	stw	r2,12(sp)
   42cdc:	d9403617 	ldw	r5,216(sp)
   42ce0:	d8802504 	addi	r2,sp,148
   42ce4:	d9002c17 	ldw	r4,176(sp)
   42ce8:	d8800215 	stw	r2,8(sp)
   42cec:	d8802604 	addi	r2,sp,152
   42cf0:	d8c00015 	stw	r3,0(sp)
   42cf4:	d8800115 	stw	r2,4(sp)
   42cf8:	01c00084 	movi	r7,2
   42cfc:	980d883a 	mov	r6,r19
   42d00:	d8c03c15 	stw	r3,240(sp)
   42d04:	da003d15 	stw	r8,244(sp)
   42d08:	0043c0c0 	call	43c0c <_dtoa_r>
   42d0c:	1021883a 	mov	r16,r2
   42d10:	008019c4 	movi	r2,103
   42d14:	d8c03c17 	ldw	r3,240(sp)
   42d18:	da003d17 	ldw	r8,244(sp)
   42d1c:	88817126 	beq	r17,r2,432e4 <___vfprintf_internal_r+0x1cfc>
   42d20:	008011c4 	movi	r2,71
   42d24:	88829226 	beq	r17,r2,43770 <___vfprintf_internal_r+0x2188>
   42d28:	80f9883a 	add	fp,r16,r3
   42d2c:	d9003617 	ldw	r4,216(sp)
   42d30:	000d883a 	mov	r6,zero
   42d34:	000f883a 	mov	r7,zero
   42d38:	980b883a 	mov	r5,r19
   42d3c:	da003d15 	stw	r8,244(sp)
   42d40:	004c85c0 	call	4c85c <__eqdf2>
   42d44:	da003d17 	ldw	r8,244(sp)
   42d48:	10018d26 	beq	r2,zero,43380 <___vfprintf_internal_r+0x1d98>
   42d4c:	d8802117 	ldw	r2,132(sp)
   42d50:	1700062e 	bgeu	r2,fp,42d6c <___vfprintf_internal_r+0x1784>
   42d54:	01000c04 	movi	r4,48
   42d58:	10c00044 	addi	r3,r2,1
   42d5c:	d8c02115 	stw	r3,132(sp)
   42d60:	11000005 	stb	r4,0(r2)
   42d64:	d8802117 	ldw	r2,132(sp)
   42d68:	173ffb36 	bltu	r2,fp,42d58 <__alt_data_end+0xfffdbc58>
   42d6c:	1405c83a 	sub	r2,r2,r16
   42d70:	d8803315 	stw	r2,204(sp)
   42d74:	008011c4 	movi	r2,71
   42d78:	b0817626 	beq	r22,r2,43354 <___vfprintf_internal_r+0x1d6c>
   42d7c:	00801944 	movi	r2,101
   42d80:	1442810e 	bge	r2,r17,43788 <___vfprintf_internal_r+0x21a0>
   42d84:	d8c02617 	ldw	r3,152(sp)
   42d88:	00801984 	movi	r2,102
   42d8c:	d8c03215 	stw	r3,200(sp)
   42d90:	8881fe26 	beq	r17,r2,4358c <___vfprintf_internal_r+0x1fa4>
   42d94:	d8c03217 	ldw	r3,200(sp)
   42d98:	d9003317 	ldw	r4,204(sp)
   42d9c:	1901dd16 	blt	r3,r4,43514 <___vfprintf_internal_r+0x1f2c>
   42da0:	9480004c 	andi	r18,r18,1
   42da4:	90022b1e 	bne	r18,zero,43654 <___vfprintf_internal_r+0x206c>
   42da8:	1805883a 	mov	r2,r3
   42dac:	18028016 	blt	r3,zero,437b0 <___vfprintf_internal_r+0x21c8>
   42db0:	d8c03217 	ldw	r3,200(sp)
   42db4:	044019c4 	movi	r17,103
   42db8:	d8c02e15 	stw	r3,184(sp)
   42dbc:	df002a07 	ldb	fp,168(sp)
   42dc0:	e001531e 	bne	fp,zero,43310 <___vfprintf_internal_r+0x1d28>
   42dc4:	df002783 	ldbu	fp,158(sp)
   42dc8:	d8802a15 	stw	r2,168(sp)
   42dcc:	dc802b17 	ldw	r18,172(sp)
   42dd0:	d8002915 	stw	zero,164(sp)
   42dd4:	003bd106 	br	41d1c <__alt_data_end+0xfffdac1c>
   42dd8:	d8802d17 	ldw	r2,180(sp)
   42ddc:	d8c02d17 	ldw	r3,180(sp)
   42de0:	d9002d17 	ldw	r4,180(sp)
   42de4:	10800017 	ldw	r2,0(r2)
   42de8:	18c00117 	ldw	r3,4(r3)
   42dec:	21000204 	addi	r4,r4,8
   42df0:	d8803615 	stw	r2,216(sp)
   42df4:	d8c03815 	stw	r3,224(sp)
   42df8:	d9002d15 	stw	r4,180(sp)
   42dfc:	003b7506 	br	41bd4 <__alt_data_end+0xfffdaad4>
   42e00:	ac400007 	ldb	r17,0(r21)
   42e04:	003a5906 	br	4176c <__alt_data_end+0xfffda66c>
   42e08:	9080100c 	andi	r2,r18,64
   42e0c:	1000a826 	beq	r2,zero,430b0 <___vfprintf_internal_r+0x1ac8>
   42e10:	d9002d17 	ldw	r4,180(sp)
   42e14:	002d883a 	mov	r22,zero
   42e18:	24c0000b 	ldhu	r19,0(r4)
   42e1c:	21000104 	addi	r4,r4,4
   42e20:	d9002d15 	stw	r4,180(sp)
   42e24:	003ccb06 	br	42154 <__alt_data_end+0xfffdb054>
   42e28:	d8c02d17 	ldw	r3,180(sp)
   42e2c:	d9002917 	ldw	r4,164(sp)
   42e30:	002d883a 	mov	r22,zero
   42e34:	18800104 	addi	r2,r3,4
   42e38:	1cc00017 	ldw	r19,0(r3)
   42e3c:	203ebb0e 	bge	r4,zero,4292c <__alt_data_end+0xfffdb82c>
   42e40:	003ef106 	br	42a08 <__alt_data_end+0xfffdb908>
   42e44:	9080040c 	andi	r2,r18,16
   42e48:	1000921e 	bne	r2,zero,43094 <___vfprintf_internal_r+0x1aac>
   42e4c:	9480100c 	andi	r18,r18,64
   42e50:	90013926 	beq	r18,zero,43338 <___vfprintf_internal_r+0x1d50>
   42e54:	d9002d17 	ldw	r4,180(sp)
   42e58:	d9402f17 	ldw	r5,188(sp)
   42e5c:	20800017 	ldw	r2,0(r4)
   42e60:	21000104 	addi	r4,r4,4
   42e64:	d9002d15 	stw	r4,180(sp)
   42e68:	1140000d 	sth	r5,0(r2)
   42e6c:	003a1606 	br	416c8 <__alt_data_end+0xfffda5c8>
   42e70:	9080100c 	andi	r2,r18,64
   42e74:	10008026 	beq	r2,zero,43078 <___vfprintf_internal_r+0x1a90>
   42e78:	d8c02d17 	ldw	r3,180(sp)
   42e7c:	1cc0000f 	ldh	r19,0(r3)
   42e80:	18c00104 	addi	r3,r3,4
   42e84:	d8c02d15 	stw	r3,180(sp)
   42e88:	982dd7fa 	srai	r22,r19,31
   42e8c:	b005883a 	mov	r2,r22
   42e90:	003b1f06 	br	41b10 <__alt_data_end+0xfffdaa10>
   42e94:	9080100c 	andi	r2,r18,64
   42e98:	d8002785 	stb	zero,158(sp)
   42e9c:	10008a1e 	bne	r2,zero,430c8 <___vfprintf_internal_r+0x1ae0>
   42ea0:	d9402d17 	ldw	r5,180(sp)
   42ea4:	d8c02917 	ldw	r3,164(sp)
   42ea8:	002d883a 	mov	r22,zero
   42eac:	28800104 	addi	r2,r5,4
   42eb0:	2cc00017 	ldw	r19,0(r5)
   42eb4:	183e4b0e 	bge	r3,zero,427e4 <__alt_data_end+0xfffdb6e4>
   42eb8:	9d86b03a 	or	r3,r19,r22
   42ebc:	d8802d15 	stw	r2,180(sp)
   42ec0:	183e4c1e 	bne	r3,zero,427f4 <__alt_data_end+0xfffdb6f4>
   42ec4:	0039883a 	mov	fp,zero
   42ec8:	0005883a 	mov	r2,zero
   42ecc:	003d4006 	br	423d0 <__alt_data_end+0xfffdb2d0>
   42ed0:	01400174 	movhi	r5,5
   42ed4:	2949cd84 	addi	r5,r5,10038
   42ed8:	d9402b15 	stw	r5,172(sp)
   42edc:	d9402b17 	ldw	r5,172(sp)
   42ee0:	1c47883a 	add	r3,r3,r17
   42ee4:	10800044 	addi	r2,r2,1
   42ee8:	41400015 	stw	r5,0(r8)
   42eec:	44400115 	stw	r17,4(r8)
   42ef0:	d8c02015 	stw	r3,128(sp)
   42ef4:	d8801f15 	stw	r2,124(sp)
   42ef8:	010001c4 	movi	r4,7
   42efc:	20bec816 	blt	r4,r2,42a20 <__alt_data_end+0xfffdb920>
   42f00:	42000204 	addi	r8,r8,8
   42f04:	003ecd06 	br	42a3c <__alt_data_end+0xfffdb93c>
   42f08:	d9002917 	ldw	r4,164(sp)
   42f0c:	d8002785 	stb	zero,158(sp)
   42f10:	203d2d16 	blt	r4,zero,423c8 <__alt_data_end+0xfffdb2c8>
   42f14:	00bfdfc4 	movi	r2,-129
   42f18:	90a4703a 	and	r18,r18,r2
   42f1c:	003a9106 	br	41964 <__alt_data_end+0xfffda864>
   42f20:	01000174 	movhi	r4,5
   42f24:	2109cd84 	addi	r4,r4,10038
   42f28:	d9002b15 	stw	r4,172(sp)
   42f2c:	003c0c06 	br	41f60 <__alt_data_end+0xfffdae60>
   42f30:	d9002c17 	ldw	r4,176(sp)
   42f34:	d9801e04 	addi	r6,sp,120
   42f38:	b80b883a 	mov	r5,r23
   42f3c:	0048be40 	call	48be4 <__sprint_r>
   42f40:	103aab1e 	bne	r2,zero,419f0 <__alt_data_end+0xfffda8f0>
   42f44:	d8c02017 	ldw	r3,128(sp)
   42f48:	da000404 	addi	r8,sp,16
   42f4c:	003d4106 	br	42454 <__alt_data_end+0xfffdb354>
   42f50:	d8801f17 	ldw	r2,124(sp)
   42f54:	01400174 	movhi	r5,5
   42f58:	01000044 	movi	r4,1
   42f5c:	18c00044 	addi	r3,r3,1
   42f60:	10800044 	addi	r2,r2,1
   42f64:	2949cd04 	addi	r5,r5,10036
   42f68:	41000115 	stw	r4,4(r8)
   42f6c:	41400015 	stw	r5,0(r8)
   42f70:	d8c02015 	stw	r3,128(sp)
   42f74:	d8801f15 	stw	r2,124(sp)
   42f78:	010001c4 	movi	r4,7
   42f7c:	20805c16 	blt	r4,r2,430f0 <___vfprintf_internal_r+0x1b08>
   42f80:	42000204 	addi	r8,r8,8
   42f84:	8800041e 	bne	r17,zero,42f98 <___vfprintf_internal_r+0x19b0>
   42f88:	d8803317 	ldw	r2,204(sp)
   42f8c:	1000021e 	bne	r2,zero,42f98 <___vfprintf_internal_r+0x19b0>
   42f90:	9080004c 	andi	r2,r18,1
   42f94:	103c0926 	beq	r2,zero,41fbc <__alt_data_end+0xfffdaebc>
   42f98:	d9003717 	ldw	r4,220(sp)
   42f9c:	d8801f17 	ldw	r2,124(sp)
   42fa0:	d9403417 	ldw	r5,208(sp)
   42fa4:	20c7883a 	add	r3,r4,r3
   42fa8:	10800044 	addi	r2,r2,1
   42fac:	41000115 	stw	r4,4(r8)
   42fb0:	41400015 	stw	r5,0(r8)
   42fb4:	d8c02015 	stw	r3,128(sp)
   42fb8:	d8801f15 	stw	r2,124(sp)
   42fbc:	010001c4 	movi	r4,7
   42fc0:	20812116 	blt	r4,r2,43448 <___vfprintf_internal_r+0x1e60>
   42fc4:	42000204 	addi	r8,r8,8
   42fc8:	0463c83a 	sub	r17,zero,r17
   42fcc:	0440730e 	bge	zero,r17,4319c <___vfprintf_internal_r+0x1bb4>
   42fd0:	05800404 	movi	r22,16
   42fd4:	b440860e 	bge	r22,r17,431f0 <___vfprintf_internal_r+0x1c08>
   42fd8:	01400174 	movhi	r5,5
   42fdc:	2949cd84 	addi	r5,r5,10038
   42fe0:	d9402b15 	stw	r5,172(sp)
   42fe4:	070001c4 	movi	fp,7
   42fe8:	dcc02c17 	ldw	r19,176(sp)
   42fec:	00000306 	br	42ffc <___vfprintf_internal_r+0x1a14>
   42ff0:	42000204 	addi	r8,r8,8
   42ff4:	8c7ffc04 	addi	r17,r17,-16
   42ff8:	b440800e 	bge	r22,r17,431fc <___vfprintf_internal_r+0x1c14>
   42ffc:	18c00404 	addi	r3,r3,16
   43000:	10800044 	addi	r2,r2,1
   43004:	45000015 	stw	r20,0(r8)
   43008:	45800115 	stw	r22,4(r8)
   4300c:	d8c02015 	stw	r3,128(sp)
   43010:	d8801f15 	stw	r2,124(sp)
   43014:	e0bff60e 	bge	fp,r2,42ff0 <__alt_data_end+0xfffdbef0>
   43018:	d9801e04 	addi	r6,sp,120
   4301c:	b80b883a 	mov	r5,r23
   43020:	9809883a 	mov	r4,r19
   43024:	0048be40 	call	48be4 <__sprint_r>
   43028:	103a711e 	bne	r2,zero,419f0 <__alt_data_end+0xfffda8f0>
   4302c:	d8c02017 	ldw	r3,128(sp)
   43030:	d8801f17 	ldw	r2,124(sp)
   43034:	da000404 	addi	r8,sp,16
   43038:	003fee06 	br	42ff4 <__alt_data_end+0xfffdbef4>
   4303c:	00bfffc4 	movi	r2,-1
   43040:	003a6f06 	br	41a00 <__alt_data_end+0xfffda900>
   43044:	008011c4 	movi	r2,71
   43048:	1440b816 	blt	r2,r17,4332c <___vfprintf_internal_r+0x1d44>
   4304c:	04000174 	movhi	r16,5
   43050:	8409bf04 	addi	r16,r16,9980
   43054:	00c000c4 	movi	r3,3
   43058:	00bfdfc4 	movi	r2,-129
   4305c:	d8c02a15 	stw	r3,168(sp)
   43060:	90a4703a 	and	r18,r18,r2
   43064:	df002783 	ldbu	fp,158(sp)
   43068:	d8c02e15 	stw	r3,184(sp)
   4306c:	d8002915 	stw	zero,164(sp)
   43070:	d8003215 	stw	zero,200(sp)
   43074:	003b2906 	br	41d1c <__alt_data_end+0xfffdac1c>
   43078:	d9002d17 	ldw	r4,180(sp)
   4307c:	24c00017 	ldw	r19,0(r4)
   43080:	21000104 	addi	r4,r4,4
   43084:	d9002d15 	stw	r4,180(sp)
   43088:	982dd7fa 	srai	r22,r19,31
   4308c:	b005883a 	mov	r2,r22
   43090:	003a9f06 	br	41b10 <__alt_data_end+0xfffdaa10>
   43094:	d9402d17 	ldw	r5,180(sp)
   43098:	d8c02f17 	ldw	r3,188(sp)
   4309c:	28800017 	ldw	r2,0(r5)
   430a0:	29400104 	addi	r5,r5,4
   430a4:	d9402d15 	stw	r5,180(sp)
   430a8:	10c00015 	stw	r3,0(r2)
   430ac:	00398606 	br	416c8 <__alt_data_end+0xfffda5c8>
   430b0:	d9402d17 	ldw	r5,180(sp)
   430b4:	002d883a 	mov	r22,zero
   430b8:	2cc00017 	ldw	r19,0(r5)
   430bc:	29400104 	addi	r5,r5,4
   430c0:	d9402d15 	stw	r5,180(sp)
   430c4:	003c2306 	br	42154 <__alt_data_end+0xfffdb054>
   430c8:	d8c02d17 	ldw	r3,180(sp)
   430cc:	d9002917 	ldw	r4,164(sp)
   430d0:	002d883a 	mov	r22,zero
   430d4:	18800104 	addi	r2,r3,4
   430d8:	1cc0000b 	ldhu	r19,0(r3)
   430dc:	203dc10e 	bge	r4,zero,427e4 <__alt_data_end+0xfffdb6e4>
   430e0:	003f7506 	br	42eb8 <__alt_data_end+0xfffdbdb8>
   430e4:	04000174 	movhi	r16,5
   430e8:	8409bd04 	addi	r16,r16,9972
   430ec:	003acc06 	br	41c20 <__alt_data_end+0xfffdab20>
   430f0:	d9002c17 	ldw	r4,176(sp)
   430f4:	d9801e04 	addi	r6,sp,120
   430f8:	b80b883a 	mov	r5,r23
   430fc:	0048be40 	call	48be4 <__sprint_r>
   43100:	103a3b1e 	bne	r2,zero,419f0 <__alt_data_end+0xfffda8f0>
   43104:	dc402617 	ldw	r17,152(sp)
   43108:	d8c02017 	ldw	r3,128(sp)
   4310c:	da000404 	addi	r8,sp,16
   43110:	003f9c06 	br	42f84 <__alt_data_end+0xfffdbe84>
   43114:	ac400043 	ldbu	r17,1(r21)
   43118:	94800814 	ori	r18,r18,32
   4311c:	ad400044 	addi	r21,r21,1
   43120:	8c403fcc 	andi	r17,r17,255
   43124:	8c40201c 	xori	r17,r17,128
   43128:	8c7fe004 	addi	r17,r17,-128
   4312c:	00398f06 	br	4176c <__alt_data_end+0xfffda66c>
   43130:	d8c02d15 	stw	r3,180(sp)
   43134:	0039883a 	mov	fp,zero
   43138:	003e3506 	br	42a10 <__alt_data_end+0xfffdb910>
   4313c:	d9002c17 	ldw	r4,176(sp)
   43140:	d9801e04 	addi	r6,sp,120
   43144:	b80b883a 	mov	r5,r23
   43148:	0048be40 	call	48be4 <__sprint_r>
   4314c:	103a281e 	bne	r2,zero,419f0 <__alt_data_end+0xfffda8f0>
   43150:	d8c02017 	ldw	r3,128(sp)
   43154:	da000404 	addi	r8,sp,16
   43158:	003cd006 	br	4249c <__alt_data_end+0xfffdb39c>
   4315c:	8009883a 	mov	r4,r16
   43160:	da003d15 	stw	r8,244(sp)
   43164:	00415500 	call	41550 <strlen>
   43168:	d8802e15 	stw	r2,184(sp)
   4316c:	da003d17 	ldw	r8,244(sp)
   43170:	103c340e 	bge	r2,zero,42244 <__alt_data_end+0xfffdb144>
   43174:	0005883a 	mov	r2,zero
   43178:	003c3206 	br	42244 <__alt_data_end+0xfffdb144>
   4317c:	d9002c17 	ldw	r4,176(sp)
   43180:	d9801e04 	addi	r6,sp,120
   43184:	b80b883a 	mov	r5,r23
   43188:	0048be40 	call	48be4 <__sprint_r>
   4318c:	103a181e 	bne	r2,zero,419f0 <__alt_data_end+0xfffda8f0>
   43190:	d8c02017 	ldw	r3,128(sp)
   43194:	d8801f17 	ldw	r2,124(sp)
   43198:	da000404 	addi	r8,sp,16
   4319c:	d9403317 	ldw	r5,204(sp)
   431a0:	10800044 	addi	r2,r2,1
   431a4:	44000015 	stw	r16,0(r8)
   431a8:	28c7883a 	add	r3,r5,r3
   431ac:	003b7d06 	br	41fa4 <__alt_data_end+0xfffdaea4>
   431b0:	01000174 	movhi	r4,5
   431b4:	2109d184 	addi	r4,r4,10054
   431b8:	d9003515 	stw	r4,212(sp)
   431bc:	003b1406 	br	41e10 <__alt_data_end+0xfffdad10>
   431c0:	013fffc4 	movi	r4,-1
   431c4:	003a3506 	br	41a9c <__alt_data_end+0xfffda99c>
   431c8:	0023883a 	mov	r17,zero
   431cc:	003d9d06 	br	42844 <__alt_data_end+0xfffdb744>
   431d0:	d9002c17 	ldw	r4,176(sp)
   431d4:	d9801e04 	addi	r6,sp,120
   431d8:	b80b883a 	mov	r5,r23
   431dc:	0048be40 	call	48be4 <__sprint_r>
   431e0:	103a031e 	bne	r2,zero,419f0 <__alt_data_end+0xfffda8f0>
   431e4:	d8c02017 	ldw	r3,128(sp)
   431e8:	da000404 	addi	r8,sp,16
   431ec:	003d9406 	br	42840 <__alt_data_end+0xfffdb740>
   431f0:	01000174 	movhi	r4,5
   431f4:	2109cd84 	addi	r4,r4,10038
   431f8:	d9002b15 	stw	r4,172(sp)
   431fc:	d9002b17 	ldw	r4,172(sp)
   43200:	1c47883a 	add	r3,r3,r17
   43204:	10800044 	addi	r2,r2,1
   43208:	41000015 	stw	r4,0(r8)
   4320c:	44400115 	stw	r17,4(r8)
   43210:	d8c02015 	stw	r3,128(sp)
   43214:	d8801f15 	stw	r2,124(sp)
   43218:	010001c4 	movi	r4,7
   4321c:	20bfd716 	blt	r4,r2,4317c <__alt_data_end+0xfffdc07c>
   43220:	42000204 	addi	r8,r8,8
   43224:	003fdd06 	br	4319c <__alt_data_end+0xfffdc09c>
   43228:	d9002c17 	ldw	r4,176(sp)
   4322c:	d9801e04 	addi	r6,sp,120
   43230:	b80b883a 	mov	r5,r23
   43234:	0048be40 	call	48be4 <__sprint_r>
   43238:	1039ed1e 	bne	r2,zero,419f0 <__alt_data_end+0xfffda8f0>
   4323c:	d8802617 	ldw	r2,152(sp)
   43240:	d8c02017 	ldw	r3,128(sp)
   43244:	da000404 	addi	r8,sp,16
   43248:	003e1006 	br	42a8c <__alt_data_end+0xfffdb98c>
   4324c:	00800044 	movi	r2,1
   43250:	10803fcc 	andi	r2,r2,255
   43254:	00c00044 	movi	r3,1
   43258:	10fa3526 	beq	r2,r3,41b30 <__alt_data_end+0xfffdaa30>
   4325c:	00c00084 	movi	r3,2
   43260:	10fbcb26 	beq	r2,r3,42190 <__alt_data_end+0xfffdb090>
   43264:	003a8f06 	br	41ca4 <__alt_data_end+0xfffdaba4>
   43268:	01000174 	movhi	r4,5
   4326c:	2109d184 	addi	r4,r4,10054
   43270:	d9003515 	stw	r4,212(sp)
   43274:	003b7606 	br	42050 <__alt_data_end+0xfffdaf50>
   43278:	d8802917 	ldw	r2,164(sp)
   4327c:	00c00184 	movi	r3,6
   43280:	1880012e 	bgeu	r3,r2,43288 <___vfprintf_internal_r+0x1ca0>
   43284:	1805883a 	mov	r2,r3
   43288:	d8802e15 	stw	r2,184(sp)
   4328c:	1000ef16 	blt	r2,zero,4364c <___vfprintf_internal_r+0x2064>
   43290:	04000174 	movhi	r16,5
   43294:	d8802a15 	stw	r2,168(sp)
   43298:	dcc02d15 	stw	r19,180(sp)
   4329c:	d8002915 	stw	zero,164(sp)
   432a0:	d8003215 	stw	zero,200(sp)
   432a4:	8409cb04 	addi	r16,r16,10028
   432a8:	0039883a 	mov	fp,zero
   432ac:	003aa206 	br	41d38 <__alt_data_end+0xfffdac38>
   432b0:	0021883a 	mov	r16,zero
   432b4:	003e0706 	br	42ad4 <__alt_data_end+0xfffdb9d4>
   432b8:	d9002c17 	ldw	r4,176(sp)
   432bc:	d9801e04 	addi	r6,sp,120
   432c0:	b80b883a 	mov	r5,r23
   432c4:	0048be40 	call	48be4 <__sprint_r>
   432c8:	1039c91e 	bne	r2,zero,419f0 <__alt_data_end+0xfffda8f0>
   432cc:	d8802617 	ldw	r2,152(sp)
   432d0:	d9403317 	ldw	r5,204(sp)
   432d4:	d8c02017 	ldw	r3,128(sp)
   432d8:	da000404 	addi	r8,sp,16
   432dc:	2885c83a 	sub	r2,r5,r2
   432e0:	003dfb06 	br	42ad0 <__alt_data_end+0xfffdb9d0>
   432e4:	9080004c 	andi	r2,r18,1
   432e8:	103e8f1e 	bne	r2,zero,42d28 <__alt_data_end+0xfffdbc28>
   432ec:	d8802117 	ldw	r2,132(sp)
   432f0:	003e9e06 	br	42d6c <__alt_data_end+0xfffdbc6c>
   432f4:	1025883a 	mov	r18,r2
   432f8:	0039883a 	mov	fp,zero
   432fc:	00800084 	movi	r2,2
   43300:	003fd306 	br	43250 <__alt_data_end+0xfffdc150>
   43304:	07000b44 	movi	fp,45
   43308:	df002785 	stb	fp,158(sp)
   4330c:	003a4006 	br	41c10 <__alt_data_end+0xfffdab10>
   43310:	00c00b44 	movi	r3,45
   43314:	d8c02785 	stb	r3,158(sp)
   43318:	d8802a15 	stw	r2,168(sp)
   4331c:	dc802b17 	ldw	r18,172(sp)
   43320:	d8002915 	stw	zero,164(sp)
   43324:	07000b44 	movi	fp,45
   43328:	003a8006 	br	41d2c <__alt_data_end+0xfffdac2c>
   4332c:	04000174 	movhi	r16,5
   43330:	8409c004 	addi	r16,r16,9984
   43334:	003f4706 	br	43054 <__alt_data_end+0xfffdbf54>
   43338:	d8c02d17 	ldw	r3,180(sp)
   4333c:	d9002f17 	ldw	r4,188(sp)
   43340:	18800017 	ldw	r2,0(r3)
   43344:	18c00104 	addi	r3,r3,4
   43348:	d8c02d15 	stw	r3,180(sp)
   4334c:	11000015 	stw	r4,0(r2)
   43350:	0038dd06 	br	416c8 <__alt_data_end+0xfffda5c8>
   43354:	dd802617 	ldw	r22,152(sp)
   43358:	00bfff44 	movi	r2,-3
   4335c:	b0801c16 	blt	r22,r2,433d0 <___vfprintf_internal_r+0x1de8>
   43360:	d9402917 	ldw	r5,164(sp)
   43364:	2d801a16 	blt	r5,r22,433d0 <___vfprintf_internal_r+0x1de8>
   43368:	dd803215 	stw	r22,200(sp)
   4336c:	003e8906 	br	42d94 <__alt_data_end+0xfffdbc94>
   43370:	01000174 	movhi	r4,5
   43374:	2109cd84 	addi	r4,r4,10038
   43378:	d9002b15 	stw	r4,172(sp)
   4337c:	003c9106 	br	425c4 <__alt_data_end+0xfffdb4c4>
   43380:	e005883a 	mov	r2,fp
   43384:	003e7906 	br	42d6c <__alt_data_end+0xfffdbc6c>
   43388:	d9402917 	ldw	r5,164(sp)
   4338c:	df002783 	ldbu	fp,158(sp)
   43390:	dcc02d15 	stw	r19,180(sp)
   43394:	d9402a15 	stw	r5,168(sp)
   43398:	d9402e15 	stw	r5,184(sp)
   4339c:	d8002915 	stw	zero,164(sp)
   433a0:	d8003215 	stw	zero,200(sp)
   433a4:	003a5d06 	br	41d1c <__alt_data_end+0xfffdac1c>
   433a8:	9080004c 	andi	r2,r18,1
   433ac:	0039883a 	mov	fp,zero
   433b0:	10000426 	beq	r2,zero,433c4 <___vfprintf_internal_r+0x1ddc>
   433b4:	00800c04 	movi	r2,48
   433b8:	dc001dc4 	addi	r16,sp,119
   433bc:	d8801dc5 	stb	r2,119(sp)
   433c0:	003b8006 	br	421c4 <__alt_data_end+0xfffdb0c4>
   433c4:	d8002e15 	stw	zero,184(sp)
   433c8:	dc001e04 	addi	r16,sp,120
   433cc:	003a4d06 	br	41d04 <__alt_data_end+0xfffdac04>
   433d0:	8c7fff84 	addi	r17,r17,-2
   433d4:	b5bfffc4 	addi	r22,r22,-1
   433d8:	dd802615 	stw	r22,152(sp)
   433dc:	dc4022c5 	stb	r17,139(sp)
   433e0:	b000bf16 	blt	r22,zero,436e0 <___vfprintf_internal_r+0x20f8>
   433e4:	00800ac4 	movi	r2,43
   433e8:	d8802305 	stb	r2,140(sp)
   433ec:	00800244 	movi	r2,9
   433f0:	15807016 	blt	r2,r22,435b4 <___vfprintf_internal_r+0x1fcc>
   433f4:	00800c04 	movi	r2,48
   433f8:	b5800c04 	addi	r22,r22,48
   433fc:	d8802345 	stb	r2,141(sp)
   43400:	dd802385 	stb	r22,142(sp)
   43404:	d88023c4 	addi	r2,sp,143
   43408:	df0022c4 	addi	fp,sp,139
   4340c:	d8c03317 	ldw	r3,204(sp)
   43410:	1739c83a 	sub	fp,r2,fp
   43414:	d9003317 	ldw	r4,204(sp)
   43418:	e0c7883a 	add	r3,fp,r3
   4341c:	df003a15 	stw	fp,232(sp)
   43420:	d8c02e15 	stw	r3,184(sp)
   43424:	00800044 	movi	r2,1
   43428:	1100b30e 	bge	r2,r4,436f8 <___vfprintf_internal_r+0x2110>
   4342c:	d8c02e17 	ldw	r3,184(sp)
   43430:	18c00044 	addi	r3,r3,1
   43434:	d8c02e15 	stw	r3,184(sp)
   43438:	1805883a 	mov	r2,r3
   4343c:	1800ac16 	blt	r3,zero,436f0 <___vfprintf_internal_r+0x2108>
   43440:	d8003215 	stw	zero,200(sp)
   43444:	003e5d06 	br	42dbc <__alt_data_end+0xfffdbcbc>
   43448:	d9002c17 	ldw	r4,176(sp)
   4344c:	d9801e04 	addi	r6,sp,120
   43450:	b80b883a 	mov	r5,r23
   43454:	0048be40 	call	48be4 <__sprint_r>
   43458:	1039651e 	bne	r2,zero,419f0 <__alt_data_end+0xfffda8f0>
   4345c:	dc402617 	ldw	r17,152(sp)
   43460:	d8c02017 	ldw	r3,128(sp)
   43464:	d8801f17 	ldw	r2,124(sp)
   43468:	da000404 	addi	r8,sp,16
   4346c:	003ed606 	br	42fc8 <__alt_data_end+0xfffdbec8>
   43470:	582b883a 	mov	r21,r11
   43474:	d8002915 	stw	zero,164(sp)
   43478:	0038bd06 	br	41770 <__alt_data_end+0xfffda670>
   4347c:	d8802917 	ldw	r2,164(sp)
   43480:	103e071e 	bne	r2,zero,42ca0 <__alt_data_end+0xfffdbba0>
   43484:	dc002915 	stw	r16,164(sp)
   43488:	003e0506 	br	42ca0 <__alt_data_end+0xfffdbba0>
   4348c:	d9002917 	ldw	r4,164(sp)
   43490:	20c00044 	addi	r3,r4,1
   43494:	003e0f06 	br	42cd4 <__alt_data_end+0xfffdbbd4>
   43498:	01400184 	movi	r5,6
   4349c:	d9402915 	stw	r5,164(sp)
   434a0:	003dff06 	br	42ca0 <__alt_data_end+0xfffdbba0>
   434a4:	d8802104 	addi	r2,sp,132
   434a8:	d8800315 	stw	r2,12(sp)
   434ac:	d8802504 	addi	r2,sp,148
   434b0:	d8800215 	stw	r2,8(sp)
   434b4:	d8802604 	addi	r2,sp,152
   434b8:	d8800115 	stw	r2,4(sp)
   434bc:	d8802917 	ldw	r2,164(sp)
   434c0:	d9403617 	ldw	r5,216(sp)
   434c4:	d9002c17 	ldw	r4,176(sp)
   434c8:	d8800015 	stw	r2,0(sp)
   434cc:	01c000c4 	movi	r7,3
   434d0:	980d883a 	mov	r6,r19
   434d4:	da003d15 	stw	r8,244(sp)
   434d8:	0043c0c0 	call	43c0c <_dtoa_r>
   434dc:	d8c02917 	ldw	r3,164(sp)
   434e0:	da003d17 	ldw	r8,244(sp)
   434e4:	1021883a 	mov	r16,r2
   434e8:	10f9883a 	add	fp,r2,r3
   434ec:	81000007 	ldb	r4,0(r16)
   434f0:	00800c04 	movi	r2,48
   434f4:	20805e26 	beq	r4,r2,43670 <___vfprintf_internal_r+0x2088>
   434f8:	d8c02617 	ldw	r3,152(sp)
   434fc:	e0f9883a 	add	fp,fp,r3
   43500:	003e0a06 	br	42d2c <__alt_data_end+0xfffdbc2c>
   43504:	00c00b44 	movi	r3,45
   43508:	24e0003c 	xorhi	r19,r4,32768
   4350c:	d8c02a05 	stb	r3,168(sp)
   43510:	003de906 	br	42cb8 <__alt_data_end+0xfffdbbb8>
   43514:	d8c03217 	ldw	r3,200(sp)
   43518:	00c07a0e 	bge	zero,r3,43704 <___vfprintf_internal_r+0x211c>
   4351c:	00800044 	movi	r2,1
   43520:	d9003317 	ldw	r4,204(sp)
   43524:	1105883a 	add	r2,r2,r4
   43528:	d8802e15 	stw	r2,184(sp)
   4352c:	10004e16 	blt	r2,zero,43668 <___vfprintf_internal_r+0x2080>
   43530:	044019c4 	movi	r17,103
   43534:	003e2106 	br	42dbc <__alt_data_end+0xfffdbcbc>
   43538:	d9002917 	ldw	r4,164(sp)
   4353c:	d8802104 	addi	r2,sp,132
   43540:	d8800315 	stw	r2,12(sp)
   43544:	d9000015 	stw	r4,0(sp)
   43548:	d8802504 	addi	r2,sp,148
   4354c:	d9403617 	ldw	r5,216(sp)
   43550:	d9002c17 	ldw	r4,176(sp)
   43554:	d8800215 	stw	r2,8(sp)
   43558:	d8802604 	addi	r2,sp,152
   4355c:	d8800115 	stw	r2,4(sp)
   43560:	01c000c4 	movi	r7,3
   43564:	980d883a 	mov	r6,r19
   43568:	da003d15 	stw	r8,244(sp)
   4356c:	0043c0c0 	call	43c0c <_dtoa_r>
   43570:	d8c02917 	ldw	r3,164(sp)
   43574:	da003d17 	ldw	r8,244(sp)
   43578:	1021883a 	mov	r16,r2
   4357c:	00801184 	movi	r2,70
   43580:	80f9883a 	add	fp,r16,r3
   43584:	88bfd926 	beq	r17,r2,434ec <__alt_data_end+0xfffdc3ec>
   43588:	003de806 	br	42d2c <__alt_data_end+0xfffdbc2c>
   4358c:	d9002917 	ldw	r4,164(sp)
   43590:	00c04d0e 	bge	zero,r3,436c8 <___vfprintf_internal_r+0x20e0>
   43594:	2000441e 	bne	r4,zero,436a8 <___vfprintf_internal_r+0x20c0>
   43598:	9480004c 	andi	r18,r18,1
   4359c:	9000421e 	bne	r18,zero,436a8 <___vfprintf_internal_r+0x20c0>
   435a0:	1805883a 	mov	r2,r3
   435a4:	18007016 	blt	r3,zero,43768 <___vfprintf_internal_r+0x2180>
   435a8:	d8c03217 	ldw	r3,200(sp)
   435ac:	d8c02e15 	stw	r3,184(sp)
   435b0:	003e0206 	br	42dbc <__alt_data_end+0xfffdbcbc>
   435b4:	df0022c4 	addi	fp,sp,139
   435b8:	dc002915 	stw	r16,164(sp)
   435bc:	4027883a 	mov	r19,r8
   435c0:	e021883a 	mov	r16,fp
   435c4:	b009883a 	mov	r4,r22
   435c8:	01400284 	movi	r5,10
   435cc:	004b5980 	call	4b598 <__modsi3>
   435d0:	10800c04 	addi	r2,r2,48
   435d4:	843fffc4 	addi	r16,r16,-1
   435d8:	b009883a 	mov	r4,r22
   435dc:	01400284 	movi	r5,10
   435e0:	80800005 	stb	r2,0(r16)
   435e4:	004b5140 	call	4b514 <__divsi3>
   435e8:	102d883a 	mov	r22,r2
   435ec:	00800244 	movi	r2,9
   435f0:	15bff416 	blt	r2,r22,435c4 <__alt_data_end+0xfffdc4c4>
   435f4:	9811883a 	mov	r8,r19
   435f8:	b0800c04 	addi	r2,r22,48
   435fc:	8027883a 	mov	r19,r16
   43600:	997fffc4 	addi	r5,r19,-1
   43604:	98bfffc5 	stb	r2,-1(r19)
   43608:	dc002917 	ldw	r16,164(sp)
   4360c:	2f006a2e 	bgeu	r5,fp,437b8 <___vfprintf_internal_r+0x21d0>
   43610:	d9c02384 	addi	r7,sp,142
   43614:	3ccfc83a 	sub	r7,r7,r19
   43618:	d9002344 	addi	r4,sp,141
   4361c:	e1cf883a 	add	r7,fp,r7
   43620:	00000106 	br	43628 <___vfprintf_internal_r+0x2040>
   43624:	28800003 	ldbu	r2,0(r5)
   43628:	20800005 	stb	r2,0(r4)
   4362c:	21000044 	addi	r4,r4,1
   43630:	29400044 	addi	r5,r5,1
   43634:	393ffb1e 	bne	r7,r4,43624 <__alt_data_end+0xfffdc524>
   43638:	d8802304 	addi	r2,sp,140
   4363c:	14c5c83a 	sub	r2,r2,r19
   43640:	d8c02344 	addi	r3,sp,141
   43644:	1885883a 	add	r2,r3,r2
   43648:	003f7006 	br	4340c <__alt_data_end+0xfffdc30c>
   4364c:	0005883a 	mov	r2,zero
   43650:	003f0f06 	br	43290 <__alt_data_end+0xfffdc190>
   43654:	d8c03217 	ldw	r3,200(sp)
   43658:	18c00044 	addi	r3,r3,1
   4365c:	d8c02e15 	stw	r3,184(sp)
   43660:	1805883a 	mov	r2,r3
   43664:	183fb20e 	bge	r3,zero,43530 <__alt_data_end+0xfffdc430>
   43668:	0005883a 	mov	r2,zero
   4366c:	003fb006 	br	43530 <__alt_data_end+0xfffdc430>
   43670:	d9003617 	ldw	r4,216(sp)
   43674:	000d883a 	mov	r6,zero
   43678:	000f883a 	mov	r7,zero
   4367c:	980b883a 	mov	r5,r19
   43680:	d8c03c15 	stw	r3,240(sp)
   43684:	da003d15 	stw	r8,244(sp)
   43688:	004c85c0 	call	4c85c <__eqdf2>
   4368c:	d8c03c17 	ldw	r3,240(sp)
   43690:	da003d17 	ldw	r8,244(sp)
   43694:	103f9826 	beq	r2,zero,434f8 <__alt_data_end+0xfffdc3f8>
   43698:	00800044 	movi	r2,1
   4369c:	10c7c83a 	sub	r3,r2,r3
   436a0:	d8c02615 	stw	r3,152(sp)
   436a4:	003f9506 	br	434fc <__alt_data_end+0xfffdc3fc>
   436a8:	d9002917 	ldw	r4,164(sp)
   436ac:	d8c03217 	ldw	r3,200(sp)
   436b0:	20800044 	addi	r2,r4,1
   436b4:	1885883a 	add	r2,r3,r2
   436b8:	d8802e15 	stw	r2,184(sp)
   436bc:	103dbf0e 	bge	r2,zero,42dbc <__alt_data_end+0xfffdbcbc>
   436c0:	0005883a 	mov	r2,zero
   436c4:	003dbd06 	br	42dbc <__alt_data_end+0xfffdbcbc>
   436c8:	2000211e 	bne	r4,zero,43750 <___vfprintf_internal_r+0x2168>
   436cc:	9480004c 	andi	r18,r18,1
   436d0:	90001f1e 	bne	r18,zero,43750 <___vfprintf_internal_r+0x2168>
   436d4:	00800044 	movi	r2,1
   436d8:	d8802e15 	stw	r2,184(sp)
   436dc:	003db706 	br	42dbc <__alt_data_end+0xfffdbcbc>
   436e0:	00800b44 	movi	r2,45
   436e4:	05adc83a 	sub	r22,zero,r22
   436e8:	d8802305 	stb	r2,140(sp)
   436ec:	003f3f06 	br	433ec <__alt_data_end+0xfffdc2ec>
   436f0:	0005883a 	mov	r2,zero
   436f4:	003f5206 	br	43440 <__alt_data_end+0xfffdc340>
   436f8:	90a4703a 	and	r18,r18,r2
   436fc:	903f4e26 	beq	r18,zero,43438 <__alt_data_end+0xfffdc338>
   43700:	003f4a06 	br	4342c <__alt_data_end+0xfffdc32c>
   43704:	00800084 	movi	r2,2
   43708:	10c5c83a 	sub	r2,r2,r3
   4370c:	003f8406 	br	43520 <__alt_data_end+0xfffdc420>
   43710:	d8802d17 	ldw	r2,180(sp)
   43714:	d9002d17 	ldw	r4,180(sp)
   43718:	ac400043 	ldbu	r17,1(r21)
   4371c:	10800017 	ldw	r2,0(r2)
   43720:	582b883a 	mov	r21,r11
   43724:	d8802915 	stw	r2,164(sp)
   43728:	20800104 	addi	r2,r4,4
   4372c:	d9002917 	ldw	r4,164(sp)
   43730:	d8802d15 	stw	r2,180(sp)
   43734:	203e7a0e 	bge	r4,zero,43120 <__alt_data_end+0xfffdc020>
   43738:	8c403fcc 	andi	r17,r17,255
   4373c:	00bfffc4 	movi	r2,-1
   43740:	8c40201c 	xori	r17,r17,128
   43744:	d8802915 	stw	r2,164(sp)
   43748:	8c7fe004 	addi	r17,r17,-128
   4374c:	00380706 	br	4176c <__alt_data_end+0xfffda66c>
   43750:	d8c02917 	ldw	r3,164(sp)
   43754:	18c00084 	addi	r3,r3,2
   43758:	d8c02e15 	stw	r3,184(sp)
   4375c:	1805883a 	mov	r2,r3
   43760:	183d960e 	bge	r3,zero,42dbc <__alt_data_end+0xfffdbcbc>
   43764:	003fd606 	br	436c0 <__alt_data_end+0xfffdc5c0>
   43768:	0005883a 	mov	r2,zero
   4376c:	003f8e06 	br	435a8 <__alt_data_end+0xfffdc4a8>
   43770:	9080004c 	andi	r2,r18,1
   43774:	103f811e 	bne	r2,zero,4357c <__alt_data_end+0xfffdc47c>
   43778:	d8802117 	ldw	r2,132(sp)
   4377c:	1405c83a 	sub	r2,r2,r16
   43780:	d8803315 	stw	r2,204(sp)
   43784:	b47ef326 	beq	r22,r17,43354 <__alt_data_end+0xfffdc254>
   43788:	dd802617 	ldw	r22,152(sp)
   4378c:	003f1106 	br	433d4 <__alt_data_end+0xfffdc2d4>
   43790:	d9c02785 	stb	r7,158(sp)
   43794:	00390406 	br	41ba8 <__alt_data_end+0xfffdaaa8>
   43798:	d9c02785 	stb	r7,158(sp)
   4379c:	0038d306 	br	41aec <__alt_data_end+0xfffda9ec>
   437a0:	d9c02785 	stb	r7,158(sp)
   437a4:	003a6106 	br	4212c <__alt_data_end+0xfffdb02c>
   437a8:	d9c02785 	stb	r7,158(sp)
   437ac:	003af806 	br	42390 <__alt_data_end+0xfffdb290>
   437b0:	0005883a 	mov	r2,zero
   437b4:	003d7e06 	br	42db0 <__alt_data_end+0xfffdbcb0>
   437b8:	d8802344 	addi	r2,sp,141
   437bc:	003f1306 	br	4340c <__alt_data_end+0xfffdc30c>
   437c0:	d9c02785 	stb	r7,158(sp)
   437c4:	00392306 	br	41c54 <__alt_data_end+0xfffdab54>
   437c8:	d9c02785 	stb	r7,158(sp)
   437cc:	003aa906 	br	42274 <__alt_data_end+0xfffdb174>
   437d0:	d9c02785 	stb	r7,158(sp)
   437d4:	003a3d06 	br	420cc <__alt_data_end+0xfffdafcc>
   437d8:	d9c02785 	stb	r7,158(sp)
   437dc:	003aca06 	br	42308 <__alt_data_end+0xfffdb208>

000437e0 <__vfprintf_internal>:
   437e0:	00800174 	movhi	r2,5
   437e4:	10910004 	addi	r2,r2,17408
   437e8:	300f883a 	mov	r7,r6
   437ec:	280d883a 	mov	r6,r5
   437f0:	200b883a 	mov	r5,r4
   437f4:	11000017 	ldw	r4,0(r2)
   437f8:	00415e81 	jmpi	415e8 <___vfprintf_internal_r>

000437fc <__sbprintf>:
   437fc:	2880030b 	ldhu	r2,12(r5)
   43800:	2ac01917 	ldw	r11,100(r5)
   43804:	2a80038b 	ldhu	r10,14(r5)
   43808:	2a400717 	ldw	r9,28(r5)
   4380c:	2a000917 	ldw	r8,36(r5)
   43810:	defee204 	addi	sp,sp,-1144
   43814:	00c10004 	movi	r3,1024
   43818:	dc011a15 	stw	r16,1128(sp)
   4381c:	10bfff4c 	andi	r2,r2,65533
   43820:	2821883a 	mov	r16,r5
   43824:	d8cb883a 	add	r5,sp,r3
   43828:	dc811c15 	stw	r18,1136(sp)
   4382c:	dc411b15 	stw	r17,1132(sp)
   43830:	dfc11d15 	stw	ra,1140(sp)
   43834:	2025883a 	mov	r18,r4
   43838:	d881030d 	sth	r2,1036(sp)
   4383c:	dac11915 	stw	r11,1124(sp)
   43840:	da81038d 	sth	r10,1038(sp)
   43844:	da410715 	stw	r9,1052(sp)
   43848:	da010915 	stw	r8,1060(sp)
   4384c:	dec10015 	stw	sp,1024(sp)
   43850:	dec10415 	stw	sp,1040(sp)
   43854:	d8c10215 	stw	r3,1032(sp)
   43858:	d8c10515 	stw	r3,1044(sp)
   4385c:	d8010615 	stw	zero,1048(sp)
   43860:	00415e80 	call	415e8 <___vfprintf_internal_r>
   43864:	1023883a 	mov	r17,r2
   43868:	10000416 	blt	r2,zero,4387c <__sbprintf+0x80>
   4386c:	d9410004 	addi	r5,sp,1024
   43870:	9009883a 	mov	r4,r18
   43874:	00454b00 	call	454b0 <_fflush_r>
   43878:	10000d1e 	bne	r2,zero,438b0 <__sbprintf+0xb4>
   4387c:	d881030b 	ldhu	r2,1036(sp)
   43880:	1080100c 	andi	r2,r2,64
   43884:	10000326 	beq	r2,zero,43894 <__sbprintf+0x98>
   43888:	8080030b 	ldhu	r2,12(r16)
   4388c:	10801014 	ori	r2,r2,64
   43890:	8080030d 	sth	r2,12(r16)
   43894:	8805883a 	mov	r2,r17
   43898:	dfc11d17 	ldw	ra,1140(sp)
   4389c:	dc811c17 	ldw	r18,1136(sp)
   438a0:	dc411b17 	ldw	r17,1132(sp)
   438a4:	dc011a17 	ldw	r16,1128(sp)
   438a8:	dec11e04 	addi	sp,sp,1144
   438ac:	f800283a 	ret
   438b0:	047fffc4 	movi	r17,-1
   438b4:	003ff106 	br	4387c <__alt_data_end+0xfffdc77c>

000438b8 <__swsetup_r>:
   438b8:	00800174 	movhi	r2,5
   438bc:	defffd04 	addi	sp,sp,-12
   438c0:	10910004 	addi	r2,r2,17408
   438c4:	dc400115 	stw	r17,4(sp)
   438c8:	2023883a 	mov	r17,r4
   438cc:	11000017 	ldw	r4,0(r2)
   438d0:	dc000015 	stw	r16,0(sp)
   438d4:	dfc00215 	stw	ra,8(sp)
   438d8:	2821883a 	mov	r16,r5
   438dc:	20000226 	beq	r4,zero,438e8 <__swsetup_r+0x30>
   438e0:	20800e17 	ldw	r2,56(r4)
   438e4:	10003126 	beq	r2,zero,439ac <__swsetup_r+0xf4>
   438e8:	8080030b 	ldhu	r2,12(r16)
   438ec:	10c0020c 	andi	r3,r2,8
   438f0:	1009883a 	mov	r4,r2
   438f4:	18000f26 	beq	r3,zero,43934 <__swsetup_r+0x7c>
   438f8:	80c00417 	ldw	r3,16(r16)
   438fc:	18001526 	beq	r3,zero,43954 <__swsetup_r+0x9c>
   43900:	1100004c 	andi	r4,r2,1
   43904:	20001c1e 	bne	r4,zero,43978 <__swsetup_r+0xc0>
   43908:	1080008c 	andi	r2,r2,2
   4390c:	1000291e 	bne	r2,zero,439b4 <__swsetup_r+0xfc>
   43910:	80800517 	ldw	r2,20(r16)
   43914:	80800215 	stw	r2,8(r16)
   43918:	18001c26 	beq	r3,zero,4398c <__swsetup_r+0xd4>
   4391c:	0005883a 	mov	r2,zero
   43920:	dfc00217 	ldw	ra,8(sp)
   43924:	dc400117 	ldw	r17,4(sp)
   43928:	dc000017 	ldw	r16,0(sp)
   4392c:	dec00304 	addi	sp,sp,12
   43930:	f800283a 	ret
   43934:	2080040c 	andi	r2,r4,16
   43938:	10002e26 	beq	r2,zero,439f4 <__swsetup_r+0x13c>
   4393c:	2080010c 	andi	r2,r4,4
   43940:	10001e1e 	bne	r2,zero,439bc <__swsetup_r+0x104>
   43944:	80c00417 	ldw	r3,16(r16)
   43948:	20800214 	ori	r2,r4,8
   4394c:	8080030d 	sth	r2,12(r16)
   43950:	183feb1e 	bne	r3,zero,43900 <__alt_data_end+0xfffdc800>
   43954:	1100a00c 	andi	r4,r2,640
   43958:	01408004 	movi	r5,512
   4395c:	217fe826 	beq	r4,r5,43900 <__alt_data_end+0xfffdc800>
   43960:	800b883a 	mov	r5,r16
   43964:	8809883a 	mov	r4,r17
   43968:	00464300 	call	46430 <__smakebuf_r>
   4396c:	8080030b 	ldhu	r2,12(r16)
   43970:	80c00417 	ldw	r3,16(r16)
   43974:	003fe206 	br	43900 <__alt_data_end+0xfffdc800>
   43978:	80800517 	ldw	r2,20(r16)
   4397c:	80000215 	stw	zero,8(r16)
   43980:	0085c83a 	sub	r2,zero,r2
   43984:	80800615 	stw	r2,24(r16)
   43988:	183fe41e 	bne	r3,zero,4391c <__alt_data_end+0xfffdc81c>
   4398c:	80c0030b 	ldhu	r3,12(r16)
   43990:	0005883a 	mov	r2,zero
   43994:	1900200c 	andi	r4,r3,128
   43998:	203fe126 	beq	r4,zero,43920 <__alt_data_end+0xfffdc820>
   4399c:	18c01014 	ori	r3,r3,64
   439a0:	80c0030d 	sth	r3,12(r16)
   439a4:	00bfffc4 	movi	r2,-1
   439a8:	003fdd06 	br	43920 <__alt_data_end+0xfffdc820>
   439ac:	004588c0 	call	4588c <__sinit>
   439b0:	003fcd06 	br	438e8 <__alt_data_end+0xfffdc7e8>
   439b4:	0005883a 	mov	r2,zero
   439b8:	003fd606 	br	43914 <__alt_data_end+0xfffdc814>
   439bc:	81400c17 	ldw	r5,48(r16)
   439c0:	28000626 	beq	r5,zero,439dc <__swsetup_r+0x124>
   439c4:	80801004 	addi	r2,r16,64
   439c8:	28800326 	beq	r5,r2,439d8 <__swsetup_r+0x120>
   439cc:	8809883a 	mov	r4,r17
   439d0:	0045a000 	call	45a00 <_free_r>
   439d4:	8100030b 	ldhu	r4,12(r16)
   439d8:	80000c15 	stw	zero,48(r16)
   439dc:	80c00417 	ldw	r3,16(r16)
   439e0:	00bff6c4 	movi	r2,-37
   439e4:	1108703a 	and	r4,r2,r4
   439e8:	80000115 	stw	zero,4(r16)
   439ec:	80c00015 	stw	r3,0(r16)
   439f0:	003fd506 	br	43948 <__alt_data_end+0xfffdc848>
   439f4:	00800244 	movi	r2,9
   439f8:	88800015 	stw	r2,0(r17)
   439fc:	20801014 	ori	r2,r4,64
   43a00:	8080030d 	sth	r2,12(r16)
   43a04:	00bfffc4 	movi	r2,-1
   43a08:	003fc506 	br	43920 <__alt_data_end+0xfffdc820>

00043a0c <quorem>:
   43a0c:	defff704 	addi	sp,sp,-36
   43a10:	dc800215 	stw	r18,8(sp)
   43a14:	20800417 	ldw	r2,16(r4)
   43a18:	2c800417 	ldw	r18,16(r5)
   43a1c:	dfc00815 	stw	ra,32(sp)
   43a20:	ddc00715 	stw	r23,28(sp)
   43a24:	dd800615 	stw	r22,24(sp)
   43a28:	dd400515 	stw	r21,20(sp)
   43a2c:	dd000415 	stw	r20,16(sp)
   43a30:	dcc00315 	stw	r19,12(sp)
   43a34:	dc400115 	stw	r17,4(sp)
   43a38:	dc000015 	stw	r16,0(sp)
   43a3c:	14807116 	blt	r2,r18,43c04 <quorem+0x1f8>
   43a40:	94bfffc4 	addi	r18,r18,-1
   43a44:	94ad883a 	add	r22,r18,r18
   43a48:	b5ad883a 	add	r22,r22,r22
   43a4c:	2c400504 	addi	r17,r5,20
   43a50:	8da9883a 	add	r20,r17,r22
   43a54:	25400504 	addi	r21,r4,20
   43a58:	282f883a 	mov	r23,r5
   43a5c:	adad883a 	add	r22,r21,r22
   43a60:	a1400017 	ldw	r5,0(r20)
   43a64:	2021883a 	mov	r16,r4
   43a68:	b1000017 	ldw	r4,0(r22)
   43a6c:	29400044 	addi	r5,r5,1
   43a70:	004b60c0 	call	4b60c <__udivsi3>
   43a74:	1027883a 	mov	r19,r2
   43a78:	10002c26 	beq	r2,zero,43b2c <quorem+0x120>
   43a7c:	a813883a 	mov	r9,r21
   43a80:	880b883a 	mov	r5,r17
   43a84:	0009883a 	mov	r4,zero
   43a88:	000d883a 	mov	r6,zero
   43a8c:	2a000017 	ldw	r8,0(r5)
   43a90:	49c00017 	ldw	r7,0(r9)
   43a94:	29400104 	addi	r5,r5,4
   43a98:	40bfffcc 	andi	r2,r8,65535
   43a9c:	14c5383a 	mul	r2,r2,r19
   43aa0:	4010d43a 	srli	r8,r8,16
   43aa4:	38ffffcc 	andi	r3,r7,65535
   43aa8:	1105883a 	add	r2,r2,r4
   43aac:	1008d43a 	srli	r4,r2,16
   43ab0:	44d1383a 	mul	r8,r8,r19
   43ab4:	198d883a 	add	r6,r3,r6
   43ab8:	10ffffcc 	andi	r3,r2,65535
   43abc:	30c7c83a 	sub	r3,r6,r3
   43ac0:	380ed43a 	srli	r7,r7,16
   43ac4:	4105883a 	add	r2,r8,r4
   43ac8:	180dd43a 	srai	r6,r3,16
   43acc:	113fffcc 	andi	r4,r2,65535
   43ad0:	390fc83a 	sub	r7,r7,r4
   43ad4:	398d883a 	add	r6,r7,r6
   43ad8:	300e943a 	slli	r7,r6,16
   43adc:	18ffffcc 	andi	r3,r3,65535
   43ae0:	1008d43a 	srli	r4,r2,16
   43ae4:	38ceb03a 	or	r7,r7,r3
   43ae8:	49c00015 	stw	r7,0(r9)
   43aec:	300dd43a 	srai	r6,r6,16
   43af0:	4a400104 	addi	r9,r9,4
   43af4:	a17fe52e 	bgeu	r20,r5,43a8c <__alt_data_end+0xfffdc98c>
   43af8:	b0800017 	ldw	r2,0(r22)
   43afc:	10000b1e 	bne	r2,zero,43b2c <quorem+0x120>
   43b00:	b0bfff04 	addi	r2,r22,-4
   43b04:	a880082e 	bgeu	r21,r2,43b28 <quorem+0x11c>
   43b08:	b0ffff17 	ldw	r3,-4(r22)
   43b0c:	18000326 	beq	r3,zero,43b1c <quorem+0x110>
   43b10:	00000506 	br	43b28 <quorem+0x11c>
   43b14:	10c00017 	ldw	r3,0(r2)
   43b18:	1800031e 	bne	r3,zero,43b28 <quorem+0x11c>
   43b1c:	10bfff04 	addi	r2,r2,-4
   43b20:	94bfffc4 	addi	r18,r18,-1
   43b24:	a8bffb36 	bltu	r21,r2,43b14 <__alt_data_end+0xfffdca14>
   43b28:	84800415 	stw	r18,16(r16)
   43b2c:	b80b883a 	mov	r5,r23
   43b30:	8009883a 	mov	r4,r16
   43b34:	0047b700 	call	47b70 <__mcmp>
   43b38:	10002616 	blt	r2,zero,43bd4 <quorem+0x1c8>
   43b3c:	9cc00044 	addi	r19,r19,1
   43b40:	a805883a 	mov	r2,r21
   43b44:	000b883a 	mov	r5,zero
   43b48:	11000017 	ldw	r4,0(r2)
   43b4c:	89800017 	ldw	r6,0(r17)
   43b50:	10800104 	addi	r2,r2,4
   43b54:	20ffffcc 	andi	r3,r4,65535
   43b58:	194b883a 	add	r5,r3,r5
   43b5c:	30ffffcc 	andi	r3,r6,65535
   43b60:	28c7c83a 	sub	r3,r5,r3
   43b64:	300cd43a 	srli	r6,r6,16
   43b68:	2008d43a 	srli	r4,r4,16
   43b6c:	180bd43a 	srai	r5,r3,16
   43b70:	18ffffcc 	andi	r3,r3,65535
   43b74:	2189c83a 	sub	r4,r4,r6
   43b78:	2149883a 	add	r4,r4,r5
   43b7c:	200c943a 	slli	r6,r4,16
   43b80:	8c400104 	addi	r17,r17,4
   43b84:	200bd43a 	srai	r5,r4,16
   43b88:	30c6b03a 	or	r3,r6,r3
   43b8c:	10ffff15 	stw	r3,-4(r2)
   43b90:	a47fed2e 	bgeu	r20,r17,43b48 <__alt_data_end+0xfffdca48>
   43b94:	9485883a 	add	r2,r18,r18
   43b98:	1085883a 	add	r2,r2,r2
   43b9c:	a887883a 	add	r3,r21,r2
   43ba0:	18800017 	ldw	r2,0(r3)
   43ba4:	10000b1e 	bne	r2,zero,43bd4 <quorem+0x1c8>
   43ba8:	18bfff04 	addi	r2,r3,-4
   43bac:	a880082e 	bgeu	r21,r2,43bd0 <quorem+0x1c4>
   43bb0:	18ffff17 	ldw	r3,-4(r3)
   43bb4:	18000326 	beq	r3,zero,43bc4 <quorem+0x1b8>
   43bb8:	00000506 	br	43bd0 <quorem+0x1c4>
   43bbc:	10c00017 	ldw	r3,0(r2)
   43bc0:	1800031e 	bne	r3,zero,43bd0 <quorem+0x1c4>
   43bc4:	10bfff04 	addi	r2,r2,-4
   43bc8:	94bfffc4 	addi	r18,r18,-1
   43bcc:	a8bffb36 	bltu	r21,r2,43bbc <__alt_data_end+0xfffdcabc>
   43bd0:	84800415 	stw	r18,16(r16)
   43bd4:	9805883a 	mov	r2,r19
   43bd8:	dfc00817 	ldw	ra,32(sp)
   43bdc:	ddc00717 	ldw	r23,28(sp)
   43be0:	dd800617 	ldw	r22,24(sp)
   43be4:	dd400517 	ldw	r21,20(sp)
   43be8:	dd000417 	ldw	r20,16(sp)
   43bec:	dcc00317 	ldw	r19,12(sp)
   43bf0:	dc800217 	ldw	r18,8(sp)
   43bf4:	dc400117 	ldw	r17,4(sp)
   43bf8:	dc000017 	ldw	r16,0(sp)
   43bfc:	dec00904 	addi	sp,sp,36
   43c00:	f800283a 	ret
   43c04:	0005883a 	mov	r2,zero
   43c08:	003ff306 	br	43bd8 <__alt_data_end+0xfffdcad8>

00043c0c <_dtoa_r>:
   43c0c:	20801017 	ldw	r2,64(r4)
   43c10:	deffde04 	addi	sp,sp,-136
   43c14:	df002015 	stw	fp,128(sp)
   43c18:	dcc01b15 	stw	r19,108(sp)
   43c1c:	dc801a15 	stw	r18,104(sp)
   43c20:	dc401915 	stw	r17,100(sp)
   43c24:	dc001815 	stw	r16,96(sp)
   43c28:	dfc02115 	stw	ra,132(sp)
   43c2c:	ddc01f15 	stw	r23,124(sp)
   43c30:	dd801e15 	stw	r22,120(sp)
   43c34:	dd401d15 	stw	r21,116(sp)
   43c38:	dd001c15 	stw	r20,112(sp)
   43c3c:	d9c00315 	stw	r7,12(sp)
   43c40:	2039883a 	mov	fp,r4
   43c44:	3023883a 	mov	r17,r6
   43c48:	2825883a 	mov	r18,r5
   43c4c:	dc002417 	ldw	r16,144(sp)
   43c50:	3027883a 	mov	r19,r6
   43c54:	10000826 	beq	r2,zero,43c78 <_dtoa_r+0x6c>
   43c58:	21801117 	ldw	r6,68(r4)
   43c5c:	00c00044 	movi	r3,1
   43c60:	100b883a 	mov	r5,r2
   43c64:	1986983a 	sll	r3,r3,r6
   43c68:	11800115 	stw	r6,4(r2)
   43c6c:	10c00215 	stw	r3,8(r2)
   43c70:	00473500 	call	47350 <_Bfree>
   43c74:	e0001015 	stw	zero,64(fp)
   43c78:	88002e16 	blt	r17,zero,43d34 <_dtoa_r+0x128>
   43c7c:	80000015 	stw	zero,0(r16)
   43c80:	889ffc2c 	andhi	r2,r17,32752
   43c84:	00dffc34 	movhi	r3,32752
   43c88:	10c01c26 	beq	r2,r3,43cfc <_dtoa_r+0xf0>
   43c8c:	000d883a 	mov	r6,zero
   43c90:	000f883a 	mov	r7,zero
   43c94:	9009883a 	mov	r4,r18
   43c98:	980b883a 	mov	r5,r19
   43c9c:	004c85c0 	call	4c85c <__eqdf2>
   43ca0:	10002b1e 	bne	r2,zero,43d50 <_dtoa_r+0x144>
   43ca4:	d9c02317 	ldw	r7,140(sp)
   43ca8:	00800044 	movi	r2,1
   43cac:	38800015 	stw	r2,0(r7)
   43cb0:	d8802517 	ldw	r2,148(sp)
   43cb4:	10019e26 	beq	r2,zero,44330 <_dtoa_r+0x724>
   43cb8:	d8c02517 	ldw	r3,148(sp)
   43cbc:	00800174 	movhi	r2,5
   43cc0:	1089cd44 	addi	r2,r2,10037
   43cc4:	18800015 	stw	r2,0(r3)
   43cc8:	10bfffc4 	addi	r2,r2,-1
   43ccc:	dfc02117 	ldw	ra,132(sp)
   43cd0:	df002017 	ldw	fp,128(sp)
   43cd4:	ddc01f17 	ldw	r23,124(sp)
   43cd8:	dd801e17 	ldw	r22,120(sp)
   43cdc:	dd401d17 	ldw	r21,116(sp)
   43ce0:	dd001c17 	ldw	r20,112(sp)
   43ce4:	dcc01b17 	ldw	r19,108(sp)
   43ce8:	dc801a17 	ldw	r18,104(sp)
   43cec:	dc401917 	ldw	r17,100(sp)
   43cf0:	dc001817 	ldw	r16,96(sp)
   43cf4:	dec02204 	addi	sp,sp,136
   43cf8:	f800283a 	ret
   43cfc:	d8c02317 	ldw	r3,140(sp)
   43d00:	0089c3c4 	movi	r2,9999
   43d04:	18800015 	stw	r2,0(r3)
   43d08:	90017726 	beq	r18,zero,442e8 <_dtoa_r+0x6dc>
   43d0c:	00800174 	movhi	r2,5
   43d10:	1089d904 	addi	r2,r2,10084
   43d14:	d9002517 	ldw	r4,148(sp)
   43d18:	203fec26 	beq	r4,zero,43ccc <__alt_data_end+0xfffdcbcc>
   43d1c:	10c000c7 	ldb	r3,3(r2)
   43d20:	1801781e 	bne	r3,zero,44304 <_dtoa_r+0x6f8>
   43d24:	10c000c4 	addi	r3,r2,3
   43d28:	d9802517 	ldw	r6,148(sp)
   43d2c:	30c00015 	stw	r3,0(r6)
   43d30:	003fe606 	br	43ccc <__alt_data_end+0xfffdcbcc>
   43d34:	04e00034 	movhi	r19,32768
   43d38:	9cffffc4 	addi	r19,r19,-1
   43d3c:	00800044 	movi	r2,1
   43d40:	8ce6703a 	and	r19,r17,r19
   43d44:	80800015 	stw	r2,0(r16)
   43d48:	9823883a 	mov	r17,r19
   43d4c:	003fcc06 	br	43c80 <__alt_data_end+0xfffdcb80>
   43d50:	d8800204 	addi	r2,sp,8
   43d54:	d8800015 	stw	r2,0(sp)
   43d58:	d9c00104 	addi	r7,sp,4
   43d5c:	900b883a 	mov	r5,r18
   43d60:	980d883a 	mov	r6,r19
   43d64:	e009883a 	mov	r4,fp
   43d68:	8820d53a 	srli	r16,r17,20
   43d6c:	0047f3c0 	call	47f3c <__d2b>
   43d70:	d8800915 	stw	r2,36(sp)
   43d74:	8001651e 	bne	r16,zero,4430c <_dtoa_r+0x700>
   43d78:	dd800217 	ldw	r22,8(sp)
   43d7c:	dc000117 	ldw	r16,4(sp)
   43d80:	00800804 	movi	r2,32
   43d84:	b421883a 	add	r16,r22,r16
   43d88:	80c10c84 	addi	r3,r16,1074
   43d8c:	10c2d10e 	bge	r2,r3,448d4 <_dtoa_r+0xcc8>
   43d90:	00801004 	movi	r2,64
   43d94:	81010484 	addi	r4,r16,1042
   43d98:	10c7c83a 	sub	r3,r2,r3
   43d9c:	9108d83a 	srl	r4,r18,r4
   43da0:	88e2983a 	sll	r17,r17,r3
   43da4:	2448b03a 	or	r4,r4,r17
   43da8:	004dc240 	call	4dc24 <__floatunsidf>
   43dac:	017f8434 	movhi	r5,65040
   43db0:	01800044 	movi	r6,1
   43db4:	1009883a 	mov	r4,r2
   43db8:	194b883a 	add	r5,r3,r5
   43dbc:	843fffc4 	addi	r16,r16,-1
   43dc0:	d9801115 	stw	r6,68(sp)
   43dc4:	000d883a 	mov	r6,zero
   43dc8:	01cffe34 	movhi	r7,16376
   43dcc:	004d1cc0 	call	4d1cc <__subdf3>
   43dd0:	0198dbf4 	movhi	r6,25455
   43dd4:	01cff4f4 	movhi	r7,16339
   43dd8:	3190d844 	addi	r6,r6,17249
   43ddc:	39e1e9c4 	addi	r7,r7,-30809
   43de0:	1009883a 	mov	r4,r2
   43de4:	180b883a 	mov	r5,r3
   43de8:	004cab40 	call	4cab4 <__muldf3>
   43dec:	01a2d874 	movhi	r6,35681
   43df0:	01cff1f4 	movhi	r7,16327
   43df4:	31b22cc4 	addi	r6,r6,-14157
   43df8:	39e28a04 	addi	r7,r7,-30168
   43dfc:	180b883a 	mov	r5,r3
   43e00:	1009883a 	mov	r4,r2
   43e04:	004b6c80 	call	4b6c8 <__adddf3>
   43e08:	8009883a 	mov	r4,r16
   43e0c:	1029883a 	mov	r20,r2
   43e10:	1823883a 	mov	r17,r3
   43e14:	004db480 	call	4db48 <__floatsidf>
   43e18:	019427f4 	movhi	r6,20639
   43e1c:	01cff4f4 	movhi	r7,16339
   43e20:	319e7ec4 	addi	r6,r6,31227
   43e24:	39d104c4 	addi	r7,r7,17427
   43e28:	1009883a 	mov	r4,r2
   43e2c:	180b883a 	mov	r5,r3
   43e30:	004cab40 	call	4cab4 <__muldf3>
   43e34:	100d883a 	mov	r6,r2
   43e38:	180f883a 	mov	r7,r3
   43e3c:	a009883a 	mov	r4,r20
   43e40:	880b883a 	mov	r5,r17
   43e44:	004b6c80 	call	4b6c8 <__adddf3>
   43e48:	1009883a 	mov	r4,r2
   43e4c:	180b883a 	mov	r5,r3
   43e50:	1029883a 	mov	r20,r2
   43e54:	1823883a 	mov	r17,r3
   43e58:	004dac80 	call	4dac8 <__fixdfsi>
   43e5c:	000d883a 	mov	r6,zero
   43e60:	000f883a 	mov	r7,zero
   43e64:	a009883a 	mov	r4,r20
   43e68:	880b883a 	mov	r5,r17
   43e6c:	d8800515 	stw	r2,20(sp)
   43e70:	004c9c00 	call	4c9c0 <__ledf2>
   43e74:	10028716 	blt	r2,zero,44894 <_dtoa_r+0xc88>
   43e78:	d8c00517 	ldw	r3,20(sp)
   43e7c:	00800584 	movi	r2,22
   43e80:	10c27536 	bltu	r2,r3,44858 <_dtoa_r+0xc4c>
   43e84:	180490fa 	slli	r2,r3,3
   43e88:	00c00174 	movhi	r3,5
   43e8c:	18c9f504 	addi	r3,r3,10196
   43e90:	1885883a 	add	r2,r3,r2
   43e94:	11000017 	ldw	r4,0(r2)
   43e98:	11400117 	ldw	r5,4(r2)
   43e9c:	900d883a 	mov	r6,r18
   43ea0:	980f883a 	mov	r7,r19
   43ea4:	004c8e40 	call	4c8e4 <__gedf2>
   43ea8:	00828d0e 	bge	zero,r2,448e0 <_dtoa_r+0xcd4>
   43eac:	d9000517 	ldw	r4,20(sp)
   43eb0:	d8000e15 	stw	zero,56(sp)
   43eb4:	213fffc4 	addi	r4,r4,-1
   43eb8:	d9000515 	stw	r4,20(sp)
   43ebc:	b42dc83a 	sub	r22,r22,r16
   43ec0:	b5bfffc4 	addi	r22,r22,-1
   43ec4:	b0026f16 	blt	r22,zero,44884 <_dtoa_r+0xc78>
   43ec8:	d8000815 	stw	zero,32(sp)
   43ecc:	d9c00517 	ldw	r7,20(sp)
   43ed0:	38026416 	blt	r7,zero,44864 <_dtoa_r+0xc58>
   43ed4:	b1ed883a 	add	r22,r22,r7
   43ed8:	d9c00d15 	stw	r7,52(sp)
   43edc:	d8000a15 	stw	zero,40(sp)
   43ee0:	d9800317 	ldw	r6,12(sp)
   43ee4:	00800244 	movi	r2,9
   43ee8:	11811436 	bltu	r2,r6,4433c <_dtoa_r+0x730>
   43eec:	00800144 	movi	r2,5
   43ef0:	1184e10e 	bge	r2,r6,45278 <_dtoa_r+0x166c>
   43ef4:	31bfff04 	addi	r6,r6,-4
   43ef8:	d9800315 	stw	r6,12(sp)
   43efc:	0023883a 	mov	r17,zero
   43f00:	d9800317 	ldw	r6,12(sp)
   43f04:	008000c4 	movi	r2,3
   43f08:	30836726 	beq	r6,r2,44ca8 <_dtoa_r+0x109c>
   43f0c:	1183410e 	bge	r2,r6,44c14 <_dtoa_r+0x1008>
   43f10:	d9c00317 	ldw	r7,12(sp)
   43f14:	00800104 	movi	r2,4
   43f18:	38827c26 	beq	r7,r2,4490c <_dtoa_r+0xd00>
   43f1c:	00800144 	movi	r2,5
   43f20:	3884c41e 	bne	r7,r2,45234 <_dtoa_r+0x1628>
   43f24:	00800044 	movi	r2,1
   43f28:	d8800b15 	stw	r2,44(sp)
   43f2c:	d8c00517 	ldw	r3,20(sp)
   43f30:	d9002217 	ldw	r4,136(sp)
   43f34:	1907883a 	add	r3,r3,r4
   43f38:	19800044 	addi	r6,r3,1
   43f3c:	d8c00c15 	stw	r3,48(sp)
   43f40:	d9800615 	stw	r6,24(sp)
   43f44:	0183a40e 	bge	zero,r6,44dd8 <_dtoa_r+0x11cc>
   43f48:	d9800617 	ldw	r6,24(sp)
   43f4c:	3021883a 	mov	r16,r6
   43f50:	e0001115 	stw	zero,68(fp)
   43f54:	008005c4 	movi	r2,23
   43f58:	1184c92e 	bgeu	r2,r6,45280 <_dtoa_r+0x1674>
   43f5c:	00c00044 	movi	r3,1
   43f60:	00800104 	movi	r2,4
   43f64:	1085883a 	add	r2,r2,r2
   43f68:	11000504 	addi	r4,r2,20
   43f6c:	180b883a 	mov	r5,r3
   43f70:	18c00044 	addi	r3,r3,1
   43f74:	313ffb2e 	bgeu	r6,r4,43f64 <__alt_data_end+0xfffdce64>
   43f78:	e1401115 	stw	r5,68(fp)
   43f7c:	e009883a 	mov	r4,fp
   43f80:	00472a80 	call	472a8 <_Balloc>
   43f84:	d8800715 	stw	r2,28(sp)
   43f88:	e0801015 	stw	r2,64(fp)
   43f8c:	00800384 	movi	r2,14
   43f90:	1400f736 	bltu	r2,r16,44370 <_dtoa_r+0x764>
   43f94:	8800f626 	beq	r17,zero,44370 <_dtoa_r+0x764>
   43f98:	d9c00517 	ldw	r7,20(sp)
   43f9c:	01c39a0e 	bge	zero,r7,44e08 <_dtoa_r+0x11fc>
   43fa0:	388003cc 	andi	r2,r7,15
   43fa4:	100490fa 	slli	r2,r2,3
   43fa8:	382bd13a 	srai	r21,r7,4
   43fac:	00c00174 	movhi	r3,5
   43fb0:	18c9f504 	addi	r3,r3,10196
   43fb4:	1885883a 	add	r2,r3,r2
   43fb8:	a8c0040c 	andi	r3,r21,16
   43fbc:	12400017 	ldw	r9,0(r2)
   43fc0:	12000117 	ldw	r8,4(r2)
   43fc4:	18037926 	beq	r3,zero,44dac <_dtoa_r+0x11a0>
   43fc8:	00800174 	movhi	r2,5
   43fcc:	1089eb04 	addi	r2,r2,10156
   43fd0:	11800817 	ldw	r6,32(r2)
   43fd4:	11c00917 	ldw	r7,36(r2)
   43fd8:	9009883a 	mov	r4,r18
   43fdc:	980b883a 	mov	r5,r19
   43fe0:	da001715 	stw	r8,92(sp)
   43fe4:	da401615 	stw	r9,88(sp)
   43fe8:	004bf740 	call	4bf74 <__divdf3>
   43fec:	da001717 	ldw	r8,92(sp)
   43ff0:	da401617 	ldw	r9,88(sp)
   43ff4:	ad4003cc 	andi	r21,r21,15
   43ff8:	040000c4 	movi	r16,3
   43ffc:	1023883a 	mov	r17,r2
   44000:	1829883a 	mov	r20,r3
   44004:	a8001126 	beq	r21,zero,4404c <_dtoa_r+0x440>
   44008:	05c00174 	movhi	r23,5
   4400c:	bdc9eb04 	addi	r23,r23,10156
   44010:	4805883a 	mov	r2,r9
   44014:	4007883a 	mov	r3,r8
   44018:	a980004c 	andi	r6,r21,1
   4401c:	1009883a 	mov	r4,r2
   44020:	a82bd07a 	srai	r21,r21,1
   44024:	180b883a 	mov	r5,r3
   44028:	30000426 	beq	r6,zero,4403c <_dtoa_r+0x430>
   4402c:	b9800017 	ldw	r6,0(r23)
   44030:	b9c00117 	ldw	r7,4(r23)
   44034:	84000044 	addi	r16,r16,1
   44038:	004cab40 	call	4cab4 <__muldf3>
   4403c:	bdc00204 	addi	r23,r23,8
   44040:	a83ff51e 	bne	r21,zero,44018 <__alt_data_end+0xfffdcf18>
   44044:	1013883a 	mov	r9,r2
   44048:	1811883a 	mov	r8,r3
   4404c:	480d883a 	mov	r6,r9
   44050:	400f883a 	mov	r7,r8
   44054:	8809883a 	mov	r4,r17
   44058:	a00b883a 	mov	r5,r20
   4405c:	004bf740 	call	4bf74 <__divdf3>
   44060:	d8800f15 	stw	r2,60(sp)
   44064:	d8c01015 	stw	r3,64(sp)
   44068:	d8c00e17 	ldw	r3,56(sp)
   4406c:	18000626 	beq	r3,zero,44088 <_dtoa_r+0x47c>
   44070:	d9000f17 	ldw	r4,60(sp)
   44074:	d9401017 	ldw	r5,64(sp)
   44078:	000d883a 	mov	r6,zero
   4407c:	01cffc34 	movhi	r7,16368
   44080:	004c9c00 	call	4c9c0 <__ledf2>
   44084:	10040b16 	blt	r2,zero,450b4 <_dtoa_r+0x14a8>
   44088:	8009883a 	mov	r4,r16
   4408c:	004db480 	call	4db48 <__floatsidf>
   44090:	d9800f17 	ldw	r6,60(sp)
   44094:	d9c01017 	ldw	r7,64(sp)
   44098:	1009883a 	mov	r4,r2
   4409c:	180b883a 	mov	r5,r3
   440a0:	004cab40 	call	4cab4 <__muldf3>
   440a4:	000d883a 	mov	r6,zero
   440a8:	01d00734 	movhi	r7,16412
   440ac:	1009883a 	mov	r4,r2
   440b0:	180b883a 	mov	r5,r3
   440b4:	004b6c80 	call	4b6c8 <__adddf3>
   440b8:	1021883a 	mov	r16,r2
   440bc:	d8800617 	ldw	r2,24(sp)
   440c0:	047f3034 	movhi	r17,64704
   440c4:	1c63883a 	add	r17,r3,r17
   440c8:	10031826 	beq	r2,zero,44d2c <_dtoa_r+0x1120>
   440cc:	d8c00517 	ldw	r3,20(sp)
   440d0:	db000617 	ldw	r12,24(sp)
   440d4:	d8c01315 	stw	r3,76(sp)
   440d8:	d9000b17 	ldw	r4,44(sp)
   440dc:	20038f26 	beq	r4,zero,44f1c <_dtoa_r+0x1310>
   440e0:	60bfffc4 	addi	r2,r12,-1
   440e4:	100490fa 	slli	r2,r2,3
   440e8:	00c00174 	movhi	r3,5
   440ec:	18c9f504 	addi	r3,r3,10196
   440f0:	1885883a 	add	r2,r3,r2
   440f4:	11800017 	ldw	r6,0(r2)
   440f8:	11c00117 	ldw	r7,4(r2)
   440fc:	d8800717 	ldw	r2,28(sp)
   44100:	0009883a 	mov	r4,zero
   44104:	014ff834 	movhi	r5,16352
   44108:	db001615 	stw	r12,88(sp)
   4410c:	15c00044 	addi	r23,r2,1
   44110:	004bf740 	call	4bf74 <__divdf3>
   44114:	800d883a 	mov	r6,r16
   44118:	880f883a 	mov	r7,r17
   4411c:	1009883a 	mov	r4,r2
   44120:	180b883a 	mov	r5,r3
   44124:	004d1cc0 	call	4d1cc <__subdf3>
   44128:	d9401017 	ldw	r5,64(sp)
   4412c:	d9000f17 	ldw	r4,60(sp)
   44130:	102b883a 	mov	r21,r2
   44134:	d8c01215 	stw	r3,72(sp)
   44138:	004dac80 	call	4dac8 <__fixdfsi>
   4413c:	1009883a 	mov	r4,r2
   44140:	1029883a 	mov	r20,r2
   44144:	004db480 	call	4db48 <__floatsidf>
   44148:	d9000f17 	ldw	r4,60(sp)
   4414c:	d9401017 	ldw	r5,64(sp)
   44150:	100d883a 	mov	r6,r2
   44154:	180f883a 	mov	r7,r3
   44158:	004d1cc0 	call	4d1cc <__subdf3>
   4415c:	1823883a 	mov	r17,r3
   44160:	d8c00717 	ldw	r3,28(sp)
   44164:	d9401217 	ldw	r5,72(sp)
   44168:	a2000c04 	addi	r8,r20,48
   4416c:	1021883a 	mov	r16,r2
   44170:	1a000005 	stb	r8,0(r3)
   44174:	800d883a 	mov	r6,r16
   44178:	880f883a 	mov	r7,r17
   4417c:	a809883a 	mov	r4,r21
   44180:	4029883a 	mov	r20,r8
   44184:	004c8e40 	call	4c8e4 <__gedf2>
   44188:	00841d16 	blt	zero,r2,45200 <_dtoa_r+0x15f4>
   4418c:	800d883a 	mov	r6,r16
   44190:	880f883a 	mov	r7,r17
   44194:	0009883a 	mov	r4,zero
   44198:	014ffc34 	movhi	r5,16368
   4419c:	004d1cc0 	call	4d1cc <__subdf3>
   441a0:	d9401217 	ldw	r5,72(sp)
   441a4:	100d883a 	mov	r6,r2
   441a8:	180f883a 	mov	r7,r3
   441ac:	a809883a 	mov	r4,r21
   441b0:	004c8e40 	call	4c8e4 <__gedf2>
   441b4:	db001617 	ldw	r12,88(sp)
   441b8:	00840e16 	blt	zero,r2,451f4 <_dtoa_r+0x15e8>
   441bc:	00800044 	movi	r2,1
   441c0:	13006b0e 	bge	r2,r12,44370 <_dtoa_r+0x764>
   441c4:	d9000717 	ldw	r4,28(sp)
   441c8:	dd800f15 	stw	r22,60(sp)
   441cc:	dcc01015 	stw	r19,64(sp)
   441d0:	2319883a 	add	r12,r4,r12
   441d4:	dcc01217 	ldw	r19,72(sp)
   441d8:	602d883a 	mov	r22,r12
   441dc:	dc801215 	stw	r18,72(sp)
   441e0:	b825883a 	mov	r18,r23
   441e4:	00000906 	br	4420c <_dtoa_r+0x600>
   441e8:	004d1cc0 	call	4d1cc <__subdf3>
   441ec:	a80d883a 	mov	r6,r21
   441f0:	980f883a 	mov	r7,r19
   441f4:	1009883a 	mov	r4,r2
   441f8:	180b883a 	mov	r5,r3
   441fc:	004c9c00 	call	4c9c0 <__ledf2>
   44200:	1003e816 	blt	r2,zero,451a4 <_dtoa_r+0x1598>
   44204:	b825883a 	mov	r18,r23
   44208:	bd83e926 	beq	r23,r22,451b0 <_dtoa_r+0x15a4>
   4420c:	a809883a 	mov	r4,r21
   44210:	980b883a 	mov	r5,r19
   44214:	000d883a 	mov	r6,zero
   44218:	01d00934 	movhi	r7,16420
   4421c:	004cab40 	call	4cab4 <__muldf3>
   44220:	000d883a 	mov	r6,zero
   44224:	01d00934 	movhi	r7,16420
   44228:	8009883a 	mov	r4,r16
   4422c:	880b883a 	mov	r5,r17
   44230:	102b883a 	mov	r21,r2
   44234:	1827883a 	mov	r19,r3
   44238:	004cab40 	call	4cab4 <__muldf3>
   4423c:	180b883a 	mov	r5,r3
   44240:	1009883a 	mov	r4,r2
   44244:	1821883a 	mov	r16,r3
   44248:	1023883a 	mov	r17,r2
   4424c:	004dac80 	call	4dac8 <__fixdfsi>
   44250:	1009883a 	mov	r4,r2
   44254:	1029883a 	mov	r20,r2
   44258:	004db480 	call	4db48 <__floatsidf>
   4425c:	8809883a 	mov	r4,r17
   44260:	800b883a 	mov	r5,r16
   44264:	100d883a 	mov	r6,r2
   44268:	180f883a 	mov	r7,r3
   4426c:	004d1cc0 	call	4d1cc <__subdf3>
   44270:	a5000c04 	addi	r20,r20,48
   44274:	a80d883a 	mov	r6,r21
   44278:	980f883a 	mov	r7,r19
   4427c:	1009883a 	mov	r4,r2
   44280:	180b883a 	mov	r5,r3
   44284:	95000005 	stb	r20,0(r18)
   44288:	1021883a 	mov	r16,r2
   4428c:	1823883a 	mov	r17,r3
   44290:	004c9c00 	call	4c9c0 <__ledf2>
   44294:	bdc00044 	addi	r23,r23,1
   44298:	800d883a 	mov	r6,r16
   4429c:	880f883a 	mov	r7,r17
   442a0:	0009883a 	mov	r4,zero
   442a4:	014ffc34 	movhi	r5,16368
   442a8:	103fcf0e 	bge	r2,zero,441e8 <__alt_data_end+0xfffdd0e8>
   442ac:	d8c01317 	ldw	r3,76(sp)
   442b0:	d8c00515 	stw	r3,20(sp)
   442b4:	d9400917 	ldw	r5,36(sp)
   442b8:	e009883a 	mov	r4,fp
   442bc:	00473500 	call	47350 <_Bfree>
   442c0:	d9000517 	ldw	r4,20(sp)
   442c4:	d9802317 	ldw	r6,140(sp)
   442c8:	d9c02517 	ldw	r7,148(sp)
   442cc:	b8000005 	stb	zero,0(r23)
   442d0:	20800044 	addi	r2,r4,1
   442d4:	30800015 	stw	r2,0(r6)
   442d8:	3802aa26 	beq	r7,zero,44d84 <_dtoa_r+0x1178>
   442dc:	3dc00015 	stw	r23,0(r7)
   442e0:	d8800717 	ldw	r2,28(sp)
   442e4:	003e7906 	br	43ccc <__alt_data_end+0xfffdcbcc>
   442e8:	00800434 	movhi	r2,16
   442ec:	10bfffc4 	addi	r2,r2,-1
   442f0:	88a2703a 	and	r17,r17,r2
   442f4:	883e851e 	bne	r17,zero,43d0c <__alt_data_end+0xfffdcc0c>
   442f8:	00800174 	movhi	r2,5
   442fc:	1089d604 	addi	r2,r2,10072
   44300:	003e8406 	br	43d14 <__alt_data_end+0xfffdcc14>
   44304:	10c00204 	addi	r3,r2,8
   44308:	003e8706 	br	43d28 <__alt_data_end+0xfffdcc28>
   4430c:	01400434 	movhi	r5,16
   44310:	297fffc4 	addi	r5,r5,-1
   44314:	994a703a 	and	r5,r19,r5
   44318:	9009883a 	mov	r4,r18
   4431c:	843f0044 	addi	r16,r16,-1023
   44320:	294ffc34 	orhi	r5,r5,16368
   44324:	dd800217 	ldw	r22,8(sp)
   44328:	d8001115 	stw	zero,68(sp)
   4432c:	003ea506 	br	43dc4 <__alt_data_end+0xfffdccc4>
   44330:	00800174 	movhi	r2,5
   44334:	1089cd04 	addi	r2,r2,10036
   44338:	003e6406 	br	43ccc <__alt_data_end+0xfffdcbcc>
   4433c:	e0001115 	stw	zero,68(fp)
   44340:	000b883a 	mov	r5,zero
   44344:	e009883a 	mov	r4,fp
   44348:	00472a80 	call	472a8 <_Balloc>
   4434c:	01bfffc4 	movi	r6,-1
   44350:	01c00044 	movi	r7,1
   44354:	d8800715 	stw	r2,28(sp)
   44358:	d9800c15 	stw	r6,48(sp)
   4435c:	e0801015 	stw	r2,64(fp)
   44360:	d8000315 	stw	zero,12(sp)
   44364:	d9c00b15 	stw	r7,44(sp)
   44368:	d9800615 	stw	r6,24(sp)
   4436c:	d8002215 	stw	zero,136(sp)
   44370:	d8800117 	ldw	r2,4(sp)
   44374:	10008916 	blt	r2,zero,4459c <_dtoa_r+0x990>
   44378:	d9000517 	ldw	r4,20(sp)
   4437c:	00c00384 	movi	r3,14
   44380:	19008616 	blt	r3,r4,4459c <_dtoa_r+0x990>
   44384:	200490fa 	slli	r2,r4,3
   44388:	00c00174 	movhi	r3,5
   4438c:	d9802217 	ldw	r6,136(sp)
   44390:	18c9f504 	addi	r3,r3,10196
   44394:	1885883a 	add	r2,r3,r2
   44398:	14000017 	ldw	r16,0(r2)
   4439c:	14400117 	ldw	r17,4(r2)
   443a0:	30016316 	blt	r6,zero,44930 <_dtoa_r+0xd24>
   443a4:	800d883a 	mov	r6,r16
   443a8:	880f883a 	mov	r7,r17
   443ac:	9009883a 	mov	r4,r18
   443b0:	980b883a 	mov	r5,r19
   443b4:	004bf740 	call	4bf74 <__divdf3>
   443b8:	180b883a 	mov	r5,r3
   443bc:	1009883a 	mov	r4,r2
   443c0:	004dac80 	call	4dac8 <__fixdfsi>
   443c4:	1009883a 	mov	r4,r2
   443c8:	102b883a 	mov	r21,r2
   443cc:	004db480 	call	4db48 <__floatsidf>
   443d0:	800d883a 	mov	r6,r16
   443d4:	880f883a 	mov	r7,r17
   443d8:	1009883a 	mov	r4,r2
   443dc:	180b883a 	mov	r5,r3
   443e0:	004cab40 	call	4cab4 <__muldf3>
   443e4:	100d883a 	mov	r6,r2
   443e8:	180f883a 	mov	r7,r3
   443ec:	9009883a 	mov	r4,r18
   443f0:	980b883a 	mov	r5,r19
   443f4:	004d1cc0 	call	4d1cc <__subdf3>
   443f8:	d9c00717 	ldw	r7,28(sp)
   443fc:	1009883a 	mov	r4,r2
   44400:	a8800c04 	addi	r2,r21,48
   44404:	38800005 	stb	r2,0(r7)
   44408:	3dc00044 	addi	r23,r7,1
   4440c:	d9c00617 	ldw	r7,24(sp)
   44410:	01800044 	movi	r6,1
   44414:	180b883a 	mov	r5,r3
   44418:	2005883a 	mov	r2,r4
   4441c:	39803826 	beq	r7,r6,44500 <_dtoa_r+0x8f4>
   44420:	000d883a 	mov	r6,zero
   44424:	01d00934 	movhi	r7,16420
   44428:	004cab40 	call	4cab4 <__muldf3>
   4442c:	000d883a 	mov	r6,zero
   44430:	000f883a 	mov	r7,zero
   44434:	1009883a 	mov	r4,r2
   44438:	180b883a 	mov	r5,r3
   4443c:	1025883a 	mov	r18,r2
   44440:	1827883a 	mov	r19,r3
   44444:	004c85c0 	call	4c85c <__eqdf2>
   44448:	103f9a26 	beq	r2,zero,442b4 <__alt_data_end+0xfffdd1b4>
   4444c:	d9c00617 	ldw	r7,24(sp)
   44450:	d8c00717 	ldw	r3,28(sp)
   44454:	b829883a 	mov	r20,r23
   44458:	38bfffc4 	addi	r2,r7,-1
   4445c:	18ad883a 	add	r22,r3,r2
   44460:	00000a06 	br	4448c <_dtoa_r+0x880>
   44464:	004cab40 	call	4cab4 <__muldf3>
   44468:	000d883a 	mov	r6,zero
   4446c:	000f883a 	mov	r7,zero
   44470:	1009883a 	mov	r4,r2
   44474:	180b883a 	mov	r5,r3
   44478:	1025883a 	mov	r18,r2
   4447c:	1827883a 	mov	r19,r3
   44480:	b829883a 	mov	r20,r23
   44484:	004c85c0 	call	4c85c <__eqdf2>
   44488:	103f8a26 	beq	r2,zero,442b4 <__alt_data_end+0xfffdd1b4>
   4448c:	800d883a 	mov	r6,r16
   44490:	880f883a 	mov	r7,r17
   44494:	9009883a 	mov	r4,r18
   44498:	980b883a 	mov	r5,r19
   4449c:	004bf740 	call	4bf74 <__divdf3>
   444a0:	180b883a 	mov	r5,r3
   444a4:	1009883a 	mov	r4,r2
   444a8:	004dac80 	call	4dac8 <__fixdfsi>
   444ac:	1009883a 	mov	r4,r2
   444b0:	102b883a 	mov	r21,r2
   444b4:	004db480 	call	4db48 <__floatsidf>
   444b8:	800d883a 	mov	r6,r16
   444bc:	880f883a 	mov	r7,r17
   444c0:	1009883a 	mov	r4,r2
   444c4:	180b883a 	mov	r5,r3
   444c8:	004cab40 	call	4cab4 <__muldf3>
   444cc:	100d883a 	mov	r6,r2
   444d0:	180f883a 	mov	r7,r3
   444d4:	9009883a 	mov	r4,r18
   444d8:	980b883a 	mov	r5,r19
   444dc:	004d1cc0 	call	4d1cc <__subdf3>
   444e0:	aa000c04 	addi	r8,r21,48
   444e4:	a2000005 	stb	r8,0(r20)
   444e8:	000d883a 	mov	r6,zero
   444ec:	01d00934 	movhi	r7,16420
   444f0:	1009883a 	mov	r4,r2
   444f4:	180b883a 	mov	r5,r3
   444f8:	a5c00044 	addi	r23,r20,1
   444fc:	b53fd91e 	bne	r22,r20,44464 <__alt_data_end+0xfffdd364>
   44500:	100d883a 	mov	r6,r2
   44504:	180f883a 	mov	r7,r3
   44508:	1009883a 	mov	r4,r2
   4450c:	180b883a 	mov	r5,r3
   44510:	004b6c80 	call	4b6c8 <__adddf3>
   44514:	100d883a 	mov	r6,r2
   44518:	180f883a 	mov	r7,r3
   4451c:	8009883a 	mov	r4,r16
   44520:	880b883a 	mov	r5,r17
   44524:	1027883a 	mov	r19,r2
   44528:	1825883a 	mov	r18,r3
   4452c:	004c9c00 	call	4c9c0 <__ledf2>
   44530:	10000816 	blt	r2,zero,44554 <_dtoa_r+0x948>
   44534:	980d883a 	mov	r6,r19
   44538:	900f883a 	mov	r7,r18
   4453c:	8009883a 	mov	r4,r16
   44540:	880b883a 	mov	r5,r17
   44544:	004c85c0 	call	4c85c <__eqdf2>
   44548:	103f5a1e 	bne	r2,zero,442b4 <__alt_data_end+0xfffdd1b4>
   4454c:	ad40004c 	andi	r21,r21,1
   44550:	a83f5826 	beq	r21,zero,442b4 <__alt_data_end+0xfffdd1b4>
   44554:	bd3fffc3 	ldbu	r20,-1(r23)
   44558:	b8bfffc4 	addi	r2,r23,-1
   4455c:	1007883a 	mov	r3,r2
   44560:	01400e44 	movi	r5,57
   44564:	d9800717 	ldw	r6,28(sp)
   44568:	00000506 	br	44580 <_dtoa_r+0x974>
   4456c:	18ffffc4 	addi	r3,r3,-1
   44570:	11824726 	beq	r2,r6,44e90 <_dtoa_r+0x1284>
   44574:	1d000003 	ldbu	r20,0(r3)
   44578:	102f883a 	mov	r23,r2
   4457c:	10bfffc4 	addi	r2,r2,-1
   44580:	a1003fcc 	andi	r4,r20,255
   44584:	2100201c 	xori	r4,r4,128
   44588:	213fe004 	addi	r4,r4,-128
   4458c:	217ff726 	beq	r4,r5,4456c <__alt_data_end+0xfffdd46c>
   44590:	a2000044 	addi	r8,r20,1
   44594:	12000005 	stb	r8,0(r2)
   44598:	003f4606 	br	442b4 <__alt_data_end+0xfffdd1b4>
   4459c:	d9000b17 	ldw	r4,44(sp)
   445a0:	2000c826 	beq	r4,zero,448c4 <_dtoa_r+0xcb8>
   445a4:	d9800317 	ldw	r6,12(sp)
   445a8:	00c00044 	movi	r3,1
   445ac:	1980f90e 	bge	r3,r6,44994 <_dtoa_r+0xd88>
   445b0:	d8800617 	ldw	r2,24(sp)
   445b4:	d8c00a17 	ldw	r3,40(sp)
   445b8:	157fffc4 	addi	r21,r2,-1
   445bc:	1d41f316 	blt	r3,r21,44d8c <_dtoa_r+0x1180>
   445c0:	1d6bc83a 	sub	r21,r3,r21
   445c4:	d9c00617 	ldw	r7,24(sp)
   445c8:	3802aa16 	blt	r7,zero,45074 <_dtoa_r+0x1468>
   445cc:	dd000817 	ldw	r20,32(sp)
   445d0:	d8800617 	ldw	r2,24(sp)
   445d4:	d8c00817 	ldw	r3,32(sp)
   445d8:	01400044 	movi	r5,1
   445dc:	e009883a 	mov	r4,fp
   445e0:	1887883a 	add	r3,r3,r2
   445e4:	d8c00815 	stw	r3,32(sp)
   445e8:	b0ad883a 	add	r22,r22,r2
   445ec:	00476b40 	call	476b4 <__i2b>
   445f0:	1023883a 	mov	r17,r2
   445f4:	a0000826 	beq	r20,zero,44618 <_dtoa_r+0xa0c>
   445f8:	0580070e 	bge	zero,r22,44618 <_dtoa_r+0xa0c>
   445fc:	a005883a 	mov	r2,r20
   44600:	b500b916 	blt	r22,r20,448e8 <_dtoa_r+0xcdc>
   44604:	d9000817 	ldw	r4,32(sp)
   44608:	a0a9c83a 	sub	r20,r20,r2
   4460c:	b0adc83a 	sub	r22,r22,r2
   44610:	2089c83a 	sub	r4,r4,r2
   44614:	d9000815 	stw	r4,32(sp)
   44618:	d9800a17 	ldw	r6,40(sp)
   4461c:	0181810e 	bge	zero,r6,44c24 <_dtoa_r+0x1018>
   44620:	d9c00b17 	ldw	r7,44(sp)
   44624:	3800b326 	beq	r7,zero,448f4 <_dtoa_r+0xce8>
   44628:	a800b226 	beq	r21,zero,448f4 <_dtoa_r+0xce8>
   4462c:	880b883a 	mov	r5,r17
   44630:	a80d883a 	mov	r6,r21
   44634:	e009883a 	mov	r4,fp
   44638:	00478e80 	call	478e8 <__pow5mult>
   4463c:	d9800917 	ldw	r6,36(sp)
   44640:	100b883a 	mov	r5,r2
   44644:	e009883a 	mov	r4,fp
   44648:	1023883a 	mov	r17,r2
   4464c:	00476f00 	call	476f0 <__multiply>
   44650:	1021883a 	mov	r16,r2
   44654:	d8800a17 	ldw	r2,40(sp)
   44658:	d9400917 	ldw	r5,36(sp)
   4465c:	e009883a 	mov	r4,fp
   44660:	1545c83a 	sub	r2,r2,r21
   44664:	d8800a15 	stw	r2,40(sp)
   44668:	00473500 	call	47350 <_Bfree>
   4466c:	d8c00a17 	ldw	r3,40(sp)
   44670:	18009f1e 	bne	r3,zero,448f0 <_dtoa_r+0xce4>
   44674:	05c00044 	movi	r23,1
   44678:	e009883a 	mov	r4,fp
   4467c:	b80b883a 	mov	r5,r23
   44680:	00476b40 	call	476b4 <__i2b>
   44684:	d9000d17 	ldw	r4,52(sp)
   44688:	102b883a 	mov	r21,r2
   4468c:	2000ce26 	beq	r4,zero,449c8 <_dtoa_r+0xdbc>
   44690:	200d883a 	mov	r6,r4
   44694:	100b883a 	mov	r5,r2
   44698:	e009883a 	mov	r4,fp
   4469c:	00478e80 	call	478e8 <__pow5mult>
   446a0:	d9800317 	ldw	r6,12(sp)
   446a4:	102b883a 	mov	r21,r2
   446a8:	b981810e 	bge	r23,r6,44cb0 <_dtoa_r+0x10a4>
   446ac:	0027883a 	mov	r19,zero
   446b0:	a8800417 	ldw	r2,16(r21)
   446b4:	05c00804 	movi	r23,32
   446b8:	10800104 	addi	r2,r2,4
   446bc:	1085883a 	add	r2,r2,r2
   446c0:	1085883a 	add	r2,r2,r2
   446c4:	a885883a 	add	r2,r21,r2
   446c8:	11000017 	ldw	r4,0(r2)
   446cc:	004759c0 	call	4759c <__hi0bits>
   446d0:	b885c83a 	sub	r2,r23,r2
   446d4:	1585883a 	add	r2,r2,r22
   446d8:	108007cc 	andi	r2,r2,31
   446dc:	1000b326 	beq	r2,zero,449ac <_dtoa_r+0xda0>
   446e0:	00c00804 	movi	r3,32
   446e4:	1887c83a 	sub	r3,r3,r2
   446e8:	01000104 	movi	r4,4
   446ec:	20c2cd0e 	bge	r4,r3,45224 <_dtoa_r+0x1618>
   446f0:	00c00704 	movi	r3,28
   446f4:	1885c83a 	sub	r2,r3,r2
   446f8:	d8c00817 	ldw	r3,32(sp)
   446fc:	a0a9883a 	add	r20,r20,r2
   44700:	b0ad883a 	add	r22,r22,r2
   44704:	1887883a 	add	r3,r3,r2
   44708:	d8c00815 	stw	r3,32(sp)
   4470c:	d9800817 	ldw	r6,32(sp)
   44710:	0180040e 	bge	zero,r6,44724 <_dtoa_r+0xb18>
   44714:	800b883a 	mov	r5,r16
   44718:	e009883a 	mov	r4,fp
   4471c:	0047a280 	call	47a28 <__lshift>
   44720:	1021883a 	mov	r16,r2
   44724:	0580050e 	bge	zero,r22,4473c <_dtoa_r+0xb30>
   44728:	a80b883a 	mov	r5,r21
   4472c:	b00d883a 	mov	r6,r22
   44730:	e009883a 	mov	r4,fp
   44734:	0047a280 	call	47a28 <__lshift>
   44738:	102b883a 	mov	r21,r2
   4473c:	d9c00e17 	ldw	r7,56(sp)
   44740:	3801211e 	bne	r7,zero,44bc8 <_dtoa_r+0xfbc>
   44744:	d9800617 	ldw	r6,24(sp)
   44748:	0181380e 	bge	zero,r6,44c2c <_dtoa_r+0x1020>
   4474c:	d8c00b17 	ldw	r3,44(sp)
   44750:	1800ab1e 	bne	r3,zero,44a00 <_dtoa_r+0xdf4>
   44754:	dc800717 	ldw	r18,28(sp)
   44758:	dcc00617 	ldw	r19,24(sp)
   4475c:	9029883a 	mov	r20,r18
   44760:	00000206 	br	4476c <_dtoa_r+0xb60>
   44764:	00473780 	call	47378 <__multadd>
   44768:	1021883a 	mov	r16,r2
   4476c:	a80b883a 	mov	r5,r21
   44770:	8009883a 	mov	r4,r16
   44774:	0043a0c0 	call	43a0c <quorem>
   44778:	10800c04 	addi	r2,r2,48
   4477c:	90800005 	stb	r2,0(r18)
   44780:	94800044 	addi	r18,r18,1
   44784:	9507c83a 	sub	r3,r18,r20
   44788:	000f883a 	mov	r7,zero
   4478c:	01800284 	movi	r6,10
   44790:	800b883a 	mov	r5,r16
   44794:	e009883a 	mov	r4,fp
   44798:	1cfff216 	blt	r3,r19,44764 <__alt_data_end+0xfffdd664>
   4479c:	1011883a 	mov	r8,r2
   447a0:	d8800617 	ldw	r2,24(sp)
   447a4:	0082370e 	bge	zero,r2,45084 <_dtoa_r+0x1478>
   447a8:	d9000717 	ldw	r4,28(sp)
   447ac:	0025883a 	mov	r18,zero
   447b0:	20af883a 	add	r23,r4,r2
   447b4:	01800044 	movi	r6,1
   447b8:	800b883a 	mov	r5,r16
   447bc:	e009883a 	mov	r4,fp
   447c0:	da001715 	stw	r8,92(sp)
   447c4:	0047a280 	call	47a28 <__lshift>
   447c8:	a80b883a 	mov	r5,r21
   447cc:	1009883a 	mov	r4,r2
   447d0:	d8800915 	stw	r2,36(sp)
   447d4:	0047b700 	call	47b70 <__mcmp>
   447d8:	da001717 	ldw	r8,92(sp)
   447dc:	0081800e 	bge	zero,r2,44de0 <_dtoa_r+0x11d4>
   447e0:	b93fffc3 	ldbu	r4,-1(r23)
   447e4:	b8bfffc4 	addi	r2,r23,-1
   447e8:	1007883a 	mov	r3,r2
   447ec:	01800e44 	movi	r6,57
   447f0:	d9c00717 	ldw	r7,28(sp)
   447f4:	00000506 	br	4480c <_dtoa_r+0xc00>
   447f8:	18ffffc4 	addi	r3,r3,-1
   447fc:	11c12326 	beq	r2,r7,44c8c <_dtoa_r+0x1080>
   44800:	19000003 	ldbu	r4,0(r3)
   44804:	102f883a 	mov	r23,r2
   44808:	10bfffc4 	addi	r2,r2,-1
   4480c:	21403fcc 	andi	r5,r4,255
   44810:	2940201c 	xori	r5,r5,128
   44814:	297fe004 	addi	r5,r5,-128
   44818:	29bff726 	beq	r5,r6,447f8 <__alt_data_end+0xfffdd6f8>
   4481c:	21000044 	addi	r4,r4,1
   44820:	11000005 	stb	r4,0(r2)
   44824:	a80b883a 	mov	r5,r21
   44828:	e009883a 	mov	r4,fp
   4482c:	00473500 	call	47350 <_Bfree>
   44830:	883ea026 	beq	r17,zero,442b4 <__alt_data_end+0xfffdd1b4>
   44834:	90000426 	beq	r18,zero,44848 <_dtoa_r+0xc3c>
   44838:	94400326 	beq	r18,r17,44848 <_dtoa_r+0xc3c>
   4483c:	900b883a 	mov	r5,r18
   44840:	e009883a 	mov	r4,fp
   44844:	00473500 	call	47350 <_Bfree>
   44848:	880b883a 	mov	r5,r17
   4484c:	e009883a 	mov	r4,fp
   44850:	00473500 	call	47350 <_Bfree>
   44854:	003e9706 	br	442b4 <__alt_data_end+0xfffdd1b4>
   44858:	01800044 	movi	r6,1
   4485c:	d9800e15 	stw	r6,56(sp)
   44860:	003d9606 	br	43ebc <__alt_data_end+0xfffdcdbc>
   44864:	d8800817 	ldw	r2,32(sp)
   44868:	d8c00517 	ldw	r3,20(sp)
   4486c:	d8000d15 	stw	zero,52(sp)
   44870:	10c5c83a 	sub	r2,r2,r3
   44874:	00c9c83a 	sub	r4,zero,r3
   44878:	d8800815 	stw	r2,32(sp)
   4487c:	d9000a15 	stw	r4,40(sp)
   44880:	003d9706 	br	43ee0 <__alt_data_end+0xfffdcde0>
   44884:	05adc83a 	sub	r22,zero,r22
   44888:	dd800815 	stw	r22,32(sp)
   4488c:	002d883a 	mov	r22,zero
   44890:	003d8e06 	br	43ecc <__alt_data_end+0xfffdcdcc>
   44894:	d9000517 	ldw	r4,20(sp)
   44898:	004db480 	call	4db48 <__floatsidf>
   4489c:	100d883a 	mov	r6,r2
   448a0:	180f883a 	mov	r7,r3
   448a4:	a009883a 	mov	r4,r20
   448a8:	880b883a 	mov	r5,r17
   448ac:	004c85c0 	call	4c85c <__eqdf2>
   448b0:	103d7126 	beq	r2,zero,43e78 <__alt_data_end+0xfffdcd78>
   448b4:	d9c00517 	ldw	r7,20(sp)
   448b8:	39ffffc4 	addi	r7,r7,-1
   448bc:	d9c00515 	stw	r7,20(sp)
   448c0:	003d6d06 	br	43e78 <__alt_data_end+0xfffdcd78>
   448c4:	dd400a17 	ldw	r21,40(sp)
   448c8:	dd000817 	ldw	r20,32(sp)
   448cc:	0023883a 	mov	r17,zero
   448d0:	003f4806 	br	445f4 <__alt_data_end+0xfffdd4f4>
   448d4:	10e3c83a 	sub	r17,r2,r3
   448d8:	9448983a 	sll	r4,r18,r17
   448dc:	003d3206 	br	43da8 <__alt_data_end+0xfffdcca8>
   448e0:	d8000e15 	stw	zero,56(sp)
   448e4:	003d7506 	br	43ebc <__alt_data_end+0xfffdcdbc>
   448e8:	b005883a 	mov	r2,r22
   448ec:	003f4506 	br	44604 <__alt_data_end+0xfffdd504>
   448f0:	dc000915 	stw	r16,36(sp)
   448f4:	d9800a17 	ldw	r6,40(sp)
   448f8:	d9400917 	ldw	r5,36(sp)
   448fc:	e009883a 	mov	r4,fp
   44900:	00478e80 	call	478e8 <__pow5mult>
   44904:	1021883a 	mov	r16,r2
   44908:	003f5a06 	br	44674 <__alt_data_end+0xfffdd574>
   4490c:	01c00044 	movi	r7,1
   44910:	d9c00b15 	stw	r7,44(sp)
   44914:	d8802217 	ldw	r2,136(sp)
   44918:	0081280e 	bge	zero,r2,44dbc <_dtoa_r+0x11b0>
   4491c:	100d883a 	mov	r6,r2
   44920:	1021883a 	mov	r16,r2
   44924:	d8800c15 	stw	r2,48(sp)
   44928:	d8800615 	stw	r2,24(sp)
   4492c:	003d8806 	br	43f50 <__alt_data_end+0xfffdce50>
   44930:	d8800617 	ldw	r2,24(sp)
   44934:	00be9b16 	blt	zero,r2,443a4 <__alt_data_end+0xfffdd2a4>
   44938:	10010f1e 	bne	r2,zero,44d78 <_dtoa_r+0x116c>
   4493c:	880b883a 	mov	r5,r17
   44940:	000d883a 	mov	r6,zero
   44944:	01d00534 	movhi	r7,16404
   44948:	8009883a 	mov	r4,r16
   4494c:	004cab40 	call	4cab4 <__muldf3>
   44950:	900d883a 	mov	r6,r18
   44954:	980f883a 	mov	r7,r19
   44958:	1009883a 	mov	r4,r2
   4495c:	180b883a 	mov	r5,r3
   44960:	004c8e40 	call	4c8e4 <__gedf2>
   44964:	002b883a 	mov	r21,zero
   44968:	0023883a 	mov	r17,zero
   4496c:	1000bf16 	blt	r2,zero,44c6c <_dtoa_r+0x1060>
   44970:	d9802217 	ldw	r6,136(sp)
   44974:	ddc00717 	ldw	r23,28(sp)
   44978:	018c303a 	nor	r6,zero,r6
   4497c:	d9800515 	stw	r6,20(sp)
   44980:	a80b883a 	mov	r5,r21
   44984:	e009883a 	mov	r4,fp
   44988:	00473500 	call	47350 <_Bfree>
   4498c:	883e4926 	beq	r17,zero,442b4 <__alt_data_end+0xfffdd1b4>
   44990:	003fad06 	br	44848 <__alt_data_end+0xfffdd748>
   44994:	d9c01117 	ldw	r7,68(sp)
   44998:	3801bc26 	beq	r7,zero,4508c <_dtoa_r+0x1480>
   4499c:	10810cc4 	addi	r2,r2,1075
   449a0:	dd400a17 	ldw	r21,40(sp)
   449a4:	dd000817 	ldw	r20,32(sp)
   449a8:	003f0a06 	br	445d4 <__alt_data_end+0xfffdd4d4>
   449ac:	00800704 	movi	r2,28
   449b0:	d9000817 	ldw	r4,32(sp)
   449b4:	a0a9883a 	add	r20,r20,r2
   449b8:	b0ad883a 	add	r22,r22,r2
   449bc:	2089883a 	add	r4,r4,r2
   449c0:	d9000815 	stw	r4,32(sp)
   449c4:	003f5106 	br	4470c <__alt_data_end+0xfffdd60c>
   449c8:	d8c00317 	ldw	r3,12(sp)
   449cc:	b8c1fc0e 	bge	r23,r3,451c0 <_dtoa_r+0x15b4>
   449d0:	0027883a 	mov	r19,zero
   449d4:	b805883a 	mov	r2,r23
   449d8:	003f3e06 	br	446d4 <__alt_data_end+0xfffdd5d4>
   449dc:	880b883a 	mov	r5,r17
   449e0:	e009883a 	mov	r4,fp
   449e4:	000f883a 	mov	r7,zero
   449e8:	01800284 	movi	r6,10
   449ec:	00473780 	call	47378 <__multadd>
   449f0:	d9000c17 	ldw	r4,48(sp)
   449f4:	1023883a 	mov	r17,r2
   449f8:	0102040e 	bge	zero,r4,4520c <_dtoa_r+0x1600>
   449fc:	d9000615 	stw	r4,24(sp)
   44a00:	0500050e 	bge	zero,r20,44a18 <_dtoa_r+0xe0c>
   44a04:	880b883a 	mov	r5,r17
   44a08:	a00d883a 	mov	r6,r20
   44a0c:	e009883a 	mov	r4,fp
   44a10:	0047a280 	call	47a28 <__lshift>
   44a14:	1023883a 	mov	r17,r2
   44a18:	9801241e 	bne	r19,zero,44eac <_dtoa_r+0x12a0>
   44a1c:	8829883a 	mov	r20,r17
   44a20:	d9000617 	ldw	r4,24(sp)
   44a24:	dcc00717 	ldw	r19,28(sp)
   44a28:	9480004c 	andi	r18,r18,1
   44a2c:	20bfffc4 	addi	r2,r4,-1
   44a30:	9885883a 	add	r2,r19,r2
   44a34:	d8800415 	stw	r2,16(sp)
   44a38:	dc800615 	stw	r18,24(sp)
   44a3c:	a80b883a 	mov	r5,r21
   44a40:	8009883a 	mov	r4,r16
   44a44:	0043a0c0 	call	43a0c <quorem>
   44a48:	880b883a 	mov	r5,r17
   44a4c:	8009883a 	mov	r4,r16
   44a50:	102f883a 	mov	r23,r2
   44a54:	0047b700 	call	47b70 <__mcmp>
   44a58:	a80b883a 	mov	r5,r21
   44a5c:	a00d883a 	mov	r6,r20
   44a60:	e009883a 	mov	r4,fp
   44a64:	102d883a 	mov	r22,r2
   44a68:	0047bd00 	call	47bd0 <__mdiff>
   44a6c:	1007883a 	mov	r3,r2
   44a70:	10800317 	ldw	r2,12(r2)
   44a74:	bc800c04 	addi	r18,r23,48
   44a78:	180b883a 	mov	r5,r3
   44a7c:	10004e1e 	bne	r2,zero,44bb8 <_dtoa_r+0xfac>
   44a80:	8009883a 	mov	r4,r16
   44a84:	d8c01615 	stw	r3,88(sp)
   44a88:	0047b700 	call	47b70 <__mcmp>
   44a8c:	d8c01617 	ldw	r3,88(sp)
   44a90:	e009883a 	mov	r4,fp
   44a94:	d8801615 	stw	r2,88(sp)
   44a98:	180b883a 	mov	r5,r3
   44a9c:	00473500 	call	47350 <_Bfree>
   44aa0:	d8801617 	ldw	r2,88(sp)
   44aa4:	1000041e 	bne	r2,zero,44ab8 <_dtoa_r+0xeac>
   44aa8:	d9800317 	ldw	r6,12(sp)
   44aac:	3000021e 	bne	r6,zero,44ab8 <_dtoa_r+0xeac>
   44ab0:	d8c00617 	ldw	r3,24(sp)
   44ab4:	18003726 	beq	r3,zero,44b94 <_dtoa_r+0xf88>
   44ab8:	b0002016 	blt	r22,zero,44b3c <_dtoa_r+0xf30>
   44abc:	b000041e 	bne	r22,zero,44ad0 <_dtoa_r+0xec4>
   44ac0:	d9000317 	ldw	r4,12(sp)
   44ac4:	2000021e 	bne	r4,zero,44ad0 <_dtoa_r+0xec4>
   44ac8:	d8c00617 	ldw	r3,24(sp)
   44acc:	18001b26 	beq	r3,zero,44b3c <_dtoa_r+0xf30>
   44ad0:	00810716 	blt	zero,r2,44ef0 <_dtoa_r+0x12e4>
   44ad4:	d8c00417 	ldw	r3,16(sp)
   44ad8:	9d800044 	addi	r22,r19,1
   44adc:	9c800005 	stb	r18,0(r19)
   44ae0:	b02f883a 	mov	r23,r22
   44ae4:	98c10626 	beq	r19,r3,44f00 <_dtoa_r+0x12f4>
   44ae8:	800b883a 	mov	r5,r16
   44aec:	000f883a 	mov	r7,zero
   44af0:	01800284 	movi	r6,10
   44af4:	e009883a 	mov	r4,fp
   44af8:	00473780 	call	47378 <__multadd>
   44afc:	1021883a 	mov	r16,r2
   44b00:	000f883a 	mov	r7,zero
   44b04:	01800284 	movi	r6,10
   44b08:	880b883a 	mov	r5,r17
   44b0c:	e009883a 	mov	r4,fp
   44b10:	8d002526 	beq	r17,r20,44ba8 <_dtoa_r+0xf9c>
   44b14:	00473780 	call	47378 <__multadd>
   44b18:	a00b883a 	mov	r5,r20
   44b1c:	000f883a 	mov	r7,zero
   44b20:	01800284 	movi	r6,10
   44b24:	e009883a 	mov	r4,fp
   44b28:	1023883a 	mov	r17,r2
   44b2c:	00473780 	call	47378 <__multadd>
   44b30:	1029883a 	mov	r20,r2
   44b34:	b027883a 	mov	r19,r22
   44b38:	003fc006 	br	44a3c <__alt_data_end+0xfffdd93c>
   44b3c:	9011883a 	mov	r8,r18
   44b40:	00800e0e 	bge	zero,r2,44b7c <_dtoa_r+0xf70>
   44b44:	800b883a 	mov	r5,r16
   44b48:	01800044 	movi	r6,1
   44b4c:	e009883a 	mov	r4,fp
   44b50:	da001715 	stw	r8,92(sp)
   44b54:	0047a280 	call	47a28 <__lshift>
   44b58:	a80b883a 	mov	r5,r21
   44b5c:	1009883a 	mov	r4,r2
   44b60:	1021883a 	mov	r16,r2
   44b64:	0047b700 	call	47b70 <__mcmp>
   44b68:	da001717 	ldw	r8,92(sp)
   44b6c:	0081960e 	bge	zero,r2,451c8 <_dtoa_r+0x15bc>
   44b70:	00800e44 	movi	r2,57
   44b74:	40817026 	beq	r8,r2,45138 <_dtoa_r+0x152c>
   44b78:	ba000c44 	addi	r8,r23,49
   44b7c:	8825883a 	mov	r18,r17
   44b80:	9dc00044 	addi	r23,r19,1
   44b84:	9a000005 	stb	r8,0(r19)
   44b88:	a023883a 	mov	r17,r20
   44b8c:	dc000915 	stw	r16,36(sp)
   44b90:	003f2406 	br	44824 <__alt_data_end+0xfffdd724>
   44b94:	00800e44 	movi	r2,57
   44b98:	9011883a 	mov	r8,r18
   44b9c:	90816626 	beq	r18,r2,45138 <_dtoa_r+0x152c>
   44ba0:	05bff516 	blt	zero,r22,44b78 <__alt_data_end+0xfffdda78>
   44ba4:	003ff506 	br	44b7c <__alt_data_end+0xfffdda7c>
   44ba8:	00473780 	call	47378 <__multadd>
   44bac:	1023883a 	mov	r17,r2
   44bb0:	1029883a 	mov	r20,r2
   44bb4:	003fdf06 	br	44b34 <__alt_data_end+0xfffdda34>
   44bb8:	e009883a 	mov	r4,fp
   44bbc:	00473500 	call	47350 <_Bfree>
   44bc0:	00800044 	movi	r2,1
   44bc4:	003fbc06 	br	44ab8 <__alt_data_end+0xfffdd9b8>
   44bc8:	a80b883a 	mov	r5,r21
   44bcc:	8009883a 	mov	r4,r16
   44bd0:	0047b700 	call	47b70 <__mcmp>
   44bd4:	103edb0e 	bge	r2,zero,44744 <__alt_data_end+0xfffdd644>
   44bd8:	800b883a 	mov	r5,r16
   44bdc:	000f883a 	mov	r7,zero
   44be0:	01800284 	movi	r6,10
   44be4:	e009883a 	mov	r4,fp
   44be8:	00473780 	call	47378 <__multadd>
   44bec:	1021883a 	mov	r16,r2
   44bf0:	d8800517 	ldw	r2,20(sp)
   44bf4:	d8c00b17 	ldw	r3,44(sp)
   44bf8:	10bfffc4 	addi	r2,r2,-1
   44bfc:	d8800515 	stw	r2,20(sp)
   44c00:	183f761e 	bne	r3,zero,449dc <__alt_data_end+0xfffdd8dc>
   44c04:	d9000c17 	ldw	r4,48(sp)
   44c08:	0101730e 	bge	zero,r4,451d8 <_dtoa_r+0x15cc>
   44c0c:	d9000615 	stw	r4,24(sp)
   44c10:	003ed006 	br	44754 <__alt_data_end+0xfffdd654>
   44c14:	00800084 	movi	r2,2
   44c18:	3081861e 	bne	r6,r2,45234 <_dtoa_r+0x1628>
   44c1c:	d8000b15 	stw	zero,44(sp)
   44c20:	003f3c06 	br	44914 <__alt_data_end+0xfffdd814>
   44c24:	dc000917 	ldw	r16,36(sp)
   44c28:	003e9206 	br	44674 <__alt_data_end+0xfffdd574>
   44c2c:	d9c00317 	ldw	r7,12(sp)
   44c30:	00800084 	movi	r2,2
   44c34:	11fec50e 	bge	r2,r7,4474c <__alt_data_end+0xfffdd64c>
   44c38:	d9000617 	ldw	r4,24(sp)
   44c3c:	20013c1e 	bne	r4,zero,45130 <_dtoa_r+0x1524>
   44c40:	a80b883a 	mov	r5,r21
   44c44:	000f883a 	mov	r7,zero
   44c48:	01800144 	movi	r6,5
   44c4c:	e009883a 	mov	r4,fp
   44c50:	00473780 	call	47378 <__multadd>
   44c54:	100b883a 	mov	r5,r2
   44c58:	8009883a 	mov	r4,r16
   44c5c:	102b883a 	mov	r21,r2
   44c60:	0047b700 	call	47b70 <__mcmp>
   44c64:	dc000915 	stw	r16,36(sp)
   44c68:	00bf410e 	bge	zero,r2,44970 <__alt_data_end+0xfffdd870>
   44c6c:	d9c00717 	ldw	r7,28(sp)
   44c70:	00800c44 	movi	r2,49
   44c74:	38800005 	stb	r2,0(r7)
   44c78:	d8800517 	ldw	r2,20(sp)
   44c7c:	3dc00044 	addi	r23,r7,1
   44c80:	10800044 	addi	r2,r2,1
   44c84:	d8800515 	stw	r2,20(sp)
   44c88:	003f3d06 	br	44980 <__alt_data_end+0xfffdd880>
   44c8c:	d9800517 	ldw	r6,20(sp)
   44c90:	d9c00717 	ldw	r7,28(sp)
   44c94:	00800c44 	movi	r2,49
   44c98:	31800044 	addi	r6,r6,1
   44c9c:	d9800515 	stw	r6,20(sp)
   44ca0:	38800005 	stb	r2,0(r7)
   44ca4:	003edf06 	br	44824 <__alt_data_end+0xfffdd724>
   44ca8:	d8000b15 	stw	zero,44(sp)
   44cac:	003c9f06 	br	43f2c <__alt_data_end+0xfffdce2c>
   44cb0:	903e7e1e 	bne	r18,zero,446ac <__alt_data_end+0xfffdd5ac>
   44cb4:	00800434 	movhi	r2,16
   44cb8:	10bfffc4 	addi	r2,r2,-1
   44cbc:	9884703a 	and	r2,r19,r2
   44cc0:	1000ea1e 	bne	r2,zero,4506c <_dtoa_r+0x1460>
   44cc4:	9cdffc2c 	andhi	r19,r19,32752
   44cc8:	9800e826 	beq	r19,zero,4506c <_dtoa_r+0x1460>
   44ccc:	d9c00817 	ldw	r7,32(sp)
   44cd0:	b5800044 	addi	r22,r22,1
   44cd4:	04c00044 	movi	r19,1
   44cd8:	39c00044 	addi	r7,r7,1
   44cdc:	d9c00815 	stw	r7,32(sp)
   44ce0:	d8800d17 	ldw	r2,52(sp)
   44ce4:	103e721e 	bne	r2,zero,446b0 <__alt_data_end+0xfffdd5b0>
   44ce8:	00800044 	movi	r2,1
   44cec:	003e7906 	br	446d4 <__alt_data_end+0xfffdd5d4>
   44cf0:	8009883a 	mov	r4,r16
   44cf4:	004db480 	call	4db48 <__floatsidf>
   44cf8:	d9800f17 	ldw	r6,60(sp)
   44cfc:	d9c01017 	ldw	r7,64(sp)
   44d00:	1009883a 	mov	r4,r2
   44d04:	180b883a 	mov	r5,r3
   44d08:	004cab40 	call	4cab4 <__muldf3>
   44d0c:	000d883a 	mov	r6,zero
   44d10:	01d00734 	movhi	r7,16412
   44d14:	1009883a 	mov	r4,r2
   44d18:	180b883a 	mov	r5,r3
   44d1c:	004b6c80 	call	4b6c8 <__adddf3>
   44d20:	047f3034 	movhi	r17,64704
   44d24:	1021883a 	mov	r16,r2
   44d28:	1c63883a 	add	r17,r3,r17
   44d2c:	d9000f17 	ldw	r4,60(sp)
   44d30:	d9401017 	ldw	r5,64(sp)
   44d34:	000d883a 	mov	r6,zero
   44d38:	01d00534 	movhi	r7,16404
   44d3c:	004d1cc0 	call	4d1cc <__subdf3>
   44d40:	800d883a 	mov	r6,r16
   44d44:	880f883a 	mov	r7,r17
   44d48:	1009883a 	mov	r4,r2
   44d4c:	180b883a 	mov	r5,r3
   44d50:	102b883a 	mov	r21,r2
   44d54:	1829883a 	mov	r20,r3
   44d58:	004c8e40 	call	4c8e4 <__gedf2>
   44d5c:	00806c16 	blt	zero,r2,44f10 <_dtoa_r+0x1304>
   44d60:	89e0003c 	xorhi	r7,r17,32768
   44d64:	800d883a 	mov	r6,r16
   44d68:	a809883a 	mov	r4,r21
   44d6c:	a00b883a 	mov	r5,r20
   44d70:	004c9c00 	call	4c9c0 <__ledf2>
   44d74:	103d7e0e 	bge	r2,zero,44370 <__alt_data_end+0xfffdd270>
   44d78:	002b883a 	mov	r21,zero
   44d7c:	0023883a 	mov	r17,zero
   44d80:	003efb06 	br	44970 <__alt_data_end+0xfffdd870>
   44d84:	d8800717 	ldw	r2,28(sp)
   44d88:	003bd006 	br	43ccc <__alt_data_end+0xfffdcbcc>
   44d8c:	d9000a17 	ldw	r4,40(sp)
   44d90:	d9800d17 	ldw	r6,52(sp)
   44d94:	dd400a15 	stw	r21,40(sp)
   44d98:	a905c83a 	sub	r2,r21,r4
   44d9c:	308d883a 	add	r6,r6,r2
   44da0:	d9800d15 	stw	r6,52(sp)
   44da4:	002b883a 	mov	r21,zero
   44da8:	003e0606 	br	445c4 <__alt_data_end+0xfffdd4c4>
   44dac:	9023883a 	mov	r17,r18
   44db0:	9829883a 	mov	r20,r19
   44db4:	04000084 	movi	r16,2
   44db8:	003c9206 	br	44004 <__alt_data_end+0xfffdcf04>
   44dbc:	04000044 	movi	r16,1
   44dc0:	dc000c15 	stw	r16,48(sp)
   44dc4:	dc000615 	stw	r16,24(sp)
   44dc8:	dc002215 	stw	r16,136(sp)
   44dcc:	e0001115 	stw	zero,68(fp)
   44dd0:	000b883a 	mov	r5,zero
   44dd4:	003c6906 	br	43f7c <__alt_data_end+0xfffdce7c>
   44dd8:	3021883a 	mov	r16,r6
   44ddc:	003ffb06 	br	44dcc <__alt_data_end+0xfffddccc>
   44de0:	1000021e 	bne	r2,zero,44dec <_dtoa_r+0x11e0>
   44de4:	4200004c 	andi	r8,r8,1
   44de8:	403e7d1e 	bne	r8,zero,447e0 <__alt_data_end+0xfffdd6e0>
   44dec:	01000c04 	movi	r4,48
   44df0:	00000106 	br	44df8 <_dtoa_r+0x11ec>
   44df4:	102f883a 	mov	r23,r2
   44df8:	b8bfffc4 	addi	r2,r23,-1
   44dfc:	10c00007 	ldb	r3,0(r2)
   44e00:	193ffc26 	beq	r3,r4,44df4 <__alt_data_end+0xfffddcf4>
   44e04:	003e8706 	br	44824 <__alt_data_end+0xfffdd724>
   44e08:	d8800517 	ldw	r2,20(sp)
   44e0c:	00a3c83a 	sub	r17,zero,r2
   44e10:	8800a426 	beq	r17,zero,450a4 <_dtoa_r+0x1498>
   44e14:	888003cc 	andi	r2,r17,15
   44e18:	100490fa 	slli	r2,r2,3
   44e1c:	00c00174 	movhi	r3,5
   44e20:	18c9f504 	addi	r3,r3,10196
   44e24:	1885883a 	add	r2,r3,r2
   44e28:	11800017 	ldw	r6,0(r2)
   44e2c:	11c00117 	ldw	r7,4(r2)
   44e30:	9009883a 	mov	r4,r18
   44e34:	980b883a 	mov	r5,r19
   44e38:	8823d13a 	srai	r17,r17,4
   44e3c:	004cab40 	call	4cab4 <__muldf3>
   44e40:	d8800f15 	stw	r2,60(sp)
   44e44:	d8c01015 	stw	r3,64(sp)
   44e48:	8800e826 	beq	r17,zero,451ec <_dtoa_r+0x15e0>
   44e4c:	05000174 	movhi	r20,5
   44e50:	a509eb04 	addi	r20,r20,10156
   44e54:	04000084 	movi	r16,2
   44e58:	8980004c 	andi	r6,r17,1
   44e5c:	1009883a 	mov	r4,r2
   44e60:	8823d07a 	srai	r17,r17,1
   44e64:	180b883a 	mov	r5,r3
   44e68:	30000426 	beq	r6,zero,44e7c <_dtoa_r+0x1270>
   44e6c:	a1800017 	ldw	r6,0(r20)
   44e70:	a1c00117 	ldw	r7,4(r20)
   44e74:	84000044 	addi	r16,r16,1
   44e78:	004cab40 	call	4cab4 <__muldf3>
   44e7c:	a5000204 	addi	r20,r20,8
   44e80:	883ff51e 	bne	r17,zero,44e58 <__alt_data_end+0xfffddd58>
   44e84:	d8800f15 	stw	r2,60(sp)
   44e88:	d8c01015 	stw	r3,64(sp)
   44e8c:	003c7606 	br	44068 <__alt_data_end+0xfffdcf68>
   44e90:	00c00c04 	movi	r3,48
   44e94:	10c00005 	stb	r3,0(r2)
   44e98:	d8c00517 	ldw	r3,20(sp)
   44e9c:	bd3fffc3 	ldbu	r20,-1(r23)
   44ea0:	18c00044 	addi	r3,r3,1
   44ea4:	d8c00515 	stw	r3,20(sp)
   44ea8:	003db906 	br	44590 <__alt_data_end+0xfffdd490>
   44eac:	89400117 	ldw	r5,4(r17)
   44eb0:	e009883a 	mov	r4,fp
   44eb4:	00472a80 	call	472a8 <_Balloc>
   44eb8:	89800417 	ldw	r6,16(r17)
   44ebc:	89400304 	addi	r5,r17,12
   44ec0:	11000304 	addi	r4,r2,12
   44ec4:	31800084 	addi	r6,r6,2
   44ec8:	318d883a 	add	r6,r6,r6
   44ecc:	318d883a 	add	r6,r6,r6
   44ed0:	1027883a 	mov	r19,r2
   44ed4:	0046edc0 	call	46edc <memcpy>
   44ed8:	01800044 	movi	r6,1
   44edc:	980b883a 	mov	r5,r19
   44ee0:	e009883a 	mov	r4,fp
   44ee4:	0047a280 	call	47a28 <__lshift>
   44ee8:	1029883a 	mov	r20,r2
   44eec:	003ecc06 	br	44a20 <__alt_data_end+0xfffdd920>
   44ef0:	00800e44 	movi	r2,57
   44ef4:	90809026 	beq	r18,r2,45138 <_dtoa_r+0x152c>
   44ef8:	92000044 	addi	r8,r18,1
   44efc:	003f1f06 	br	44b7c <__alt_data_end+0xfffdda7c>
   44f00:	9011883a 	mov	r8,r18
   44f04:	8825883a 	mov	r18,r17
   44f08:	a023883a 	mov	r17,r20
   44f0c:	003e2906 	br	447b4 <__alt_data_end+0xfffdd6b4>
   44f10:	002b883a 	mov	r21,zero
   44f14:	0023883a 	mov	r17,zero
   44f18:	003f5406 	br	44c6c <__alt_data_end+0xfffddb6c>
   44f1c:	61bfffc4 	addi	r6,r12,-1
   44f20:	300490fa 	slli	r2,r6,3
   44f24:	00c00174 	movhi	r3,5
   44f28:	18c9f504 	addi	r3,r3,10196
   44f2c:	1885883a 	add	r2,r3,r2
   44f30:	11000017 	ldw	r4,0(r2)
   44f34:	11400117 	ldw	r5,4(r2)
   44f38:	d8800717 	ldw	r2,28(sp)
   44f3c:	880f883a 	mov	r7,r17
   44f40:	d9801215 	stw	r6,72(sp)
   44f44:	800d883a 	mov	r6,r16
   44f48:	db001615 	stw	r12,88(sp)
   44f4c:	15c00044 	addi	r23,r2,1
   44f50:	004cab40 	call	4cab4 <__muldf3>
   44f54:	d9401017 	ldw	r5,64(sp)
   44f58:	d9000f17 	ldw	r4,60(sp)
   44f5c:	d8c01515 	stw	r3,84(sp)
   44f60:	d8801415 	stw	r2,80(sp)
   44f64:	004dac80 	call	4dac8 <__fixdfsi>
   44f68:	1009883a 	mov	r4,r2
   44f6c:	1021883a 	mov	r16,r2
   44f70:	004db480 	call	4db48 <__floatsidf>
   44f74:	d9000f17 	ldw	r4,60(sp)
   44f78:	d9401017 	ldw	r5,64(sp)
   44f7c:	100d883a 	mov	r6,r2
   44f80:	180f883a 	mov	r7,r3
   44f84:	004d1cc0 	call	4d1cc <__subdf3>
   44f88:	1829883a 	mov	r20,r3
   44f8c:	d8c00717 	ldw	r3,28(sp)
   44f90:	84000c04 	addi	r16,r16,48
   44f94:	1023883a 	mov	r17,r2
   44f98:	1c000005 	stb	r16,0(r3)
   44f9c:	db001617 	ldw	r12,88(sp)
   44fa0:	00800044 	movi	r2,1
   44fa4:	60802226 	beq	r12,r2,45030 <_dtoa_r+0x1424>
   44fa8:	d9c00717 	ldw	r7,28(sp)
   44fac:	8805883a 	mov	r2,r17
   44fb0:	b82b883a 	mov	r21,r23
   44fb4:	3b19883a 	add	r12,r7,r12
   44fb8:	6023883a 	mov	r17,r12
   44fbc:	a007883a 	mov	r3,r20
   44fc0:	dc800f15 	stw	r18,60(sp)
   44fc4:	000d883a 	mov	r6,zero
   44fc8:	01d00934 	movhi	r7,16420
   44fcc:	1009883a 	mov	r4,r2
   44fd0:	180b883a 	mov	r5,r3
   44fd4:	004cab40 	call	4cab4 <__muldf3>
   44fd8:	180b883a 	mov	r5,r3
   44fdc:	1009883a 	mov	r4,r2
   44fe0:	1829883a 	mov	r20,r3
   44fe4:	1025883a 	mov	r18,r2
   44fe8:	004dac80 	call	4dac8 <__fixdfsi>
   44fec:	1009883a 	mov	r4,r2
   44ff0:	1021883a 	mov	r16,r2
   44ff4:	004db480 	call	4db48 <__floatsidf>
   44ff8:	100d883a 	mov	r6,r2
   44ffc:	180f883a 	mov	r7,r3
   45000:	9009883a 	mov	r4,r18
   45004:	a00b883a 	mov	r5,r20
   45008:	84000c04 	addi	r16,r16,48
   4500c:	004d1cc0 	call	4d1cc <__subdf3>
   45010:	ad400044 	addi	r21,r21,1
   45014:	ac3fffc5 	stb	r16,-1(r21)
   45018:	ac7fea1e 	bne	r21,r17,44fc4 <__alt_data_end+0xfffddec4>
   4501c:	1023883a 	mov	r17,r2
   45020:	d8801217 	ldw	r2,72(sp)
   45024:	dc800f17 	ldw	r18,60(sp)
   45028:	1829883a 	mov	r20,r3
   4502c:	b8af883a 	add	r23,r23,r2
   45030:	d9001417 	ldw	r4,80(sp)
   45034:	d9401517 	ldw	r5,84(sp)
   45038:	000d883a 	mov	r6,zero
   4503c:	01cff834 	movhi	r7,16352
   45040:	004b6c80 	call	4b6c8 <__adddf3>
   45044:	880d883a 	mov	r6,r17
   45048:	a00f883a 	mov	r7,r20
   4504c:	1009883a 	mov	r4,r2
   45050:	180b883a 	mov	r5,r3
   45054:	004c9c00 	call	4c9c0 <__ledf2>
   45058:	10003e0e 	bge	r2,zero,45154 <_dtoa_r+0x1548>
   4505c:	d9001317 	ldw	r4,76(sp)
   45060:	bd3fffc3 	ldbu	r20,-1(r23)
   45064:	d9000515 	stw	r4,20(sp)
   45068:	003d3b06 	br	44558 <__alt_data_end+0xfffdd458>
   4506c:	0027883a 	mov	r19,zero
   45070:	003f1b06 	br	44ce0 <__alt_data_end+0xfffddbe0>
   45074:	d8800817 	ldw	r2,32(sp)
   45078:	11e9c83a 	sub	r20,r2,r7
   4507c:	0005883a 	mov	r2,zero
   45080:	003d5406 	br	445d4 <__alt_data_end+0xfffdd4d4>
   45084:	00800044 	movi	r2,1
   45088:	003dc706 	br	447a8 <__alt_data_end+0xfffdd6a8>
   4508c:	d8c00217 	ldw	r3,8(sp)
   45090:	00800d84 	movi	r2,54
   45094:	dd400a17 	ldw	r21,40(sp)
   45098:	10c5c83a 	sub	r2,r2,r3
   4509c:	dd000817 	ldw	r20,32(sp)
   450a0:	003d4c06 	br	445d4 <__alt_data_end+0xfffdd4d4>
   450a4:	dc800f15 	stw	r18,60(sp)
   450a8:	dcc01015 	stw	r19,64(sp)
   450ac:	04000084 	movi	r16,2
   450b0:	003bed06 	br	44068 <__alt_data_end+0xfffdcf68>
   450b4:	d9000617 	ldw	r4,24(sp)
   450b8:	203f0d26 	beq	r4,zero,44cf0 <__alt_data_end+0xfffddbf0>
   450bc:	d9800c17 	ldw	r6,48(sp)
   450c0:	01bcab0e 	bge	zero,r6,44370 <__alt_data_end+0xfffdd270>
   450c4:	d9401017 	ldw	r5,64(sp)
   450c8:	d9000f17 	ldw	r4,60(sp)
   450cc:	000d883a 	mov	r6,zero
   450d0:	01d00934 	movhi	r7,16420
   450d4:	004cab40 	call	4cab4 <__muldf3>
   450d8:	81000044 	addi	r4,r16,1
   450dc:	d8800f15 	stw	r2,60(sp)
   450e0:	d8c01015 	stw	r3,64(sp)
   450e4:	004db480 	call	4db48 <__floatsidf>
   450e8:	d9800f17 	ldw	r6,60(sp)
   450ec:	d9c01017 	ldw	r7,64(sp)
   450f0:	1009883a 	mov	r4,r2
   450f4:	180b883a 	mov	r5,r3
   450f8:	004cab40 	call	4cab4 <__muldf3>
   450fc:	01d00734 	movhi	r7,16412
   45100:	000d883a 	mov	r6,zero
   45104:	1009883a 	mov	r4,r2
   45108:	180b883a 	mov	r5,r3
   4510c:	004b6c80 	call	4b6c8 <__adddf3>
   45110:	d9c00517 	ldw	r7,20(sp)
   45114:	047f3034 	movhi	r17,64704
   45118:	1021883a 	mov	r16,r2
   4511c:	39ffffc4 	addi	r7,r7,-1
   45120:	d9c01315 	stw	r7,76(sp)
   45124:	1c63883a 	add	r17,r3,r17
   45128:	db000c17 	ldw	r12,48(sp)
   4512c:	003bea06 	br	440d8 <__alt_data_end+0xfffdcfd8>
   45130:	dc000915 	stw	r16,36(sp)
   45134:	003e0e06 	br	44970 <__alt_data_end+0xfffdd870>
   45138:	01000e44 	movi	r4,57
   4513c:	8825883a 	mov	r18,r17
   45140:	9dc00044 	addi	r23,r19,1
   45144:	99000005 	stb	r4,0(r19)
   45148:	a023883a 	mov	r17,r20
   4514c:	dc000915 	stw	r16,36(sp)
   45150:	003da406 	br	447e4 <__alt_data_end+0xfffdd6e4>
   45154:	d9801417 	ldw	r6,80(sp)
   45158:	d9c01517 	ldw	r7,84(sp)
   4515c:	0009883a 	mov	r4,zero
   45160:	014ff834 	movhi	r5,16352
   45164:	004d1cc0 	call	4d1cc <__subdf3>
   45168:	880d883a 	mov	r6,r17
   4516c:	a00f883a 	mov	r7,r20
   45170:	1009883a 	mov	r4,r2
   45174:	180b883a 	mov	r5,r3
   45178:	004c8e40 	call	4c8e4 <__gedf2>
   4517c:	00bc7c0e 	bge	zero,r2,44370 <__alt_data_end+0xfffdd270>
   45180:	01000c04 	movi	r4,48
   45184:	00000106 	br	4518c <_dtoa_r+0x1580>
   45188:	102f883a 	mov	r23,r2
   4518c:	b8bfffc4 	addi	r2,r23,-1
   45190:	10c00007 	ldb	r3,0(r2)
   45194:	193ffc26 	beq	r3,r4,45188 <__alt_data_end+0xfffde088>
   45198:	d9801317 	ldw	r6,76(sp)
   4519c:	d9800515 	stw	r6,20(sp)
   451a0:	003c4406 	br	442b4 <__alt_data_end+0xfffdd1b4>
   451a4:	d9801317 	ldw	r6,76(sp)
   451a8:	d9800515 	stw	r6,20(sp)
   451ac:	003cea06 	br	44558 <__alt_data_end+0xfffdd458>
   451b0:	dd800f17 	ldw	r22,60(sp)
   451b4:	dcc01017 	ldw	r19,64(sp)
   451b8:	dc801217 	ldw	r18,72(sp)
   451bc:	003c6c06 	br	44370 <__alt_data_end+0xfffdd270>
   451c0:	903e031e 	bne	r18,zero,449d0 <__alt_data_end+0xfffdd8d0>
   451c4:	003ebb06 	br	44cb4 <__alt_data_end+0xfffddbb4>
   451c8:	103e6c1e 	bne	r2,zero,44b7c <__alt_data_end+0xfffdda7c>
   451cc:	4080004c 	andi	r2,r8,1
   451d0:	103e6a26 	beq	r2,zero,44b7c <__alt_data_end+0xfffdda7c>
   451d4:	003e6606 	br	44b70 <__alt_data_end+0xfffdda70>
   451d8:	d8c00317 	ldw	r3,12(sp)
   451dc:	00800084 	movi	r2,2
   451e0:	10c02916 	blt	r2,r3,45288 <_dtoa_r+0x167c>
   451e4:	d9000c17 	ldw	r4,48(sp)
   451e8:	003e8806 	br	44c0c <__alt_data_end+0xfffddb0c>
   451ec:	04000084 	movi	r16,2
   451f0:	003b9d06 	br	44068 <__alt_data_end+0xfffdcf68>
   451f4:	d9001317 	ldw	r4,76(sp)
   451f8:	d9000515 	stw	r4,20(sp)
   451fc:	003cd606 	br	44558 <__alt_data_end+0xfffdd458>
   45200:	d8801317 	ldw	r2,76(sp)
   45204:	d8800515 	stw	r2,20(sp)
   45208:	003c2a06 	br	442b4 <__alt_data_end+0xfffdd1b4>
   4520c:	d9800317 	ldw	r6,12(sp)
   45210:	00800084 	movi	r2,2
   45214:	11801516 	blt	r2,r6,4526c <_dtoa_r+0x1660>
   45218:	d9c00c17 	ldw	r7,48(sp)
   4521c:	d9c00615 	stw	r7,24(sp)
   45220:	003df706 	br	44a00 <__alt_data_end+0xfffdd900>
   45224:	193d3926 	beq	r3,r4,4470c <__alt_data_end+0xfffdd60c>
   45228:	00c00f04 	movi	r3,60
   4522c:	1885c83a 	sub	r2,r3,r2
   45230:	003ddf06 	br	449b0 <__alt_data_end+0xfffdd8b0>
   45234:	e009883a 	mov	r4,fp
   45238:	e0001115 	stw	zero,68(fp)
   4523c:	000b883a 	mov	r5,zero
   45240:	00472a80 	call	472a8 <_Balloc>
   45244:	d8800715 	stw	r2,28(sp)
   45248:	d8c00717 	ldw	r3,28(sp)
   4524c:	00bfffc4 	movi	r2,-1
   45250:	01000044 	movi	r4,1
   45254:	d8800c15 	stw	r2,48(sp)
   45258:	e0c01015 	stw	r3,64(fp)
   4525c:	d9000b15 	stw	r4,44(sp)
   45260:	d8800615 	stw	r2,24(sp)
   45264:	d8002215 	stw	zero,136(sp)
   45268:	003c4106 	br	44370 <__alt_data_end+0xfffdd270>
   4526c:	d8c00c17 	ldw	r3,48(sp)
   45270:	d8c00615 	stw	r3,24(sp)
   45274:	003e7006 	br	44c38 <__alt_data_end+0xfffddb38>
   45278:	04400044 	movi	r17,1
   4527c:	003b2006 	br	43f00 <__alt_data_end+0xfffdce00>
   45280:	000b883a 	mov	r5,zero
   45284:	003b3d06 	br	43f7c <__alt_data_end+0xfffdce7c>
   45288:	d8800c17 	ldw	r2,48(sp)
   4528c:	d8800615 	stw	r2,24(sp)
   45290:	003e6906 	br	44c38 <__alt_data_end+0xfffddb38>

00045294 <__sflush_r>:
   45294:	2880030b 	ldhu	r2,12(r5)
   45298:	defffb04 	addi	sp,sp,-20
   4529c:	dcc00315 	stw	r19,12(sp)
   452a0:	dc400115 	stw	r17,4(sp)
   452a4:	dfc00415 	stw	ra,16(sp)
   452a8:	dc800215 	stw	r18,8(sp)
   452ac:	dc000015 	stw	r16,0(sp)
   452b0:	10c0020c 	andi	r3,r2,8
   452b4:	2823883a 	mov	r17,r5
   452b8:	2027883a 	mov	r19,r4
   452bc:	1800311e 	bne	r3,zero,45384 <__sflush_r+0xf0>
   452c0:	28c00117 	ldw	r3,4(r5)
   452c4:	10820014 	ori	r2,r2,2048
   452c8:	2880030d 	sth	r2,12(r5)
   452cc:	00c04b0e 	bge	zero,r3,453fc <__sflush_r+0x168>
   452d0:	8a000a17 	ldw	r8,40(r17)
   452d4:	40002326 	beq	r8,zero,45364 <__sflush_r+0xd0>
   452d8:	9c000017 	ldw	r16,0(r19)
   452dc:	10c4000c 	andi	r3,r2,4096
   452e0:	98000015 	stw	zero,0(r19)
   452e4:	18004826 	beq	r3,zero,45408 <__sflush_r+0x174>
   452e8:	89801417 	ldw	r6,80(r17)
   452ec:	10c0010c 	andi	r3,r2,4
   452f0:	18000626 	beq	r3,zero,4530c <__sflush_r+0x78>
   452f4:	88c00117 	ldw	r3,4(r17)
   452f8:	88800c17 	ldw	r2,48(r17)
   452fc:	30cdc83a 	sub	r6,r6,r3
   45300:	10000226 	beq	r2,zero,4530c <__sflush_r+0x78>
   45304:	88800f17 	ldw	r2,60(r17)
   45308:	308dc83a 	sub	r6,r6,r2
   4530c:	89400717 	ldw	r5,28(r17)
   45310:	000f883a 	mov	r7,zero
   45314:	9809883a 	mov	r4,r19
   45318:	403ee83a 	callr	r8
   4531c:	00ffffc4 	movi	r3,-1
   45320:	10c04426 	beq	r2,r3,45434 <__sflush_r+0x1a0>
   45324:	88c0030b 	ldhu	r3,12(r17)
   45328:	89000417 	ldw	r4,16(r17)
   4532c:	88000115 	stw	zero,4(r17)
   45330:	197dffcc 	andi	r5,r3,63487
   45334:	8940030d 	sth	r5,12(r17)
   45338:	89000015 	stw	r4,0(r17)
   4533c:	18c4000c 	andi	r3,r3,4096
   45340:	18002c1e 	bne	r3,zero,453f4 <__sflush_r+0x160>
   45344:	89400c17 	ldw	r5,48(r17)
   45348:	9c000015 	stw	r16,0(r19)
   4534c:	28000526 	beq	r5,zero,45364 <__sflush_r+0xd0>
   45350:	88801004 	addi	r2,r17,64
   45354:	28800226 	beq	r5,r2,45360 <__sflush_r+0xcc>
   45358:	9809883a 	mov	r4,r19
   4535c:	0045a000 	call	45a00 <_free_r>
   45360:	88000c15 	stw	zero,48(r17)
   45364:	0005883a 	mov	r2,zero
   45368:	dfc00417 	ldw	ra,16(sp)
   4536c:	dcc00317 	ldw	r19,12(sp)
   45370:	dc800217 	ldw	r18,8(sp)
   45374:	dc400117 	ldw	r17,4(sp)
   45378:	dc000017 	ldw	r16,0(sp)
   4537c:	dec00504 	addi	sp,sp,20
   45380:	f800283a 	ret
   45384:	2c800417 	ldw	r18,16(r5)
   45388:	903ff626 	beq	r18,zero,45364 <__alt_data_end+0xfffde264>
   4538c:	2c000017 	ldw	r16,0(r5)
   45390:	108000cc 	andi	r2,r2,3
   45394:	2c800015 	stw	r18,0(r5)
   45398:	84a1c83a 	sub	r16,r16,r18
   4539c:	1000131e 	bne	r2,zero,453ec <__sflush_r+0x158>
   453a0:	28800517 	ldw	r2,20(r5)
   453a4:	88800215 	stw	r2,8(r17)
   453a8:	04000316 	blt	zero,r16,453b8 <__sflush_r+0x124>
   453ac:	003fed06 	br	45364 <__alt_data_end+0xfffde264>
   453b0:	90a5883a 	add	r18,r18,r2
   453b4:	043feb0e 	bge	zero,r16,45364 <__alt_data_end+0xfffde264>
   453b8:	88800917 	ldw	r2,36(r17)
   453bc:	89400717 	ldw	r5,28(r17)
   453c0:	800f883a 	mov	r7,r16
   453c4:	900d883a 	mov	r6,r18
   453c8:	9809883a 	mov	r4,r19
   453cc:	103ee83a 	callr	r2
   453d0:	80a1c83a 	sub	r16,r16,r2
   453d4:	00bff616 	blt	zero,r2,453b0 <__alt_data_end+0xfffde2b0>
   453d8:	88c0030b 	ldhu	r3,12(r17)
   453dc:	00bfffc4 	movi	r2,-1
   453e0:	18c01014 	ori	r3,r3,64
   453e4:	88c0030d 	sth	r3,12(r17)
   453e8:	003fdf06 	br	45368 <__alt_data_end+0xfffde268>
   453ec:	0005883a 	mov	r2,zero
   453f0:	003fec06 	br	453a4 <__alt_data_end+0xfffde2a4>
   453f4:	88801415 	stw	r2,80(r17)
   453f8:	003fd206 	br	45344 <__alt_data_end+0xfffde244>
   453fc:	28c00f17 	ldw	r3,60(r5)
   45400:	00ffb316 	blt	zero,r3,452d0 <__alt_data_end+0xfffde1d0>
   45404:	003fd706 	br	45364 <__alt_data_end+0xfffde264>
   45408:	89400717 	ldw	r5,28(r17)
   4540c:	000d883a 	mov	r6,zero
   45410:	01c00044 	movi	r7,1
   45414:	9809883a 	mov	r4,r19
   45418:	403ee83a 	callr	r8
   4541c:	100d883a 	mov	r6,r2
   45420:	00bfffc4 	movi	r2,-1
   45424:	30801426 	beq	r6,r2,45478 <__sflush_r+0x1e4>
   45428:	8880030b 	ldhu	r2,12(r17)
   4542c:	8a000a17 	ldw	r8,40(r17)
   45430:	003fae06 	br	452ec <__alt_data_end+0xfffde1ec>
   45434:	98c00017 	ldw	r3,0(r19)
   45438:	183fba26 	beq	r3,zero,45324 <__alt_data_end+0xfffde224>
   4543c:	01000744 	movi	r4,29
   45440:	19000626 	beq	r3,r4,4545c <__sflush_r+0x1c8>
   45444:	01000584 	movi	r4,22
   45448:	19000426 	beq	r3,r4,4545c <__sflush_r+0x1c8>
   4544c:	88c0030b 	ldhu	r3,12(r17)
   45450:	18c01014 	ori	r3,r3,64
   45454:	88c0030d 	sth	r3,12(r17)
   45458:	003fc306 	br	45368 <__alt_data_end+0xfffde268>
   4545c:	8880030b 	ldhu	r2,12(r17)
   45460:	88c00417 	ldw	r3,16(r17)
   45464:	88000115 	stw	zero,4(r17)
   45468:	10bdffcc 	andi	r2,r2,63487
   4546c:	8880030d 	sth	r2,12(r17)
   45470:	88c00015 	stw	r3,0(r17)
   45474:	003fb306 	br	45344 <__alt_data_end+0xfffde244>
   45478:	98800017 	ldw	r2,0(r19)
   4547c:	103fea26 	beq	r2,zero,45428 <__alt_data_end+0xfffde328>
   45480:	00c00744 	movi	r3,29
   45484:	10c00226 	beq	r2,r3,45490 <__sflush_r+0x1fc>
   45488:	00c00584 	movi	r3,22
   4548c:	10c0031e 	bne	r2,r3,4549c <__sflush_r+0x208>
   45490:	9c000015 	stw	r16,0(r19)
   45494:	0005883a 	mov	r2,zero
   45498:	003fb306 	br	45368 <__alt_data_end+0xfffde268>
   4549c:	88c0030b 	ldhu	r3,12(r17)
   454a0:	3005883a 	mov	r2,r6
   454a4:	18c01014 	ori	r3,r3,64
   454a8:	88c0030d 	sth	r3,12(r17)
   454ac:	003fae06 	br	45368 <__alt_data_end+0xfffde268>

000454b0 <_fflush_r>:
   454b0:	defffd04 	addi	sp,sp,-12
   454b4:	dc000115 	stw	r16,4(sp)
   454b8:	dfc00215 	stw	ra,8(sp)
   454bc:	2021883a 	mov	r16,r4
   454c0:	20000226 	beq	r4,zero,454cc <_fflush_r+0x1c>
   454c4:	20800e17 	ldw	r2,56(r4)
   454c8:	10000c26 	beq	r2,zero,454fc <_fflush_r+0x4c>
   454cc:	2880030f 	ldh	r2,12(r5)
   454d0:	1000051e 	bne	r2,zero,454e8 <_fflush_r+0x38>
   454d4:	0005883a 	mov	r2,zero
   454d8:	dfc00217 	ldw	ra,8(sp)
   454dc:	dc000117 	ldw	r16,4(sp)
   454e0:	dec00304 	addi	sp,sp,12
   454e4:	f800283a 	ret
   454e8:	8009883a 	mov	r4,r16
   454ec:	dfc00217 	ldw	ra,8(sp)
   454f0:	dc000117 	ldw	r16,4(sp)
   454f4:	dec00304 	addi	sp,sp,12
   454f8:	00452941 	jmpi	45294 <__sflush_r>
   454fc:	d9400015 	stw	r5,0(sp)
   45500:	004588c0 	call	4588c <__sinit>
   45504:	d9400017 	ldw	r5,0(sp)
   45508:	003ff006 	br	454cc <__alt_data_end+0xfffde3cc>

0004550c <fflush>:
   4550c:	20000526 	beq	r4,zero,45524 <fflush+0x18>
   45510:	00800174 	movhi	r2,5
   45514:	10910004 	addi	r2,r2,17408
   45518:	200b883a 	mov	r5,r4
   4551c:	11000017 	ldw	r4,0(r2)
   45520:	00454b01 	jmpi	454b0 <_fflush_r>
   45524:	00800174 	movhi	r2,5
   45528:	1090ff04 	addi	r2,r2,17404
   4552c:	11000017 	ldw	r4,0(r2)
   45530:	01400134 	movhi	r5,4
   45534:	29552c04 	addi	r5,r5,21680
   45538:	00462901 	jmpi	46290 <_fwalk_reent>

0004553c <__fp_unlock>:
   4553c:	0005883a 	mov	r2,zero
   45540:	f800283a 	ret

00045544 <_cleanup_r>:
   45544:	01400174 	movhi	r5,5
   45548:	2968aa04 	addi	r5,r5,-23896
   4554c:	00462901 	jmpi	46290 <_fwalk_reent>

00045550 <__sinit.part.1>:
   45550:	defff704 	addi	sp,sp,-36
   45554:	00c00134 	movhi	r3,4
   45558:	dfc00815 	stw	ra,32(sp)
   4555c:	ddc00715 	stw	r23,28(sp)
   45560:	dd800615 	stw	r22,24(sp)
   45564:	dd400515 	stw	r21,20(sp)
   45568:	dd000415 	stw	r20,16(sp)
   4556c:	dcc00315 	stw	r19,12(sp)
   45570:	dc800215 	stw	r18,8(sp)
   45574:	dc400115 	stw	r17,4(sp)
   45578:	dc000015 	stw	r16,0(sp)
   4557c:	18d55104 	addi	r3,r3,21828
   45580:	24000117 	ldw	r16,4(r4)
   45584:	20c00f15 	stw	r3,60(r4)
   45588:	2080bb04 	addi	r2,r4,748
   4558c:	00c000c4 	movi	r3,3
   45590:	20c0b915 	stw	r3,740(r4)
   45594:	2080ba15 	stw	r2,744(r4)
   45598:	2000b815 	stw	zero,736(r4)
   4559c:	05c00204 	movi	r23,8
   455a0:	00800104 	movi	r2,4
   455a4:	2025883a 	mov	r18,r4
   455a8:	b80d883a 	mov	r6,r23
   455ac:	81001704 	addi	r4,r16,92
   455b0:	000b883a 	mov	r5,zero
   455b4:	80000015 	stw	zero,0(r16)
   455b8:	80000115 	stw	zero,4(r16)
   455bc:	80000215 	stw	zero,8(r16)
   455c0:	8080030d 	sth	r2,12(r16)
   455c4:	80001915 	stw	zero,100(r16)
   455c8:	8000038d 	sth	zero,14(r16)
   455cc:	80000415 	stw	zero,16(r16)
   455d0:	80000515 	stw	zero,20(r16)
   455d4:	80000615 	stw	zero,24(r16)
   455d8:	00471800 	call	47180 <memset>
   455dc:	05800174 	movhi	r22,5
   455e0:	94400217 	ldw	r17,8(r18)
   455e4:	05400174 	movhi	r21,5
   455e8:	05000174 	movhi	r20,5
   455ec:	04c00174 	movhi	r19,5
   455f0:	b5a23404 	addi	r22,r22,-30512
   455f4:	ad624b04 	addi	r21,r21,-30420
   455f8:	a5226a04 	addi	r20,r20,-30296
   455fc:	9ce28104 	addi	r19,r19,-30204
   45600:	85800815 	stw	r22,32(r16)
   45604:	85400915 	stw	r21,36(r16)
   45608:	85000a15 	stw	r20,40(r16)
   4560c:	84c00b15 	stw	r19,44(r16)
   45610:	84000715 	stw	r16,28(r16)
   45614:	00800284 	movi	r2,10
   45618:	8880030d 	sth	r2,12(r17)
   4561c:	00800044 	movi	r2,1
   45620:	b80d883a 	mov	r6,r23
   45624:	89001704 	addi	r4,r17,92
   45628:	000b883a 	mov	r5,zero
   4562c:	88000015 	stw	zero,0(r17)
   45630:	88000115 	stw	zero,4(r17)
   45634:	88000215 	stw	zero,8(r17)
   45638:	88001915 	stw	zero,100(r17)
   4563c:	8880038d 	sth	r2,14(r17)
   45640:	88000415 	stw	zero,16(r17)
   45644:	88000515 	stw	zero,20(r17)
   45648:	88000615 	stw	zero,24(r17)
   4564c:	00471800 	call	47180 <memset>
   45650:	94000317 	ldw	r16,12(r18)
   45654:	00800484 	movi	r2,18
   45658:	8c400715 	stw	r17,28(r17)
   4565c:	8d800815 	stw	r22,32(r17)
   45660:	8d400915 	stw	r21,36(r17)
   45664:	8d000a15 	stw	r20,40(r17)
   45668:	8cc00b15 	stw	r19,44(r17)
   4566c:	8080030d 	sth	r2,12(r16)
   45670:	00800084 	movi	r2,2
   45674:	80000015 	stw	zero,0(r16)
   45678:	80000115 	stw	zero,4(r16)
   4567c:	80000215 	stw	zero,8(r16)
   45680:	80001915 	stw	zero,100(r16)
   45684:	8080038d 	sth	r2,14(r16)
   45688:	80000415 	stw	zero,16(r16)
   4568c:	80000515 	stw	zero,20(r16)
   45690:	80000615 	stw	zero,24(r16)
   45694:	b80d883a 	mov	r6,r23
   45698:	000b883a 	mov	r5,zero
   4569c:	81001704 	addi	r4,r16,92
   456a0:	00471800 	call	47180 <memset>
   456a4:	00800044 	movi	r2,1
   456a8:	84000715 	stw	r16,28(r16)
   456ac:	85800815 	stw	r22,32(r16)
   456b0:	85400915 	stw	r21,36(r16)
   456b4:	85000a15 	stw	r20,40(r16)
   456b8:	84c00b15 	stw	r19,44(r16)
   456bc:	90800e15 	stw	r2,56(r18)
   456c0:	dfc00817 	ldw	ra,32(sp)
   456c4:	ddc00717 	ldw	r23,28(sp)
   456c8:	dd800617 	ldw	r22,24(sp)
   456cc:	dd400517 	ldw	r21,20(sp)
   456d0:	dd000417 	ldw	r20,16(sp)
   456d4:	dcc00317 	ldw	r19,12(sp)
   456d8:	dc800217 	ldw	r18,8(sp)
   456dc:	dc400117 	ldw	r17,4(sp)
   456e0:	dc000017 	ldw	r16,0(sp)
   456e4:	dec00904 	addi	sp,sp,36
   456e8:	f800283a 	ret

000456ec <__fp_lock>:
   456ec:	0005883a 	mov	r2,zero
   456f0:	f800283a 	ret

000456f4 <__sfmoreglue>:
   456f4:	defffc04 	addi	sp,sp,-16
   456f8:	dc400115 	stw	r17,4(sp)
   456fc:	2c7fffc4 	addi	r17,r5,-1
   45700:	8c401a24 	muli	r17,r17,104
   45704:	dc800215 	stw	r18,8(sp)
   45708:	2825883a 	mov	r18,r5
   4570c:	89401d04 	addi	r5,r17,116
   45710:	dc000015 	stw	r16,0(sp)
   45714:	dfc00315 	stw	ra,12(sp)
   45718:	00465ec0 	call	465ec <_malloc_r>
   4571c:	1021883a 	mov	r16,r2
   45720:	10000726 	beq	r2,zero,45740 <__sfmoreglue+0x4c>
   45724:	11000304 	addi	r4,r2,12
   45728:	10000015 	stw	zero,0(r2)
   4572c:	14800115 	stw	r18,4(r2)
   45730:	11000215 	stw	r4,8(r2)
   45734:	89801a04 	addi	r6,r17,104
   45738:	000b883a 	mov	r5,zero
   4573c:	00471800 	call	47180 <memset>
   45740:	8005883a 	mov	r2,r16
   45744:	dfc00317 	ldw	ra,12(sp)
   45748:	dc800217 	ldw	r18,8(sp)
   4574c:	dc400117 	ldw	r17,4(sp)
   45750:	dc000017 	ldw	r16,0(sp)
   45754:	dec00404 	addi	sp,sp,16
   45758:	f800283a 	ret

0004575c <__sfp>:
   4575c:	defffb04 	addi	sp,sp,-20
   45760:	dc000015 	stw	r16,0(sp)
   45764:	04000174 	movhi	r16,5
   45768:	8410ff04 	addi	r16,r16,17404
   4576c:	dcc00315 	stw	r19,12(sp)
   45770:	2027883a 	mov	r19,r4
   45774:	81000017 	ldw	r4,0(r16)
   45778:	dfc00415 	stw	ra,16(sp)
   4577c:	dc800215 	stw	r18,8(sp)
   45780:	20800e17 	ldw	r2,56(r4)
   45784:	dc400115 	stw	r17,4(sp)
   45788:	1000021e 	bne	r2,zero,45794 <__sfp+0x38>
   4578c:	00455500 	call	45550 <__sinit.part.1>
   45790:	81000017 	ldw	r4,0(r16)
   45794:	2480b804 	addi	r18,r4,736
   45798:	047fffc4 	movi	r17,-1
   4579c:	91000117 	ldw	r4,4(r18)
   457a0:	94000217 	ldw	r16,8(r18)
   457a4:	213fffc4 	addi	r4,r4,-1
   457a8:	20000a16 	blt	r4,zero,457d4 <__sfp+0x78>
   457ac:	8080030f 	ldh	r2,12(r16)
   457b0:	10000c26 	beq	r2,zero,457e4 <__sfp+0x88>
   457b4:	80c01d04 	addi	r3,r16,116
   457b8:	00000206 	br	457c4 <__sfp+0x68>
   457bc:	18bfe60f 	ldh	r2,-104(r3)
   457c0:	10000826 	beq	r2,zero,457e4 <__sfp+0x88>
   457c4:	213fffc4 	addi	r4,r4,-1
   457c8:	1c3ffd04 	addi	r16,r3,-12
   457cc:	18c01a04 	addi	r3,r3,104
   457d0:	247ffa1e 	bne	r4,r17,457bc <__alt_data_end+0xfffde6bc>
   457d4:	90800017 	ldw	r2,0(r18)
   457d8:	10001d26 	beq	r2,zero,45850 <__sfp+0xf4>
   457dc:	1025883a 	mov	r18,r2
   457e0:	003fee06 	br	4579c <__alt_data_end+0xfffde69c>
   457e4:	00bfffc4 	movi	r2,-1
   457e8:	8080038d 	sth	r2,14(r16)
   457ec:	00800044 	movi	r2,1
   457f0:	8080030d 	sth	r2,12(r16)
   457f4:	80001915 	stw	zero,100(r16)
   457f8:	80000015 	stw	zero,0(r16)
   457fc:	80000215 	stw	zero,8(r16)
   45800:	80000115 	stw	zero,4(r16)
   45804:	80000415 	stw	zero,16(r16)
   45808:	80000515 	stw	zero,20(r16)
   4580c:	80000615 	stw	zero,24(r16)
   45810:	01800204 	movi	r6,8
   45814:	000b883a 	mov	r5,zero
   45818:	81001704 	addi	r4,r16,92
   4581c:	00471800 	call	47180 <memset>
   45820:	8005883a 	mov	r2,r16
   45824:	80000c15 	stw	zero,48(r16)
   45828:	80000d15 	stw	zero,52(r16)
   4582c:	80001115 	stw	zero,68(r16)
   45830:	80001215 	stw	zero,72(r16)
   45834:	dfc00417 	ldw	ra,16(sp)
   45838:	dcc00317 	ldw	r19,12(sp)
   4583c:	dc800217 	ldw	r18,8(sp)
   45840:	dc400117 	ldw	r17,4(sp)
   45844:	dc000017 	ldw	r16,0(sp)
   45848:	dec00504 	addi	sp,sp,20
   4584c:	f800283a 	ret
   45850:	01400104 	movi	r5,4
   45854:	9809883a 	mov	r4,r19
   45858:	00456f40 	call	456f4 <__sfmoreglue>
   4585c:	90800015 	stw	r2,0(r18)
   45860:	103fde1e 	bne	r2,zero,457dc <__alt_data_end+0xfffde6dc>
   45864:	00800304 	movi	r2,12
   45868:	98800015 	stw	r2,0(r19)
   4586c:	0005883a 	mov	r2,zero
   45870:	003ff006 	br	45834 <__alt_data_end+0xfffde734>

00045874 <_cleanup>:
   45874:	00800174 	movhi	r2,5
   45878:	1090ff04 	addi	r2,r2,17404
   4587c:	11000017 	ldw	r4,0(r2)
   45880:	01400174 	movhi	r5,5
   45884:	2968aa04 	addi	r5,r5,-23896
   45888:	00462901 	jmpi	46290 <_fwalk_reent>

0004588c <__sinit>:
   4588c:	20800e17 	ldw	r2,56(r4)
   45890:	10000126 	beq	r2,zero,45898 <__sinit+0xc>
   45894:	f800283a 	ret
   45898:	00455501 	jmpi	45550 <__sinit.part.1>

0004589c <__sfp_lock_acquire>:
   4589c:	f800283a 	ret

000458a0 <__sfp_lock_release>:
   458a0:	f800283a 	ret

000458a4 <__sinit_lock_acquire>:
   458a4:	f800283a 	ret

000458a8 <__sinit_lock_release>:
   458a8:	f800283a 	ret

000458ac <__fp_lock_all>:
   458ac:	00800174 	movhi	r2,5
   458b0:	10910004 	addi	r2,r2,17408
   458b4:	11000017 	ldw	r4,0(r2)
   458b8:	01400134 	movhi	r5,4
   458bc:	2955bb04 	addi	r5,r5,22252
   458c0:	00461cc1 	jmpi	461cc <_fwalk>

000458c4 <__fp_unlock_all>:
   458c4:	00800174 	movhi	r2,5
   458c8:	10910004 	addi	r2,r2,17408
   458cc:	11000017 	ldw	r4,0(r2)
   458d0:	01400134 	movhi	r5,4
   458d4:	29554f04 	addi	r5,r5,21820
   458d8:	00461cc1 	jmpi	461cc <_fwalk>

000458dc <_malloc_trim_r>:
   458dc:	defffb04 	addi	sp,sp,-20
   458e0:	dcc00315 	stw	r19,12(sp)
   458e4:	04c00174 	movhi	r19,5
   458e8:	dc800215 	stw	r18,8(sp)
   458ec:	dc400115 	stw	r17,4(sp)
   458f0:	dc000015 	stw	r16,0(sp)
   458f4:	dfc00415 	stw	ra,16(sp)
   458f8:	2821883a 	mov	r16,r5
   458fc:	9ccb6d04 	addi	r19,r19,11700
   45900:	2025883a 	mov	r18,r4
   45904:	004e2980 	call	4e298 <__malloc_lock>
   45908:	98800217 	ldw	r2,8(r19)
   4590c:	14400117 	ldw	r17,4(r2)
   45910:	00bfff04 	movi	r2,-4
   45914:	88a2703a 	and	r17,r17,r2
   45918:	8c21c83a 	sub	r16,r17,r16
   4591c:	8403fbc4 	addi	r16,r16,4079
   45920:	8020d33a 	srli	r16,r16,12
   45924:	0083ffc4 	movi	r2,4095
   45928:	843fffc4 	addi	r16,r16,-1
   4592c:	8020933a 	slli	r16,r16,12
   45930:	1400060e 	bge	r2,r16,4594c <_malloc_trim_r+0x70>
   45934:	000b883a 	mov	r5,zero
   45938:	9009883a 	mov	r4,r18
   4593c:	004887c0 	call	4887c <_sbrk_r>
   45940:	98c00217 	ldw	r3,8(r19)
   45944:	1c47883a 	add	r3,r3,r17
   45948:	10c00a26 	beq	r2,r3,45974 <_malloc_trim_r+0x98>
   4594c:	9009883a 	mov	r4,r18
   45950:	004e2bc0 	call	4e2bc <__malloc_unlock>
   45954:	0005883a 	mov	r2,zero
   45958:	dfc00417 	ldw	ra,16(sp)
   4595c:	dcc00317 	ldw	r19,12(sp)
   45960:	dc800217 	ldw	r18,8(sp)
   45964:	dc400117 	ldw	r17,4(sp)
   45968:	dc000017 	ldw	r16,0(sp)
   4596c:	dec00504 	addi	sp,sp,20
   45970:	f800283a 	ret
   45974:	040bc83a 	sub	r5,zero,r16
   45978:	9009883a 	mov	r4,r18
   4597c:	004887c0 	call	4887c <_sbrk_r>
   45980:	00ffffc4 	movi	r3,-1
   45984:	10c00d26 	beq	r2,r3,459bc <_malloc_trim_r+0xe0>
   45988:	00c00174 	movhi	r3,5
   4598c:	18d7e904 	addi	r3,r3,24484
   45990:	18800017 	ldw	r2,0(r3)
   45994:	99000217 	ldw	r4,8(r19)
   45998:	8c23c83a 	sub	r17,r17,r16
   4599c:	8c400054 	ori	r17,r17,1
   459a0:	1421c83a 	sub	r16,r2,r16
   459a4:	24400115 	stw	r17,4(r4)
   459a8:	9009883a 	mov	r4,r18
   459ac:	1c000015 	stw	r16,0(r3)
   459b0:	004e2bc0 	call	4e2bc <__malloc_unlock>
   459b4:	00800044 	movi	r2,1
   459b8:	003fe706 	br	45958 <__alt_data_end+0xfffde858>
   459bc:	000b883a 	mov	r5,zero
   459c0:	9009883a 	mov	r4,r18
   459c4:	004887c0 	call	4887c <_sbrk_r>
   459c8:	99000217 	ldw	r4,8(r19)
   459cc:	014003c4 	movi	r5,15
   459d0:	1107c83a 	sub	r3,r2,r4
   459d4:	28ffdd0e 	bge	r5,r3,4594c <__alt_data_end+0xfffde84c>
   459d8:	01400174 	movhi	r5,5
   459dc:	29510204 	addi	r5,r5,17416
   459e0:	29400017 	ldw	r5,0(r5)
   459e4:	18c00054 	ori	r3,r3,1
   459e8:	20c00115 	stw	r3,4(r4)
   459ec:	00c00174 	movhi	r3,5
   459f0:	1145c83a 	sub	r2,r2,r5
   459f4:	18d7e904 	addi	r3,r3,24484
   459f8:	18800015 	stw	r2,0(r3)
   459fc:	003fd306 	br	4594c <__alt_data_end+0xfffde84c>

00045a00 <_free_r>:
   45a00:	28004126 	beq	r5,zero,45b08 <_free_r+0x108>
   45a04:	defffd04 	addi	sp,sp,-12
   45a08:	dc400115 	stw	r17,4(sp)
   45a0c:	dc000015 	stw	r16,0(sp)
   45a10:	2023883a 	mov	r17,r4
   45a14:	2821883a 	mov	r16,r5
   45a18:	dfc00215 	stw	ra,8(sp)
   45a1c:	004e2980 	call	4e298 <__malloc_lock>
   45a20:	81ffff17 	ldw	r7,-4(r16)
   45a24:	00bfff84 	movi	r2,-2
   45a28:	01000174 	movhi	r4,5
   45a2c:	81bffe04 	addi	r6,r16,-8
   45a30:	3884703a 	and	r2,r7,r2
   45a34:	210b6d04 	addi	r4,r4,11700
   45a38:	308b883a 	add	r5,r6,r2
   45a3c:	2a400117 	ldw	r9,4(r5)
   45a40:	22000217 	ldw	r8,8(r4)
   45a44:	00ffff04 	movi	r3,-4
   45a48:	48c6703a 	and	r3,r9,r3
   45a4c:	2a005726 	beq	r5,r8,45bac <_free_r+0x1ac>
   45a50:	28c00115 	stw	r3,4(r5)
   45a54:	39c0004c 	andi	r7,r7,1
   45a58:	3800091e 	bne	r7,zero,45a80 <_free_r+0x80>
   45a5c:	823ffe17 	ldw	r8,-8(r16)
   45a60:	22400204 	addi	r9,r4,8
   45a64:	320dc83a 	sub	r6,r6,r8
   45a68:	31c00217 	ldw	r7,8(r6)
   45a6c:	1205883a 	add	r2,r2,r8
   45a70:	3a406526 	beq	r7,r9,45c08 <_free_r+0x208>
   45a74:	32000317 	ldw	r8,12(r6)
   45a78:	3a000315 	stw	r8,12(r7)
   45a7c:	41c00215 	stw	r7,8(r8)
   45a80:	28cf883a 	add	r7,r5,r3
   45a84:	39c00117 	ldw	r7,4(r7)
   45a88:	39c0004c 	andi	r7,r7,1
   45a8c:	38003a26 	beq	r7,zero,45b78 <_free_r+0x178>
   45a90:	10c00054 	ori	r3,r2,1
   45a94:	30c00115 	stw	r3,4(r6)
   45a98:	3087883a 	add	r3,r6,r2
   45a9c:	18800015 	stw	r2,0(r3)
   45aa0:	00c07fc4 	movi	r3,511
   45aa4:	18801936 	bltu	r3,r2,45b0c <_free_r+0x10c>
   45aa8:	1004d0fa 	srli	r2,r2,3
   45aac:	01c00044 	movi	r7,1
   45ab0:	21400117 	ldw	r5,4(r4)
   45ab4:	10c00044 	addi	r3,r2,1
   45ab8:	18c7883a 	add	r3,r3,r3
   45abc:	1005d0ba 	srai	r2,r2,2
   45ac0:	18c7883a 	add	r3,r3,r3
   45ac4:	18c7883a 	add	r3,r3,r3
   45ac8:	1907883a 	add	r3,r3,r4
   45acc:	3884983a 	sll	r2,r7,r2
   45ad0:	19c00017 	ldw	r7,0(r3)
   45ad4:	1a3ffe04 	addi	r8,r3,-8
   45ad8:	1144b03a 	or	r2,r2,r5
   45adc:	32000315 	stw	r8,12(r6)
   45ae0:	31c00215 	stw	r7,8(r6)
   45ae4:	20800115 	stw	r2,4(r4)
   45ae8:	19800015 	stw	r6,0(r3)
   45aec:	39800315 	stw	r6,12(r7)
   45af0:	8809883a 	mov	r4,r17
   45af4:	dfc00217 	ldw	ra,8(sp)
   45af8:	dc400117 	ldw	r17,4(sp)
   45afc:	dc000017 	ldw	r16,0(sp)
   45b00:	dec00304 	addi	sp,sp,12
   45b04:	004e2bc1 	jmpi	4e2bc <__malloc_unlock>
   45b08:	f800283a 	ret
   45b0c:	100ad27a 	srli	r5,r2,9
   45b10:	00c00104 	movi	r3,4
   45b14:	19404a36 	bltu	r3,r5,45c40 <_free_r+0x240>
   45b18:	100ad1ba 	srli	r5,r2,6
   45b1c:	28c00e44 	addi	r3,r5,57
   45b20:	18c7883a 	add	r3,r3,r3
   45b24:	29400e04 	addi	r5,r5,56
   45b28:	18c7883a 	add	r3,r3,r3
   45b2c:	18c7883a 	add	r3,r3,r3
   45b30:	1909883a 	add	r4,r3,r4
   45b34:	20c00017 	ldw	r3,0(r4)
   45b38:	01c00174 	movhi	r7,5
   45b3c:	213ffe04 	addi	r4,r4,-8
   45b40:	39cb6d04 	addi	r7,r7,11700
   45b44:	20c04426 	beq	r4,r3,45c58 <_free_r+0x258>
   45b48:	01ffff04 	movi	r7,-4
   45b4c:	19400117 	ldw	r5,4(r3)
   45b50:	29ca703a 	and	r5,r5,r7
   45b54:	1140022e 	bgeu	r2,r5,45b60 <_free_r+0x160>
   45b58:	18c00217 	ldw	r3,8(r3)
   45b5c:	20fffb1e 	bne	r4,r3,45b4c <__alt_data_end+0xfffdea4c>
   45b60:	19000317 	ldw	r4,12(r3)
   45b64:	31000315 	stw	r4,12(r6)
   45b68:	30c00215 	stw	r3,8(r6)
   45b6c:	21800215 	stw	r6,8(r4)
   45b70:	19800315 	stw	r6,12(r3)
   45b74:	003fde06 	br	45af0 <__alt_data_end+0xfffde9f0>
   45b78:	29c00217 	ldw	r7,8(r5)
   45b7c:	10c5883a 	add	r2,r2,r3
   45b80:	00c00174 	movhi	r3,5
   45b84:	18cb6f04 	addi	r3,r3,11708
   45b88:	38c03b26 	beq	r7,r3,45c78 <_free_r+0x278>
   45b8c:	2a000317 	ldw	r8,12(r5)
   45b90:	11400054 	ori	r5,r2,1
   45b94:	3087883a 	add	r3,r6,r2
   45b98:	3a000315 	stw	r8,12(r7)
   45b9c:	41c00215 	stw	r7,8(r8)
   45ba0:	31400115 	stw	r5,4(r6)
   45ba4:	18800015 	stw	r2,0(r3)
   45ba8:	003fbd06 	br	45aa0 <__alt_data_end+0xfffde9a0>
   45bac:	39c0004c 	andi	r7,r7,1
   45bb0:	10c5883a 	add	r2,r2,r3
   45bb4:	3800071e 	bne	r7,zero,45bd4 <_free_r+0x1d4>
   45bb8:	81fffe17 	ldw	r7,-8(r16)
   45bbc:	31cdc83a 	sub	r6,r6,r7
   45bc0:	30c00317 	ldw	r3,12(r6)
   45bc4:	31400217 	ldw	r5,8(r6)
   45bc8:	11c5883a 	add	r2,r2,r7
   45bcc:	28c00315 	stw	r3,12(r5)
   45bd0:	19400215 	stw	r5,8(r3)
   45bd4:	10c00054 	ori	r3,r2,1
   45bd8:	30c00115 	stw	r3,4(r6)
   45bdc:	00c00174 	movhi	r3,5
   45be0:	18d10304 	addi	r3,r3,17420
   45be4:	18c00017 	ldw	r3,0(r3)
   45be8:	21800215 	stw	r6,8(r4)
   45bec:	10ffc036 	bltu	r2,r3,45af0 <__alt_data_end+0xfffde9f0>
   45bf0:	00800174 	movhi	r2,5
   45bf4:	1097e104 	addi	r2,r2,24452
   45bf8:	11400017 	ldw	r5,0(r2)
   45bfc:	8809883a 	mov	r4,r17
   45c00:	00458dc0 	call	458dc <_malloc_trim_r>
   45c04:	003fba06 	br	45af0 <__alt_data_end+0xfffde9f0>
   45c08:	28c9883a 	add	r4,r5,r3
   45c0c:	21000117 	ldw	r4,4(r4)
   45c10:	2100004c 	andi	r4,r4,1
   45c14:	2000391e 	bne	r4,zero,45cfc <_free_r+0x2fc>
   45c18:	29c00217 	ldw	r7,8(r5)
   45c1c:	29000317 	ldw	r4,12(r5)
   45c20:	1885883a 	add	r2,r3,r2
   45c24:	10c00054 	ori	r3,r2,1
   45c28:	39000315 	stw	r4,12(r7)
   45c2c:	21c00215 	stw	r7,8(r4)
   45c30:	30c00115 	stw	r3,4(r6)
   45c34:	308d883a 	add	r6,r6,r2
   45c38:	30800015 	stw	r2,0(r6)
   45c3c:	003fac06 	br	45af0 <__alt_data_end+0xfffde9f0>
   45c40:	00c00504 	movi	r3,20
   45c44:	19401536 	bltu	r3,r5,45c9c <_free_r+0x29c>
   45c48:	28c01704 	addi	r3,r5,92
   45c4c:	18c7883a 	add	r3,r3,r3
   45c50:	294016c4 	addi	r5,r5,91
   45c54:	003fb406 	br	45b28 <__alt_data_end+0xfffdea28>
   45c58:	280bd0ba 	srai	r5,r5,2
   45c5c:	00c00044 	movi	r3,1
   45c60:	38800117 	ldw	r2,4(r7)
   45c64:	194a983a 	sll	r5,r3,r5
   45c68:	2007883a 	mov	r3,r4
   45c6c:	2884b03a 	or	r2,r5,r2
   45c70:	38800115 	stw	r2,4(r7)
   45c74:	003fbb06 	br	45b64 <__alt_data_end+0xfffdea64>
   45c78:	21800515 	stw	r6,20(r4)
   45c7c:	21800415 	stw	r6,16(r4)
   45c80:	10c00054 	ori	r3,r2,1
   45c84:	31c00315 	stw	r7,12(r6)
   45c88:	31c00215 	stw	r7,8(r6)
   45c8c:	30c00115 	stw	r3,4(r6)
   45c90:	308d883a 	add	r6,r6,r2
   45c94:	30800015 	stw	r2,0(r6)
   45c98:	003f9506 	br	45af0 <__alt_data_end+0xfffde9f0>
   45c9c:	00c01504 	movi	r3,84
   45ca0:	19400536 	bltu	r3,r5,45cb8 <_free_r+0x2b8>
   45ca4:	100ad33a 	srli	r5,r2,12
   45ca8:	28c01bc4 	addi	r3,r5,111
   45cac:	18c7883a 	add	r3,r3,r3
   45cb0:	29401b84 	addi	r5,r5,110
   45cb4:	003f9c06 	br	45b28 <__alt_data_end+0xfffdea28>
   45cb8:	00c05504 	movi	r3,340
   45cbc:	19400536 	bltu	r3,r5,45cd4 <_free_r+0x2d4>
   45cc0:	100ad3fa 	srli	r5,r2,15
   45cc4:	28c01e04 	addi	r3,r5,120
   45cc8:	18c7883a 	add	r3,r3,r3
   45ccc:	29401dc4 	addi	r5,r5,119
   45cd0:	003f9506 	br	45b28 <__alt_data_end+0xfffdea28>
   45cd4:	00c15504 	movi	r3,1364
   45cd8:	19400536 	bltu	r3,r5,45cf0 <_free_r+0x2f0>
   45cdc:	100ad4ba 	srli	r5,r2,18
   45ce0:	28c01f44 	addi	r3,r5,125
   45ce4:	18c7883a 	add	r3,r3,r3
   45ce8:	29401f04 	addi	r5,r5,124
   45cec:	003f8e06 	br	45b28 <__alt_data_end+0xfffdea28>
   45cf0:	00c03f84 	movi	r3,254
   45cf4:	01401f84 	movi	r5,126
   45cf8:	003f8b06 	br	45b28 <__alt_data_end+0xfffdea28>
   45cfc:	10c00054 	ori	r3,r2,1
   45d00:	30c00115 	stw	r3,4(r6)
   45d04:	308d883a 	add	r6,r6,r2
   45d08:	30800015 	stw	r2,0(r6)
   45d0c:	003f7806 	br	45af0 <__alt_data_end+0xfffde9f0>

00045d10 <__sfvwrite_r>:
   45d10:	30800217 	ldw	r2,8(r6)
   45d14:	10006726 	beq	r2,zero,45eb4 <__sfvwrite_r+0x1a4>
   45d18:	28c0030b 	ldhu	r3,12(r5)
   45d1c:	defff404 	addi	sp,sp,-48
   45d20:	dd400715 	stw	r21,28(sp)
   45d24:	dd000615 	stw	r20,24(sp)
   45d28:	dc000215 	stw	r16,8(sp)
   45d2c:	dfc00b15 	stw	ra,44(sp)
   45d30:	df000a15 	stw	fp,40(sp)
   45d34:	ddc00915 	stw	r23,36(sp)
   45d38:	dd800815 	stw	r22,32(sp)
   45d3c:	dcc00515 	stw	r19,20(sp)
   45d40:	dc800415 	stw	r18,16(sp)
   45d44:	dc400315 	stw	r17,12(sp)
   45d48:	1880020c 	andi	r2,r3,8
   45d4c:	2821883a 	mov	r16,r5
   45d50:	202b883a 	mov	r21,r4
   45d54:	3029883a 	mov	r20,r6
   45d58:	10002726 	beq	r2,zero,45df8 <__sfvwrite_r+0xe8>
   45d5c:	28800417 	ldw	r2,16(r5)
   45d60:	10002526 	beq	r2,zero,45df8 <__sfvwrite_r+0xe8>
   45d64:	1880008c 	andi	r2,r3,2
   45d68:	a4400017 	ldw	r17,0(r20)
   45d6c:	10002a26 	beq	r2,zero,45e18 <__sfvwrite_r+0x108>
   45d70:	05a00034 	movhi	r22,32768
   45d74:	0027883a 	mov	r19,zero
   45d78:	0025883a 	mov	r18,zero
   45d7c:	b5bf0004 	addi	r22,r22,-1024
   45d80:	980d883a 	mov	r6,r19
   45d84:	a809883a 	mov	r4,r21
   45d88:	90004626 	beq	r18,zero,45ea4 <__sfvwrite_r+0x194>
   45d8c:	900f883a 	mov	r7,r18
   45d90:	b480022e 	bgeu	r22,r18,45d9c <__sfvwrite_r+0x8c>
   45d94:	01e00034 	movhi	r7,32768
   45d98:	39ff0004 	addi	r7,r7,-1024
   45d9c:	80800917 	ldw	r2,36(r16)
   45da0:	81400717 	ldw	r5,28(r16)
   45da4:	103ee83a 	callr	r2
   45da8:	0080570e 	bge	zero,r2,45f08 <__sfvwrite_r+0x1f8>
   45dac:	a0c00217 	ldw	r3,8(r20)
   45db0:	98a7883a 	add	r19,r19,r2
   45db4:	90a5c83a 	sub	r18,r18,r2
   45db8:	1885c83a 	sub	r2,r3,r2
   45dbc:	a0800215 	stw	r2,8(r20)
   45dc0:	103fef1e 	bne	r2,zero,45d80 <__alt_data_end+0xfffdec80>
   45dc4:	0005883a 	mov	r2,zero
   45dc8:	dfc00b17 	ldw	ra,44(sp)
   45dcc:	df000a17 	ldw	fp,40(sp)
   45dd0:	ddc00917 	ldw	r23,36(sp)
   45dd4:	dd800817 	ldw	r22,32(sp)
   45dd8:	dd400717 	ldw	r21,28(sp)
   45ddc:	dd000617 	ldw	r20,24(sp)
   45de0:	dcc00517 	ldw	r19,20(sp)
   45de4:	dc800417 	ldw	r18,16(sp)
   45de8:	dc400317 	ldw	r17,12(sp)
   45dec:	dc000217 	ldw	r16,8(sp)
   45df0:	dec00c04 	addi	sp,sp,48
   45df4:	f800283a 	ret
   45df8:	800b883a 	mov	r5,r16
   45dfc:	a809883a 	mov	r4,r21
   45e00:	00438b80 	call	438b8 <__swsetup_r>
   45e04:	1000eb1e 	bne	r2,zero,461b4 <__sfvwrite_r+0x4a4>
   45e08:	80c0030b 	ldhu	r3,12(r16)
   45e0c:	a4400017 	ldw	r17,0(r20)
   45e10:	1880008c 	andi	r2,r3,2
   45e14:	103fd61e 	bne	r2,zero,45d70 <__alt_data_end+0xfffdec70>
   45e18:	1880004c 	andi	r2,r3,1
   45e1c:	10003f1e 	bne	r2,zero,45f1c <__sfvwrite_r+0x20c>
   45e20:	0039883a 	mov	fp,zero
   45e24:	0025883a 	mov	r18,zero
   45e28:	90001a26 	beq	r18,zero,45e94 <__sfvwrite_r+0x184>
   45e2c:	1880800c 	andi	r2,r3,512
   45e30:	84c00217 	ldw	r19,8(r16)
   45e34:	10002126 	beq	r2,zero,45ebc <__sfvwrite_r+0x1ac>
   45e38:	982f883a 	mov	r23,r19
   45e3c:	94c09336 	bltu	r18,r19,4608c <__sfvwrite_r+0x37c>
   45e40:	1881200c 	andi	r2,r3,1152
   45e44:	10009e1e 	bne	r2,zero,460c0 <__sfvwrite_r+0x3b0>
   45e48:	81000017 	ldw	r4,0(r16)
   45e4c:	b80d883a 	mov	r6,r23
   45e50:	e00b883a 	mov	r5,fp
   45e54:	00470240 	call	47024 <memmove>
   45e58:	80c00217 	ldw	r3,8(r16)
   45e5c:	81000017 	ldw	r4,0(r16)
   45e60:	9005883a 	mov	r2,r18
   45e64:	1ce7c83a 	sub	r19,r3,r19
   45e68:	25cf883a 	add	r7,r4,r23
   45e6c:	84c00215 	stw	r19,8(r16)
   45e70:	81c00015 	stw	r7,0(r16)
   45e74:	a0c00217 	ldw	r3,8(r20)
   45e78:	e0b9883a 	add	fp,fp,r2
   45e7c:	90a5c83a 	sub	r18,r18,r2
   45e80:	18a7c83a 	sub	r19,r3,r2
   45e84:	a4c00215 	stw	r19,8(r20)
   45e88:	983fce26 	beq	r19,zero,45dc4 <__alt_data_end+0xfffdecc4>
   45e8c:	80c0030b 	ldhu	r3,12(r16)
   45e90:	903fe61e 	bne	r18,zero,45e2c <__alt_data_end+0xfffded2c>
   45e94:	8f000017 	ldw	fp,0(r17)
   45e98:	8c800117 	ldw	r18,4(r17)
   45e9c:	8c400204 	addi	r17,r17,8
   45ea0:	003fe106 	br	45e28 <__alt_data_end+0xfffded28>
   45ea4:	8cc00017 	ldw	r19,0(r17)
   45ea8:	8c800117 	ldw	r18,4(r17)
   45eac:	8c400204 	addi	r17,r17,8
   45eb0:	003fb306 	br	45d80 <__alt_data_end+0xfffdec80>
   45eb4:	0005883a 	mov	r2,zero
   45eb8:	f800283a 	ret
   45ebc:	81000017 	ldw	r4,0(r16)
   45ec0:	80800417 	ldw	r2,16(r16)
   45ec4:	11005736 	bltu	r2,r4,46024 <__sfvwrite_r+0x314>
   45ec8:	85c00517 	ldw	r23,20(r16)
   45ecc:	95c05536 	bltu	r18,r23,46024 <__sfvwrite_r+0x314>
   45ed0:	00a00034 	movhi	r2,32768
   45ed4:	10bfffc4 	addi	r2,r2,-1
   45ed8:	9009883a 	mov	r4,r18
   45edc:	1480012e 	bgeu	r2,r18,45ee4 <__sfvwrite_r+0x1d4>
   45ee0:	1009883a 	mov	r4,r2
   45ee4:	b80b883a 	mov	r5,r23
   45ee8:	004b5140 	call	4b514 <__divsi3>
   45eec:	15cf383a 	mul	r7,r2,r23
   45ef0:	81400717 	ldw	r5,28(r16)
   45ef4:	80800917 	ldw	r2,36(r16)
   45ef8:	e00d883a 	mov	r6,fp
   45efc:	a809883a 	mov	r4,r21
   45f00:	103ee83a 	callr	r2
   45f04:	00bfdb16 	blt	zero,r2,45e74 <__alt_data_end+0xfffded74>
   45f08:	8080030b 	ldhu	r2,12(r16)
   45f0c:	10801014 	ori	r2,r2,64
   45f10:	8080030d 	sth	r2,12(r16)
   45f14:	00bfffc4 	movi	r2,-1
   45f18:	003fab06 	br	45dc8 <__alt_data_end+0xfffdecc8>
   45f1c:	0027883a 	mov	r19,zero
   45f20:	0011883a 	mov	r8,zero
   45f24:	0039883a 	mov	fp,zero
   45f28:	0025883a 	mov	r18,zero
   45f2c:	90001f26 	beq	r18,zero,45fac <__sfvwrite_r+0x29c>
   45f30:	40005a26 	beq	r8,zero,4609c <__sfvwrite_r+0x38c>
   45f34:	982d883a 	mov	r22,r19
   45f38:	94c0012e 	bgeu	r18,r19,45f40 <__sfvwrite_r+0x230>
   45f3c:	902d883a 	mov	r22,r18
   45f40:	81000017 	ldw	r4,0(r16)
   45f44:	80800417 	ldw	r2,16(r16)
   45f48:	b02f883a 	mov	r23,r22
   45f4c:	81c00517 	ldw	r7,20(r16)
   45f50:	1100032e 	bgeu	r2,r4,45f60 <__sfvwrite_r+0x250>
   45f54:	80c00217 	ldw	r3,8(r16)
   45f58:	38c7883a 	add	r3,r7,r3
   45f5c:	1d801816 	blt	r3,r22,45fc0 <__sfvwrite_r+0x2b0>
   45f60:	b1c03e16 	blt	r22,r7,4605c <__sfvwrite_r+0x34c>
   45f64:	80800917 	ldw	r2,36(r16)
   45f68:	81400717 	ldw	r5,28(r16)
   45f6c:	e00d883a 	mov	r6,fp
   45f70:	da000115 	stw	r8,4(sp)
   45f74:	a809883a 	mov	r4,r21
   45f78:	103ee83a 	callr	r2
   45f7c:	102f883a 	mov	r23,r2
   45f80:	da000117 	ldw	r8,4(sp)
   45f84:	00bfe00e 	bge	zero,r2,45f08 <__alt_data_end+0xfffdee08>
   45f88:	9de7c83a 	sub	r19,r19,r23
   45f8c:	98001f26 	beq	r19,zero,4600c <__sfvwrite_r+0x2fc>
   45f90:	a0800217 	ldw	r2,8(r20)
   45f94:	e5f9883a 	add	fp,fp,r23
   45f98:	95e5c83a 	sub	r18,r18,r23
   45f9c:	15efc83a 	sub	r23,r2,r23
   45fa0:	a5c00215 	stw	r23,8(r20)
   45fa4:	b83f8726 	beq	r23,zero,45dc4 <__alt_data_end+0xfffdecc4>
   45fa8:	903fe11e 	bne	r18,zero,45f30 <__alt_data_end+0xfffdee30>
   45fac:	8f000017 	ldw	fp,0(r17)
   45fb0:	8c800117 	ldw	r18,4(r17)
   45fb4:	0011883a 	mov	r8,zero
   45fb8:	8c400204 	addi	r17,r17,8
   45fbc:	003fdb06 	br	45f2c <__alt_data_end+0xfffdee2c>
   45fc0:	180d883a 	mov	r6,r3
   45fc4:	e00b883a 	mov	r5,fp
   45fc8:	da000115 	stw	r8,4(sp)
   45fcc:	d8c00015 	stw	r3,0(sp)
   45fd0:	00470240 	call	47024 <memmove>
   45fd4:	d8c00017 	ldw	r3,0(sp)
   45fd8:	80800017 	ldw	r2,0(r16)
   45fdc:	800b883a 	mov	r5,r16
   45fe0:	a809883a 	mov	r4,r21
   45fe4:	10c5883a 	add	r2,r2,r3
   45fe8:	80800015 	stw	r2,0(r16)
   45fec:	d8c00015 	stw	r3,0(sp)
   45ff0:	00454b00 	call	454b0 <_fflush_r>
   45ff4:	d8c00017 	ldw	r3,0(sp)
   45ff8:	da000117 	ldw	r8,4(sp)
   45ffc:	103fc21e 	bne	r2,zero,45f08 <__alt_data_end+0xfffdee08>
   46000:	182f883a 	mov	r23,r3
   46004:	9de7c83a 	sub	r19,r19,r23
   46008:	983fe11e 	bne	r19,zero,45f90 <__alt_data_end+0xfffdee90>
   4600c:	800b883a 	mov	r5,r16
   46010:	a809883a 	mov	r4,r21
   46014:	00454b00 	call	454b0 <_fflush_r>
   46018:	103fbb1e 	bne	r2,zero,45f08 <__alt_data_end+0xfffdee08>
   4601c:	0011883a 	mov	r8,zero
   46020:	003fdb06 	br	45f90 <__alt_data_end+0xfffdee90>
   46024:	94c0012e 	bgeu	r18,r19,4602c <__sfvwrite_r+0x31c>
   46028:	9027883a 	mov	r19,r18
   4602c:	980d883a 	mov	r6,r19
   46030:	e00b883a 	mov	r5,fp
   46034:	00470240 	call	47024 <memmove>
   46038:	80800217 	ldw	r2,8(r16)
   4603c:	80c00017 	ldw	r3,0(r16)
   46040:	14c5c83a 	sub	r2,r2,r19
   46044:	1cc7883a 	add	r3,r3,r19
   46048:	80800215 	stw	r2,8(r16)
   4604c:	80c00015 	stw	r3,0(r16)
   46050:	10004326 	beq	r2,zero,46160 <__sfvwrite_r+0x450>
   46054:	9805883a 	mov	r2,r19
   46058:	003f8606 	br	45e74 <__alt_data_end+0xfffded74>
   4605c:	b00d883a 	mov	r6,r22
   46060:	e00b883a 	mov	r5,fp
   46064:	da000115 	stw	r8,4(sp)
   46068:	00470240 	call	47024 <memmove>
   4606c:	80800217 	ldw	r2,8(r16)
   46070:	80c00017 	ldw	r3,0(r16)
   46074:	da000117 	ldw	r8,4(sp)
   46078:	1585c83a 	sub	r2,r2,r22
   4607c:	1dad883a 	add	r22,r3,r22
   46080:	80800215 	stw	r2,8(r16)
   46084:	85800015 	stw	r22,0(r16)
   46088:	003fbf06 	br	45f88 <__alt_data_end+0xfffdee88>
   4608c:	81000017 	ldw	r4,0(r16)
   46090:	9027883a 	mov	r19,r18
   46094:	902f883a 	mov	r23,r18
   46098:	003f6c06 	br	45e4c <__alt_data_end+0xfffded4c>
   4609c:	900d883a 	mov	r6,r18
   460a0:	01400284 	movi	r5,10
   460a4:	e009883a 	mov	r4,fp
   460a8:	0046df80 	call	46df8 <memchr>
   460ac:	10003e26 	beq	r2,zero,461a8 <__sfvwrite_r+0x498>
   460b0:	10800044 	addi	r2,r2,1
   460b4:	1727c83a 	sub	r19,r2,fp
   460b8:	02000044 	movi	r8,1
   460bc:	003f9d06 	br	45f34 <__alt_data_end+0xfffdee34>
   460c0:	80800517 	ldw	r2,20(r16)
   460c4:	81400417 	ldw	r5,16(r16)
   460c8:	81c00017 	ldw	r7,0(r16)
   460cc:	10a7883a 	add	r19,r2,r2
   460d0:	9885883a 	add	r2,r19,r2
   460d4:	1026d7fa 	srli	r19,r2,31
   460d8:	396dc83a 	sub	r22,r7,r5
   460dc:	b1000044 	addi	r4,r22,1
   460e0:	9885883a 	add	r2,r19,r2
   460e4:	1027d07a 	srai	r19,r2,1
   460e8:	2485883a 	add	r2,r4,r18
   460ec:	980d883a 	mov	r6,r19
   460f0:	9880022e 	bgeu	r19,r2,460fc <__sfvwrite_r+0x3ec>
   460f4:	1027883a 	mov	r19,r2
   460f8:	100d883a 	mov	r6,r2
   460fc:	18c1000c 	andi	r3,r3,1024
   46100:	18001c26 	beq	r3,zero,46174 <__sfvwrite_r+0x464>
   46104:	300b883a 	mov	r5,r6
   46108:	a809883a 	mov	r4,r21
   4610c:	00465ec0 	call	465ec <_malloc_r>
   46110:	102f883a 	mov	r23,r2
   46114:	10002926 	beq	r2,zero,461bc <__sfvwrite_r+0x4ac>
   46118:	81400417 	ldw	r5,16(r16)
   4611c:	b00d883a 	mov	r6,r22
   46120:	1009883a 	mov	r4,r2
   46124:	0046edc0 	call	46edc <memcpy>
   46128:	8080030b 	ldhu	r2,12(r16)
   4612c:	00fedfc4 	movi	r3,-1153
   46130:	10c4703a 	and	r2,r2,r3
   46134:	10802014 	ori	r2,r2,128
   46138:	8080030d 	sth	r2,12(r16)
   4613c:	bd89883a 	add	r4,r23,r22
   46140:	9d8fc83a 	sub	r7,r19,r22
   46144:	85c00415 	stw	r23,16(r16)
   46148:	84c00515 	stw	r19,20(r16)
   4614c:	81000015 	stw	r4,0(r16)
   46150:	9027883a 	mov	r19,r18
   46154:	81c00215 	stw	r7,8(r16)
   46158:	902f883a 	mov	r23,r18
   4615c:	003f3b06 	br	45e4c <__alt_data_end+0xfffded4c>
   46160:	800b883a 	mov	r5,r16
   46164:	a809883a 	mov	r4,r21
   46168:	00454b00 	call	454b0 <_fflush_r>
   4616c:	103fb926 	beq	r2,zero,46054 <__alt_data_end+0xfffdef54>
   46170:	003f6506 	br	45f08 <__alt_data_end+0xfffdee08>
   46174:	a809883a 	mov	r4,r21
   46178:	00482a40 	call	482a4 <_realloc_r>
   4617c:	102f883a 	mov	r23,r2
   46180:	103fee1e 	bne	r2,zero,4613c <__alt_data_end+0xfffdf03c>
   46184:	81400417 	ldw	r5,16(r16)
   46188:	a809883a 	mov	r4,r21
   4618c:	0045a000 	call	45a00 <_free_r>
   46190:	8080030b 	ldhu	r2,12(r16)
   46194:	00ffdfc4 	movi	r3,-129
   46198:	1884703a 	and	r2,r3,r2
   4619c:	00c00304 	movi	r3,12
   461a0:	a8c00015 	stw	r3,0(r21)
   461a4:	003f5906 	br	45f0c <__alt_data_end+0xfffdee0c>
   461a8:	94c00044 	addi	r19,r18,1
   461ac:	02000044 	movi	r8,1
   461b0:	003f6006 	br	45f34 <__alt_data_end+0xfffdee34>
   461b4:	00bfffc4 	movi	r2,-1
   461b8:	003f0306 	br	45dc8 <__alt_data_end+0xfffdecc8>
   461bc:	00800304 	movi	r2,12
   461c0:	a8800015 	stw	r2,0(r21)
   461c4:	8080030b 	ldhu	r2,12(r16)
   461c8:	003f5006 	br	45f0c <__alt_data_end+0xfffdee0c>

000461cc <_fwalk>:
   461cc:	defff704 	addi	sp,sp,-36
   461d0:	dd000415 	stw	r20,16(sp)
   461d4:	dfc00815 	stw	ra,32(sp)
   461d8:	ddc00715 	stw	r23,28(sp)
   461dc:	dd800615 	stw	r22,24(sp)
   461e0:	dd400515 	stw	r21,20(sp)
   461e4:	dcc00315 	stw	r19,12(sp)
   461e8:	dc800215 	stw	r18,8(sp)
   461ec:	dc400115 	stw	r17,4(sp)
   461f0:	dc000015 	stw	r16,0(sp)
   461f4:	2500b804 	addi	r20,r4,736
   461f8:	a0002326 	beq	r20,zero,46288 <_fwalk+0xbc>
   461fc:	282b883a 	mov	r21,r5
   46200:	002f883a 	mov	r23,zero
   46204:	05800044 	movi	r22,1
   46208:	04ffffc4 	movi	r19,-1
   4620c:	a4400117 	ldw	r17,4(r20)
   46210:	a4800217 	ldw	r18,8(r20)
   46214:	8c7fffc4 	addi	r17,r17,-1
   46218:	88000d16 	blt	r17,zero,46250 <_fwalk+0x84>
   4621c:	94000304 	addi	r16,r18,12
   46220:	94800384 	addi	r18,r18,14
   46224:	8080000b 	ldhu	r2,0(r16)
   46228:	8c7fffc4 	addi	r17,r17,-1
   4622c:	813ffd04 	addi	r4,r16,-12
   46230:	b080042e 	bgeu	r22,r2,46244 <_fwalk+0x78>
   46234:	9080000f 	ldh	r2,0(r18)
   46238:	14c00226 	beq	r2,r19,46244 <_fwalk+0x78>
   4623c:	a83ee83a 	callr	r21
   46240:	b8aeb03a 	or	r23,r23,r2
   46244:	84001a04 	addi	r16,r16,104
   46248:	94801a04 	addi	r18,r18,104
   4624c:	8cfff51e 	bne	r17,r19,46224 <__alt_data_end+0xfffdf124>
   46250:	a5000017 	ldw	r20,0(r20)
   46254:	a03fed1e 	bne	r20,zero,4620c <__alt_data_end+0xfffdf10c>
   46258:	b805883a 	mov	r2,r23
   4625c:	dfc00817 	ldw	ra,32(sp)
   46260:	ddc00717 	ldw	r23,28(sp)
   46264:	dd800617 	ldw	r22,24(sp)
   46268:	dd400517 	ldw	r21,20(sp)
   4626c:	dd000417 	ldw	r20,16(sp)
   46270:	dcc00317 	ldw	r19,12(sp)
   46274:	dc800217 	ldw	r18,8(sp)
   46278:	dc400117 	ldw	r17,4(sp)
   4627c:	dc000017 	ldw	r16,0(sp)
   46280:	dec00904 	addi	sp,sp,36
   46284:	f800283a 	ret
   46288:	002f883a 	mov	r23,zero
   4628c:	003ff206 	br	46258 <__alt_data_end+0xfffdf158>

00046290 <_fwalk_reent>:
   46290:	defff704 	addi	sp,sp,-36
   46294:	dd000415 	stw	r20,16(sp)
   46298:	dfc00815 	stw	ra,32(sp)
   4629c:	ddc00715 	stw	r23,28(sp)
   462a0:	dd800615 	stw	r22,24(sp)
   462a4:	dd400515 	stw	r21,20(sp)
   462a8:	dcc00315 	stw	r19,12(sp)
   462ac:	dc800215 	stw	r18,8(sp)
   462b0:	dc400115 	stw	r17,4(sp)
   462b4:	dc000015 	stw	r16,0(sp)
   462b8:	2500b804 	addi	r20,r4,736
   462bc:	a0002326 	beq	r20,zero,4634c <_fwalk_reent+0xbc>
   462c0:	282b883a 	mov	r21,r5
   462c4:	2027883a 	mov	r19,r4
   462c8:	002f883a 	mov	r23,zero
   462cc:	05800044 	movi	r22,1
   462d0:	04bfffc4 	movi	r18,-1
   462d4:	a4400117 	ldw	r17,4(r20)
   462d8:	a4000217 	ldw	r16,8(r20)
   462dc:	8c7fffc4 	addi	r17,r17,-1
   462e0:	88000c16 	blt	r17,zero,46314 <_fwalk_reent+0x84>
   462e4:	84000304 	addi	r16,r16,12
   462e8:	8080000b 	ldhu	r2,0(r16)
   462ec:	8c7fffc4 	addi	r17,r17,-1
   462f0:	817ffd04 	addi	r5,r16,-12
   462f4:	b080052e 	bgeu	r22,r2,4630c <_fwalk_reent+0x7c>
   462f8:	8080008f 	ldh	r2,2(r16)
   462fc:	9809883a 	mov	r4,r19
   46300:	14800226 	beq	r2,r18,4630c <_fwalk_reent+0x7c>
   46304:	a83ee83a 	callr	r21
   46308:	b8aeb03a 	or	r23,r23,r2
   4630c:	84001a04 	addi	r16,r16,104
   46310:	8cbff51e 	bne	r17,r18,462e8 <__alt_data_end+0xfffdf1e8>
   46314:	a5000017 	ldw	r20,0(r20)
   46318:	a03fee1e 	bne	r20,zero,462d4 <__alt_data_end+0xfffdf1d4>
   4631c:	b805883a 	mov	r2,r23
   46320:	dfc00817 	ldw	ra,32(sp)
   46324:	ddc00717 	ldw	r23,28(sp)
   46328:	dd800617 	ldw	r22,24(sp)
   4632c:	dd400517 	ldw	r21,20(sp)
   46330:	dd000417 	ldw	r20,16(sp)
   46334:	dcc00317 	ldw	r19,12(sp)
   46338:	dc800217 	ldw	r18,8(sp)
   4633c:	dc400117 	ldw	r17,4(sp)
   46340:	dc000017 	ldw	r16,0(sp)
   46344:	dec00904 	addi	sp,sp,36
   46348:	f800283a 	ret
   4634c:	002f883a 	mov	r23,zero
   46350:	003ff206 	br	4631c <__alt_data_end+0xfffdf21c>

00046354 <_setlocale_r>:
   46354:	30001b26 	beq	r6,zero,463c4 <_setlocale_r+0x70>
   46358:	01400174 	movhi	r5,5
   4635c:	defffe04 	addi	sp,sp,-8
   46360:	2949db04 	addi	r5,r5,10092
   46364:	3009883a 	mov	r4,r6
   46368:	dc000015 	stw	r16,0(sp)
   4636c:	dfc00115 	stw	ra,4(sp)
   46370:	3021883a 	mov	r16,r6
   46374:	0048a0c0 	call	48a0c <strcmp>
   46378:	1000061e 	bne	r2,zero,46394 <_setlocale_r+0x40>
   4637c:	00800174 	movhi	r2,5
   46380:	1089da04 	addi	r2,r2,10088
   46384:	dfc00117 	ldw	ra,4(sp)
   46388:	dc000017 	ldw	r16,0(sp)
   4638c:	dec00204 	addi	sp,sp,8
   46390:	f800283a 	ret
   46394:	01400174 	movhi	r5,5
   46398:	2949da04 	addi	r5,r5,10088
   4639c:	8009883a 	mov	r4,r16
   463a0:	0048a0c0 	call	48a0c <strcmp>
   463a4:	103ff526 	beq	r2,zero,4637c <__alt_data_end+0xfffdf27c>
   463a8:	01400174 	movhi	r5,5
   463ac:	2949c504 	addi	r5,r5,10004
   463b0:	8009883a 	mov	r4,r16
   463b4:	0048a0c0 	call	48a0c <strcmp>
   463b8:	103ff026 	beq	r2,zero,4637c <__alt_data_end+0xfffdf27c>
   463bc:	0005883a 	mov	r2,zero
   463c0:	003ff006 	br	46384 <__alt_data_end+0xfffdf284>
   463c4:	00800174 	movhi	r2,5
   463c8:	1089da04 	addi	r2,r2,10088
   463cc:	f800283a 	ret

000463d0 <__locale_charset>:
   463d0:	00800174 	movhi	r2,5
   463d4:	108b5704 	addi	r2,r2,11612
   463d8:	f800283a 	ret

000463dc <__locale_mb_cur_max>:
   463dc:	00800174 	movhi	r2,5
   463e0:	10910104 	addi	r2,r2,17412
   463e4:	10800017 	ldw	r2,0(r2)
   463e8:	f800283a 	ret

000463ec <__locale_msgcharset>:
   463ec:	00800174 	movhi	r2,5
   463f0:	108b4f04 	addi	r2,r2,11580
   463f4:	f800283a 	ret

000463f8 <__locale_cjk_lang>:
   463f8:	0005883a 	mov	r2,zero
   463fc:	f800283a 	ret

00046400 <_localeconv_r>:
   46400:	00800174 	movhi	r2,5
   46404:	108b5f04 	addi	r2,r2,11644
   46408:	f800283a 	ret

0004640c <setlocale>:
   4640c:	00800174 	movhi	r2,5
   46410:	10910004 	addi	r2,r2,17408
   46414:	280d883a 	mov	r6,r5
   46418:	200b883a 	mov	r5,r4
   4641c:	11000017 	ldw	r4,0(r2)
   46420:	00463541 	jmpi	46354 <_setlocale_r>

00046424 <localeconv>:
   46424:	00800174 	movhi	r2,5
   46428:	108b5f04 	addi	r2,r2,11644
   4642c:	f800283a 	ret

00046430 <__smakebuf_r>:
   46430:	2880030b 	ldhu	r2,12(r5)
   46434:	10c0008c 	andi	r3,r2,2
   46438:	1800411e 	bne	r3,zero,46540 <__smakebuf_r+0x110>
   4643c:	deffec04 	addi	sp,sp,-80
   46440:	dc000f15 	stw	r16,60(sp)
   46444:	2821883a 	mov	r16,r5
   46448:	2940038f 	ldh	r5,14(r5)
   4644c:	dc401015 	stw	r17,64(sp)
   46450:	dfc01315 	stw	ra,76(sp)
   46454:	dcc01215 	stw	r19,72(sp)
   46458:	dc801115 	stw	r18,68(sp)
   4645c:	2023883a 	mov	r17,r4
   46460:	28001c16 	blt	r5,zero,464d4 <__smakebuf_r+0xa4>
   46464:	d80d883a 	mov	r6,sp
   46468:	004a5b40 	call	4a5b4 <_fstat_r>
   4646c:	10001816 	blt	r2,zero,464d0 <__smakebuf_r+0xa0>
   46470:	d8800117 	ldw	r2,4(sp)
   46474:	00e00014 	movui	r3,32768
   46478:	10bc000c 	andi	r2,r2,61440
   4647c:	14c80020 	cmpeqi	r19,r2,8192
   46480:	10c03726 	beq	r2,r3,46560 <__smakebuf_r+0x130>
   46484:	80c0030b 	ldhu	r3,12(r16)
   46488:	18c20014 	ori	r3,r3,2048
   4648c:	80c0030d 	sth	r3,12(r16)
   46490:	00c80004 	movi	r3,8192
   46494:	10c0521e 	bne	r2,r3,465e0 <__smakebuf_r+0x1b0>
   46498:	8140038f 	ldh	r5,14(r16)
   4649c:	8809883a 	mov	r4,r17
   464a0:	004a6100 	call	4a610 <_isatty_r>
   464a4:	10004c26 	beq	r2,zero,465d8 <__smakebuf_r+0x1a8>
   464a8:	8080030b 	ldhu	r2,12(r16)
   464ac:	80c010c4 	addi	r3,r16,67
   464b0:	80c00015 	stw	r3,0(r16)
   464b4:	10800054 	ori	r2,r2,1
   464b8:	8080030d 	sth	r2,12(r16)
   464bc:	00800044 	movi	r2,1
   464c0:	80c00415 	stw	r3,16(r16)
   464c4:	80800515 	stw	r2,20(r16)
   464c8:	04810004 	movi	r18,1024
   464cc:	00000706 	br	464ec <__smakebuf_r+0xbc>
   464d0:	8080030b 	ldhu	r2,12(r16)
   464d4:	10c0200c 	andi	r3,r2,128
   464d8:	18001f1e 	bne	r3,zero,46558 <__smakebuf_r+0x128>
   464dc:	04810004 	movi	r18,1024
   464e0:	10820014 	ori	r2,r2,2048
   464e4:	8080030d 	sth	r2,12(r16)
   464e8:	0027883a 	mov	r19,zero
   464ec:	900b883a 	mov	r5,r18
   464f0:	8809883a 	mov	r4,r17
   464f4:	00465ec0 	call	465ec <_malloc_r>
   464f8:	10002c26 	beq	r2,zero,465ac <__smakebuf_r+0x17c>
   464fc:	80c0030b 	ldhu	r3,12(r16)
   46500:	01000134 	movhi	r4,4
   46504:	21155104 	addi	r4,r4,21828
   46508:	89000f15 	stw	r4,60(r17)
   4650c:	18c02014 	ori	r3,r3,128
   46510:	80c0030d 	sth	r3,12(r16)
   46514:	80800015 	stw	r2,0(r16)
   46518:	80800415 	stw	r2,16(r16)
   4651c:	84800515 	stw	r18,20(r16)
   46520:	98001a1e 	bne	r19,zero,4658c <__smakebuf_r+0x15c>
   46524:	dfc01317 	ldw	ra,76(sp)
   46528:	dcc01217 	ldw	r19,72(sp)
   4652c:	dc801117 	ldw	r18,68(sp)
   46530:	dc401017 	ldw	r17,64(sp)
   46534:	dc000f17 	ldw	r16,60(sp)
   46538:	dec01404 	addi	sp,sp,80
   4653c:	f800283a 	ret
   46540:	288010c4 	addi	r2,r5,67
   46544:	28800015 	stw	r2,0(r5)
   46548:	28800415 	stw	r2,16(r5)
   4654c:	00800044 	movi	r2,1
   46550:	28800515 	stw	r2,20(r5)
   46554:	f800283a 	ret
   46558:	04801004 	movi	r18,64
   4655c:	003fe006 	br	464e0 <__alt_data_end+0xfffdf3e0>
   46560:	81000a17 	ldw	r4,40(r16)
   46564:	00c00174 	movhi	r3,5
   46568:	18e26a04 	addi	r3,r3,-30296
   4656c:	20ffc51e 	bne	r4,r3,46484 <__alt_data_end+0xfffdf384>
   46570:	8080030b 	ldhu	r2,12(r16)
   46574:	04810004 	movi	r18,1024
   46578:	84801315 	stw	r18,76(r16)
   4657c:	1484b03a 	or	r2,r2,r18
   46580:	8080030d 	sth	r2,12(r16)
   46584:	0027883a 	mov	r19,zero
   46588:	003fd806 	br	464ec <__alt_data_end+0xfffdf3ec>
   4658c:	8140038f 	ldh	r5,14(r16)
   46590:	8809883a 	mov	r4,r17
   46594:	004a6100 	call	4a610 <_isatty_r>
   46598:	103fe226 	beq	r2,zero,46524 <__alt_data_end+0xfffdf424>
   4659c:	8080030b 	ldhu	r2,12(r16)
   465a0:	10800054 	ori	r2,r2,1
   465a4:	8080030d 	sth	r2,12(r16)
   465a8:	003fde06 	br	46524 <__alt_data_end+0xfffdf424>
   465ac:	8080030b 	ldhu	r2,12(r16)
   465b0:	10c0800c 	andi	r3,r2,512
   465b4:	183fdb1e 	bne	r3,zero,46524 <__alt_data_end+0xfffdf424>
   465b8:	10800094 	ori	r2,r2,2
   465bc:	80c010c4 	addi	r3,r16,67
   465c0:	8080030d 	sth	r2,12(r16)
   465c4:	00800044 	movi	r2,1
   465c8:	80c00015 	stw	r3,0(r16)
   465cc:	80c00415 	stw	r3,16(r16)
   465d0:	80800515 	stw	r2,20(r16)
   465d4:	003fd306 	br	46524 <__alt_data_end+0xfffdf424>
   465d8:	04810004 	movi	r18,1024
   465dc:	003fc306 	br	464ec <__alt_data_end+0xfffdf3ec>
   465e0:	0027883a 	mov	r19,zero
   465e4:	04810004 	movi	r18,1024
   465e8:	003fc006 	br	464ec <__alt_data_end+0xfffdf3ec>

000465ec <_malloc_r>:
   465ec:	defff504 	addi	sp,sp,-44
   465f0:	dc800315 	stw	r18,12(sp)
   465f4:	dfc00a15 	stw	ra,40(sp)
   465f8:	df000915 	stw	fp,36(sp)
   465fc:	ddc00815 	stw	r23,32(sp)
   46600:	dd800715 	stw	r22,28(sp)
   46604:	dd400615 	stw	r21,24(sp)
   46608:	dd000515 	stw	r20,20(sp)
   4660c:	dcc00415 	stw	r19,16(sp)
   46610:	dc400215 	stw	r17,8(sp)
   46614:	dc000115 	stw	r16,4(sp)
   46618:	288002c4 	addi	r2,r5,11
   4661c:	00c00584 	movi	r3,22
   46620:	2025883a 	mov	r18,r4
   46624:	18807f2e 	bgeu	r3,r2,46824 <_malloc_r+0x238>
   46628:	047ffe04 	movi	r17,-8
   4662c:	1462703a 	and	r17,r2,r17
   46630:	8800a316 	blt	r17,zero,468c0 <_malloc_r+0x2d4>
   46634:	8940a236 	bltu	r17,r5,468c0 <_malloc_r+0x2d4>
   46638:	004e2980 	call	4e298 <__malloc_lock>
   4663c:	00807dc4 	movi	r2,503
   46640:	1441e92e 	bgeu	r2,r17,46de8 <_malloc_r+0x7fc>
   46644:	8804d27a 	srli	r2,r17,9
   46648:	1000a126 	beq	r2,zero,468d0 <_malloc_r+0x2e4>
   4664c:	00c00104 	movi	r3,4
   46650:	18811e36 	bltu	r3,r2,46acc <_malloc_r+0x4e0>
   46654:	8804d1ba 	srli	r2,r17,6
   46658:	12000e44 	addi	r8,r2,57
   4665c:	11c00e04 	addi	r7,r2,56
   46660:	4209883a 	add	r4,r8,r8
   46664:	04c00174 	movhi	r19,5
   46668:	2109883a 	add	r4,r4,r4
   4666c:	9ccb6d04 	addi	r19,r19,11700
   46670:	2109883a 	add	r4,r4,r4
   46674:	9909883a 	add	r4,r19,r4
   46678:	24000117 	ldw	r16,4(r4)
   4667c:	213ffe04 	addi	r4,r4,-8
   46680:	24009726 	beq	r4,r16,468e0 <_malloc_r+0x2f4>
   46684:	80800117 	ldw	r2,4(r16)
   46688:	01bfff04 	movi	r6,-4
   4668c:	014003c4 	movi	r5,15
   46690:	1184703a 	and	r2,r2,r6
   46694:	1447c83a 	sub	r3,r2,r17
   46698:	28c00716 	blt	r5,r3,466b8 <_malloc_r+0xcc>
   4669c:	1800920e 	bge	r3,zero,468e8 <_malloc_r+0x2fc>
   466a0:	84000317 	ldw	r16,12(r16)
   466a4:	24008e26 	beq	r4,r16,468e0 <_malloc_r+0x2f4>
   466a8:	80800117 	ldw	r2,4(r16)
   466ac:	1184703a 	and	r2,r2,r6
   466b0:	1447c83a 	sub	r3,r2,r17
   466b4:	28fff90e 	bge	r5,r3,4669c <__alt_data_end+0xfffdf59c>
   466b8:	3809883a 	mov	r4,r7
   466bc:	01800174 	movhi	r6,5
   466c0:	9c000417 	ldw	r16,16(r19)
   466c4:	318b6d04 	addi	r6,r6,11700
   466c8:	32000204 	addi	r8,r6,8
   466cc:	82013426 	beq	r16,r8,46ba0 <_malloc_r+0x5b4>
   466d0:	80c00117 	ldw	r3,4(r16)
   466d4:	00bfff04 	movi	r2,-4
   466d8:	188e703a 	and	r7,r3,r2
   466dc:	3c45c83a 	sub	r2,r7,r17
   466e0:	00c003c4 	movi	r3,15
   466e4:	18811f16 	blt	r3,r2,46b64 <_malloc_r+0x578>
   466e8:	32000515 	stw	r8,20(r6)
   466ec:	32000415 	stw	r8,16(r6)
   466f0:	10007f0e 	bge	r2,zero,468f0 <_malloc_r+0x304>
   466f4:	00807fc4 	movi	r2,511
   466f8:	11c0fd36 	bltu	r2,r7,46af0 <_malloc_r+0x504>
   466fc:	3806d0fa 	srli	r3,r7,3
   46700:	01c00044 	movi	r7,1
   46704:	30800117 	ldw	r2,4(r6)
   46708:	19400044 	addi	r5,r3,1
   4670c:	294b883a 	add	r5,r5,r5
   46710:	1807d0ba 	srai	r3,r3,2
   46714:	294b883a 	add	r5,r5,r5
   46718:	294b883a 	add	r5,r5,r5
   4671c:	298b883a 	add	r5,r5,r6
   46720:	38c6983a 	sll	r3,r7,r3
   46724:	29c00017 	ldw	r7,0(r5)
   46728:	2a7ffe04 	addi	r9,r5,-8
   4672c:	1886b03a 	or	r3,r3,r2
   46730:	82400315 	stw	r9,12(r16)
   46734:	81c00215 	stw	r7,8(r16)
   46738:	30c00115 	stw	r3,4(r6)
   4673c:	2c000015 	stw	r16,0(r5)
   46740:	3c000315 	stw	r16,12(r7)
   46744:	2005d0ba 	srai	r2,r4,2
   46748:	01400044 	movi	r5,1
   4674c:	288a983a 	sll	r5,r5,r2
   46750:	19406f36 	bltu	r3,r5,46910 <_malloc_r+0x324>
   46754:	28c4703a 	and	r2,r5,r3
   46758:	10000a1e 	bne	r2,zero,46784 <_malloc_r+0x198>
   4675c:	00bfff04 	movi	r2,-4
   46760:	294b883a 	add	r5,r5,r5
   46764:	2088703a 	and	r4,r4,r2
   46768:	28c4703a 	and	r2,r5,r3
   4676c:	21000104 	addi	r4,r4,4
   46770:	1000041e 	bne	r2,zero,46784 <_malloc_r+0x198>
   46774:	294b883a 	add	r5,r5,r5
   46778:	28c4703a 	and	r2,r5,r3
   4677c:	21000104 	addi	r4,r4,4
   46780:	103ffc26 	beq	r2,zero,46774 <__alt_data_end+0xfffdf674>
   46784:	02bfff04 	movi	r10,-4
   46788:	024003c4 	movi	r9,15
   4678c:	21800044 	addi	r6,r4,1
   46790:	318d883a 	add	r6,r6,r6
   46794:	318d883a 	add	r6,r6,r6
   46798:	318d883a 	add	r6,r6,r6
   4679c:	998d883a 	add	r6,r19,r6
   467a0:	333ffe04 	addi	r12,r6,-8
   467a4:	2017883a 	mov	r11,r4
   467a8:	31800104 	addi	r6,r6,4
   467ac:	34000017 	ldw	r16,0(r6)
   467b0:	31fffd04 	addi	r7,r6,-12
   467b4:	81c0041e 	bne	r16,r7,467c8 <_malloc_r+0x1dc>
   467b8:	0000fb06 	br	46ba8 <_malloc_r+0x5bc>
   467bc:	1801030e 	bge	r3,zero,46bcc <_malloc_r+0x5e0>
   467c0:	84000317 	ldw	r16,12(r16)
   467c4:	81c0f826 	beq	r16,r7,46ba8 <_malloc_r+0x5bc>
   467c8:	80800117 	ldw	r2,4(r16)
   467cc:	1284703a 	and	r2,r2,r10
   467d0:	1447c83a 	sub	r3,r2,r17
   467d4:	48fff90e 	bge	r9,r3,467bc <__alt_data_end+0xfffdf6bc>
   467d8:	80800317 	ldw	r2,12(r16)
   467dc:	81000217 	ldw	r4,8(r16)
   467e0:	89400054 	ori	r5,r17,1
   467e4:	81400115 	stw	r5,4(r16)
   467e8:	20800315 	stw	r2,12(r4)
   467ec:	11000215 	stw	r4,8(r2)
   467f0:	8463883a 	add	r17,r16,r17
   467f4:	9c400515 	stw	r17,20(r19)
   467f8:	9c400415 	stw	r17,16(r19)
   467fc:	18800054 	ori	r2,r3,1
   46800:	88800115 	stw	r2,4(r17)
   46804:	8a000315 	stw	r8,12(r17)
   46808:	8a000215 	stw	r8,8(r17)
   4680c:	88e3883a 	add	r17,r17,r3
   46810:	88c00015 	stw	r3,0(r17)
   46814:	9009883a 	mov	r4,r18
   46818:	004e2bc0 	call	4e2bc <__malloc_unlock>
   4681c:	80800204 	addi	r2,r16,8
   46820:	00001b06 	br	46890 <_malloc_r+0x2a4>
   46824:	04400404 	movi	r17,16
   46828:	89402536 	bltu	r17,r5,468c0 <_malloc_r+0x2d4>
   4682c:	004e2980 	call	4e298 <__malloc_lock>
   46830:	00800184 	movi	r2,6
   46834:	01000084 	movi	r4,2
   46838:	04c00174 	movhi	r19,5
   4683c:	1085883a 	add	r2,r2,r2
   46840:	9ccb6d04 	addi	r19,r19,11700
   46844:	1085883a 	add	r2,r2,r2
   46848:	9885883a 	add	r2,r19,r2
   4684c:	14000117 	ldw	r16,4(r2)
   46850:	10fffe04 	addi	r3,r2,-8
   46854:	80c0d926 	beq	r16,r3,46bbc <_malloc_r+0x5d0>
   46858:	80c00117 	ldw	r3,4(r16)
   4685c:	81000317 	ldw	r4,12(r16)
   46860:	00bfff04 	movi	r2,-4
   46864:	1884703a 	and	r2,r3,r2
   46868:	81400217 	ldw	r5,8(r16)
   4686c:	8085883a 	add	r2,r16,r2
   46870:	10c00117 	ldw	r3,4(r2)
   46874:	29000315 	stw	r4,12(r5)
   46878:	21400215 	stw	r5,8(r4)
   4687c:	18c00054 	ori	r3,r3,1
   46880:	10c00115 	stw	r3,4(r2)
   46884:	9009883a 	mov	r4,r18
   46888:	004e2bc0 	call	4e2bc <__malloc_unlock>
   4688c:	80800204 	addi	r2,r16,8
   46890:	dfc00a17 	ldw	ra,40(sp)
   46894:	df000917 	ldw	fp,36(sp)
   46898:	ddc00817 	ldw	r23,32(sp)
   4689c:	dd800717 	ldw	r22,28(sp)
   468a0:	dd400617 	ldw	r21,24(sp)
   468a4:	dd000517 	ldw	r20,20(sp)
   468a8:	dcc00417 	ldw	r19,16(sp)
   468ac:	dc800317 	ldw	r18,12(sp)
   468b0:	dc400217 	ldw	r17,8(sp)
   468b4:	dc000117 	ldw	r16,4(sp)
   468b8:	dec00b04 	addi	sp,sp,44
   468bc:	f800283a 	ret
   468c0:	00800304 	movi	r2,12
   468c4:	90800015 	stw	r2,0(r18)
   468c8:	0005883a 	mov	r2,zero
   468cc:	003ff006 	br	46890 <__alt_data_end+0xfffdf790>
   468d0:	01002004 	movi	r4,128
   468d4:	02001004 	movi	r8,64
   468d8:	01c00fc4 	movi	r7,63
   468dc:	003f6106 	br	46664 <__alt_data_end+0xfffdf564>
   468e0:	4009883a 	mov	r4,r8
   468e4:	003f7506 	br	466bc <__alt_data_end+0xfffdf5bc>
   468e8:	81000317 	ldw	r4,12(r16)
   468ec:	003fde06 	br	46868 <__alt_data_end+0xfffdf768>
   468f0:	81c5883a 	add	r2,r16,r7
   468f4:	11400117 	ldw	r5,4(r2)
   468f8:	9009883a 	mov	r4,r18
   468fc:	29400054 	ori	r5,r5,1
   46900:	11400115 	stw	r5,4(r2)
   46904:	004e2bc0 	call	4e2bc <__malloc_unlock>
   46908:	80800204 	addi	r2,r16,8
   4690c:	003fe006 	br	46890 <__alt_data_end+0xfffdf790>
   46910:	9c000217 	ldw	r16,8(r19)
   46914:	00bfff04 	movi	r2,-4
   46918:	85800117 	ldw	r22,4(r16)
   4691c:	b0ac703a 	and	r22,r22,r2
   46920:	b4400336 	bltu	r22,r17,46930 <_malloc_r+0x344>
   46924:	b445c83a 	sub	r2,r22,r17
   46928:	00c003c4 	movi	r3,15
   4692c:	18805d16 	blt	r3,r2,46aa4 <_malloc_r+0x4b8>
   46930:	05c00174 	movhi	r23,5
   46934:	00800174 	movhi	r2,5
   46938:	1097e104 	addi	r2,r2,24452
   4693c:	bdd10204 	addi	r23,r23,17416
   46940:	15400017 	ldw	r21,0(r2)
   46944:	b8c00017 	ldw	r3,0(r23)
   46948:	00bfffc4 	movi	r2,-1
   4694c:	858d883a 	add	r6,r16,r22
   46950:	8d6b883a 	add	r21,r17,r21
   46954:	1880ea26 	beq	r3,r2,46d00 <_malloc_r+0x714>
   46958:	ad4403c4 	addi	r21,r21,4111
   4695c:	00bc0004 	movi	r2,-4096
   46960:	a8aa703a 	and	r21,r21,r2
   46964:	a80b883a 	mov	r5,r21
   46968:	9009883a 	mov	r4,r18
   4696c:	d9800015 	stw	r6,0(sp)
   46970:	004887c0 	call	4887c <_sbrk_r>
   46974:	1029883a 	mov	r20,r2
   46978:	00bfffc4 	movi	r2,-1
   4697c:	d9800017 	ldw	r6,0(sp)
   46980:	a080e826 	beq	r20,r2,46d24 <_malloc_r+0x738>
   46984:	a180a636 	bltu	r20,r6,46c20 <_malloc_r+0x634>
   46988:	07000174 	movhi	fp,5
   4698c:	e717e904 	addi	fp,fp,24484
   46990:	e0800017 	ldw	r2,0(fp)
   46994:	a887883a 	add	r3,r21,r2
   46998:	e0c00015 	stw	r3,0(fp)
   4699c:	3500e626 	beq	r6,r20,46d38 <_malloc_r+0x74c>
   469a0:	b9000017 	ldw	r4,0(r23)
   469a4:	00bfffc4 	movi	r2,-1
   469a8:	2080ee26 	beq	r4,r2,46d64 <_malloc_r+0x778>
   469ac:	a185c83a 	sub	r2,r20,r6
   469b0:	10c5883a 	add	r2,r2,r3
   469b4:	e0800015 	stw	r2,0(fp)
   469b8:	a0c001cc 	andi	r3,r20,7
   469bc:	1800bc26 	beq	r3,zero,46cb0 <_malloc_r+0x6c4>
   469c0:	a0e9c83a 	sub	r20,r20,r3
   469c4:	00840204 	movi	r2,4104
   469c8:	a5000204 	addi	r20,r20,8
   469cc:	10c7c83a 	sub	r3,r2,r3
   469d0:	a545883a 	add	r2,r20,r21
   469d4:	1083ffcc 	andi	r2,r2,4095
   469d8:	18abc83a 	sub	r21,r3,r2
   469dc:	a80b883a 	mov	r5,r21
   469e0:	9009883a 	mov	r4,r18
   469e4:	004887c0 	call	4887c <_sbrk_r>
   469e8:	00ffffc4 	movi	r3,-1
   469ec:	10c0e126 	beq	r2,r3,46d74 <_malloc_r+0x788>
   469f0:	1505c83a 	sub	r2,r2,r20
   469f4:	1545883a 	add	r2,r2,r21
   469f8:	10800054 	ori	r2,r2,1
   469fc:	e0c00017 	ldw	r3,0(fp)
   46a00:	9d000215 	stw	r20,8(r19)
   46a04:	a0800115 	stw	r2,4(r20)
   46a08:	a8c7883a 	add	r3,r21,r3
   46a0c:	e0c00015 	stw	r3,0(fp)
   46a10:	84c00e26 	beq	r16,r19,46a4c <_malloc_r+0x460>
   46a14:	018003c4 	movi	r6,15
   46a18:	3580a72e 	bgeu	r6,r22,46cb8 <_malloc_r+0x6cc>
   46a1c:	81400117 	ldw	r5,4(r16)
   46a20:	013ffe04 	movi	r4,-8
   46a24:	b0bffd04 	addi	r2,r22,-12
   46a28:	1104703a 	and	r2,r2,r4
   46a2c:	2900004c 	andi	r4,r5,1
   46a30:	2088b03a 	or	r4,r4,r2
   46a34:	81000115 	stw	r4,4(r16)
   46a38:	01400144 	movi	r5,5
   46a3c:	8089883a 	add	r4,r16,r2
   46a40:	21400115 	stw	r5,4(r4)
   46a44:	21400215 	stw	r5,8(r4)
   46a48:	3080cd36 	bltu	r6,r2,46d80 <_malloc_r+0x794>
   46a4c:	00800174 	movhi	r2,5
   46a50:	1097e004 	addi	r2,r2,24448
   46a54:	11000017 	ldw	r4,0(r2)
   46a58:	20c0012e 	bgeu	r4,r3,46a60 <_malloc_r+0x474>
   46a5c:	10c00015 	stw	r3,0(r2)
   46a60:	00800174 	movhi	r2,5
   46a64:	1097df04 	addi	r2,r2,24444
   46a68:	11000017 	ldw	r4,0(r2)
   46a6c:	9c000217 	ldw	r16,8(r19)
   46a70:	20c0012e 	bgeu	r4,r3,46a78 <_malloc_r+0x48c>
   46a74:	10c00015 	stw	r3,0(r2)
   46a78:	80c00117 	ldw	r3,4(r16)
   46a7c:	00bfff04 	movi	r2,-4
   46a80:	1886703a 	and	r3,r3,r2
   46a84:	1c45c83a 	sub	r2,r3,r17
   46a88:	1c400236 	bltu	r3,r17,46a94 <_malloc_r+0x4a8>
   46a8c:	00c003c4 	movi	r3,15
   46a90:	18800416 	blt	r3,r2,46aa4 <_malloc_r+0x4b8>
   46a94:	9009883a 	mov	r4,r18
   46a98:	004e2bc0 	call	4e2bc <__malloc_unlock>
   46a9c:	0005883a 	mov	r2,zero
   46aa0:	003f7b06 	br	46890 <__alt_data_end+0xfffdf790>
   46aa4:	88c00054 	ori	r3,r17,1
   46aa8:	80c00115 	stw	r3,4(r16)
   46aac:	8463883a 	add	r17,r16,r17
   46ab0:	10800054 	ori	r2,r2,1
   46ab4:	9c400215 	stw	r17,8(r19)
   46ab8:	88800115 	stw	r2,4(r17)
   46abc:	9009883a 	mov	r4,r18
   46ac0:	004e2bc0 	call	4e2bc <__malloc_unlock>
   46ac4:	80800204 	addi	r2,r16,8
   46ac8:	003f7106 	br	46890 <__alt_data_end+0xfffdf790>
   46acc:	00c00504 	movi	r3,20
   46ad0:	18804a2e 	bgeu	r3,r2,46bfc <_malloc_r+0x610>
   46ad4:	00c01504 	movi	r3,84
   46ad8:	18806e36 	bltu	r3,r2,46c94 <_malloc_r+0x6a8>
   46adc:	8804d33a 	srli	r2,r17,12
   46ae0:	12001bc4 	addi	r8,r2,111
   46ae4:	11c01b84 	addi	r7,r2,110
   46ae8:	4209883a 	add	r4,r8,r8
   46aec:	003edd06 	br	46664 <__alt_data_end+0xfffdf564>
   46af0:	3804d27a 	srli	r2,r7,9
   46af4:	00c00104 	movi	r3,4
   46af8:	1880442e 	bgeu	r3,r2,46c0c <_malloc_r+0x620>
   46afc:	00c00504 	movi	r3,20
   46b00:	18808136 	bltu	r3,r2,46d08 <_malloc_r+0x71c>
   46b04:	11401704 	addi	r5,r2,92
   46b08:	10c016c4 	addi	r3,r2,91
   46b0c:	294b883a 	add	r5,r5,r5
   46b10:	294b883a 	add	r5,r5,r5
   46b14:	294b883a 	add	r5,r5,r5
   46b18:	994b883a 	add	r5,r19,r5
   46b1c:	28800017 	ldw	r2,0(r5)
   46b20:	01800174 	movhi	r6,5
   46b24:	297ffe04 	addi	r5,r5,-8
   46b28:	318b6d04 	addi	r6,r6,11700
   46b2c:	28806526 	beq	r5,r2,46cc4 <_malloc_r+0x6d8>
   46b30:	01bfff04 	movi	r6,-4
   46b34:	10c00117 	ldw	r3,4(r2)
   46b38:	1986703a 	and	r3,r3,r6
   46b3c:	38c0022e 	bgeu	r7,r3,46b48 <_malloc_r+0x55c>
   46b40:	10800217 	ldw	r2,8(r2)
   46b44:	28bffb1e 	bne	r5,r2,46b34 <__alt_data_end+0xfffdfa34>
   46b48:	11400317 	ldw	r5,12(r2)
   46b4c:	98c00117 	ldw	r3,4(r19)
   46b50:	81400315 	stw	r5,12(r16)
   46b54:	80800215 	stw	r2,8(r16)
   46b58:	2c000215 	stw	r16,8(r5)
   46b5c:	14000315 	stw	r16,12(r2)
   46b60:	003ef806 	br	46744 <__alt_data_end+0xfffdf644>
   46b64:	88c00054 	ori	r3,r17,1
   46b68:	80c00115 	stw	r3,4(r16)
   46b6c:	8463883a 	add	r17,r16,r17
   46b70:	34400515 	stw	r17,20(r6)
   46b74:	34400415 	stw	r17,16(r6)
   46b78:	10c00054 	ori	r3,r2,1
   46b7c:	8a000315 	stw	r8,12(r17)
   46b80:	8a000215 	stw	r8,8(r17)
   46b84:	88c00115 	stw	r3,4(r17)
   46b88:	88a3883a 	add	r17,r17,r2
   46b8c:	88800015 	stw	r2,0(r17)
   46b90:	9009883a 	mov	r4,r18
   46b94:	004e2bc0 	call	4e2bc <__malloc_unlock>
   46b98:	80800204 	addi	r2,r16,8
   46b9c:	003f3c06 	br	46890 <__alt_data_end+0xfffdf790>
   46ba0:	30c00117 	ldw	r3,4(r6)
   46ba4:	003ee706 	br	46744 <__alt_data_end+0xfffdf644>
   46ba8:	5ac00044 	addi	r11,r11,1
   46bac:	588000cc 	andi	r2,r11,3
   46bb0:	31800204 	addi	r6,r6,8
   46bb4:	103efd1e 	bne	r2,zero,467ac <__alt_data_end+0xfffdf6ac>
   46bb8:	00002406 	br	46c4c <_malloc_r+0x660>
   46bbc:	14000317 	ldw	r16,12(r2)
   46bc0:	143f251e 	bne	r2,r16,46858 <__alt_data_end+0xfffdf758>
   46bc4:	21000084 	addi	r4,r4,2
   46bc8:	003ebc06 	br	466bc <__alt_data_end+0xfffdf5bc>
   46bcc:	8085883a 	add	r2,r16,r2
   46bd0:	10c00117 	ldw	r3,4(r2)
   46bd4:	81000317 	ldw	r4,12(r16)
   46bd8:	81400217 	ldw	r5,8(r16)
   46bdc:	18c00054 	ori	r3,r3,1
   46be0:	10c00115 	stw	r3,4(r2)
   46be4:	29000315 	stw	r4,12(r5)
   46be8:	21400215 	stw	r5,8(r4)
   46bec:	9009883a 	mov	r4,r18
   46bf0:	004e2bc0 	call	4e2bc <__malloc_unlock>
   46bf4:	80800204 	addi	r2,r16,8
   46bf8:	003f2506 	br	46890 <__alt_data_end+0xfffdf790>
   46bfc:	12001704 	addi	r8,r2,92
   46c00:	11c016c4 	addi	r7,r2,91
   46c04:	4209883a 	add	r4,r8,r8
   46c08:	003e9606 	br	46664 <__alt_data_end+0xfffdf564>
   46c0c:	3804d1ba 	srli	r2,r7,6
   46c10:	11400e44 	addi	r5,r2,57
   46c14:	10c00e04 	addi	r3,r2,56
   46c18:	294b883a 	add	r5,r5,r5
   46c1c:	003fbc06 	br	46b10 <__alt_data_end+0xfffdfa10>
   46c20:	84ff5926 	beq	r16,r19,46988 <__alt_data_end+0xfffdf888>
   46c24:	00800174 	movhi	r2,5
   46c28:	108b6d04 	addi	r2,r2,11700
   46c2c:	14000217 	ldw	r16,8(r2)
   46c30:	00bfff04 	movi	r2,-4
   46c34:	80c00117 	ldw	r3,4(r16)
   46c38:	1886703a 	and	r3,r3,r2
   46c3c:	003f9106 	br	46a84 <__alt_data_end+0xfffdf984>
   46c40:	60800217 	ldw	r2,8(r12)
   46c44:	213fffc4 	addi	r4,r4,-1
   46c48:	1300651e 	bne	r2,r12,46de0 <_malloc_r+0x7f4>
   46c4c:	208000cc 	andi	r2,r4,3
   46c50:	633ffe04 	addi	r12,r12,-8
   46c54:	103ffa1e 	bne	r2,zero,46c40 <__alt_data_end+0xfffdfb40>
   46c58:	98800117 	ldw	r2,4(r19)
   46c5c:	0146303a 	nor	r3,zero,r5
   46c60:	1884703a 	and	r2,r3,r2
   46c64:	98800115 	stw	r2,4(r19)
   46c68:	294b883a 	add	r5,r5,r5
   46c6c:	117f2836 	bltu	r2,r5,46910 <__alt_data_end+0xfffdf810>
   46c70:	283f2726 	beq	r5,zero,46910 <__alt_data_end+0xfffdf810>
   46c74:	2886703a 	and	r3,r5,r2
   46c78:	5809883a 	mov	r4,r11
   46c7c:	183ec31e 	bne	r3,zero,4678c <__alt_data_end+0xfffdf68c>
   46c80:	294b883a 	add	r5,r5,r5
   46c84:	2886703a 	and	r3,r5,r2
   46c88:	21000104 	addi	r4,r4,4
   46c8c:	183ffc26 	beq	r3,zero,46c80 <__alt_data_end+0xfffdfb80>
   46c90:	003ebe06 	br	4678c <__alt_data_end+0xfffdf68c>
   46c94:	00c05504 	movi	r3,340
   46c98:	18801236 	bltu	r3,r2,46ce4 <_malloc_r+0x6f8>
   46c9c:	8804d3fa 	srli	r2,r17,15
   46ca0:	12001e04 	addi	r8,r2,120
   46ca4:	11c01dc4 	addi	r7,r2,119
   46ca8:	4209883a 	add	r4,r8,r8
   46cac:	003e6d06 	br	46664 <__alt_data_end+0xfffdf564>
   46cb0:	00c40004 	movi	r3,4096
   46cb4:	003f4606 	br	469d0 <__alt_data_end+0xfffdf8d0>
   46cb8:	00800044 	movi	r2,1
   46cbc:	a0800115 	stw	r2,4(r20)
   46cc0:	003f7406 	br	46a94 <__alt_data_end+0xfffdf994>
   46cc4:	1805d0ba 	srai	r2,r3,2
   46cc8:	01c00044 	movi	r7,1
   46ccc:	30c00117 	ldw	r3,4(r6)
   46cd0:	388e983a 	sll	r7,r7,r2
   46cd4:	2805883a 	mov	r2,r5
   46cd8:	38c6b03a 	or	r3,r7,r3
   46cdc:	30c00115 	stw	r3,4(r6)
   46ce0:	003f9b06 	br	46b50 <__alt_data_end+0xfffdfa50>
   46ce4:	00c15504 	movi	r3,1364
   46ce8:	18801a36 	bltu	r3,r2,46d54 <_malloc_r+0x768>
   46cec:	8804d4ba 	srli	r2,r17,18
   46cf0:	12001f44 	addi	r8,r2,125
   46cf4:	11c01f04 	addi	r7,r2,124
   46cf8:	4209883a 	add	r4,r8,r8
   46cfc:	003e5906 	br	46664 <__alt_data_end+0xfffdf564>
   46d00:	ad400404 	addi	r21,r21,16
   46d04:	003f1706 	br	46964 <__alt_data_end+0xfffdf864>
   46d08:	00c01504 	movi	r3,84
   46d0c:	18802336 	bltu	r3,r2,46d9c <_malloc_r+0x7b0>
   46d10:	3804d33a 	srli	r2,r7,12
   46d14:	11401bc4 	addi	r5,r2,111
   46d18:	10c01b84 	addi	r3,r2,110
   46d1c:	294b883a 	add	r5,r5,r5
   46d20:	003f7b06 	br	46b10 <__alt_data_end+0xfffdfa10>
   46d24:	9c000217 	ldw	r16,8(r19)
   46d28:	00bfff04 	movi	r2,-4
   46d2c:	80c00117 	ldw	r3,4(r16)
   46d30:	1886703a 	and	r3,r3,r2
   46d34:	003f5306 	br	46a84 <__alt_data_end+0xfffdf984>
   46d38:	3083ffcc 	andi	r2,r6,4095
   46d3c:	103f181e 	bne	r2,zero,469a0 <__alt_data_end+0xfffdf8a0>
   46d40:	99000217 	ldw	r4,8(r19)
   46d44:	b545883a 	add	r2,r22,r21
   46d48:	10800054 	ori	r2,r2,1
   46d4c:	20800115 	stw	r2,4(r4)
   46d50:	003f3e06 	br	46a4c <__alt_data_end+0xfffdf94c>
   46d54:	01003f84 	movi	r4,254
   46d58:	02001fc4 	movi	r8,127
   46d5c:	01c01f84 	movi	r7,126
   46d60:	003e4006 	br	46664 <__alt_data_end+0xfffdf564>
   46d64:	00800174 	movhi	r2,5
   46d68:	10910204 	addi	r2,r2,17416
   46d6c:	15000015 	stw	r20,0(r2)
   46d70:	003f1106 	br	469b8 <__alt_data_end+0xfffdf8b8>
   46d74:	00800044 	movi	r2,1
   46d78:	002b883a 	mov	r21,zero
   46d7c:	003f1f06 	br	469fc <__alt_data_end+0xfffdf8fc>
   46d80:	81400204 	addi	r5,r16,8
   46d84:	9009883a 	mov	r4,r18
   46d88:	0045a000 	call	45a00 <_free_r>
   46d8c:	00800174 	movhi	r2,5
   46d90:	1097e904 	addi	r2,r2,24484
   46d94:	10c00017 	ldw	r3,0(r2)
   46d98:	003f2c06 	br	46a4c <__alt_data_end+0xfffdf94c>
   46d9c:	00c05504 	movi	r3,340
   46da0:	18800536 	bltu	r3,r2,46db8 <_malloc_r+0x7cc>
   46da4:	3804d3fa 	srli	r2,r7,15
   46da8:	11401e04 	addi	r5,r2,120
   46dac:	10c01dc4 	addi	r3,r2,119
   46db0:	294b883a 	add	r5,r5,r5
   46db4:	003f5606 	br	46b10 <__alt_data_end+0xfffdfa10>
   46db8:	00c15504 	movi	r3,1364
   46dbc:	18800536 	bltu	r3,r2,46dd4 <_malloc_r+0x7e8>
   46dc0:	3804d4ba 	srli	r2,r7,18
   46dc4:	11401f44 	addi	r5,r2,125
   46dc8:	10c01f04 	addi	r3,r2,124
   46dcc:	294b883a 	add	r5,r5,r5
   46dd0:	003f4f06 	br	46b10 <__alt_data_end+0xfffdfa10>
   46dd4:	01403f84 	movi	r5,254
   46dd8:	00c01f84 	movi	r3,126
   46ddc:	003f4c06 	br	46b10 <__alt_data_end+0xfffdfa10>
   46de0:	98800117 	ldw	r2,4(r19)
   46de4:	003fa006 	br	46c68 <__alt_data_end+0xfffdfb68>
   46de8:	8808d0fa 	srli	r4,r17,3
   46dec:	20800044 	addi	r2,r4,1
   46df0:	1085883a 	add	r2,r2,r2
   46df4:	003e9006 	br	46838 <__alt_data_end+0xfffdf738>

00046df8 <memchr>:
   46df8:	208000cc 	andi	r2,r4,3
   46dfc:	280f883a 	mov	r7,r5
   46e00:	10003426 	beq	r2,zero,46ed4 <memchr+0xdc>
   46e04:	30bfffc4 	addi	r2,r6,-1
   46e08:	30001a26 	beq	r6,zero,46e74 <memchr+0x7c>
   46e0c:	20c00003 	ldbu	r3,0(r4)
   46e10:	29803fcc 	andi	r6,r5,255
   46e14:	30c0051e 	bne	r6,r3,46e2c <memchr+0x34>
   46e18:	00001806 	br	46e7c <memchr+0x84>
   46e1c:	10001526 	beq	r2,zero,46e74 <memchr+0x7c>
   46e20:	20c00003 	ldbu	r3,0(r4)
   46e24:	10bfffc4 	addi	r2,r2,-1
   46e28:	30c01426 	beq	r6,r3,46e7c <memchr+0x84>
   46e2c:	21000044 	addi	r4,r4,1
   46e30:	20c000cc 	andi	r3,r4,3
   46e34:	183ff91e 	bne	r3,zero,46e1c <__alt_data_end+0xfffdfd1c>
   46e38:	020000c4 	movi	r8,3
   46e3c:	40801136 	bltu	r8,r2,46e84 <memchr+0x8c>
   46e40:	10000c26 	beq	r2,zero,46e74 <memchr+0x7c>
   46e44:	20c00003 	ldbu	r3,0(r4)
   46e48:	29403fcc 	andi	r5,r5,255
   46e4c:	28c00b26 	beq	r5,r3,46e7c <memchr+0x84>
   46e50:	20c00044 	addi	r3,r4,1
   46e54:	39803fcc 	andi	r6,r7,255
   46e58:	2089883a 	add	r4,r4,r2
   46e5c:	00000306 	br	46e6c <memchr+0x74>
   46e60:	18c00044 	addi	r3,r3,1
   46e64:	197fffc3 	ldbu	r5,-1(r3)
   46e68:	31400526 	beq	r6,r5,46e80 <memchr+0x88>
   46e6c:	1805883a 	mov	r2,r3
   46e70:	20fffb1e 	bne	r4,r3,46e60 <__alt_data_end+0xfffdfd60>
   46e74:	0005883a 	mov	r2,zero
   46e78:	f800283a 	ret
   46e7c:	2005883a 	mov	r2,r4
   46e80:	f800283a 	ret
   46e84:	28c03fcc 	andi	r3,r5,255
   46e88:	1812923a 	slli	r9,r3,8
   46e8c:	02ffbff4 	movhi	r11,65279
   46e90:	02a02074 	movhi	r10,32897
   46e94:	48d2b03a 	or	r9,r9,r3
   46e98:	4806943a 	slli	r3,r9,16
   46e9c:	5affbfc4 	addi	r11,r11,-257
   46ea0:	52a02004 	addi	r10,r10,-32640
   46ea4:	48d2b03a 	or	r9,r9,r3
   46ea8:	20c00017 	ldw	r3,0(r4)
   46eac:	48c6f03a 	xor	r3,r9,r3
   46eb0:	1acd883a 	add	r6,r3,r11
   46eb4:	00c6303a 	nor	r3,zero,r3
   46eb8:	30c6703a 	and	r3,r6,r3
   46ebc:	1a86703a 	and	r3,r3,r10
   46ec0:	183fe01e 	bne	r3,zero,46e44 <__alt_data_end+0xfffdfd44>
   46ec4:	10bfff04 	addi	r2,r2,-4
   46ec8:	21000104 	addi	r4,r4,4
   46ecc:	40bff636 	bltu	r8,r2,46ea8 <__alt_data_end+0xfffdfda8>
   46ed0:	003fdb06 	br	46e40 <__alt_data_end+0xfffdfd40>
   46ed4:	3005883a 	mov	r2,r6
   46ed8:	003fd706 	br	46e38 <__alt_data_end+0xfffdfd38>

00046edc <memcpy>:
   46edc:	defffd04 	addi	sp,sp,-12
   46ee0:	dfc00215 	stw	ra,8(sp)
   46ee4:	dc400115 	stw	r17,4(sp)
   46ee8:	dc000015 	stw	r16,0(sp)
   46eec:	00c003c4 	movi	r3,15
   46ef0:	2005883a 	mov	r2,r4
   46ef4:	1980452e 	bgeu	r3,r6,4700c <memcpy+0x130>
   46ef8:	2906b03a 	or	r3,r5,r4
   46efc:	18c000cc 	andi	r3,r3,3
   46f00:	1800441e 	bne	r3,zero,47014 <memcpy+0x138>
   46f04:	347ffc04 	addi	r17,r6,-16
   46f08:	8822d13a 	srli	r17,r17,4
   46f0c:	28c00104 	addi	r3,r5,4
   46f10:	23400104 	addi	r13,r4,4
   46f14:	8820913a 	slli	r16,r17,4
   46f18:	2b000204 	addi	r12,r5,8
   46f1c:	22c00204 	addi	r11,r4,8
   46f20:	84000504 	addi	r16,r16,20
   46f24:	2a800304 	addi	r10,r5,12
   46f28:	22400304 	addi	r9,r4,12
   46f2c:	2c21883a 	add	r16,r5,r16
   46f30:	2811883a 	mov	r8,r5
   46f34:	200f883a 	mov	r7,r4
   46f38:	41000017 	ldw	r4,0(r8)
   46f3c:	1fc00017 	ldw	ra,0(r3)
   46f40:	63c00017 	ldw	r15,0(r12)
   46f44:	39000015 	stw	r4,0(r7)
   46f48:	53800017 	ldw	r14,0(r10)
   46f4c:	6fc00015 	stw	ra,0(r13)
   46f50:	5bc00015 	stw	r15,0(r11)
   46f54:	4b800015 	stw	r14,0(r9)
   46f58:	18c00404 	addi	r3,r3,16
   46f5c:	39c00404 	addi	r7,r7,16
   46f60:	42000404 	addi	r8,r8,16
   46f64:	6b400404 	addi	r13,r13,16
   46f68:	63000404 	addi	r12,r12,16
   46f6c:	5ac00404 	addi	r11,r11,16
   46f70:	52800404 	addi	r10,r10,16
   46f74:	4a400404 	addi	r9,r9,16
   46f78:	1c3fef1e 	bne	r3,r16,46f38 <__alt_data_end+0xfffdfe38>
   46f7c:	89c00044 	addi	r7,r17,1
   46f80:	380e913a 	slli	r7,r7,4
   46f84:	310003cc 	andi	r4,r6,15
   46f88:	02c000c4 	movi	r11,3
   46f8c:	11c7883a 	add	r3,r2,r7
   46f90:	29cb883a 	add	r5,r5,r7
   46f94:	5900212e 	bgeu	r11,r4,4701c <memcpy+0x140>
   46f98:	1813883a 	mov	r9,r3
   46f9c:	2811883a 	mov	r8,r5
   46fa0:	200f883a 	mov	r7,r4
   46fa4:	42800017 	ldw	r10,0(r8)
   46fa8:	4a400104 	addi	r9,r9,4
   46fac:	39ffff04 	addi	r7,r7,-4
   46fb0:	4abfff15 	stw	r10,-4(r9)
   46fb4:	42000104 	addi	r8,r8,4
   46fb8:	59fffa36 	bltu	r11,r7,46fa4 <__alt_data_end+0xfffdfea4>
   46fbc:	213fff04 	addi	r4,r4,-4
   46fc0:	2008d0ba 	srli	r4,r4,2
   46fc4:	318000cc 	andi	r6,r6,3
   46fc8:	21000044 	addi	r4,r4,1
   46fcc:	2109883a 	add	r4,r4,r4
   46fd0:	2109883a 	add	r4,r4,r4
   46fd4:	1907883a 	add	r3,r3,r4
   46fd8:	290b883a 	add	r5,r5,r4
   46fdc:	30000626 	beq	r6,zero,46ff8 <memcpy+0x11c>
   46fe0:	198d883a 	add	r6,r3,r6
   46fe4:	29c00003 	ldbu	r7,0(r5)
   46fe8:	18c00044 	addi	r3,r3,1
   46fec:	29400044 	addi	r5,r5,1
   46ff0:	19ffffc5 	stb	r7,-1(r3)
   46ff4:	19bffb1e 	bne	r3,r6,46fe4 <__alt_data_end+0xfffdfee4>
   46ff8:	dfc00217 	ldw	ra,8(sp)
   46ffc:	dc400117 	ldw	r17,4(sp)
   47000:	dc000017 	ldw	r16,0(sp)
   47004:	dec00304 	addi	sp,sp,12
   47008:	f800283a 	ret
   4700c:	2007883a 	mov	r3,r4
   47010:	003ff206 	br	46fdc <__alt_data_end+0xfffdfedc>
   47014:	2007883a 	mov	r3,r4
   47018:	003ff106 	br	46fe0 <__alt_data_end+0xfffdfee0>
   4701c:	200d883a 	mov	r6,r4
   47020:	003fee06 	br	46fdc <__alt_data_end+0xfffdfedc>

00047024 <memmove>:
   47024:	2005883a 	mov	r2,r4
   47028:	29000b2e 	bgeu	r5,r4,47058 <memmove+0x34>
   4702c:	298f883a 	add	r7,r5,r6
   47030:	21c0092e 	bgeu	r4,r7,47058 <memmove+0x34>
   47034:	2187883a 	add	r3,r4,r6
   47038:	198bc83a 	sub	r5,r3,r6
   4703c:	30004826 	beq	r6,zero,47160 <memmove+0x13c>
   47040:	39ffffc4 	addi	r7,r7,-1
   47044:	39000003 	ldbu	r4,0(r7)
   47048:	18ffffc4 	addi	r3,r3,-1
   4704c:	19000005 	stb	r4,0(r3)
   47050:	28fffb1e 	bne	r5,r3,47040 <__alt_data_end+0xfffdff40>
   47054:	f800283a 	ret
   47058:	00c003c4 	movi	r3,15
   4705c:	1980412e 	bgeu	r3,r6,47164 <memmove+0x140>
   47060:	2886b03a 	or	r3,r5,r2
   47064:	18c000cc 	andi	r3,r3,3
   47068:	1800401e 	bne	r3,zero,4716c <memmove+0x148>
   4706c:	33fffc04 	addi	r15,r6,-16
   47070:	781ed13a 	srli	r15,r15,4
   47074:	28c00104 	addi	r3,r5,4
   47078:	13400104 	addi	r13,r2,4
   4707c:	781c913a 	slli	r14,r15,4
   47080:	2b000204 	addi	r12,r5,8
   47084:	12c00204 	addi	r11,r2,8
   47088:	73800504 	addi	r14,r14,20
   4708c:	2a800304 	addi	r10,r5,12
   47090:	12400304 	addi	r9,r2,12
   47094:	2b9d883a 	add	r14,r5,r14
   47098:	2811883a 	mov	r8,r5
   4709c:	100f883a 	mov	r7,r2
   470a0:	41000017 	ldw	r4,0(r8)
   470a4:	39c00404 	addi	r7,r7,16
   470a8:	18c00404 	addi	r3,r3,16
   470ac:	393ffc15 	stw	r4,-16(r7)
   470b0:	193ffc17 	ldw	r4,-16(r3)
   470b4:	6b400404 	addi	r13,r13,16
   470b8:	5ac00404 	addi	r11,r11,16
   470bc:	693ffc15 	stw	r4,-16(r13)
   470c0:	61000017 	ldw	r4,0(r12)
   470c4:	4a400404 	addi	r9,r9,16
   470c8:	42000404 	addi	r8,r8,16
   470cc:	593ffc15 	stw	r4,-16(r11)
   470d0:	51000017 	ldw	r4,0(r10)
   470d4:	63000404 	addi	r12,r12,16
   470d8:	52800404 	addi	r10,r10,16
   470dc:	493ffc15 	stw	r4,-16(r9)
   470e0:	1bbfef1e 	bne	r3,r14,470a0 <__alt_data_end+0xfffdffa0>
   470e4:	79000044 	addi	r4,r15,1
   470e8:	2008913a 	slli	r4,r4,4
   470ec:	328003cc 	andi	r10,r6,15
   470f0:	02c000c4 	movi	r11,3
   470f4:	1107883a 	add	r3,r2,r4
   470f8:	290b883a 	add	r5,r5,r4
   470fc:	5a801e2e 	bgeu	r11,r10,47178 <memmove+0x154>
   47100:	1813883a 	mov	r9,r3
   47104:	2811883a 	mov	r8,r5
   47108:	500f883a 	mov	r7,r10
   4710c:	41000017 	ldw	r4,0(r8)
   47110:	4a400104 	addi	r9,r9,4
   47114:	39ffff04 	addi	r7,r7,-4
   47118:	493fff15 	stw	r4,-4(r9)
   4711c:	42000104 	addi	r8,r8,4
   47120:	59fffa36 	bltu	r11,r7,4710c <__alt_data_end+0xfffe000c>
   47124:	513fff04 	addi	r4,r10,-4
   47128:	2008d0ba 	srli	r4,r4,2
   4712c:	318000cc 	andi	r6,r6,3
   47130:	21000044 	addi	r4,r4,1
   47134:	2109883a 	add	r4,r4,r4
   47138:	2109883a 	add	r4,r4,r4
   4713c:	1907883a 	add	r3,r3,r4
   47140:	290b883a 	add	r5,r5,r4
   47144:	30000b26 	beq	r6,zero,47174 <memmove+0x150>
   47148:	198d883a 	add	r6,r3,r6
   4714c:	29c00003 	ldbu	r7,0(r5)
   47150:	18c00044 	addi	r3,r3,1
   47154:	29400044 	addi	r5,r5,1
   47158:	19ffffc5 	stb	r7,-1(r3)
   4715c:	19bffb1e 	bne	r3,r6,4714c <__alt_data_end+0xfffe004c>
   47160:	f800283a 	ret
   47164:	1007883a 	mov	r3,r2
   47168:	003ff606 	br	47144 <__alt_data_end+0xfffe0044>
   4716c:	1007883a 	mov	r3,r2
   47170:	003ff506 	br	47148 <__alt_data_end+0xfffe0048>
   47174:	f800283a 	ret
   47178:	500d883a 	mov	r6,r10
   4717c:	003ff106 	br	47144 <__alt_data_end+0xfffe0044>

00047180 <memset>:
   47180:	20c000cc 	andi	r3,r4,3
   47184:	2005883a 	mov	r2,r4
   47188:	18004426 	beq	r3,zero,4729c <memset+0x11c>
   4718c:	31ffffc4 	addi	r7,r6,-1
   47190:	30004026 	beq	r6,zero,47294 <memset+0x114>
   47194:	2813883a 	mov	r9,r5
   47198:	200d883a 	mov	r6,r4
   4719c:	2007883a 	mov	r3,r4
   471a0:	00000406 	br	471b4 <memset+0x34>
   471a4:	3a3fffc4 	addi	r8,r7,-1
   471a8:	31800044 	addi	r6,r6,1
   471ac:	38003926 	beq	r7,zero,47294 <memset+0x114>
   471b0:	400f883a 	mov	r7,r8
   471b4:	18c00044 	addi	r3,r3,1
   471b8:	32400005 	stb	r9,0(r6)
   471bc:	1a0000cc 	andi	r8,r3,3
   471c0:	403ff81e 	bne	r8,zero,471a4 <__alt_data_end+0xfffe00a4>
   471c4:	010000c4 	movi	r4,3
   471c8:	21c02d2e 	bgeu	r4,r7,47280 <memset+0x100>
   471cc:	29003fcc 	andi	r4,r5,255
   471d0:	200c923a 	slli	r6,r4,8
   471d4:	3108b03a 	or	r4,r6,r4
   471d8:	200c943a 	slli	r6,r4,16
   471dc:	218cb03a 	or	r6,r4,r6
   471e0:	010003c4 	movi	r4,15
   471e4:	21c0182e 	bgeu	r4,r7,47248 <memset+0xc8>
   471e8:	3b3ffc04 	addi	r12,r7,-16
   471ec:	6018d13a 	srli	r12,r12,4
   471f0:	1a000104 	addi	r8,r3,4
   471f4:	1ac00204 	addi	r11,r3,8
   471f8:	6008913a 	slli	r4,r12,4
   471fc:	1a800304 	addi	r10,r3,12
   47200:	1813883a 	mov	r9,r3
   47204:	21000504 	addi	r4,r4,20
   47208:	1909883a 	add	r4,r3,r4
   4720c:	49800015 	stw	r6,0(r9)
   47210:	41800015 	stw	r6,0(r8)
   47214:	59800015 	stw	r6,0(r11)
   47218:	51800015 	stw	r6,0(r10)
   4721c:	42000404 	addi	r8,r8,16
   47220:	4a400404 	addi	r9,r9,16
   47224:	5ac00404 	addi	r11,r11,16
   47228:	52800404 	addi	r10,r10,16
   4722c:	413ff71e 	bne	r8,r4,4720c <__alt_data_end+0xfffe010c>
   47230:	63000044 	addi	r12,r12,1
   47234:	6018913a 	slli	r12,r12,4
   47238:	39c003cc 	andi	r7,r7,15
   4723c:	010000c4 	movi	r4,3
   47240:	1b07883a 	add	r3,r3,r12
   47244:	21c00e2e 	bgeu	r4,r7,47280 <memset+0x100>
   47248:	1813883a 	mov	r9,r3
   4724c:	3811883a 	mov	r8,r7
   47250:	010000c4 	movi	r4,3
   47254:	49800015 	stw	r6,0(r9)
   47258:	423fff04 	addi	r8,r8,-4
   4725c:	4a400104 	addi	r9,r9,4
   47260:	223ffc36 	bltu	r4,r8,47254 <__alt_data_end+0xfffe0154>
   47264:	393fff04 	addi	r4,r7,-4
   47268:	2008d0ba 	srli	r4,r4,2
   4726c:	39c000cc 	andi	r7,r7,3
   47270:	21000044 	addi	r4,r4,1
   47274:	2109883a 	add	r4,r4,r4
   47278:	2109883a 	add	r4,r4,r4
   4727c:	1907883a 	add	r3,r3,r4
   47280:	38000526 	beq	r7,zero,47298 <memset+0x118>
   47284:	19cf883a 	add	r7,r3,r7
   47288:	19400005 	stb	r5,0(r3)
   4728c:	18c00044 	addi	r3,r3,1
   47290:	38fffd1e 	bne	r7,r3,47288 <__alt_data_end+0xfffe0188>
   47294:	f800283a 	ret
   47298:	f800283a 	ret
   4729c:	2007883a 	mov	r3,r4
   472a0:	300f883a 	mov	r7,r6
   472a4:	003fc706 	br	471c4 <__alt_data_end+0xfffe00c4>

000472a8 <_Balloc>:
   472a8:	20801317 	ldw	r2,76(r4)
   472ac:	defffc04 	addi	sp,sp,-16
   472b0:	dc400115 	stw	r17,4(sp)
   472b4:	dc000015 	stw	r16,0(sp)
   472b8:	dfc00315 	stw	ra,12(sp)
   472bc:	dc800215 	stw	r18,8(sp)
   472c0:	2023883a 	mov	r17,r4
   472c4:	2821883a 	mov	r16,r5
   472c8:	10000f26 	beq	r2,zero,47308 <_Balloc+0x60>
   472cc:	8407883a 	add	r3,r16,r16
   472d0:	18c7883a 	add	r3,r3,r3
   472d4:	10c7883a 	add	r3,r2,r3
   472d8:	18800017 	ldw	r2,0(r3)
   472dc:	10001126 	beq	r2,zero,47324 <_Balloc+0x7c>
   472e0:	11000017 	ldw	r4,0(r2)
   472e4:	19000015 	stw	r4,0(r3)
   472e8:	10000415 	stw	zero,16(r2)
   472ec:	10000315 	stw	zero,12(r2)
   472f0:	dfc00317 	ldw	ra,12(sp)
   472f4:	dc800217 	ldw	r18,8(sp)
   472f8:	dc400117 	ldw	r17,4(sp)
   472fc:	dc000017 	ldw	r16,0(sp)
   47300:	dec00404 	addi	sp,sp,16
   47304:	f800283a 	ret
   47308:	01800844 	movi	r6,33
   4730c:	01400104 	movi	r5,4
   47310:	004a1e40 	call	4a1e4 <_calloc_r>
   47314:	88801315 	stw	r2,76(r17)
   47318:	103fec1e 	bne	r2,zero,472cc <__alt_data_end+0xfffe01cc>
   4731c:	0005883a 	mov	r2,zero
   47320:	003ff306 	br	472f0 <__alt_data_end+0xfffe01f0>
   47324:	01400044 	movi	r5,1
   47328:	2c24983a 	sll	r18,r5,r16
   4732c:	8809883a 	mov	r4,r17
   47330:	91800144 	addi	r6,r18,5
   47334:	318d883a 	add	r6,r6,r6
   47338:	318d883a 	add	r6,r6,r6
   4733c:	004a1e40 	call	4a1e4 <_calloc_r>
   47340:	103ff626 	beq	r2,zero,4731c <__alt_data_end+0xfffe021c>
   47344:	14000115 	stw	r16,4(r2)
   47348:	14800215 	stw	r18,8(r2)
   4734c:	003fe606 	br	472e8 <__alt_data_end+0xfffe01e8>

00047350 <_Bfree>:
   47350:	28000826 	beq	r5,zero,47374 <_Bfree+0x24>
   47354:	28c00117 	ldw	r3,4(r5)
   47358:	20801317 	ldw	r2,76(r4)
   4735c:	18c7883a 	add	r3,r3,r3
   47360:	18c7883a 	add	r3,r3,r3
   47364:	10c5883a 	add	r2,r2,r3
   47368:	10c00017 	ldw	r3,0(r2)
   4736c:	28c00015 	stw	r3,0(r5)
   47370:	11400015 	stw	r5,0(r2)
   47374:	f800283a 	ret

00047378 <__multadd>:
   47378:	defffa04 	addi	sp,sp,-24
   4737c:	dc800315 	stw	r18,12(sp)
   47380:	dc400215 	stw	r17,8(sp)
   47384:	dc000115 	stw	r16,4(sp)
   47388:	2823883a 	mov	r17,r5
   4738c:	2c000417 	ldw	r16,16(r5)
   47390:	dfc00515 	stw	ra,20(sp)
   47394:	dcc00415 	stw	r19,16(sp)
   47398:	2025883a 	mov	r18,r4
   4739c:	29400504 	addi	r5,r5,20
   473a0:	0011883a 	mov	r8,zero
   473a4:	28c00017 	ldw	r3,0(r5)
   473a8:	29400104 	addi	r5,r5,4
   473ac:	42000044 	addi	r8,r8,1
   473b0:	18bfffcc 	andi	r2,r3,65535
   473b4:	1185383a 	mul	r2,r2,r6
   473b8:	1806d43a 	srli	r3,r3,16
   473bc:	11cf883a 	add	r7,r2,r7
   473c0:	3808d43a 	srli	r4,r7,16
   473c4:	1987383a 	mul	r3,r3,r6
   473c8:	38bfffcc 	andi	r2,r7,65535
   473cc:	1907883a 	add	r3,r3,r4
   473d0:	1808943a 	slli	r4,r3,16
   473d4:	180ed43a 	srli	r7,r3,16
   473d8:	2085883a 	add	r2,r4,r2
   473dc:	28bfff15 	stw	r2,-4(r5)
   473e0:	443ff016 	blt	r8,r16,473a4 <__alt_data_end+0xfffe02a4>
   473e4:	38000926 	beq	r7,zero,4740c <__multadd+0x94>
   473e8:	88800217 	ldw	r2,8(r17)
   473ec:	80800f0e 	bge	r16,r2,4742c <__multadd+0xb4>
   473f0:	80800144 	addi	r2,r16,5
   473f4:	1085883a 	add	r2,r2,r2
   473f8:	1085883a 	add	r2,r2,r2
   473fc:	8885883a 	add	r2,r17,r2
   47400:	11c00015 	stw	r7,0(r2)
   47404:	84000044 	addi	r16,r16,1
   47408:	8c000415 	stw	r16,16(r17)
   4740c:	8805883a 	mov	r2,r17
   47410:	dfc00517 	ldw	ra,20(sp)
   47414:	dcc00417 	ldw	r19,16(sp)
   47418:	dc800317 	ldw	r18,12(sp)
   4741c:	dc400217 	ldw	r17,8(sp)
   47420:	dc000117 	ldw	r16,4(sp)
   47424:	dec00604 	addi	sp,sp,24
   47428:	f800283a 	ret
   4742c:	89400117 	ldw	r5,4(r17)
   47430:	9009883a 	mov	r4,r18
   47434:	d9c00015 	stw	r7,0(sp)
   47438:	29400044 	addi	r5,r5,1
   4743c:	00472a80 	call	472a8 <_Balloc>
   47440:	89800417 	ldw	r6,16(r17)
   47444:	89400304 	addi	r5,r17,12
   47448:	11000304 	addi	r4,r2,12
   4744c:	31800084 	addi	r6,r6,2
   47450:	318d883a 	add	r6,r6,r6
   47454:	318d883a 	add	r6,r6,r6
   47458:	1027883a 	mov	r19,r2
   4745c:	0046edc0 	call	46edc <memcpy>
   47460:	d9c00017 	ldw	r7,0(sp)
   47464:	88000a26 	beq	r17,zero,47490 <__multadd+0x118>
   47468:	88c00117 	ldw	r3,4(r17)
   4746c:	90801317 	ldw	r2,76(r18)
   47470:	18c7883a 	add	r3,r3,r3
   47474:	18c7883a 	add	r3,r3,r3
   47478:	10c5883a 	add	r2,r2,r3
   4747c:	10c00017 	ldw	r3,0(r2)
   47480:	88c00015 	stw	r3,0(r17)
   47484:	14400015 	stw	r17,0(r2)
   47488:	9823883a 	mov	r17,r19
   4748c:	003fd806 	br	473f0 <__alt_data_end+0xfffe02f0>
   47490:	9823883a 	mov	r17,r19
   47494:	003fd606 	br	473f0 <__alt_data_end+0xfffe02f0>

00047498 <__s2b>:
   47498:	defff904 	addi	sp,sp,-28
   4749c:	dc400115 	stw	r17,4(sp)
   474a0:	dc000015 	stw	r16,0(sp)
   474a4:	2023883a 	mov	r17,r4
   474a8:	2821883a 	mov	r16,r5
   474ac:	39000204 	addi	r4,r7,8
   474b0:	01400244 	movi	r5,9
   474b4:	dcc00315 	stw	r19,12(sp)
   474b8:	dc800215 	stw	r18,8(sp)
   474bc:	dfc00615 	stw	ra,24(sp)
   474c0:	dd400515 	stw	r21,20(sp)
   474c4:	dd000415 	stw	r20,16(sp)
   474c8:	3825883a 	mov	r18,r7
   474cc:	3027883a 	mov	r19,r6
   474d0:	004b5140 	call	4b514 <__divsi3>
   474d4:	00c00044 	movi	r3,1
   474d8:	000b883a 	mov	r5,zero
   474dc:	1880030e 	bge	r3,r2,474ec <__s2b+0x54>
   474e0:	18c7883a 	add	r3,r3,r3
   474e4:	29400044 	addi	r5,r5,1
   474e8:	18bffd16 	blt	r3,r2,474e0 <__alt_data_end+0xfffe03e0>
   474ec:	8809883a 	mov	r4,r17
   474f0:	00472a80 	call	472a8 <_Balloc>
   474f4:	d8c00717 	ldw	r3,28(sp)
   474f8:	10c00515 	stw	r3,20(r2)
   474fc:	00c00044 	movi	r3,1
   47500:	10c00415 	stw	r3,16(r2)
   47504:	00c00244 	movi	r3,9
   47508:	1cc0210e 	bge	r3,r19,47590 <__s2b+0xf8>
   4750c:	80eb883a 	add	r21,r16,r3
   47510:	a829883a 	mov	r20,r21
   47514:	84e1883a 	add	r16,r16,r19
   47518:	a1c00007 	ldb	r7,0(r20)
   4751c:	01800284 	movi	r6,10
   47520:	a5000044 	addi	r20,r20,1
   47524:	100b883a 	mov	r5,r2
   47528:	39fff404 	addi	r7,r7,-48
   4752c:	8809883a 	mov	r4,r17
   47530:	00473780 	call	47378 <__multadd>
   47534:	a43ff81e 	bne	r20,r16,47518 <__alt_data_end+0xfffe0418>
   47538:	ace1883a 	add	r16,r21,r19
   4753c:	843ffe04 	addi	r16,r16,-8
   47540:	9c800a0e 	bge	r19,r18,4756c <__s2b+0xd4>
   47544:	94e5c83a 	sub	r18,r18,r19
   47548:	84a5883a 	add	r18,r16,r18
   4754c:	81c00007 	ldb	r7,0(r16)
   47550:	01800284 	movi	r6,10
   47554:	84000044 	addi	r16,r16,1
   47558:	100b883a 	mov	r5,r2
   4755c:	39fff404 	addi	r7,r7,-48
   47560:	8809883a 	mov	r4,r17
   47564:	00473780 	call	47378 <__multadd>
   47568:	84bff81e 	bne	r16,r18,4754c <__alt_data_end+0xfffe044c>
   4756c:	dfc00617 	ldw	ra,24(sp)
   47570:	dd400517 	ldw	r21,20(sp)
   47574:	dd000417 	ldw	r20,16(sp)
   47578:	dcc00317 	ldw	r19,12(sp)
   4757c:	dc800217 	ldw	r18,8(sp)
   47580:	dc400117 	ldw	r17,4(sp)
   47584:	dc000017 	ldw	r16,0(sp)
   47588:	dec00704 	addi	sp,sp,28
   4758c:	f800283a 	ret
   47590:	84000284 	addi	r16,r16,10
   47594:	1827883a 	mov	r19,r3
   47598:	003fe906 	br	47540 <__alt_data_end+0xfffe0440>

0004759c <__hi0bits>:
   4759c:	20bfffec 	andhi	r2,r4,65535
   475a0:	1000141e 	bne	r2,zero,475f4 <__hi0bits+0x58>
   475a4:	2008943a 	slli	r4,r4,16
   475a8:	00800404 	movi	r2,16
   475ac:	20ffc02c 	andhi	r3,r4,65280
   475b0:	1800021e 	bne	r3,zero,475bc <__hi0bits+0x20>
   475b4:	2008923a 	slli	r4,r4,8
   475b8:	10800204 	addi	r2,r2,8
   475bc:	20fc002c 	andhi	r3,r4,61440
   475c0:	1800021e 	bne	r3,zero,475cc <__hi0bits+0x30>
   475c4:	2008913a 	slli	r4,r4,4
   475c8:	10800104 	addi	r2,r2,4
   475cc:	20f0002c 	andhi	r3,r4,49152
   475d0:	1800031e 	bne	r3,zero,475e0 <__hi0bits+0x44>
   475d4:	2109883a 	add	r4,r4,r4
   475d8:	10800084 	addi	r2,r2,2
   475dc:	2109883a 	add	r4,r4,r4
   475e0:	20000316 	blt	r4,zero,475f0 <__hi0bits+0x54>
   475e4:	2110002c 	andhi	r4,r4,16384
   475e8:	2000041e 	bne	r4,zero,475fc <__hi0bits+0x60>
   475ec:	00800804 	movi	r2,32
   475f0:	f800283a 	ret
   475f4:	0005883a 	mov	r2,zero
   475f8:	003fec06 	br	475ac <__alt_data_end+0xfffe04ac>
   475fc:	10800044 	addi	r2,r2,1
   47600:	f800283a 	ret

00047604 <__lo0bits>:
   47604:	20c00017 	ldw	r3,0(r4)
   47608:	188001cc 	andi	r2,r3,7
   4760c:	10000826 	beq	r2,zero,47630 <__lo0bits+0x2c>
   47610:	1880004c 	andi	r2,r3,1
   47614:	1000211e 	bne	r2,zero,4769c <__lo0bits+0x98>
   47618:	1880008c 	andi	r2,r3,2
   4761c:	1000211e 	bne	r2,zero,476a4 <__lo0bits+0xa0>
   47620:	1806d0ba 	srli	r3,r3,2
   47624:	00800084 	movi	r2,2
   47628:	20c00015 	stw	r3,0(r4)
   4762c:	f800283a 	ret
   47630:	18bfffcc 	andi	r2,r3,65535
   47634:	10001326 	beq	r2,zero,47684 <__lo0bits+0x80>
   47638:	0005883a 	mov	r2,zero
   4763c:	19403fcc 	andi	r5,r3,255
   47640:	2800021e 	bne	r5,zero,4764c <__lo0bits+0x48>
   47644:	1806d23a 	srli	r3,r3,8
   47648:	10800204 	addi	r2,r2,8
   4764c:	194003cc 	andi	r5,r3,15
   47650:	2800021e 	bne	r5,zero,4765c <__lo0bits+0x58>
   47654:	1806d13a 	srli	r3,r3,4
   47658:	10800104 	addi	r2,r2,4
   4765c:	194000cc 	andi	r5,r3,3
   47660:	2800021e 	bne	r5,zero,4766c <__lo0bits+0x68>
   47664:	1806d0ba 	srli	r3,r3,2
   47668:	10800084 	addi	r2,r2,2
   4766c:	1940004c 	andi	r5,r3,1
   47670:	2800081e 	bne	r5,zero,47694 <__lo0bits+0x90>
   47674:	1806d07a 	srli	r3,r3,1
   47678:	1800051e 	bne	r3,zero,47690 <__lo0bits+0x8c>
   4767c:	00800804 	movi	r2,32
   47680:	f800283a 	ret
   47684:	1806d43a 	srli	r3,r3,16
   47688:	00800404 	movi	r2,16
   4768c:	003feb06 	br	4763c <__alt_data_end+0xfffe053c>
   47690:	10800044 	addi	r2,r2,1
   47694:	20c00015 	stw	r3,0(r4)
   47698:	f800283a 	ret
   4769c:	0005883a 	mov	r2,zero
   476a0:	f800283a 	ret
   476a4:	1806d07a 	srli	r3,r3,1
   476a8:	00800044 	movi	r2,1
   476ac:	20c00015 	stw	r3,0(r4)
   476b0:	f800283a 	ret

000476b4 <__i2b>:
   476b4:	defffd04 	addi	sp,sp,-12
   476b8:	dc000015 	stw	r16,0(sp)
   476bc:	04000044 	movi	r16,1
   476c0:	dc400115 	stw	r17,4(sp)
   476c4:	2823883a 	mov	r17,r5
   476c8:	800b883a 	mov	r5,r16
   476cc:	dfc00215 	stw	ra,8(sp)
   476d0:	00472a80 	call	472a8 <_Balloc>
   476d4:	14400515 	stw	r17,20(r2)
   476d8:	14000415 	stw	r16,16(r2)
   476dc:	dfc00217 	ldw	ra,8(sp)
   476e0:	dc400117 	ldw	r17,4(sp)
   476e4:	dc000017 	ldw	r16,0(sp)
   476e8:	dec00304 	addi	sp,sp,12
   476ec:	f800283a 	ret

000476f0 <__multiply>:
   476f0:	defffa04 	addi	sp,sp,-24
   476f4:	dcc00315 	stw	r19,12(sp)
   476f8:	dc800215 	stw	r18,8(sp)
   476fc:	34c00417 	ldw	r19,16(r6)
   47700:	2c800417 	ldw	r18,16(r5)
   47704:	dd000415 	stw	r20,16(sp)
   47708:	dc400115 	stw	r17,4(sp)
   4770c:	dfc00515 	stw	ra,20(sp)
   47710:	dc000015 	stw	r16,0(sp)
   47714:	2829883a 	mov	r20,r5
   47718:	3023883a 	mov	r17,r6
   4771c:	94c0050e 	bge	r18,r19,47734 <__multiply+0x44>
   47720:	9007883a 	mov	r3,r18
   47724:	3029883a 	mov	r20,r6
   47728:	9825883a 	mov	r18,r19
   4772c:	2823883a 	mov	r17,r5
   47730:	1827883a 	mov	r19,r3
   47734:	a0800217 	ldw	r2,8(r20)
   47738:	94e1883a 	add	r16,r18,r19
   4773c:	a1400117 	ldw	r5,4(r20)
   47740:	1400010e 	bge	r2,r16,47748 <__multiply+0x58>
   47744:	29400044 	addi	r5,r5,1
   47748:	00472a80 	call	472a8 <_Balloc>
   4774c:	8415883a 	add	r10,r16,r16
   47750:	12c00504 	addi	r11,r2,20
   47754:	5295883a 	add	r10,r10,r10
   47758:	5a95883a 	add	r10,r11,r10
   4775c:	5807883a 	mov	r3,r11
   47760:	5a80032e 	bgeu	r11,r10,47770 <__multiply+0x80>
   47764:	18000015 	stw	zero,0(r3)
   47768:	18c00104 	addi	r3,r3,4
   4776c:	1abffd36 	bltu	r3,r10,47764 <__alt_data_end+0xfffe0664>
   47770:	9ce7883a 	add	r19,r19,r19
   47774:	94a5883a 	add	r18,r18,r18
   47778:	89800504 	addi	r6,r17,20
   4777c:	9ce7883a 	add	r19,r19,r19
   47780:	a3400504 	addi	r13,r20,20
   47784:	94a5883a 	add	r18,r18,r18
   47788:	34d9883a 	add	r12,r6,r19
   4778c:	6c93883a 	add	r9,r13,r18
   47790:	3300422e 	bgeu	r6,r12,4789c <__multiply+0x1ac>
   47794:	37c00017 	ldw	ra,0(r6)
   47798:	fbffffcc 	andi	r15,ra,65535
   4779c:	78001b26 	beq	r15,zero,4780c <__multiply+0x11c>
   477a0:	5811883a 	mov	r8,r11
   477a4:	681d883a 	mov	r14,r13
   477a8:	000f883a 	mov	r7,zero
   477ac:	71000017 	ldw	r4,0(r14)
   477b0:	40c00017 	ldw	r3,0(r8)
   477b4:	73800104 	addi	r14,r14,4
   477b8:	217fffcc 	andi	r5,r4,65535
   477bc:	2bcb383a 	mul	r5,r5,r15
   477c0:	2008d43a 	srli	r4,r4,16
   477c4:	1c7fffcc 	andi	r17,r3,65535
   477c8:	2c4b883a 	add	r5,r5,r17
   477cc:	29cb883a 	add	r5,r5,r7
   477d0:	23c9383a 	mul	r4,r4,r15
   477d4:	1806d43a 	srli	r3,r3,16
   477d8:	280ed43a 	srli	r7,r5,16
   477dc:	297fffcc 	andi	r5,r5,65535
   477e0:	20c7883a 	add	r3,r4,r3
   477e4:	19c7883a 	add	r3,r3,r7
   477e8:	1808943a 	slli	r4,r3,16
   477ec:	4023883a 	mov	r17,r8
   477f0:	180ed43a 	srli	r7,r3,16
   477f4:	214ab03a 	or	r5,r4,r5
   477f8:	41400015 	stw	r5,0(r8)
   477fc:	42000104 	addi	r8,r8,4
   47800:	727fea36 	bltu	r14,r9,477ac <__alt_data_end+0xfffe06ac>
   47804:	89c00115 	stw	r7,4(r17)
   47808:	37c00017 	ldw	ra,0(r6)
   4780c:	f83ed43a 	srli	ra,ra,16
   47810:	f8001f26 	beq	ra,zero,47890 <__multiply+0x1a0>
   47814:	58c00017 	ldw	r3,0(r11)
   47818:	681d883a 	mov	r14,r13
   4781c:	581f883a 	mov	r15,r11
   47820:	1811883a 	mov	r8,r3
   47824:	5825883a 	mov	r18,r11
   47828:	000f883a 	mov	r7,zero
   4782c:	00000106 	br	47834 <__multiply+0x144>
   47830:	8825883a 	mov	r18,r17
   47834:	7140000b 	ldhu	r5,0(r14)
   47838:	4010d43a 	srli	r8,r8,16
   4783c:	193fffcc 	andi	r4,r3,65535
   47840:	2fcb383a 	mul	r5,r5,ra
   47844:	7bc00104 	addi	r15,r15,4
   47848:	73800104 	addi	r14,r14,4
   4784c:	2a0b883a 	add	r5,r5,r8
   47850:	29cb883a 	add	r5,r5,r7
   47854:	2806943a 	slli	r3,r5,16
   47858:	94400104 	addi	r17,r18,4
   4785c:	280ad43a 	srli	r5,r5,16
   47860:	1908b03a 	or	r4,r3,r4
   47864:	793fff15 	stw	r4,-4(r15)
   47868:	70ffff17 	ldw	r3,-4(r14)
   4786c:	8a000017 	ldw	r8,0(r17)
   47870:	1806d43a 	srli	r3,r3,16
   47874:	413fffcc 	andi	r4,r8,65535
   47878:	1fc7383a 	mul	r3,r3,ra
   4787c:	1907883a 	add	r3,r3,r4
   47880:	1947883a 	add	r3,r3,r5
   47884:	180ed43a 	srli	r7,r3,16
   47888:	727fe936 	bltu	r14,r9,47830 <__alt_data_end+0xfffe0730>
   4788c:	90c00115 	stw	r3,4(r18)
   47890:	31800104 	addi	r6,r6,4
   47894:	5ac00104 	addi	r11,r11,4
   47898:	333fbe36 	bltu	r6,r12,47794 <__alt_data_end+0xfffe0694>
   4789c:	0400090e 	bge	zero,r16,478c4 <__multiply+0x1d4>
   478a0:	50ffff17 	ldw	r3,-4(r10)
   478a4:	52bfff04 	addi	r10,r10,-4
   478a8:	18000326 	beq	r3,zero,478b8 <__multiply+0x1c8>
   478ac:	00000506 	br	478c4 <__multiply+0x1d4>
   478b0:	50c00017 	ldw	r3,0(r10)
   478b4:	1800031e 	bne	r3,zero,478c4 <__multiply+0x1d4>
   478b8:	843fffc4 	addi	r16,r16,-1
   478bc:	52bfff04 	addi	r10,r10,-4
   478c0:	803ffb1e 	bne	r16,zero,478b0 <__alt_data_end+0xfffe07b0>
   478c4:	14000415 	stw	r16,16(r2)
   478c8:	dfc00517 	ldw	ra,20(sp)
   478cc:	dd000417 	ldw	r20,16(sp)
   478d0:	dcc00317 	ldw	r19,12(sp)
   478d4:	dc800217 	ldw	r18,8(sp)
   478d8:	dc400117 	ldw	r17,4(sp)
   478dc:	dc000017 	ldw	r16,0(sp)
   478e0:	dec00604 	addi	sp,sp,24
   478e4:	f800283a 	ret

000478e8 <__pow5mult>:
   478e8:	defffa04 	addi	sp,sp,-24
   478ec:	dcc00315 	stw	r19,12(sp)
   478f0:	dc000015 	stw	r16,0(sp)
   478f4:	dfc00515 	stw	ra,20(sp)
   478f8:	dd000415 	stw	r20,16(sp)
   478fc:	dc800215 	stw	r18,8(sp)
   47900:	dc400115 	stw	r17,4(sp)
   47904:	308000cc 	andi	r2,r6,3
   47908:	3021883a 	mov	r16,r6
   4790c:	2027883a 	mov	r19,r4
   47910:	10002f1e 	bne	r2,zero,479d0 <__pow5mult+0xe8>
   47914:	2825883a 	mov	r18,r5
   47918:	8021d0ba 	srai	r16,r16,2
   4791c:	80001a26 	beq	r16,zero,47988 <__pow5mult+0xa0>
   47920:	9c401217 	ldw	r17,72(r19)
   47924:	8800061e 	bne	r17,zero,47940 <__pow5mult+0x58>
   47928:	00003406 	br	479fc <__pow5mult+0x114>
   4792c:	8021d07a 	srai	r16,r16,1
   47930:	80001526 	beq	r16,zero,47988 <__pow5mult+0xa0>
   47934:	88800017 	ldw	r2,0(r17)
   47938:	10001c26 	beq	r2,zero,479ac <__pow5mult+0xc4>
   4793c:	1023883a 	mov	r17,r2
   47940:	8080004c 	andi	r2,r16,1
   47944:	103ff926 	beq	r2,zero,4792c <__alt_data_end+0xfffe082c>
   47948:	880d883a 	mov	r6,r17
   4794c:	900b883a 	mov	r5,r18
   47950:	9809883a 	mov	r4,r19
   47954:	00476f00 	call	476f0 <__multiply>
   47958:	90001b26 	beq	r18,zero,479c8 <__pow5mult+0xe0>
   4795c:	91000117 	ldw	r4,4(r18)
   47960:	98c01317 	ldw	r3,76(r19)
   47964:	8021d07a 	srai	r16,r16,1
   47968:	2109883a 	add	r4,r4,r4
   4796c:	2109883a 	add	r4,r4,r4
   47970:	1907883a 	add	r3,r3,r4
   47974:	19000017 	ldw	r4,0(r3)
   47978:	91000015 	stw	r4,0(r18)
   4797c:	1c800015 	stw	r18,0(r3)
   47980:	1025883a 	mov	r18,r2
   47984:	803feb1e 	bne	r16,zero,47934 <__alt_data_end+0xfffe0834>
   47988:	9005883a 	mov	r2,r18
   4798c:	dfc00517 	ldw	ra,20(sp)
   47990:	dd000417 	ldw	r20,16(sp)
   47994:	dcc00317 	ldw	r19,12(sp)
   47998:	dc800217 	ldw	r18,8(sp)
   4799c:	dc400117 	ldw	r17,4(sp)
   479a0:	dc000017 	ldw	r16,0(sp)
   479a4:	dec00604 	addi	sp,sp,24
   479a8:	f800283a 	ret
   479ac:	880d883a 	mov	r6,r17
   479b0:	880b883a 	mov	r5,r17
   479b4:	9809883a 	mov	r4,r19
   479b8:	00476f00 	call	476f0 <__multiply>
   479bc:	88800015 	stw	r2,0(r17)
   479c0:	10000015 	stw	zero,0(r2)
   479c4:	003fdd06 	br	4793c <__alt_data_end+0xfffe083c>
   479c8:	1025883a 	mov	r18,r2
   479cc:	003fd706 	br	4792c <__alt_data_end+0xfffe082c>
   479d0:	10bfffc4 	addi	r2,r2,-1
   479d4:	1085883a 	add	r2,r2,r2
   479d8:	00c00174 	movhi	r3,5
   479dc:	18c9de04 	addi	r3,r3,10104
   479e0:	1085883a 	add	r2,r2,r2
   479e4:	1885883a 	add	r2,r3,r2
   479e8:	11800017 	ldw	r6,0(r2)
   479ec:	000f883a 	mov	r7,zero
   479f0:	00473780 	call	47378 <__multadd>
   479f4:	1025883a 	mov	r18,r2
   479f8:	003fc706 	br	47918 <__alt_data_end+0xfffe0818>
   479fc:	05000044 	movi	r20,1
   47a00:	a00b883a 	mov	r5,r20
   47a04:	9809883a 	mov	r4,r19
   47a08:	00472a80 	call	472a8 <_Balloc>
   47a0c:	1023883a 	mov	r17,r2
   47a10:	00809c44 	movi	r2,625
   47a14:	88800515 	stw	r2,20(r17)
   47a18:	8d000415 	stw	r20,16(r17)
   47a1c:	9c401215 	stw	r17,72(r19)
   47a20:	88000015 	stw	zero,0(r17)
   47a24:	003fc606 	br	47940 <__alt_data_end+0xfffe0840>

00047a28 <__lshift>:
   47a28:	defff904 	addi	sp,sp,-28
   47a2c:	dd400515 	stw	r21,20(sp)
   47a30:	dcc00315 	stw	r19,12(sp)
   47a34:	302bd17a 	srai	r21,r6,5
   47a38:	2cc00417 	ldw	r19,16(r5)
   47a3c:	28800217 	ldw	r2,8(r5)
   47a40:	dd000415 	stw	r20,16(sp)
   47a44:	ace7883a 	add	r19,r21,r19
   47a48:	dc800215 	stw	r18,8(sp)
   47a4c:	dc400115 	stw	r17,4(sp)
   47a50:	dc000015 	stw	r16,0(sp)
   47a54:	dfc00615 	stw	ra,24(sp)
   47a58:	9c000044 	addi	r16,r19,1
   47a5c:	2823883a 	mov	r17,r5
   47a60:	3029883a 	mov	r20,r6
   47a64:	2025883a 	mov	r18,r4
   47a68:	29400117 	ldw	r5,4(r5)
   47a6c:	1400030e 	bge	r2,r16,47a7c <__lshift+0x54>
   47a70:	1085883a 	add	r2,r2,r2
   47a74:	29400044 	addi	r5,r5,1
   47a78:	143ffd16 	blt	r2,r16,47a70 <__alt_data_end+0xfffe0970>
   47a7c:	9009883a 	mov	r4,r18
   47a80:	00472a80 	call	472a8 <_Balloc>
   47a84:	10c00504 	addi	r3,r2,20
   47a88:	0540070e 	bge	zero,r21,47aa8 <__lshift+0x80>
   47a8c:	ad6b883a 	add	r21,r21,r21
   47a90:	ad6b883a 	add	r21,r21,r21
   47a94:	1809883a 	mov	r4,r3
   47a98:	1d47883a 	add	r3,r3,r21
   47a9c:	20000015 	stw	zero,0(r4)
   47aa0:	21000104 	addi	r4,r4,4
   47aa4:	193ffd1e 	bne	r3,r4,47a9c <__alt_data_end+0xfffe099c>
   47aa8:	8a000417 	ldw	r8,16(r17)
   47aac:	89000504 	addi	r4,r17,20
   47ab0:	a18007cc 	andi	r6,r20,31
   47ab4:	4211883a 	add	r8,r8,r8
   47ab8:	4211883a 	add	r8,r8,r8
   47abc:	2211883a 	add	r8,r4,r8
   47ac0:	30002326 	beq	r6,zero,47b50 <__lshift+0x128>
   47ac4:	02400804 	movi	r9,32
   47ac8:	4993c83a 	sub	r9,r9,r6
   47acc:	000b883a 	mov	r5,zero
   47ad0:	21c00017 	ldw	r7,0(r4)
   47ad4:	1815883a 	mov	r10,r3
   47ad8:	18c00104 	addi	r3,r3,4
   47adc:	398e983a 	sll	r7,r7,r6
   47ae0:	21000104 	addi	r4,r4,4
   47ae4:	394ab03a 	or	r5,r7,r5
   47ae8:	197fff15 	stw	r5,-4(r3)
   47aec:	217fff17 	ldw	r5,-4(r4)
   47af0:	2a4ad83a 	srl	r5,r5,r9
   47af4:	223ff636 	bltu	r4,r8,47ad0 <__alt_data_end+0xfffe09d0>
   47af8:	51400115 	stw	r5,4(r10)
   47afc:	28001a1e 	bne	r5,zero,47b68 <__lshift+0x140>
   47b00:	843fffc4 	addi	r16,r16,-1
   47b04:	14000415 	stw	r16,16(r2)
   47b08:	88000826 	beq	r17,zero,47b2c <__lshift+0x104>
   47b0c:	89000117 	ldw	r4,4(r17)
   47b10:	90c01317 	ldw	r3,76(r18)
   47b14:	2109883a 	add	r4,r4,r4
   47b18:	2109883a 	add	r4,r4,r4
   47b1c:	1907883a 	add	r3,r3,r4
   47b20:	19000017 	ldw	r4,0(r3)
   47b24:	89000015 	stw	r4,0(r17)
   47b28:	1c400015 	stw	r17,0(r3)
   47b2c:	dfc00617 	ldw	ra,24(sp)
   47b30:	dd400517 	ldw	r21,20(sp)
   47b34:	dd000417 	ldw	r20,16(sp)
   47b38:	dcc00317 	ldw	r19,12(sp)
   47b3c:	dc800217 	ldw	r18,8(sp)
   47b40:	dc400117 	ldw	r17,4(sp)
   47b44:	dc000017 	ldw	r16,0(sp)
   47b48:	dec00704 	addi	sp,sp,28
   47b4c:	f800283a 	ret
   47b50:	21400017 	ldw	r5,0(r4)
   47b54:	18c00104 	addi	r3,r3,4
   47b58:	21000104 	addi	r4,r4,4
   47b5c:	197fff15 	stw	r5,-4(r3)
   47b60:	223ffb36 	bltu	r4,r8,47b50 <__alt_data_end+0xfffe0a50>
   47b64:	003fe606 	br	47b00 <__alt_data_end+0xfffe0a00>
   47b68:	9c000084 	addi	r16,r19,2
   47b6c:	003fe406 	br	47b00 <__alt_data_end+0xfffe0a00>

00047b70 <__mcmp>:
   47b70:	20800417 	ldw	r2,16(r4)
   47b74:	28c00417 	ldw	r3,16(r5)
   47b78:	10c5c83a 	sub	r2,r2,r3
   47b7c:	1000111e 	bne	r2,zero,47bc4 <__mcmp+0x54>
   47b80:	18c7883a 	add	r3,r3,r3
   47b84:	18c7883a 	add	r3,r3,r3
   47b88:	21000504 	addi	r4,r4,20
   47b8c:	29400504 	addi	r5,r5,20
   47b90:	20c5883a 	add	r2,r4,r3
   47b94:	28cb883a 	add	r5,r5,r3
   47b98:	00000106 	br	47ba0 <__mcmp+0x30>
   47b9c:	20800a2e 	bgeu	r4,r2,47bc8 <__mcmp+0x58>
   47ba0:	10bfff04 	addi	r2,r2,-4
   47ba4:	297fff04 	addi	r5,r5,-4
   47ba8:	11800017 	ldw	r6,0(r2)
   47bac:	28c00017 	ldw	r3,0(r5)
   47bb0:	30fffa26 	beq	r6,r3,47b9c <__alt_data_end+0xfffe0a9c>
   47bb4:	30c00236 	bltu	r6,r3,47bc0 <__mcmp+0x50>
   47bb8:	00800044 	movi	r2,1
   47bbc:	f800283a 	ret
   47bc0:	00bfffc4 	movi	r2,-1
   47bc4:	f800283a 	ret
   47bc8:	0005883a 	mov	r2,zero
   47bcc:	f800283a 	ret

00047bd0 <__mdiff>:
   47bd0:	28c00417 	ldw	r3,16(r5)
   47bd4:	30800417 	ldw	r2,16(r6)
   47bd8:	defffa04 	addi	sp,sp,-24
   47bdc:	dcc00315 	stw	r19,12(sp)
   47be0:	dc800215 	stw	r18,8(sp)
   47be4:	dfc00515 	stw	ra,20(sp)
   47be8:	dd000415 	stw	r20,16(sp)
   47bec:	dc400115 	stw	r17,4(sp)
   47bf0:	dc000015 	stw	r16,0(sp)
   47bf4:	1887c83a 	sub	r3,r3,r2
   47bf8:	2825883a 	mov	r18,r5
   47bfc:	3027883a 	mov	r19,r6
   47c00:	1800141e 	bne	r3,zero,47c54 <__mdiff+0x84>
   47c04:	1085883a 	add	r2,r2,r2
   47c08:	1085883a 	add	r2,r2,r2
   47c0c:	2a000504 	addi	r8,r5,20
   47c10:	34000504 	addi	r16,r6,20
   47c14:	4087883a 	add	r3,r8,r2
   47c18:	8085883a 	add	r2,r16,r2
   47c1c:	00000106 	br	47c24 <__mdiff+0x54>
   47c20:	40c0592e 	bgeu	r8,r3,47d88 <__mdiff+0x1b8>
   47c24:	18ffff04 	addi	r3,r3,-4
   47c28:	10bfff04 	addi	r2,r2,-4
   47c2c:	19c00017 	ldw	r7,0(r3)
   47c30:	11400017 	ldw	r5,0(r2)
   47c34:	397ffa26 	beq	r7,r5,47c20 <__alt_data_end+0xfffe0b20>
   47c38:	3940592e 	bgeu	r7,r5,47da0 <__mdiff+0x1d0>
   47c3c:	9005883a 	mov	r2,r18
   47c40:	4023883a 	mov	r17,r8
   47c44:	9825883a 	mov	r18,r19
   47c48:	05000044 	movi	r20,1
   47c4c:	1027883a 	mov	r19,r2
   47c50:	00000406 	br	47c64 <__mdiff+0x94>
   47c54:	18005616 	blt	r3,zero,47db0 <__mdiff+0x1e0>
   47c58:	34400504 	addi	r17,r6,20
   47c5c:	2c000504 	addi	r16,r5,20
   47c60:	0029883a 	mov	r20,zero
   47c64:	91400117 	ldw	r5,4(r18)
   47c68:	00472a80 	call	472a8 <_Balloc>
   47c6c:	92400417 	ldw	r9,16(r18)
   47c70:	9b000417 	ldw	r12,16(r19)
   47c74:	12c00504 	addi	r11,r2,20
   47c78:	4a51883a 	add	r8,r9,r9
   47c7c:	6319883a 	add	r12,r12,r12
   47c80:	4211883a 	add	r8,r8,r8
   47c84:	6319883a 	add	r12,r12,r12
   47c88:	15000315 	stw	r20,12(r2)
   47c8c:	8211883a 	add	r8,r16,r8
   47c90:	8b19883a 	add	r12,r17,r12
   47c94:	0007883a 	mov	r3,zero
   47c98:	81400017 	ldw	r5,0(r16)
   47c9c:	89c00017 	ldw	r7,0(r17)
   47ca0:	59800104 	addi	r6,r11,4
   47ca4:	293fffcc 	andi	r4,r5,65535
   47ca8:	20c7883a 	add	r3,r4,r3
   47cac:	393fffcc 	andi	r4,r7,65535
   47cb0:	1909c83a 	sub	r4,r3,r4
   47cb4:	280ad43a 	srli	r5,r5,16
   47cb8:	380ed43a 	srli	r7,r7,16
   47cbc:	2007d43a 	srai	r3,r4,16
   47cc0:	213fffcc 	andi	r4,r4,65535
   47cc4:	29cbc83a 	sub	r5,r5,r7
   47cc8:	28c7883a 	add	r3,r5,r3
   47ccc:	180a943a 	slli	r5,r3,16
   47cd0:	8c400104 	addi	r17,r17,4
   47cd4:	84000104 	addi	r16,r16,4
   47cd8:	2908b03a 	or	r4,r5,r4
   47cdc:	59000015 	stw	r4,0(r11)
   47ce0:	1807d43a 	srai	r3,r3,16
   47ce4:	3015883a 	mov	r10,r6
   47ce8:	3017883a 	mov	r11,r6
   47cec:	8b3fea36 	bltu	r17,r12,47c98 <__alt_data_end+0xfffe0b98>
   47cf0:	8200162e 	bgeu	r16,r8,47d4c <__mdiff+0x17c>
   47cf4:	8017883a 	mov	r11,r16
   47cf8:	59400017 	ldw	r5,0(r11)
   47cfc:	31800104 	addi	r6,r6,4
   47d00:	5ac00104 	addi	r11,r11,4
   47d04:	293fffcc 	andi	r4,r5,65535
   47d08:	20c7883a 	add	r3,r4,r3
   47d0c:	280ed43a 	srli	r7,r5,16
   47d10:	180bd43a 	srai	r5,r3,16
   47d14:	193fffcc 	andi	r4,r3,65535
   47d18:	3947883a 	add	r3,r7,r5
   47d1c:	180a943a 	slli	r5,r3,16
   47d20:	1807d43a 	srai	r3,r3,16
   47d24:	2908b03a 	or	r4,r5,r4
   47d28:	313fff15 	stw	r4,-4(r6)
   47d2c:	5a3ff236 	bltu	r11,r8,47cf8 <__alt_data_end+0xfffe0bf8>
   47d30:	0406303a 	nor	r3,zero,r16
   47d34:	1a07883a 	add	r3,r3,r8
   47d38:	1806d0ba 	srli	r3,r3,2
   47d3c:	18c00044 	addi	r3,r3,1
   47d40:	18c7883a 	add	r3,r3,r3
   47d44:	18c7883a 	add	r3,r3,r3
   47d48:	50d5883a 	add	r10,r10,r3
   47d4c:	50ffff04 	addi	r3,r10,-4
   47d50:	2000041e 	bne	r4,zero,47d64 <__mdiff+0x194>
   47d54:	18ffff04 	addi	r3,r3,-4
   47d58:	19000017 	ldw	r4,0(r3)
   47d5c:	4a7fffc4 	addi	r9,r9,-1
   47d60:	203ffc26 	beq	r4,zero,47d54 <__alt_data_end+0xfffe0c54>
   47d64:	12400415 	stw	r9,16(r2)
   47d68:	dfc00517 	ldw	ra,20(sp)
   47d6c:	dd000417 	ldw	r20,16(sp)
   47d70:	dcc00317 	ldw	r19,12(sp)
   47d74:	dc800217 	ldw	r18,8(sp)
   47d78:	dc400117 	ldw	r17,4(sp)
   47d7c:	dc000017 	ldw	r16,0(sp)
   47d80:	dec00604 	addi	sp,sp,24
   47d84:	f800283a 	ret
   47d88:	000b883a 	mov	r5,zero
   47d8c:	00472a80 	call	472a8 <_Balloc>
   47d90:	00c00044 	movi	r3,1
   47d94:	10c00415 	stw	r3,16(r2)
   47d98:	10000515 	stw	zero,20(r2)
   47d9c:	003ff206 	br	47d68 <__alt_data_end+0xfffe0c68>
   47da0:	8023883a 	mov	r17,r16
   47da4:	0029883a 	mov	r20,zero
   47da8:	4021883a 	mov	r16,r8
   47dac:	003fad06 	br	47c64 <__alt_data_end+0xfffe0b64>
   47db0:	9005883a 	mov	r2,r18
   47db4:	94400504 	addi	r17,r18,20
   47db8:	9c000504 	addi	r16,r19,20
   47dbc:	9825883a 	mov	r18,r19
   47dc0:	05000044 	movi	r20,1
   47dc4:	1027883a 	mov	r19,r2
   47dc8:	003fa606 	br	47c64 <__alt_data_end+0xfffe0b64>

00047dcc <__ulp>:
   47dcc:	295ffc2c 	andhi	r5,r5,32752
   47dd0:	00bf3034 	movhi	r2,64704
   47dd4:	2887883a 	add	r3,r5,r2
   47dd8:	00c0020e 	bge	zero,r3,47de4 <__ulp+0x18>
   47ddc:	0005883a 	mov	r2,zero
   47de0:	f800283a 	ret
   47de4:	00c7c83a 	sub	r3,zero,r3
   47de8:	1807d53a 	srai	r3,r3,20
   47dec:	008004c4 	movi	r2,19
   47df0:	10c00b0e 	bge	r2,r3,47e20 <__ulp+0x54>
   47df4:	18bffb04 	addi	r2,r3,-20
   47df8:	01000784 	movi	r4,30
   47dfc:	0007883a 	mov	r3,zero
   47e00:	20800516 	blt	r4,r2,47e18 <__ulp+0x4c>
   47e04:	010007c4 	movi	r4,31
   47e08:	2089c83a 	sub	r4,r4,r2
   47e0c:	00800044 	movi	r2,1
   47e10:	1104983a 	sll	r2,r2,r4
   47e14:	f800283a 	ret
   47e18:	00800044 	movi	r2,1
   47e1c:	f800283a 	ret
   47e20:	01400234 	movhi	r5,8
   47e24:	28c7d83a 	sra	r3,r5,r3
   47e28:	0005883a 	mov	r2,zero
   47e2c:	f800283a 	ret

00047e30 <__b2d>:
   47e30:	defffa04 	addi	sp,sp,-24
   47e34:	dc000015 	stw	r16,0(sp)
   47e38:	24000417 	ldw	r16,16(r4)
   47e3c:	dc400115 	stw	r17,4(sp)
   47e40:	24400504 	addi	r17,r4,20
   47e44:	8421883a 	add	r16,r16,r16
   47e48:	8421883a 	add	r16,r16,r16
   47e4c:	8c21883a 	add	r16,r17,r16
   47e50:	dc800215 	stw	r18,8(sp)
   47e54:	84bfff17 	ldw	r18,-4(r16)
   47e58:	dd000415 	stw	r20,16(sp)
   47e5c:	dcc00315 	stw	r19,12(sp)
   47e60:	9009883a 	mov	r4,r18
   47e64:	2829883a 	mov	r20,r5
   47e68:	dfc00515 	stw	ra,20(sp)
   47e6c:	004759c0 	call	4759c <__hi0bits>
   47e70:	00c00804 	movi	r3,32
   47e74:	1889c83a 	sub	r4,r3,r2
   47e78:	a1000015 	stw	r4,0(r20)
   47e7c:	01000284 	movi	r4,10
   47e80:	84ffff04 	addi	r19,r16,-4
   47e84:	20801216 	blt	r4,r2,47ed0 <__b2d+0xa0>
   47e88:	018002c4 	movi	r6,11
   47e8c:	308dc83a 	sub	r6,r6,r2
   47e90:	9186d83a 	srl	r3,r18,r6
   47e94:	18cffc34 	orhi	r3,r3,16368
   47e98:	8cc0212e 	bgeu	r17,r19,47f20 <__b2d+0xf0>
   47e9c:	813ffe17 	ldw	r4,-8(r16)
   47ea0:	218cd83a 	srl	r6,r4,r6
   47ea4:	10800544 	addi	r2,r2,21
   47ea8:	9084983a 	sll	r2,r18,r2
   47eac:	1184b03a 	or	r2,r2,r6
   47eb0:	dfc00517 	ldw	ra,20(sp)
   47eb4:	dd000417 	ldw	r20,16(sp)
   47eb8:	dcc00317 	ldw	r19,12(sp)
   47ebc:	dc800217 	ldw	r18,8(sp)
   47ec0:	dc400117 	ldw	r17,4(sp)
   47ec4:	dc000017 	ldw	r16,0(sp)
   47ec8:	dec00604 	addi	sp,sp,24
   47ecc:	f800283a 	ret
   47ed0:	8cc00f2e 	bgeu	r17,r19,47f10 <__b2d+0xe0>
   47ed4:	117ffd44 	addi	r5,r2,-11
   47ed8:	80bffe17 	ldw	r2,-8(r16)
   47edc:	28000e26 	beq	r5,zero,47f18 <__b2d+0xe8>
   47ee0:	1949c83a 	sub	r4,r3,r5
   47ee4:	9164983a 	sll	r18,r18,r5
   47ee8:	1106d83a 	srl	r3,r2,r4
   47eec:	81bffe04 	addi	r6,r16,-8
   47ef0:	948ffc34 	orhi	r18,r18,16368
   47ef4:	90c6b03a 	or	r3,r18,r3
   47ef8:	89800e2e 	bgeu	r17,r6,47f34 <__b2d+0x104>
   47efc:	81bffd17 	ldw	r6,-12(r16)
   47f00:	1144983a 	sll	r2,r2,r5
   47f04:	310ad83a 	srl	r5,r6,r4
   47f08:	2884b03a 	or	r2,r5,r2
   47f0c:	003fe806 	br	47eb0 <__alt_data_end+0xfffe0db0>
   47f10:	10bffd44 	addi	r2,r2,-11
   47f14:	1000041e 	bne	r2,zero,47f28 <__b2d+0xf8>
   47f18:	90cffc34 	orhi	r3,r18,16368
   47f1c:	003fe406 	br	47eb0 <__alt_data_end+0xfffe0db0>
   47f20:	000d883a 	mov	r6,zero
   47f24:	003fdf06 	br	47ea4 <__alt_data_end+0xfffe0da4>
   47f28:	90a4983a 	sll	r18,r18,r2
   47f2c:	0005883a 	mov	r2,zero
   47f30:	003ff906 	br	47f18 <__alt_data_end+0xfffe0e18>
   47f34:	1144983a 	sll	r2,r2,r5
   47f38:	003fdd06 	br	47eb0 <__alt_data_end+0xfffe0db0>

00047f3c <__d2b>:
   47f3c:	defff804 	addi	sp,sp,-32
   47f40:	dc000215 	stw	r16,8(sp)
   47f44:	3021883a 	mov	r16,r6
   47f48:	dc400315 	stw	r17,12(sp)
   47f4c:	8022907a 	slli	r17,r16,1
   47f50:	dd000615 	stw	r20,24(sp)
   47f54:	2829883a 	mov	r20,r5
   47f58:	01400044 	movi	r5,1
   47f5c:	dcc00515 	stw	r19,20(sp)
   47f60:	dc800415 	stw	r18,16(sp)
   47f64:	dfc00715 	stw	ra,28(sp)
   47f68:	3825883a 	mov	r18,r7
   47f6c:	8822d57a 	srli	r17,r17,21
   47f70:	00472a80 	call	472a8 <_Balloc>
   47f74:	1027883a 	mov	r19,r2
   47f78:	00800434 	movhi	r2,16
   47f7c:	10bfffc4 	addi	r2,r2,-1
   47f80:	808c703a 	and	r6,r16,r2
   47f84:	88000126 	beq	r17,zero,47f8c <__d2b+0x50>
   47f88:	31800434 	orhi	r6,r6,16
   47f8c:	d9800015 	stw	r6,0(sp)
   47f90:	a0002426 	beq	r20,zero,48024 <__d2b+0xe8>
   47f94:	d9000104 	addi	r4,sp,4
   47f98:	dd000115 	stw	r20,4(sp)
   47f9c:	00476040 	call	47604 <__lo0bits>
   47fa0:	d8c00017 	ldw	r3,0(sp)
   47fa4:	10002f1e 	bne	r2,zero,48064 <__d2b+0x128>
   47fa8:	d9000117 	ldw	r4,4(sp)
   47fac:	99000515 	stw	r4,20(r19)
   47fb0:	1821003a 	cmpeq	r16,r3,zero
   47fb4:	01000084 	movi	r4,2
   47fb8:	2421c83a 	sub	r16,r4,r16
   47fbc:	98c00615 	stw	r3,24(r19)
   47fc0:	9c000415 	stw	r16,16(r19)
   47fc4:	88001f1e 	bne	r17,zero,48044 <__d2b+0x108>
   47fc8:	10bef384 	addi	r2,r2,-1074
   47fcc:	90800015 	stw	r2,0(r18)
   47fd0:	00900034 	movhi	r2,16384
   47fd4:	10bfffc4 	addi	r2,r2,-1
   47fd8:	8085883a 	add	r2,r16,r2
   47fdc:	1085883a 	add	r2,r2,r2
   47fe0:	1085883a 	add	r2,r2,r2
   47fe4:	9885883a 	add	r2,r19,r2
   47fe8:	11000517 	ldw	r4,20(r2)
   47fec:	8020917a 	slli	r16,r16,5
   47ff0:	004759c0 	call	4759c <__hi0bits>
   47ff4:	d8c00817 	ldw	r3,32(sp)
   47ff8:	8085c83a 	sub	r2,r16,r2
   47ffc:	18800015 	stw	r2,0(r3)
   48000:	9805883a 	mov	r2,r19
   48004:	dfc00717 	ldw	ra,28(sp)
   48008:	dd000617 	ldw	r20,24(sp)
   4800c:	dcc00517 	ldw	r19,20(sp)
   48010:	dc800417 	ldw	r18,16(sp)
   48014:	dc400317 	ldw	r17,12(sp)
   48018:	dc000217 	ldw	r16,8(sp)
   4801c:	dec00804 	addi	sp,sp,32
   48020:	f800283a 	ret
   48024:	d809883a 	mov	r4,sp
   48028:	00476040 	call	47604 <__lo0bits>
   4802c:	d8c00017 	ldw	r3,0(sp)
   48030:	04000044 	movi	r16,1
   48034:	9c000415 	stw	r16,16(r19)
   48038:	98c00515 	stw	r3,20(r19)
   4803c:	10800804 	addi	r2,r2,32
   48040:	883fe126 	beq	r17,zero,47fc8 <__alt_data_end+0xfffe0ec8>
   48044:	00c00d44 	movi	r3,53
   48048:	8c7ef344 	addi	r17,r17,-1075
   4804c:	88a3883a 	add	r17,r17,r2
   48050:	1885c83a 	sub	r2,r3,r2
   48054:	d8c00817 	ldw	r3,32(sp)
   48058:	94400015 	stw	r17,0(r18)
   4805c:	18800015 	stw	r2,0(r3)
   48060:	003fe706 	br	48000 <__alt_data_end+0xfffe0f00>
   48064:	01000804 	movi	r4,32
   48068:	2089c83a 	sub	r4,r4,r2
   4806c:	1908983a 	sll	r4,r3,r4
   48070:	d9400117 	ldw	r5,4(sp)
   48074:	1886d83a 	srl	r3,r3,r2
   48078:	2148b03a 	or	r4,r4,r5
   4807c:	99000515 	stw	r4,20(r19)
   48080:	d8c00015 	stw	r3,0(sp)
   48084:	003fca06 	br	47fb0 <__alt_data_end+0xfffe0eb0>

00048088 <__ratio>:
   48088:	defff904 	addi	sp,sp,-28
   4808c:	dc400315 	stw	r17,12(sp)
   48090:	2823883a 	mov	r17,r5
   48094:	d9400104 	addi	r5,sp,4
   48098:	dfc00615 	stw	ra,24(sp)
   4809c:	dcc00515 	stw	r19,20(sp)
   480a0:	dc800415 	stw	r18,16(sp)
   480a4:	2027883a 	mov	r19,r4
   480a8:	dc000215 	stw	r16,8(sp)
   480ac:	0047e300 	call	47e30 <__b2d>
   480b0:	d80b883a 	mov	r5,sp
   480b4:	8809883a 	mov	r4,r17
   480b8:	1025883a 	mov	r18,r2
   480bc:	1821883a 	mov	r16,r3
   480c0:	0047e300 	call	47e30 <__b2d>
   480c4:	8a000417 	ldw	r8,16(r17)
   480c8:	99000417 	ldw	r4,16(r19)
   480cc:	d9400117 	ldw	r5,4(sp)
   480d0:	2209c83a 	sub	r4,r4,r8
   480d4:	2010917a 	slli	r8,r4,5
   480d8:	d9000017 	ldw	r4,0(sp)
   480dc:	2909c83a 	sub	r4,r5,r4
   480e0:	4109883a 	add	r4,r8,r4
   480e4:	01000e0e 	bge	zero,r4,48120 <__ratio+0x98>
   480e8:	2008953a 	slli	r4,r4,20
   480ec:	2421883a 	add	r16,r4,r16
   480f0:	100d883a 	mov	r6,r2
   480f4:	180f883a 	mov	r7,r3
   480f8:	9009883a 	mov	r4,r18
   480fc:	800b883a 	mov	r5,r16
   48100:	004bf740 	call	4bf74 <__divdf3>
   48104:	dfc00617 	ldw	ra,24(sp)
   48108:	dcc00517 	ldw	r19,20(sp)
   4810c:	dc800417 	ldw	r18,16(sp)
   48110:	dc400317 	ldw	r17,12(sp)
   48114:	dc000217 	ldw	r16,8(sp)
   48118:	dec00704 	addi	sp,sp,28
   4811c:	f800283a 	ret
   48120:	2008953a 	slli	r4,r4,20
   48124:	1907c83a 	sub	r3,r3,r4
   48128:	003ff106 	br	480f0 <__alt_data_end+0xfffe0ff0>

0004812c <_mprec_log10>:
   4812c:	defffe04 	addi	sp,sp,-8
   48130:	dc000015 	stw	r16,0(sp)
   48134:	dfc00115 	stw	ra,4(sp)
   48138:	008005c4 	movi	r2,23
   4813c:	2021883a 	mov	r16,r4
   48140:	11000d0e 	bge	r2,r4,48178 <_mprec_log10+0x4c>
   48144:	0005883a 	mov	r2,zero
   48148:	00cffc34 	movhi	r3,16368
   4814c:	843fffc4 	addi	r16,r16,-1
   48150:	000d883a 	mov	r6,zero
   48154:	01d00934 	movhi	r7,16420
   48158:	1009883a 	mov	r4,r2
   4815c:	180b883a 	mov	r5,r3
   48160:	004cab40 	call	4cab4 <__muldf3>
   48164:	803ff91e 	bne	r16,zero,4814c <__alt_data_end+0xfffe104c>
   48168:	dfc00117 	ldw	ra,4(sp)
   4816c:	dc000017 	ldw	r16,0(sp)
   48170:	dec00204 	addi	sp,sp,8
   48174:	f800283a 	ret
   48178:	202090fa 	slli	r16,r4,3
   4817c:	00800174 	movhi	r2,5
   48180:	1089f504 	addi	r2,r2,10196
   48184:	1421883a 	add	r16,r2,r16
   48188:	80800017 	ldw	r2,0(r16)
   4818c:	80c00117 	ldw	r3,4(r16)
   48190:	dfc00117 	ldw	ra,4(sp)
   48194:	dc000017 	ldw	r16,0(sp)
   48198:	dec00204 	addi	sp,sp,8
   4819c:	f800283a 	ret

000481a0 <__copybits>:
   481a0:	297fffc4 	addi	r5,r5,-1
   481a4:	280fd17a 	srai	r7,r5,5
   481a8:	30c00417 	ldw	r3,16(r6)
   481ac:	30800504 	addi	r2,r6,20
   481b0:	39c00044 	addi	r7,r7,1
   481b4:	18c7883a 	add	r3,r3,r3
   481b8:	39cf883a 	add	r7,r7,r7
   481bc:	18c7883a 	add	r3,r3,r3
   481c0:	39cf883a 	add	r7,r7,r7
   481c4:	10c7883a 	add	r3,r2,r3
   481c8:	21cf883a 	add	r7,r4,r7
   481cc:	10c00d2e 	bgeu	r2,r3,48204 <__copybits+0x64>
   481d0:	200b883a 	mov	r5,r4
   481d4:	12000017 	ldw	r8,0(r2)
   481d8:	29400104 	addi	r5,r5,4
   481dc:	10800104 	addi	r2,r2,4
   481e0:	2a3fff15 	stw	r8,-4(r5)
   481e4:	10fffb36 	bltu	r2,r3,481d4 <__alt_data_end+0xfffe10d4>
   481e8:	1985c83a 	sub	r2,r3,r6
   481ec:	10bffac4 	addi	r2,r2,-21
   481f0:	1004d0ba 	srli	r2,r2,2
   481f4:	10800044 	addi	r2,r2,1
   481f8:	1085883a 	add	r2,r2,r2
   481fc:	1085883a 	add	r2,r2,r2
   48200:	2089883a 	add	r4,r4,r2
   48204:	21c0032e 	bgeu	r4,r7,48214 <__copybits+0x74>
   48208:	20000015 	stw	zero,0(r4)
   4820c:	21000104 	addi	r4,r4,4
   48210:	21fffd36 	bltu	r4,r7,48208 <__alt_data_end+0xfffe1108>
   48214:	f800283a 	ret

00048218 <__any_on>:
   48218:	20c00417 	ldw	r3,16(r4)
   4821c:	2805d17a 	srai	r2,r5,5
   48220:	21000504 	addi	r4,r4,20
   48224:	18800d0e 	bge	r3,r2,4825c <__any_on+0x44>
   48228:	18c7883a 	add	r3,r3,r3
   4822c:	18c7883a 	add	r3,r3,r3
   48230:	20c7883a 	add	r3,r4,r3
   48234:	20c0192e 	bgeu	r4,r3,4829c <__any_on+0x84>
   48238:	18bfff17 	ldw	r2,-4(r3)
   4823c:	18ffff04 	addi	r3,r3,-4
   48240:	1000041e 	bne	r2,zero,48254 <__any_on+0x3c>
   48244:	20c0142e 	bgeu	r4,r3,48298 <__any_on+0x80>
   48248:	18ffff04 	addi	r3,r3,-4
   4824c:	19400017 	ldw	r5,0(r3)
   48250:	283ffc26 	beq	r5,zero,48244 <__alt_data_end+0xfffe1144>
   48254:	00800044 	movi	r2,1
   48258:	f800283a 	ret
   4825c:	10c00a0e 	bge	r2,r3,48288 <__any_on+0x70>
   48260:	1085883a 	add	r2,r2,r2
   48264:	1085883a 	add	r2,r2,r2
   48268:	294007cc 	andi	r5,r5,31
   4826c:	2087883a 	add	r3,r4,r2
   48270:	283ff026 	beq	r5,zero,48234 <__alt_data_end+0xfffe1134>
   48274:	19800017 	ldw	r6,0(r3)
   48278:	3144d83a 	srl	r2,r6,r5
   4827c:	114a983a 	sll	r5,r2,r5
   48280:	317ff41e 	bne	r6,r5,48254 <__alt_data_end+0xfffe1154>
   48284:	003feb06 	br	48234 <__alt_data_end+0xfffe1134>
   48288:	1085883a 	add	r2,r2,r2
   4828c:	1085883a 	add	r2,r2,r2
   48290:	2087883a 	add	r3,r4,r2
   48294:	003fe706 	br	48234 <__alt_data_end+0xfffe1134>
   48298:	f800283a 	ret
   4829c:	0005883a 	mov	r2,zero
   482a0:	f800283a 	ret

000482a4 <_realloc_r>:
   482a4:	defff604 	addi	sp,sp,-40
   482a8:	dc800215 	stw	r18,8(sp)
   482ac:	dfc00915 	stw	ra,36(sp)
   482b0:	df000815 	stw	fp,32(sp)
   482b4:	ddc00715 	stw	r23,28(sp)
   482b8:	dd800615 	stw	r22,24(sp)
   482bc:	dd400515 	stw	r21,20(sp)
   482c0:	dd000415 	stw	r20,16(sp)
   482c4:	dcc00315 	stw	r19,12(sp)
   482c8:	dc400115 	stw	r17,4(sp)
   482cc:	dc000015 	stw	r16,0(sp)
   482d0:	3025883a 	mov	r18,r6
   482d4:	2800b726 	beq	r5,zero,485b4 <_realloc_r+0x310>
   482d8:	282b883a 	mov	r21,r5
   482dc:	2029883a 	mov	r20,r4
   482e0:	004e2980 	call	4e298 <__malloc_lock>
   482e4:	a8bfff17 	ldw	r2,-4(r21)
   482e8:	043fff04 	movi	r16,-4
   482ec:	90c002c4 	addi	r3,r18,11
   482f0:	01000584 	movi	r4,22
   482f4:	acfffe04 	addi	r19,r21,-8
   482f8:	1420703a 	and	r16,r2,r16
   482fc:	20c0332e 	bgeu	r4,r3,483cc <_realloc_r+0x128>
   48300:	047ffe04 	movi	r17,-8
   48304:	1c62703a 	and	r17,r3,r17
   48308:	8807883a 	mov	r3,r17
   4830c:	88005816 	blt	r17,zero,48470 <_realloc_r+0x1cc>
   48310:	8c805736 	bltu	r17,r18,48470 <_realloc_r+0x1cc>
   48314:	80c0300e 	bge	r16,r3,483d8 <_realloc_r+0x134>
   48318:	07000174 	movhi	fp,5
   4831c:	e70b6d04 	addi	fp,fp,11700
   48320:	e1c00217 	ldw	r7,8(fp)
   48324:	9c09883a 	add	r4,r19,r16
   48328:	22000117 	ldw	r8,4(r4)
   4832c:	21c06326 	beq	r4,r7,484bc <_realloc_r+0x218>
   48330:	017fff84 	movi	r5,-2
   48334:	414a703a 	and	r5,r8,r5
   48338:	214b883a 	add	r5,r4,r5
   4833c:	29800117 	ldw	r6,4(r5)
   48340:	3180004c 	andi	r6,r6,1
   48344:	30003f26 	beq	r6,zero,48444 <_realloc_r+0x1a0>
   48348:	1080004c 	andi	r2,r2,1
   4834c:	10008326 	beq	r2,zero,4855c <_realloc_r+0x2b8>
   48350:	900b883a 	mov	r5,r18
   48354:	a009883a 	mov	r4,r20
   48358:	00465ec0 	call	465ec <_malloc_r>
   4835c:	1025883a 	mov	r18,r2
   48360:	10011e26 	beq	r2,zero,487dc <_realloc_r+0x538>
   48364:	a93fff17 	ldw	r4,-4(r21)
   48368:	10fffe04 	addi	r3,r2,-8
   4836c:	00bfff84 	movi	r2,-2
   48370:	2084703a 	and	r2,r4,r2
   48374:	9885883a 	add	r2,r19,r2
   48378:	1880ee26 	beq	r3,r2,48734 <_realloc_r+0x490>
   4837c:	81bfff04 	addi	r6,r16,-4
   48380:	00800904 	movi	r2,36
   48384:	1180b836 	bltu	r2,r6,48668 <_realloc_r+0x3c4>
   48388:	00c004c4 	movi	r3,19
   4838c:	19809636 	bltu	r3,r6,485e8 <_realloc_r+0x344>
   48390:	9005883a 	mov	r2,r18
   48394:	a807883a 	mov	r3,r21
   48398:	19000017 	ldw	r4,0(r3)
   4839c:	11000015 	stw	r4,0(r2)
   483a0:	19000117 	ldw	r4,4(r3)
   483a4:	11000115 	stw	r4,4(r2)
   483a8:	18c00217 	ldw	r3,8(r3)
   483ac:	10c00215 	stw	r3,8(r2)
   483b0:	a80b883a 	mov	r5,r21
   483b4:	a009883a 	mov	r4,r20
   483b8:	0045a000 	call	45a00 <_free_r>
   483bc:	a009883a 	mov	r4,r20
   483c0:	004e2bc0 	call	4e2bc <__malloc_unlock>
   483c4:	9005883a 	mov	r2,r18
   483c8:	00001206 	br	48414 <_realloc_r+0x170>
   483cc:	00c00404 	movi	r3,16
   483d0:	1823883a 	mov	r17,r3
   483d4:	003fce06 	br	48310 <__alt_data_end+0xfffe1210>
   483d8:	a825883a 	mov	r18,r21
   483dc:	8445c83a 	sub	r2,r16,r17
   483e0:	00c003c4 	movi	r3,15
   483e4:	18802636 	bltu	r3,r2,48480 <_realloc_r+0x1dc>
   483e8:	99800117 	ldw	r6,4(r19)
   483ec:	9c07883a 	add	r3,r19,r16
   483f0:	3180004c 	andi	r6,r6,1
   483f4:	3420b03a 	or	r16,r6,r16
   483f8:	9c000115 	stw	r16,4(r19)
   483fc:	18800117 	ldw	r2,4(r3)
   48400:	10800054 	ori	r2,r2,1
   48404:	18800115 	stw	r2,4(r3)
   48408:	a009883a 	mov	r4,r20
   4840c:	004e2bc0 	call	4e2bc <__malloc_unlock>
   48410:	9005883a 	mov	r2,r18
   48414:	dfc00917 	ldw	ra,36(sp)
   48418:	df000817 	ldw	fp,32(sp)
   4841c:	ddc00717 	ldw	r23,28(sp)
   48420:	dd800617 	ldw	r22,24(sp)
   48424:	dd400517 	ldw	r21,20(sp)
   48428:	dd000417 	ldw	r20,16(sp)
   4842c:	dcc00317 	ldw	r19,12(sp)
   48430:	dc800217 	ldw	r18,8(sp)
   48434:	dc400117 	ldw	r17,4(sp)
   48438:	dc000017 	ldw	r16,0(sp)
   4843c:	dec00a04 	addi	sp,sp,40
   48440:	f800283a 	ret
   48444:	017fff04 	movi	r5,-4
   48448:	414a703a 	and	r5,r8,r5
   4844c:	814d883a 	add	r6,r16,r5
   48450:	30c01f16 	blt	r6,r3,484d0 <_realloc_r+0x22c>
   48454:	20800317 	ldw	r2,12(r4)
   48458:	20c00217 	ldw	r3,8(r4)
   4845c:	a825883a 	mov	r18,r21
   48460:	3021883a 	mov	r16,r6
   48464:	18800315 	stw	r2,12(r3)
   48468:	10c00215 	stw	r3,8(r2)
   4846c:	003fdb06 	br	483dc <__alt_data_end+0xfffe12dc>
   48470:	00800304 	movi	r2,12
   48474:	a0800015 	stw	r2,0(r20)
   48478:	0005883a 	mov	r2,zero
   4847c:	003fe506 	br	48414 <__alt_data_end+0xfffe1314>
   48480:	98c00117 	ldw	r3,4(r19)
   48484:	9c4b883a 	add	r5,r19,r17
   48488:	11000054 	ori	r4,r2,1
   4848c:	18c0004c 	andi	r3,r3,1
   48490:	1c62b03a 	or	r17,r3,r17
   48494:	9c400115 	stw	r17,4(r19)
   48498:	29000115 	stw	r4,4(r5)
   4849c:	2885883a 	add	r2,r5,r2
   484a0:	10c00117 	ldw	r3,4(r2)
   484a4:	29400204 	addi	r5,r5,8
   484a8:	a009883a 	mov	r4,r20
   484ac:	18c00054 	ori	r3,r3,1
   484b0:	10c00115 	stw	r3,4(r2)
   484b4:	0045a000 	call	45a00 <_free_r>
   484b8:	003fd306 	br	48408 <__alt_data_end+0xfffe1308>
   484bc:	017fff04 	movi	r5,-4
   484c0:	414a703a 	and	r5,r8,r5
   484c4:	89800404 	addi	r6,r17,16
   484c8:	8151883a 	add	r8,r16,r5
   484cc:	4180590e 	bge	r8,r6,48634 <_realloc_r+0x390>
   484d0:	1080004c 	andi	r2,r2,1
   484d4:	103f9e1e 	bne	r2,zero,48350 <__alt_data_end+0xfffe1250>
   484d8:	adbffe17 	ldw	r22,-8(r21)
   484dc:	00bfff04 	movi	r2,-4
   484e0:	9dadc83a 	sub	r22,r19,r22
   484e4:	b1800117 	ldw	r6,4(r22)
   484e8:	3084703a 	and	r2,r6,r2
   484ec:	20002026 	beq	r4,zero,48570 <_realloc_r+0x2cc>
   484f0:	80af883a 	add	r23,r16,r2
   484f4:	b96f883a 	add	r23,r23,r5
   484f8:	21c05f26 	beq	r4,r7,48678 <_realloc_r+0x3d4>
   484fc:	b8c01c16 	blt	r23,r3,48570 <_realloc_r+0x2cc>
   48500:	20800317 	ldw	r2,12(r4)
   48504:	20c00217 	ldw	r3,8(r4)
   48508:	81bfff04 	addi	r6,r16,-4
   4850c:	01000904 	movi	r4,36
   48510:	18800315 	stw	r2,12(r3)
   48514:	10c00215 	stw	r3,8(r2)
   48518:	b0c00217 	ldw	r3,8(r22)
   4851c:	b0800317 	ldw	r2,12(r22)
   48520:	b4800204 	addi	r18,r22,8
   48524:	18800315 	stw	r2,12(r3)
   48528:	10c00215 	stw	r3,8(r2)
   4852c:	21801b36 	bltu	r4,r6,4859c <_realloc_r+0x2f8>
   48530:	008004c4 	movi	r2,19
   48534:	1180352e 	bgeu	r2,r6,4860c <_realloc_r+0x368>
   48538:	a8800017 	ldw	r2,0(r21)
   4853c:	b0800215 	stw	r2,8(r22)
   48540:	a8800117 	ldw	r2,4(r21)
   48544:	b0800315 	stw	r2,12(r22)
   48548:	008006c4 	movi	r2,27
   4854c:	11807f36 	bltu	r2,r6,4874c <_realloc_r+0x4a8>
   48550:	b0800404 	addi	r2,r22,16
   48554:	ad400204 	addi	r21,r21,8
   48558:	00002d06 	br	48610 <_realloc_r+0x36c>
   4855c:	adbffe17 	ldw	r22,-8(r21)
   48560:	00bfff04 	movi	r2,-4
   48564:	9dadc83a 	sub	r22,r19,r22
   48568:	b1000117 	ldw	r4,4(r22)
   4856c:	2084703a 	and	r2,r4,r2
   48570:	b03f7726 	beq	r22,zero,48350 <__alt_data_end+0xfffe1250>
   48574:	80af883a 	add	r23,r16,r2
   48578:	b8ff7516 	blt	r23,r3,48350 <__alt_data_end+0xfffe1250>
   4857c:	b0800317 	ldw	r2,12(r22)
   48580:	b0c00217 	ldw	r3,8(r22)
   48584:	81bfff04 	addi	r6,r16,-4
   48588:	01000904 	movi	r4,36
   4858c:	18800315 	stw	r2,12(r3)
   48590:	10c00215 	stw	r3,8(r2)
   48594:	b4800204 	addi	r18,r22,8
   48598:	21bfe52e 	bgeu	r4,r6,48530 <__alt_data_end+0xfffe1430>
   4859c:	a80b883a 	mov	r5,r21
   485a0:	9009883a 	mov	r4,r18
   485a4:	00470240 	call	47024 <memmove>
   485a8:	b821883a 	mov	r16,r23
   485ac:	b027883a 	mov	r19,r22
   485b0:	003f8a06 	br	483dc <__alt_data_end+0xfffe12dc>
   485b4:	300b883a 	mov	r5,r6
   485b8:	dfc00917 	ldw	ra,36(sp)
   485bc:	df000817 	ldw	fp,32(sp)
   485c0:	ddc00717 	ldw	r23,28(sp)
   485c4:	dd800617 	ldw	r22,24(sp)
   485c8:	dd400517 	ldw	r21,20(sp)
   485cc:	dd000417 	ldw	r20,16(sp)
   485d0:	dcc00317 	ldw	r19,12(sp)
   485d4:	dc800217 	ldw	r18,8(sp)
   485d8:	dc400117 	ldw	r17,4(sp)
   485dc:	dc000017 	ldw	r16,0(sp)
   485e0:	dec00a04 	addi	sp,sp,40
   485e4:	00465ec1 	jmpi	465ec <_malloc_r>
   485e8:	a8c00017 	ldw	r3,0(r21)
   485ec:	90c00015 	stw	r3,0(r18)
   485f0:	a8c00117 	ldw	r3,4(r21)
   485f4:	90c00115 	stw	r3,4(r18)
   485f8:	00c006c4 	movi	r3,27
   485fc:	19804536 	bltu	r3,r6,48714 <_realloc_r+0x470>
   48600:	90800204 	addi	r2,r18,8
   48604:	a8c00204 	addi	r3,r21,8
   48608:	003f6306 	br	48398 <__alt_data_end+0xfffe1298>
   4860c:	9005883a 	mov	r2,r18
   48610:	a8c00017 	ldw	r3,0(r21)
   48614:	b821883a 	mov	r16,r23
   48618:	b027883a 	mov	r19,r22
   4861c:	10c00015 	stw	r3,0(r2)
   48620:	a8c00117 	ldw	r3,4(r21)
   48624:	10c00115 	stw	r3,4(r2)
   48628:	a8c00217 	ldw	r3,8(r21)
   4862c:	10c00215 	stw	r3,8(r2)
   48630:	003f6a06 	br	483dc <__alt_data_end+0xfffe12dc>
   48634:	9c67883a 	add	r19,r19,r17
   48638:	4445c83a 	sub	r2,r8,r17
   4863c:	e4c00215 	stw	r19,8(fp)
   48640:	10800054 	ori	r2,r2,1
   48644:	98800115 	stw	r2,4(r19)
   48648:	a8bfff17 	ldw	r2,-4(r21)
   4864c:	a009883a 	mov	r4,r20
   48650:	1080004c 	andi	r2,r2,1
   48654:	1462b03a 	or	r17,r2,r17
   48658:	ac7fff15 	stw	r17,-4(r21)
   4865c:	004e2bc0 	call	4e2bc <__malloc_unlock>
   48660:	a805883a 	mov	r2,r21
   48664:	003f6b06 	br	48414 <__alt_data_end+0xfffe1314>
   48668:	a80b883a 	mov	r5,r21
   4866c:	9009883a 	mov	r4,r18
   48670:	00470240 	call	47024 <memmove>
   48674:	003f4e06 	br	483b0 <__alt_data_end+0xfffe12b0>
   48678:	89000404 	addi	r4,r17,16
   4867c:	b93fbc16 	blt	r23,r4,48570 <__alt_data_end+0xfffe1470>
   48680:	b0800317 	ldw	r2,12(r22)
   48684:	b0c00217 	ldw	r3,8(r22)
   48688:	81bfff04 	addi	r6,r16,-4
   4868c:	01000904 	movi	r4,36
   48690:	18800315 	stw	r2,12(r3)
   48694:	10c00215 	stw	r3,8(r2)
   48698:	b4800204 	addi	r18,r22,8
   4869c:	21804336 	bltu	r4,r6,487ac <_realloc_r+0x508>
   486a0:	008004c4 	movi	r2,19
   486a4:	11803f2e 	bgeu	r2,r6,487a4 <_realloc_r+0x500>
   486a8:	a8800017 	ldw	r2,0(r21)
   486ac:	b0800215 	stw	r2,8(r22)
   486b0:	a8800117 	ldw	r2,4(r21)
   486b4:	b0800315 	stw	r2,12(r22)
   486b8:	008006c4 	movi	r2,27
   486bc:	11803f36 	bltu	r2,r6,487bc <_realloc_r+0x518>
   486c0:	b0800404 	addi	r2,r22,16
   486c4:	ad400204 	addi	r21,r21,8
   486c8:	a8c00017 	ldw	r3,0(r21)
   486cc:	10c00015 	stw	r3,0(r2)
   486d0:	a8c00117 	ldw	r3,4(r21)
   486d4:	10c00115 	stw	r3,4(r2)
   486d8:	a8c00217 	ldw	r3,8(r21)
   486dc:	10c00215 	stw	r3,8(r2)
   486e0:	b447883a 	add	r3,r22,r17
   486e4:	bc45c83a 	sub	r2,r23,r17
   486e8:	e0c00215 	stw	r3,8(fp)
   486ec:	10800054 	ori	r2,r2,1
   486f0:	18800115 	stw	r2,4(r3)
   486f4:	b0800117 	ldw	r2,4(r22)
   486f8:	a009883a 	mov	r4,r20
   486fc:	1080004c 	andi	r2,r2,1
   48700:	1462b03a 	or	r17,r2,r17
   48704:	b4400115 	stw	r17,4(r22)
   48708:	004e2bc0 	call	4e2bc <__malloc_unlock>
   4870c:	9005883a 	mov	r2,r18
   48710:	003f4006 	br	48414 <__alt_data_end+0xfffe1314>
   48714:	a8c00217 	ldw	r3,8(r21)
   48718:	90c00215 	stw	r3,8(r18)
   4871c:	a8c00317 	ldw	r3,12(r21)
   48720:	90c00315 	stw	r3,12(r18)
   48724:	30801126 	beq	r6,r2,4876c <_realloc_r+0x4c8>
   48728:	90800404 	addi	r2,r18,16
   4872c:	a8c00404 	addi	r3,r21,16
   48730:	003f1906 	br	48398 <__alt_data_end+0xfffe1298>
   48734:	90ffff17 	ldw	r3,-4(r18)
   48738:	00bfff04 	movi	r2,-4
   4873c:	a825883a 	mov	r18,r21
   48740:	1884703a 	and	r2,r3,r2
   48744:	80a1883a 	add	r16,r16,r2
   48748:	003f2406 	br	483dc <__alt_data_end+0xfffe12dc>
   4874c:	a8800217 	ldw	r2,8(r21)
   48750:	b0800415 	stw	r2,16(r22)
   48754:	a8800317 	ldw	r2,12(r21)
   48758:	b0800515 	stw	r2,20(r22)
   4875c:	31000a26 	beq	r6,r4,48788 <_realloc_r+0x4e4>
   48760:	b0800604 	addi	r2,r22,24
   48764:	ad400404 	addi	r21,r21,16
   48768:	003fa906 	br	48610 <__alt_data_end+0xfffe1510>
   4876c:	a9000417 	ldw	r4,16(r21)
   48770:	90800604 	addi	r2,r18,24
   48774:	a8c00604 	addi	r3,r21,24
   48778:	91000415 	stw	r4,16(r18)
   4877c:	a9000517 	ldw	r4,20(r21)
   48780:	91000515 	stw	r4,20(r18)
   48784:	003f0406 	br	48398 <__alt_data_end+0xfffe1298>
   48788:	a8c00417 	ldw	r3,16(r21)
   4878c:	ad400604 	addi	r21,r21,24
   48790:	b0800804 	addi	r2,r22,32
   48794:	b0c00615 	stw	r3,24(r22)
   48798:	a8ffff17 	ldw	r3,-4(r21)
   4879c:	b0c00715 	stw	r3,28(r22)
   487a0:	003f9b06 	br	48610 <__alt_data_end+0xfffe1510>
   487a4:	9005883a 	mov	r2,r18
   487a8:	003fc706 	br	486c8 <__alt_data_end+0xfffe15c8>
   487ac:	a80b883a 	mov	r5,r21
   487b0:	9009883a 	mov	r4,r18
   487b4:	00470240 	call	47024 <memmove>
   487b8:	003fc906 	br	486e0 <__alt_data_end+0xfffe15e0>
   487bc:	a8800217 	ldw	r2,8(r21)
   487c0:	b0800415 	stw	r2,16(r22)
   487c4:	a8800317 	ldw	r2,12(r21)
   487c8:	b0800515 	stw	r2,20(r22)
   487cc:	31000726 	beq	r6,r4,487ec <_realloc_r+0x548>
   487d0:	b0800604 	addi	r2,r22,24
   487d4:	ad400404 	addi	r21,r21,16
   487d8:	003fbb06 	br	486c8 <__alt_data_end+0xfffe15c8>
   487dc:	a009883a 	mov	r4,r20
   487e0:	004e2bc0 	call	4e2bc <__malloc_unlock>
   487e4:	0005883a 	mov	r2,zero
   487e8:	003f0a06 	br	48414 <__alt_data_end+0xfffe1314>
   487ec:	a8c00417 	ldw	r3,16(r21)
   487f0:	ad400604 	addi	r21,r21,24
   487f4:	b0800804 	addi	r2,r22,32
   487f8:	b0c00615 	stw	r3,24(r22)
   487fc:	a8ffff17 	ldw	r3,-4(r21)
   48800:	b0c00715 	stw	r3,28(r22)
   48804:	003fb006 	br	486c8 <__alt_data_end+0xfffe15c8>

00048808 <__fpclassifyd>:
   48808:	00a00034 	movhi	r2,32768
   4880c:	10bfffc4 	addi	r2,r2,-1
   48810:	2884703a 	and	r2,r5,r2
   48814:	10000726 	beq	r2,zero,48834 <__fpclassifyd+0x2c>
   48818:	00fffc34 	movhi	r3,65520
   4881c:	019ff834 	movhi	r6,32736
   48820:	28c7883a 	add	r3,r5,r3
   48824:	31bfffc4 	addi	r6,r6,-1
   48828:	30c00536 	bltu	r6,r3,48840 <__fpclassifyd+0x38>
   4882c:	00800104 	movi	r2,4
   48830:	f800283a 	ret
   48834:	2000021e 	bne	r4,zero,48840 <__fpclassifyd+0x38>
   48838:	00800084 	movi	r2,2
   4883c:	f800283a 	ret
   48840:	00dffc34 	movhi	r3,32752
   48844:	019ff834 	movhi	r6,32736
   48848:	28cb883a 	add	r5,r5,r3
   4884c:	31bfffc4 	addi	r6,r6,-1
   48850:	317ff62e 	bgeu	r6,r5,4882c <__alt_data_end+0xfffe172c>
   48854:	01400434 	movhi	r5,16
   48858:	297fffc4 	addi	r5,r5,-1
   4885c:	28800236 	bltu	r5,r2,48868 <__fpclassifyd+0x60>
   48860:	008000c4 	movi	r2,3
   48864:	f800283a 	ret
   48868:	10c00226 	beq	r2,r3,48874 <__fpclassifyd+0x6c>
   4886c:	0005883a 	mov	r2,zero
   48870:	f800283a 	ret
   48874:	2005003a 	cmpeq	r2,r4,zero
   48878:	f800283a 	ret

0004887c <_sbrk_r>:
   4887c:	defffd04 	addi	sp,sp,-12
   48880:	dc000015 	stw	r16,0(sp)
   48884:	04000174 	movhi	r16,5
   48888:	dc400115 	stw	r17,4(sp)
   4888c:	8417e204 	addi	r16,r16,24456
   48890:	2023883a 	mov	r17,r4
   48894:	2809883a 	mov	r4,r5
   48898:	dfc00215 	stw	ra,8(sp)
   4889c:	80000015 	stw	zero,0(r16)
   488a0:	004e4900 	call	4e490 <sbrk>
   488a4:	00ffffc4 	movi	r3,-1
   488a8:	10c00526 	beq	r2,r3,488c0 <_sbrk_r+0x44>
   488ac:	dfc00217 	ldw	ra,8(sp)
   488b0:	dc400117 	ldw	r17,4(sp)
   488b4:	dc000017 	ldw	r16,0(sp)
   488b8:	dec00304 	addi	sp,sp,12
   488bc:	f800283a 	ret
   488c0:	80c00017 	ldw	r3,0(r16)
   488c4:	183ff926 	beq	r3,zero,488ac <__alt_data_end+0xfffe17ac>
   488c8:	88c00015 	stw	r3,0(r17)
   488cc:	003ff706 	br	488ac <__alt_data_end+0xfffe17ac>

000488d0 <__sread>:
   488d0:	defffe04 	addi	sp,sp,-8
   488d4:	dc000015 	stw	r16,0(sp)
   488d8:	2821883a 	mov	r16,r5
   488dc:	2940038f 	ldh	r5,14(r5)
   488e0:	dfc00115 	stw	ra,4(sp)
   488e4:	004a6c40 	call	4a6c4 <_read_r>
   488e8:	10000716 	blt	r2,zero,48908 <__sread+0x38>
   488ec:	80c01417 	ldw	r3,80(r16)
   488f0:	1887883a 	add	r3,r3,r2
   488f4:	80c01415 	stw	r3,80(r16)
   488f8:	dfc00117 	ldw	ra,4(sp)
   488fc:	dc000017 	ldw	r16,0(sp)
   48900:	dec00204 	addi	sp,sp,8
   48904:	f800283a 	ret
   48908:	80c0030b 	ldhu	r3,12(r16)
   4890c:	18fbffcc 	andi	r3,r3,61439
   48910:	80c0030d 	sth	r3,12(r16)
   48914:	dfc00117 	ldw	ra,4(sp)
   48918:	dc000017 	ldw	r16,0(sp)
   4891c:	dec00204 	addi	sp,sp,8
   48920:	f800283a 	ret

00048924 <__seofread>:
   48924:	0005883a 	mov	r2,zero
   48928:	f800283a 	ret

0004892c <__swrite>:
   4892c:	2880030b 	ldhu	r2,12(r5)
   48930:	defffb04 	addi	sp,sp,-20
   48934:	dcc00315 	stw	r19,12(sp)
   48938:	dc800215 	stw	r18,8(sp)
   4893c:	dc400115 	stw	r17,4(sp)
   48940:	dc000015 	stw	r16,0(sp)
   48944:	dfc00415 	stw	ra,16(sp)
   48948:	10c0400c 	andi	r3,r2,256
   4894c:	2821883a 	mov	r16,r5
   48950:	2023883a 	mov	r17,r4
   48954:	3025883a 	mov	r18,r6
   48958:	3827883a 	mov	r19,r7
   4895c:	18000526 	beq	r3,zero,48974 <__swrite+0x48>
   48960:	2940038f 	ldh	r5,14(r5)
   48964:	01c00084 	movi	r7,2
   48968:	000d883a 	mov	r6,zero
   4896c:	004a6640 	call	4a664 <_lseek_r>
   48970:	8080030b 	ldhu	r2,12(r16)
   48974:	8140038f 	ldh	r5,14(r16)
   48978:	10bbffcc 	andi	r2,r2,61439
   4897c:	980f883a 	mov	r7,r19
   48980:	900d883a 	mov	r6,r18
   48984:	8809883a 	mov	r4,r17
   48988:	8080030d 	sth	r2,12(r16)
   4898c:	dfc00417 	ldw	ra,16(sp)
   48990:	dcc00317 	ldw	r19,12(sp)
   48994:	dc800217 	ldw	r18,8(sp)
   48998:	dc400117 	ldw	r17,4(sp)
   4899c:	dc000017 	ldw	r16,0(sp)
   489a0:	dec00504 	addi	sp,sp,20
   489a4:	004a1301 	jmpi	4a130 <_write_r>

000489a8 <__sseek>:
   489a8:	defffe04 	addi	sp,sp,-8
   489ac:	dc000015 	stw	r16,0(sp)
   489b0:	2821883a 	mov	r16,r5
   489b4:	2940038f 	ldh	r5,14(r5)
   489b8:	dfc00115 	stw	ra,4(sp)
   489bc:	004a6640 	call	4a664 <_lseek_r>
   489c0:	00ffffc4 	movi	r3,-1
   489c4:	10c00826 	beq	r2,r3,489e8 <__sseek+0x40>
   489c8:	80c0030b 	ldhu	r3,12(r16)
   489cc:	80801415 	stw	r2,80(r16)
   489d0:	18c40014 	ori	r3,r3,4096
   489d4:	80c0030d 	sth	r3,12(r16)
   489d8:	dfc00117 	ldw	ra,4(sp)
   489dc:	dc000017 	ldw	r16,0(sp)
   489e0:	dec00204 	addi	sp,sp,8
   489e4:	f800283a 	ret
   489e8:	80c0030b 	ldhu	r3,12(r16)
   489ec:	18fbffcc 	andi	r3,r3,61439
   489f0:	80c0030d 	sth	r3,12(r16)
   489f4:	dfc00117 	ldw	ra,4(sp)
   489f8:	dc000017 	ldw	r16,0(sp)
   489fc:	dec00204 	addi	sp,sp,8
   48a00:	f800283a 	ret

00048a04 <__sclose>:
   48a04:	2940038f 	ldh	r5,14(r5)
   48a08:	004a1901 	jmpi	4a190 <_close_r>

00048a0c <strcmp>:
   48a0c:	2144b03a 	or	r2,r4,r5
   48a10:	108000cc 	andi	r2,r2,3
   48a14:	1000171e 	bne	r2,zero,48a74 <strcmp+0x68>
   48a18:	20800017 	ldw	r2,0(r4)
   48a1c:	28c00017 	ldw	r3,0(r5)
   48a20:	10c0141e 	bne	r2,r3,48a74 <strcmp+0x68>
   48a24:	027fbff4 	movhi	r9,65279
   48a28:	4a7fbfc4 	addi	r9,r9,-257
   48a2c:	0086303a 	nor	r3,zero,r2
   48a30:	02202074 	movhi	r8,32897
   48a34:	1245883a 	add	r2,r2,r9
   48a38:	42202004 	addi	r8,r8,-32640
   48a3c:	10c4703a 	and	r2,r2,r3
   48a40:	1204703a 	and	r2,r2,r8
   48a44:	10000226 	beq	r2,zero,48a50 <strcmp+0x44>
   48a48:	00002306 	br	48ad8 <strcmp+0xcc>
   48a4c:	1000221e 	bne	r2,zero,48ad8 <strcmp+0xcc>
   48a50:	21000104 	addi	r4,r4,4
   48a54:	20c00017 	ldw	r3,0(r4)
   48a58:	29400104 	addi	r5,r5,4
   48a5c:	29800017 	ldw	r6,0(r5)
   48a60:	1a4f883a 	add	r7,r3,r9
   48a64:	00c4303a 	nor	r2,zero,r3
   48a68:	3884703a 	and	r2,r7,r2
   48a6c:	1204703a 	and	r2,r2,r8
   48a70:	19bff626 	beq	r3,r6,48a4c <__alt_data_end+0xfffe194c>
   48a74:	20800003 	ldbu	r2,0(r4)
   48a78:	10c03fcc 	andi	r3,r2,255
   48a7c:	18c0201c 	xori	r3,r3,128
   48a80:	18ffe004 	addi	r3,r3,-128
   48a84:	18000c26 	beq	r3,zero,48ab8 <strcmp+0xac>
   48a88:	29800007 	ldb	r6,0(r5)
   48a8c:	19800326 	beq	r3,r6,48a9c <strcmp+0x90>
   48a90:	00001306 	br	48ae0 <strcmp+0xd4>
   48a94:	29800007 	ldb	r6,0(r5)
   48a98:	11800b1e 	bne	r2,r6,48ac8 <strcmp+0xbc>
   48a9c:	21000044 	addi	r4,r4,1
   48aa0:	20c00003 	ldbu	r3,0(r4)
   48aa4:	29400044 	addi	r5,r5,1
   48aa8:	18803fcc 	andi	r2,r3,255
   48aac:	1080201c 	xori	r2,r2,128
   48ab0:	10bfe004 	addi	r2,r2,-128
   48ab4:	103ff71e 	bne	r2,zero,48a94 <__alt_data_end+0xfffe1994>
   48ab8:	0007883a 	mov	r3,zero
   48abc:	28800003 	ldbu	r2,0(r5)
   48ac0:	1885c83a 	sub	r2,r3,r2
   48ac4:	f800283a 	ret
   48ac8:	28800003 	ldbu	r2,0(r5)
   48acc:	18c03fcc 	andi	r3,r3,255
   48ad0:	1885c83a 	sub	r2,r3,r2
   48ad4:	f800283a 	ret
   48ad8:	0005883a 	mov	r2,zero
   48adc:	f800283a 	ret
   48ae0:	10c03fcc 	andi	r3,r2,255
   48ae4:	003ff506 	br	48abc <__alt_data_end+0xfffe19bc>

00048ae8 <__sprint_r.part.0>:
   48ae8:	28801917 	ldw	r2,100(r5)
   48aec:	defff604 	addi	sp,sp,-40
   48af0:	dd400515 	stw	r21,20(sp)
   48af4:	dfc00915 	stw	ra,36(sp)
   48af8:	df000815 	stw	fp,32(sp)
   48afc:	ddc00715 	stw	r23,28(sp)
   48b00:	dd800615 	stw	r22,24(sp)
   48b04:	dd000415 	stw	r20,16(sp)
   48b08:	dcc00315 	stw	r19,12(sp)
   48b0c:	dc800215 	stw	r18,8(sp)
   48b10:	dc400115 	stw	r17,4(sp)
   48b14:	dc000015 	stw	r16,0(sp)
   48b18:	1088000c 	andi	r2,r2,8192
   48b1c:	302b883a 	mov	r21,r6
   48b20:	10002e26 	beq	r2,zero,48bdc <__sprint_r.part.0+0xf4>
   48b24:	30800217 	ldw	r2,8(r6)
   48b28:	35800017 	ldw	r22,0(r6)
   48b2c:	10002926 	beq	r2,zero,48bd4 <__sprint_r.part.0+0xec>
   48b30:	2827883a 	mov	r19,r5
   48b34:	2029883a 	mov	r20,r4
   48b38:	b5c00104 	addi	r23,r22,4
   48b3c:	04bfffc4 	movi	r18,-1
   48b40:	bc400017 	ldw	r17,0(r23)
   48b44:	b4000017 	ldw	r16,0(r22)
   48b48:	0039883a 	mov	fp,zero
   48b4c:	8822d0ba 	srli	r17,r17,2
   48b50:	8800031e 	bne	r17,zero,48b60 <__sprint_r.part.0+0x78>
   48b54:	00001806 	br	48bb8 <__sprint_r.part.0+0xd0>
   48b58:	84000104 	addi	r16,r16,4
   48b5c:	8f001526 	beq	r17,fp,48bb4 <__sprint_r.part.0+0xcc>
   48b60:	81400017 	ldw	r5,0(r16)
   48b64:	980d883a 	mov	r6,r19
   48b68:	a009883a 	mov	r4,r20
   48b6c:	004a5100 	call	4a510 <_fputwc_r>
   48b70:	e7000044 	addi	fp,fp,1
   48b74:	14bff81e 	bne	r2,r18,48b58 <__alt_data_end+0xfffe1a58>
   48b78:	9005883a 	mov	r2,r18
   48b7c:	a8000215 	stw	zero,8(r21)
   48b80:	a8000115 	stw	zero,4(r21)
   48b84:	dfc00917 	ldw	ra,36(sp)
   48b88:	df000817 	ldw	fp,32(sp)
   48b8c:	ddc00717 	ldw	r23,28(sp)
   48b90:	dd800617 	ldw	r22,24(sp)
   48b94:	dd400517 	ldw	r21,20(sp)
   48b98:	dd000417 	ldw	r20,16(sp)
   48b9c:	dcc00317 	ldw	r19,12(sp)
   48ba0:	dc800217 	ldw	r18,8(sp)
   48ba4:	dc400117 	ldw	r17,4(sp)
   48ba8:	dc000017 	ldw	r16,0(sp)
   48bac:	dec00a04 	addi	sp,sp,40
   48bb0:	f800283a 	ret
   48bb4:	a8800217 	ldw	r2,8(r21)
   48bb8:	8c63883a 	add	r17,r17,r17
   48bbc:	8c63883a 	add	r17,r17,r17
   48bc0:	1445c83a 	sub	r2,r2,r17
   48bc4:	a8800215 	stw	r2,8(r21)
   48bc8:	b5800204 	addi	r22,r22,8
   48bcc:	bdc00204 	addi	r23,r23,8
   48bd0:	103fdb1e 	bne	r2,zero,48b40 <__alt_data_end+0xfffe1a40>
   48bd4:	0005883a 	mov	r2,zero
   48bd8:	003fe806 	br	48b7c <__alt_data_end+0xfffe1a7c>
   48bdc:	0045d100 	call	45d10 <__sfvwrite_r>
   48be0:	003fe606 	br	48b7c <__alt_data_end+0xfffe1a7c>

00048be4 <__sprint_r>:
   48be4:	30c00217 	ldw	r3,8(r6)
   48be8:	18000126 	beq	r3,zero,48bf0 <__sprint_r+0xc>
   48bec:	0048ae81 	jmpi	48ae8 <__sprint_r.part.0>
   48bf0:	30000115 	stw	zero,4(r6)
   48bf4:	0005883a 	mov	r2,zero
   48bf8:	f800283a 	ret

00048bfc <___vfiprintf_internal_r>:
   48bfc:	deffc904 	addi	sp,sp,-220
   48c00:	df003515 	stw	fp,212(sp)
   48c04:	dd003115 	stw	r20,196(sp)
   48c08:	dfc03615 	stw	ra,216(sp)
   48c0c:	ddc03415 	stw	r23,208(sp)
   48c10:	dd803315 	stw	r22,204(sp)
   48c14:	dd403215 	stw	r21,200(sp)
   48c18:	dcc03015 	stw	r19,192(sp)
   48c1c:	dc802f15 	stw	r18,188(sp)
   48c20:	dc402e15 	stw	r17,184(sp)
   48c24:	dc002d15 	stw	r16,180(sp)
   48c28:	d9002015 	stw	r4,128(sp)
   48c2c:	d9c02215 	stw	r7,136(sp)
   48c30:	2829883a 	mov	r20,r5
   48c34:	3039883a 	mov	fp,r6
   48c38:	20000226 	beq	r4,zero,48c44 <___vfiprintf_internal_r+0x48>
   48c3c:	20800e17 	ldw	r2,56(r4)
   48c40:	1000cf26 	beq	r2,zero,48f80 <___vfiprintf_internal_r+0x384>
   48c44:	a080030b 	ldhu	r2,12(r20)
   48c48:	10c8000c 	andi	r3,r2,8192
   48c4c:	1800061e 	bne	r3,zero,48c68 <___vfiprintf_internal_r+0x6c>
   48c50:	a1001917 	ldw	r4,100(r20)
   48c54:	00f7ffc4 	movi	r3,-8193
   48c58:	10880014 	ori	r2,r2,8192
   48c5c:	20c6703a 	and	r3,r4,r3
   48c60:	a080030d 	sth	r2,12(r20)
   48c64:	a0c01915 	stw	r3,100(r20)
   48c68:	10c0020c 	andi	r3,r2,8
   48c6c:	1800a926 	beq	r3,zero,48f14 <___vfiprintf_internal_r+0x318>
   48c70:	a0c00417 	ldw	r3,16(r20)
   48c74:	1800a726 	beq	r3,zero,48f14 <___vfiprintf_internal_r+0x318>
   48c78:	1080068c 	andi	r2,r2,26
   48c7c:	00c00284 	movi	r3,10
   48c80:	10c0ac26 	beq	r2,r3,48f34 <___vfiprintf_internal_r+0x338>
   48c84:	da801a04 	addi	r10,sp,104
   48c88:	da801e15 	stw	r10,120(sp)
   48c8c:	d8801e17 	ldw	r2,120(sp)
   48c90:	da8019c4 	addi	r10,sp,103
   48c94:	05800174 	movhi	r22,5
   48c98:	05c00174 	movhi	r23,5
   48c9c:	da801f15 	stw	r10,124(sp)
   48ca0:	1295c83a 	sub	r10,r2,r10
   48ca4:	b58a2b04 	addi	r22,r22,10412
   48ca8:	bdca2704 	addi	r23,r23,10396
   48cac:	dec01a15 	stw	sp,104(sp)
   48cb0:	d8001c15 	stw	zero,112(sp)
   48cb4:	d8001b15 	stw	zero,108(sp)
   48cb8:	d8002615 	stw	zero,152(sp)
   48cbc:	d8002315 	stw	zero,140(sp)
   48cc0:	da802715 	stw	r10,156(sp)
   48cc4:	d811883a 	mov	r8,sp
   48cc8:	dd002115 	stw	r20,132(sp)
   48ccc:	e021883a 	mov	r16,fp
   48cd0:	80800007 	ldb	r2,0(r16)
   48cd4:	1003ea26 	beq	r2,zero,49c80 <___vfiprintf_internal_r+0x1084>
   48cd8:	00c00944 	movi	r3,37
   48cdc:	8025883a 	mov	r18,r16
   48ce0:	10c0021e 	bne	r2,r3,48cec <___vfiprintf_internal_r+0xf0>
   48ce4:	00001606 	br	48d40 <___vfiprintf_internal_r+0x144>
   48ce8:	10c00326 	beq	r2,r3,48cf8 <___vfiprintf_internal_r+0xfc>
   48cec:	94800044 	addi	r18,r18,1
   48cf0:	90800007 	ldb	r2,0(r18)
   48cf4:	103ffc1e 	bne	r2,zero,48ce8 <__alt_data_end+0xfffe1be8>
   48cf8:	9423c83a 	sub	r17,r18,r16
   48cfc:	88001026 	beq	r17,zero,48d40 <___vfiprintf_internal_r+0x144>
   48d00:	d8c01c17 	ldw	r3,112(sp)
   48d04:	d8801b17 	ldw	r2,108(sp)
   48d08:	44000015 	stw	r16,0(r8)
   48d0c:	88c7883a 	add	r3,r17,r3
   48d10:	10800044 	addi	r2,r2,1
   48d14:	44400115 	stw	r17,4(r8)
   48d18:	d8c01c15 	stw	r3,112(sp)
   48d1c:	d8801b15 	stw	r2,108(sp)
   48d20:	010001c4 	movi	r4,7
   48d24:	2080760e 	bge	r4,r2,48f00 <___vfiprintf_internal_r+0x304>
   48d28:	1803821e 	bne	r3,zero,49b34 <___vfiprintf_internal_r+0xf38>
   48d2c:	da802317 	ldw	r10,140(sp)
   48d30:	d8001b15 	stw	zero,108(sp)
   48d34:	d811883a 	mov	r8,sp
   48d38:	5455883a 	add	r10,r10,r17
   48d3c:	da802315 	stw	r10,140(sp)
   48d40:	90800007 	ldb	r2,0(r18)
   48d44:	10044626 	beq	r2,zero,49e60 <___vfiprintf_internal_r+0x1264>
   48d48:	90c00047 	ldb	r3,1(r18)
   48d4c:	94000044 	addi	r16,r18,1
   48d50:	d8001d85 	stb	zero,118(sp)
   48d54:	0009883a 	mov	r4,zero
   48d58:	000f883a 	mov	r7,zero
   48d5c:	027fffc4 	movi	r9,-1
   48d60:	0023883a 	mov	r17,zero
   48d64:	0029883a 	mov	r20,zero
   48d68:	01401604 	movi	r5,88
   48d6c:	01800244 	movi	r6,9
   48d70:	03400a84 	movi	r13,42
   48d74:	03001b04 	movi	r12,108
   48d78:	84000044 	addi	r16,r16,1
   48d7c:	18bff804 	addi	r2,r3,-32
   48d80:	28827336 	bltu	r5,r2,49750 <___vfiprintf_internal_r+0xb54>
   48d84:	100490ba 	slli	r2,r2,2
   48d88:	02800174 	movhi	r10,5
   48d8c:	52a36704 	addi	r10,r10,-29284
   48d90:	1285883a 	add	r2,r2,r10
   48d94:	10800017 	ldw	r2,0(r2)
   48d98:	1000683a 	jmp	r2
   48d9c:	00049484 	movi	zero,4690
   48da0:	00049750 	cmplti	zero,zero,4701
   48da4:	00049750 	cmplti	zero,zero,4701
   48da8:	000494a4 	muli	zero,zero,4690
   48dac:	00049750 	cmplti	zero,zero,4701
   48db0:	00049750 	cmplti	zero,zero,4701
   48db4:	00049750 	cmplti	zero,zero,4701
   48db8:	00049750 	cmplti	zero,zero,4701
   48dbc:	00049750 	cmplti	zero,zero,4701
   48dc0:	00049750 	cmplti	zero,zero,4701
   48dc4:	0004968c 	andi	zero,zero,4698
   48dc8:	000496a8 	cmpgeui	zero,zero,4698
   48dcc:	00049750 	cmplti	zero,zero,4701
   48dd0:	00048f90 	cmplti	zero,zero,4670
   48dd4:	000496b8 	rdprs	zero,zero,4698
   48dd8:	00049750 	cmplti	zero,zero,4701
   48ddc:	000494b0 	cmpltui	zero,zero,4690
   48de0:	000494bc 	xorhi	zero,zero,4690
   48de4:	000494bc 	xorhi	zero,zero,4690
   48de8:	000494bc 	xorhi	zero,zero,4690
   48dec:	000494bc 	xorhi	zero,zero,4690
   48df0:	000494bc 	xorhi	zero,zero,4690
   48df4:	000494bc 	xorhi	zero,zero,4690
   48df8:	000494bc 	xorhi	zero,zero,4690
   48dfc:	000494bc 	xorhi	zero,zero,4690
   48e00:	000494bc 	xorhi	zero,zero,4690
   48e04:	00049750 	cmplti	zero,zero,4701
   48e08:	00049750 	cmplti	zero,zero,4701
   48e0c:	00049750 	cmplti	zero,zero,4701
   48e10:	00049750 	cmplti	zero,zero,4701
   48e14:	00049750 	cmplti	zero,zero,4701
   48e18:	00049750 	cmplti	zero,zero,4701
   48e1c:	00049750 	cmplti	zero,zero,4701
   48e20:	00049750 	cmplti	zero,zero,4701
   48e24:	00049750 	cmplti	zero,zero,4701
   48e28:	00049750 	cmplti	zero,zero,4701
   48e2c:	000494e8 	cmpgeui	zero,zero,4691
   48e30:	00049750 	cmplti	zero,zero,4701
   48e34:	00049750 	cmplti	zero,zero,4701
   48e38:	00049750 	cmplti	zero,zero,4701
   48e3c:	00049750 	cmplti	zero,zero,4701
   48e40:	00049750 	cmplti	zero,zero,4701
   48e44:	00049750 	cmplti	zero,zero,4701
   48e48:	00049750 	cmplti	zero,zero,4701
   48e4c:	00049750 	cmplti	zero,zero,4701
   48e50:	00049750 	cmplti	zero,zero,4701
   48e54:	00049750 	cmplti	zero,zero,4701
   48e58:	00049520 	cmpeqi	zero,zero,4692
   48e5c:	00049750 	cmplti	zero,zero,4701
   48e60:	00049750 	cmplti	zero,zero,4701
   48e64:	00049750 	cmplti	zero,zero,4701
   48e68:	00049750 	cmplti	zero,zero,4701
   48e6c:	00049750 	cmplti	zero,zero,4701
   48e70:	00049578 	rdprs	zero,zero,4693
   48e74:	00049750 	cmplti	zero,zero,4701
   48e78:	00049750 	cmplti	zero,zero,4701
   48e7c:	000495e8 	cmpgeui	zero,zero,4695
   48e80:	00049750 	cmplti	zero,zero,4701
   48e84:	00049750 	cmplti	zero,zero,4701
   48e88:	00049750 	cmplti	zero,zero,4701
   48e8c:	00049750 	cmplti	zero,zero,4701
   48e90:	00049750 	cmplti	zero,zero,4701
   48e94:	00049750 	cmplti	zero,zero,4701
   48e98:	00049750 	cmplti	zero,zero,4701
   48e9c:	00049750 	cmplti	zero,zero,4701
   48ea0:	00049750 	cmplti	zero,zero,4701
   48ea4:	00049750 	cmplti	zero,zero,4701
   48ea8:	00049394 	movui	zero,4686
   48eac:	000493c0 	call	493c <__alt_mem_onchip_memory2-0x3b6c4>
   48eb0:	00049750 	cmplti	zero,zero,4701
   48eb4:	00049750 	cmplti	zero,zero,4701
   48eb8:	00049750 	cmplti	zero,zero,4701
   48ebc:	000496f8 	rdprs	zero,zero,4699
   48ec0:	000493c0 	call	493c <__alt_mem_onchip_memory2-0x3b6c4>
   48ec4:	00049750 	cmplti	zero,zero,4701
   48ec8:	00049750 	cmplti	zero,zero,4701
   48ecc:	00049254 	movui	zero,4681
   48ed0:	00049750 	cmplti	zero,zero,4701
   48ed4:	00049264 	muli	zero,zero,4681
   48ed8:	000492a0 	cmpeqi	zero,zero,4682
   48edc:	00048f9c 	xori	zero,zero,4670
   48ee0:	00049248 	cmpgei	zero,zero,4681
   48ee4:	00049750 	cmplti	zero,zero,4701
   48ee8:	00049624 	muli	zero,zero,4696
   48eec:	00049750 	cmplti	zero,zero,4701
   48ef0:	0004967c 	xorhi	zero,zero,4697
   48ef4:	00049750 	cmplti	zero,zero,4701
   48ef8:	00049750 	cmplti	zero,zero,4701
   48efc:	00049340 	call	4934 <__alt_mem_onchip_memory2-0x3b6cc>
   48f00:	42000204 	addi	r8,r8,8
   48f04:	da802317 	ldw	r10,140(sp)
   48f08:	5455883a 	add	r10,r10,r17
   48f0c:	da802315 	stw	r10,140(sp)
   48f10:	003f8b06 	br	48d40 <__alt_data_end+0xfffe1c40>
   48f14:	d9002017 	ldw	r4,128(sp)
   48f18:	a00b883a 	mov	r5,r20
   48f1c:	00438b80 	call	438b8 <__swsetup_r>
   48f20:	1003b11e 	bne	r2,zero,49de8 <___vfiprintf_internal_r+0x11ec>
   48f24:	a080030b 	ldhu	r2,12(r20)
   48f28:	00c00284 	movi	r3,10
   48f2c:	1080068c 	andi	r2,r2,26
   48f30:	10ff541e 	bne	r2,r3,48c84 <__alt_data_end+0xfffe1b84>
   48f34:	a080038f 	ldh	r2,14(r20)
   48f38:	103f5216 	blt	r2,zero,48c84 <__alt_data_end+0xfffe1b84>
   48f3c:	d9c02217 	ldw	r7,136(sp)
   48f40:	d9002017 	ldw	r4,128(sp)
   48f44:	e00d883a 	mov	r6,fp
   48f48:	a00b883a 	mov	r5,r20
   48f4c:	004a0740 	call	4a074 <__sbprintf>
   48f50:	dfc03617 	ldw	ra,216(sp)
   48f54:	df003517 	ldw	fp,212(sp)
   48f58:	ddc03417 	ldw	r23,208(sp)
   48f5c:	dd803317 	ldw	r22,204(sp)
   48f60:	dd403217 	ldw	r21,200(sp)
   48f64:	dd003117 	ldw	r20,196(sp)
   48f68:	dcc03017 	ldw	r19,192(sp)
   48f6c:	dc802f17 	ldw	r18,188(sp)
   48f70:	dc402e17 	ldw	r17,184(sp)
   48f74:	dc002d17 	ldw	r16,180(sp)
   48f78:	dec03704 	addi	sp,sp,220
   48f7c:	f800283a 	ret
   48f80:	004588c0 	call	4588c <__sinit>
   48f84:	003f2f06 	br	48c44 <__alt_data_end+0xfffe1b44>
   48f88:	0463c83a 	sub	r17,zero,r17
   48f8c:	d8802215 	stw	r2,136(sp)
   48f90:	a5000114 	ori	r20,r20,4
   48f94:	80c00007 	ldb	r3,0(r16)
   48f98:	003f7706 	br	48d78 <__alt_data_end+0xfffe1c78>
   48f9c:	00800c04 	movi	r2,48
   48fa0:	da802217 	ldw	r10,136(sp)
   48fa4:	d8801d05 	stb	r2,116(sp)
   48fa8:	00801e04 	movi	r2,120
   48fac:	d8801d45 	stb	r2,117(sp)
   48fb0:	d8001d85 	stb	zero,118(sp)
   48fb4:	50c00104 	addi	r3,r10,4
   48fb8:	54800017 	ldw	r18,0(r10)
   48fbc:	0027883a 	mov	r19,zero
   48fc0:	a0800094 	ori	r2,r20,2
   48fc4:	48030b16 	blt	r9,zero,49bf4 <___vfiprintf_internal_r+0xff8>
   48fc8:	00bfdfc4 	movi	r2,-129
   48fcc:	a096703a 	and	r11,r20,r2
   48fd0:	d8c02215 	stw	r3,136(sp)
   48fd4:	5d000094 	ori	r20,r11,2
   48fd8:	90032b1e 	bne	r18,zero,49c88 <___vfiprintf_internal_r+0x108c>
   48fdc:	00800174 	movhi	r2,5
   48fe0:	1089c604 	addi	r2,r2,10008
   48fe4:	d8802615 	stw	r2,152(sp)
   48fe8:	0039883a 	mov	fp,zero
   48fec:	48017b1e 	bne	r9,zero,495dc <___vfiprintf_internal_r+0x9e0>
   48ff0:	0013883a 	mov	r9,zero
   48ff4:	0027883a 	mov	r19,zero
   48ff8:	dd401a04 	addi	r21,sp,104
   48ffc:	4825883a 	mov	r18,r9
   49000:	4cc0010e 	bge	r9,r19,49008 <___vfiprintf_internal_r+0x40c>
   49004:	9825883a 	mov	r18,r19
   49008:	e7003fcc 	andi	fp,fp,255
   4900c:	e700201c 	xori	fp,fp,128
   49010:	e73fe004 	addi	fp,fp,-128
   49014:	e0000126 	beq	fp,zero,4901c <___vfiprintf_internal_r+0x420>
   49018:	94800044 	addi	r18,r18,1
   4901c:	a380008c 	andi	r14,r20,2
   49020:	70000126 	beq	r14,zero,49028 <___vfiprintf_internal_r+0x42c>
   49024:	94800084 	addi	r18,r18,2
   49028:	a700210c 	andi	fp,r20,132
   4902c:	e001df1e 	bne	fp,zero,497ac <___vfiprintf_internal_r+0xbb0>
   49030:	8c87c83a 	sub	r3,r17,r18
   49034:	00c1dd0e 	bge	zero,r3,497ac <___vfiprintf_internal_r+0xbb0>
   49038:	01c00404 	movi	r7,16
   4903c:	d8801c17 	ldw	r2,112(sp)
   49040:	38c3ad0e 	bge	r7,r3,49ef8 <___vfiprintf_internal_r+0x12fc>
   49044:	02800174 	movhi	r10,5
   49048:	528a2b04 	addi	r10,r10,10412
   4904c:	dc002915 	stw	r16,164(sp)
   49050:	d9801b17 	ldw	r6,108(sp)
   49054:	da802415 	stw	r10,144(sp)
   49058:	03c001c4 	movi	r15,7
   4905c:	da402515 	stw	r9,148(sp)
   49060:	db802815 	stw	r14,160(sp)
   49064:	1821883a 	mov	r16,r3
   49068:	00000506 	br	49080 <___vfiprintf_internal_r+0x484>
   4906c:	31400084 	addi	r5,r6,2
   49070:	42000204 	addi	r8,r8,8
   49074:	200d883a 	mov	r6,r4
   49078:	843ffc04 	addi	r16,r16,-16
   4907c:	3c000d0e 	bge	r7,r16,490b4 <___vfiprintf_internal_r+0x4b8>
   49080:	10800404 	addi	r2,r2,16
   49084:	31000044 	addi	r4,r6,1
   49088:	45800015 	stw	r22,0(r8)
   4908c:	41c00115 	stw	r7,4(r8)
   49090:	d8801c15 	stw	r2,112(sp)
   49094:	d9001b15 	stw	r4,108(sp)
   49098:	793ff40e 	bge	r15,r4,4906c <__alt_data_end+0xfffe1f6c>
   4909c:	1001b51e 	bne	r2,zero,49774 <___vfiprintf_internal_r+0xb78>
   490a0:	843ffc04 	addi	r16,r16,-16
   490a4:	000d883a 	mov	r6,zero
   490a8:	01400044 	movi	r5,1
   490ac:	d811883a 	mov	r8,sp
   490b0:	3c3ff316 	blt	r7,r16,49080 <__alt_data_end+0xfffe1f80>
   490b4:	8007883a 	mov	r3,r16
   490b8:	da402517 	ldw	r9,148(sp)
   490bc:	db802817 	ldw	r14,160(sp)
   490c0:	dc002917 	ldw	r16,164(sp)
   490c4:	da802417 	ldw	r10,144(sp)
   490c8:	1885883a 	add	r2,r3,r2
   490cc:	40c00115 	stw	r3,4(r8)
   490d0:	42800015 	stw	r10,0(r8)
   490d4:	d8801c15 	stw	r2,112(sp)
   490d8:	d9401b15 	stw	r5,108(sp)
   490dc:	00c001c4 	movi	r3,7
   490e0:	19426016 	blt	r3,r5,49a64 <___vfiprintf_internal_r+0xe68>
   490e4:	d8c01d87 	ldb	r3,118(sp)
   490e8:	42000204 	addi	r8,r8,8
   490ec:	29000044 	addi	r4,r5,1
   490f0:	1801b31e 	bne	r3,zero,497c0 <___vfiprintf_internal_r+0xbc4>
   490f4:	7001c026 	beq	r14,zero,497f8 <___vfiprintf_internal_r+0xbfc>
   490f8:	d8c01d04 	addi	r3,sp,116
   490fc:	10800084 	addi	r2,r2,2
   49100:	40c00015 	stw	r3,0(r8)
   49104:	00c00084 	movi	r3,2
   49108:	40c00115 	stw	r3,4(r8)
   4910c:	d8801c15 	stw	r2,112(sp)
   49110:	d9001b15 	stw	r4,108(sp)
   49114:	00c001c4 	movi	r3,7
   49118:	1902650e 	bge	r3,r4,49ab0 <___vfiprintf_internal_r+0xeb4>
   4911c:	10029a1e 	bne	r2,zero,49b88 <___vfiprintf_internal_r+0xf8c>
   49120:	00c02004 	movi	r3,128
   49124:	01000044 	movi	r4,1
   49128:	000b883a 	mov	r5,zero
   4912c:	d811883a 	mov	r8,sp
   49130:	e0c1b31e 	bne	fp,r3,49800 <___vfiprintf_internal_r+0xc04>
   49134:	8cb9c83a 	sub	fp,r17,r18
   49138:	0701b10e 	bge	zero,fp,49800 <___vfiprintf_internal_r+0xc04>
   4913c:	01c00404 	movi	r7,16
   49140:	3f03890e 	bge	r7,fp,49f68 <___vfiprintf_internal_r+0x136c>
   49144:	00c00174 	movhi	r3,5
   49148:	18ca2704 	addi	r3,r3,10396
   4914c:	d8c02415 	stw	r3,144(sp)
   49150:	8007883a 	mov	r3,r16
   49154:	034001c4 	movi	r13,7
   49158:	e021883a 	mov	r16,fp
   4915c:	da402515 	stw	r9,148(sp)
   49160:	1839883a 	mov	fp,r3
   49164:	00000506 	br	4917c <___vfiprintf_internal_r+0x580>
   49168:	29800084 	addi	r6,r5,2
   4916c:	42000204 	addi	r8,r8,8
   49170:	180b883a 	mov	r5,r3
   49174:	843ffc04 	addi	r16,r16,-16
   49178:	3c000d0e 	bge	r7,r16,491b0 <___vfiprintf_internal_r+0x5b4>
   4917c:	10800404 	addi	r2,r2,16
   49180:	28c00044 	addi	r3,r5,1
   49184:	45c00015 	stw	r23,0(r8)
   49188:	41c00115 	stw	r7,4(r8)
   4918c:	d8801c15 	stw	r2,112(sp)
   49190:	d8c01b15 	stw	r3,108(sp)
   49194:	68fff40e 	bge	r13,r3,49168 <__alt_data_end+0xfffe2068>
   49198:	1002241e 	bne	r2,zero,49a2c <___vfiprintf_internal_r+0xe30>
   4919c:	843ffc04 	addi	r16,r16,-16
   491a0:	01800044 	movi	r6,1
   491a4:	000b883a 	mov	r5,zero
   491a8:	d811883a 	mov	r8,sp
   491ac:	3c3ff316 	blt	r7,r16,4917c <__alt_data_end+0xfffe207c>
   491b0:	da402517 	ldw	r9,148(sp)
   491b4:	e007883a 	mov	r3,fp
   491b8:	8039883a 	mov	fp,r16
   491bc:	1821883a 	mov	r16,r3
   491c0:	d8c02417 	ldw	r3,144(sp)
   491c4:	1705883a 	add	r2,r2,fp
   491c8:	47000115 	stw	fp,4(r8)
   491cc:	40c00015 	stw	r3,0(r8)
   491d0:	d8801c15 	stw	r2,112(sp)
   491d4:	d9801b15 	stw	r6,108(sp)
   491d8:	00c001c4 	movi	r3,7
   491dc:	19827616 	blt	r3,r6,49bb8 <___vfiprintf_internal_r+0xfbc>
   491e0:	4cf9c83a 	sub	fp,r9,r19
   491e4:	42000204 	addi	r8,r8,8
   491e8:	31000044 	addi	r4,r6,1
   491ec:	300b883a 	mov	r5,r6
   491f0:	07018516 	blt	zero,fp,49808 <___vfiprintf_internal_r+0xc0c>
   491f4:	9885883a 	add	r2,r19,r2
   491f8:	45400015 	stw	r21,0(r8)
   491fc:	44c00115 	stw	r19,4(r8)
   49200:	d8801c15 	stw	r2,112(sp)
   49204:	d9001b15 	stw	r4,108(sp)
   49208:	00c001c4 	movi	r3,7
   4920c:	1901dd0e 	bge	r3,r4,49984 <___vfiprintf_internal_r+0xd88>
   49210:	1002401e 	bne	r2,zero,49b14 <___vfiprintf_internal_r+0xf18>
   49214:	d8001b15 	stw	zero,108(sp)
   49218:	a2c0010c 	andi	r11,r20,4
   4921c:	58000226 	beq	r11,zero,49228 <___vfiprintf_internal_r+0x62c>
   49220:	8ca7c83a 	sub	r19,r17,r18
   49224:	04c2f216 	blt	zero,r19,49df0 <___vfiprintf_internal_r+0x11f4>
   49228:	8c80010e 	bge	r17,r18,49230 <___vfiprintf_internal_r+0x634>
   4922c:	9023883a 	mov	r17,r18
   49230:	da802317 	ldw	r10,140(sp)
   49234:	5455883a 	add	r10,r10,r17
   49238:	da802315 	stw	r10,140(sp)
   4923c:	d8001b15 	stw	zero,108(sp)
   49240:	d811883a 	mov	r8,sp
   49244:	003ea206 	br	48cd0 <__alt_data_end+0xfffe1bd0>
   49248:	a5000814 	ori	r20,r20,32
   4924c:	80c00007 	ldb	r3,0(r16)
   49250:	003ec906 	br	48d78 <__alt_data_end+0xfffe1c78>
   49254:	80c00007 	ldb	r3,0(r16)
   49258:	1b030926 	beq	r3,r12,49e80 <___vfiprintf_internal_r+0x1284>
   4925c:	a5000414 	ori	r20,r20,16
   49260:	003ec506 	br	48d78 <__alt_data_end+0xfffe1c78>
   49264:	21003fcc 	andi	r4,r4,255
   49268:	20035e1e 	bne	r4,zero,49fe4 <___vfiprintf_internal_r+0x13e8>
   4926c:	a080080c 	andi	r2,r20,32
   49270:	1002a526 	beq	r2,zero,49d08 <___vfiprintf_internal_r+0x110c>
   49274:	da802217 	ldw	r10,136(sp)
   49278:	50800017 	ldw	r2,0(r10)
   4927c:	da802317 	ldw	r10,140(sp)
   49280:	5007d7fa 	srai	r3,r10,31
   49284:	da802217 	ldw	r10,136(sp)
   49288:	10c00115 	stw	r3,4(r2)
   4928c:	52800104 	addi	r10,r10,4
   49290:	da802215 	stw	r10,136(sp)
   49294:	da802317 	ldw	r10,140(sp)
   49298:	12800015 	stw	r10,0(r2)
   4929c:	003e8c06 	br	48cd0 <__alt_data_end+0xfffe1bd0>
   492a0:	21003fcc 	andi	r4,r4,255
   492a4:	2003511e 	bne	r4,zero,49fec <___vfiprintf_internal_r+0x13f0>
   492a8:	a080080c 	andi	r2,r20,32
   492ac:	1000a126 	beq	r2,zero,49534 <___vfiprintf_internal_r+0x938>
   492b0:	da802217 	ldw	r10,136(sp)
   492b4:	d8001d85 	stb	zero,118(sp)
   492b8:	50800204 	addi	r2,r10,8
   492bc:	54800017 	ldw	r18,0(r10)
   492c0:	54c00117 	ldw	r19,4(r10)
   492c4:	4802b416 	blt	r9,zero,49d98 <___vfiprintf_internal_r+0x119c>
   492c8:	013fdfc4 	movi	r4,-129
   492cc:	94c6b03a 	or	r3,r18,r19
   492d0:	d8802215 	stw	r2,136(sp)
   492d4:	a128703a 	and	r20,r20,r4
   492d8:	1800a226 	beq	r3,zero,49564 <___vfiprintf_internal_r+0x968>
   492dc:	0039883a 	mov	fp,zero
   492e0:	dd401a04 	addi	r21,sp,104
   492e4:	9006d0fa 	srli	r3,r18,3
   492e8:	9808977a 	slli	r4,r19,29
   492ec:	9826d0fa 	srli	r19,r19,3
   492f0:	948001cc 	andi	r18,r18,7
   492f4:	90800c04 	addi	r2,r18,48
   492f8:	ad7fffc4 	addi	r21,r21,-1
   492fc:	20e4b03a 	or	r18,r4,r3
   49300:	a8800005 	stb	r2,0(r21)
   49304:	94c6b03a 	or	r3,r18,r19
   49308:	183ff61e 	bne	r3,zero,492e4 <__alt_data_end+0xfffe21e4>
   4930c:	a0c0004c 	andi	r3,r20,1
   49310:	18005926 	beq	r3,zero,49478 <___vfiprintf_internal_r+0x87c>
   49314:	10803fcc 	andi	r2,r2,255
   49318:	1080201c 	xori	r2,r2,128
   4931c:	10bfe004 	addi	r2,r2,-128
   49320:	00c00c04 	movi	r3,48
   49324:	10c05426 	beq	r2,r3,49478 <___vfiprintf_internal_r+0x87c>
   49328:	da801e17 	ldw	r10,120(sp)
   4932c:	a8bfffc4 	addi	r2,r21,-1
   49330:	a8ffffc5 	stb	r3,-1(r21)
   49334:	50a7c83a 	sub	r19,r10,r2
   49338:	102b883a 	mov	r21,r2
   4933c:	003f2f06 	br	48ffc <__alt_data_end+0xfffe1efc>
   49340:	21003fcc 	andi	r4,r4,255
   49344:	2003421e 	bne	r4,zero,4a050 <___vfiprintf_internal_r+0x1454>
   49348:	00800174 	movhi	r2,5
   4934c:	1089c604 	addi	r2,r2,10008
   49350:	d8802615 	stw	r2,152(sp)
   49354:	a080080c 	andi	r2,r20,32
   49358:	1000aa26 	beq	r2,zero,49604 <___vfiprintf_internal_r+0xa08>
   4935c:	da802217 	ldw	r10,136(sp)
   49360:	54800017 	ldw	r18,0(r10)
   49364:	54c00117 	ldw	r19,4(r10)
   49368:	52800204 	addi	r10,r10,8
   4936c:	da802215 	stw	r10,136(sp)
   49370:	a080004c 	andi	r2,r20,1
   49374:	1001d226 	beq	r2,zero,49ac0 <___vfiprintf_internal_r+0xec4>
   49378:	94c4b03a 	or	r2,r18,r19
   4937c:	1002351e 	bne	r2,zero,49c54 <___vfiprintf_internal_r+0x1058>
   49380:	d8001d85 	stb	zero,118(sp)
   49384:	48022216 	blt	r9,zero,49c10 <___vfiprintf_internal_r+0x1014>
   49388:	00bfdfc4 	movi	r2,-129
   4938c:	a0a8703a 	and	r20,r20,r2
   49390:	003f1506 	br	48fe8 <__alt_data_end+0xfffe1ee8>
   49394:	da802217 	ldw	r10,136(sp)
   49398:	04800044 	movi	r18,1
   4939c:	d8001d85 	stb	zero,118(sp)
   493a0:	50800017 	ldw	r2,0(r10)
   493a4:	52800104 	addi	r10,r10,4
   493a8:	da802215 	stw	r10,136(sp)
   493ac:	d8801005 	stb	r2,64(sp)
   493b0:	9027883a 	mov	r19,r18
   493b4:	dd401004 	addi	r21,sp,64
   493b8:	0013883a 	mov	r9,zero
   493bc:	003f1706 	br	4901c <__alt_data_end+0xfffe1f1c>
   493c0:	21003fcc 	andi	r4,r4,255
   493c4:	2003201e 	bne	r4,zero,4a048 <___vfiprintf_internal_r+0x144c>
   493c8:	a080080c 	andi	r2,r20,32
   493cc:	10004b26 	beq	r2,zero,494fc <___vfiprintf_internal_r+0x900>
   493d0:	da802217 	ldw	r10,136(sp)
   493d4:	50800117 	ldw	r2,4(r10)
   493d8:	54800017 	ldw	r18,0(r10)
   493dc:	52800204 	addi	r10,r10,8
   493e0:	da802215 	stw	r10,136(sp)
   493e4:	1027883a 	mov	r19,r2
   493e8:	10022c16 	blt	r2,zero,49c9c <___vfiprintf_internal_r+0x10a0>
   493ec:	df001d83 	ldbu	fp,118(sp)
   493f0:	48007216 	blt	r9,zero,495bc <___vfiprintf_internal_r+0x9c0>
   493f4:	00ffdfc4 	movi	r3,-129
   493f8:	94c4b03a 	or	r2,r18,r19
   493fc:	a0e8703a 	and	r20,r20,r3
   49400:	1000cc26 	beq	r2,zero,49734 <___vfiprintf_internal_r+0xb38>
   49404:	98021026 	beq	r19,zero,49c48 <___vfiprintf_internal_r+0x104c>
   49408:	dc402415 	stw	r17,144(sp)
   4940c:	dc002515 	stw	r16,148(sp)
   49410:	9823883a 	mov	r17,r19
   49414:	9021883a 	mov	r16,r18
   49418:	dd401a04 	addi	r21,sp,104
   4941c:	4825883a 	mov	r18,r9
   49420:	4027883a 	mov	r19,r8
   49424:	8009883a 	mov	r4,r16
   49428:	880b883a 	mov	r5,r17
   4942c:	01800284 	movi	r6,10
   49430:	000f883a 	mov	r7,zero
   49434:	004afdc0 	call	4afdc <__umoddi3>
   49438:	10800c04 	addi	r2,r2,48
   4943c:	ad7fffc4 	addi	r21,r21,-1
   49440:	8009883a 	mov	r4,r16
   49444:	880b883a 	mov	r5,r17
   49448:	a8800005 	stb	r2,0(r21)
   4944c:	01800284 	movi	r6,10
   49450:	000f883a 	mov	r7,zero
   49454:	004aa640 	call	4aa64 <__udivdi3>
   49458:	1021883a 	mov	r16,r2
   4945c:	10c4b03a 	or	r2,r2,r3
   49460:	1823883a 	mov	r17,r3
   49464:	103fef1e 	bne	r2,zero,49424 <__alt_data_end+0xfffe2324>
   49468:	dc402417 	ldw	r17,144(sp)
   4946c:	dc002517 	ldw	r16,148(sp)
   49470:	9013883a 	mov	r9,r18
   49474:	9811883a 	mov	r8,r19
   49478:	da801e17 	ldw	r10,120(sp)
   4947c:	5567c83a 	sub	r19,r10,r21
   49480:	003ede06 	br	48ffc <__alt_data_end+0xfffe1efc>
   49484:	38803fcc 	andi	r2,r7,255
   49488:	1080201c 	xori	r2,r2,128
   4948c:	10bfe004 	addi	r2,r2,-128
   49490:	1002371e 	bne	r2,zero,49d70 <___vfiprintf_internal_r+0x1174>
   49494:	01000044 	movi	r4,1
   49498:	01c00804 	movi	r7,32
   4949c:	80c00007 	ldb	r3,0(r16)
   494a0:	003e3506 	br	48d78 <__alt_data_end+0xfffe1c78>
   494a4:	a5000054 	ori	r20,r20,1
   494a8:	80c00007 	ldb	r3,0(r16)
   494ac:	003e3206 	br	48d78 <__alt_data_end+0xfffe1c78>
   494b0:	a5002014 	ori	r20,r20,128
   494b4:	80c00007 	ldb	r3,0(r16)
   494b8:	003e2f06 	br	48d78 <__alt_data_end+0xfffe1c78>
   494bc:	8015883a 	mov	r10,r16
   494c0:	0023883a 	mov	r17,zero
   494c4:	18bff404 	addi	r2,r3,-48
   494c8:	50c00007 	ldb	r3,0(r10)
   494cc:	8c4002a4 	muli	r17,r17,10
   494d0:	84000044 	addi	r16,r16,1
   494d4:	8015883a 	mov	r10,r16
   494d8:	1463883a 	add	r17,r2,r17
   494dc:	18bff404 	addi	r2,r3,-48
   494e0:	30bff92e 	bgeu	r6,r2,494c8 <__alt_data_end+0xfffe23c8>
   494e4:	003e2506 	br	48d7c <__alt_data_end+0xfffe1c7c>
   494e8:	21003fcc 	andi	r4,r4,255
   494ec:	2002d41e 	bne	r4,zero,4a040 <___vfiprintf_internal_r+0x1444>
   494f0:	a5000414 	ori	r20,r20,16
   494f4:	a080080c 	andi	r2,r20,32
   494f8:	103fb51e 	bne	r2,zero,493d0 <__alt_data_end+0xfffe22d0>
   494fc:	a080040c 	andi	r2,r20,16
   49500:	1001f826 	beq	r2,zero,49ce4 <___vfiprintf_internal_r+0x10e8>
   49504:	da802217 	ldw	r10,136(sp)
   49508:	54800017 	ldw	r18,0(r10)
   4950c:	52800104 	addi	r10,r10,4
   49510:	da802215 	stw	r10,136(sp)
   49514:	9027d7fa 	srai	r19,r18,31
   49518:	9805883a 	mov	r2,r19
   4951c:	003fb206 	br	493e8 <__alt_data_end+0xfffe22e8>
   49520:	21003fcc 	andi	r4,r4,255
   49524:	2002c41e 	bne	r4,zero,4a038 <___vfiprintf_internal_r+0x143c>
   49528:	a5000414 	ori	r20,r20,16
   4952c:	a080080c 	andi	r2,r20,32
   49530:	103f5f1e 	bne	r2,zero,492b0 <__alt_data_end+0xfffe21b0>
   49534:	a080040c 	andi	r2,r20,16
   49538:	10020f26 	beq	r2,zero,49d78 <___vfiprintf_internal_r+0x117c>
   4953c:	da802217 	ldw	r10,136(sp)
   49540:	d8001d85 	stb	zero,118(sp)
   49544:	0027883a 	mov	r19,zero
   49548:	50800104 	addi	r2,r10,4
   4954c:	54800017 	ldw	r18,0(r10)
   49550:	48021116 	blt	r9,zero,49d98 <___vfiprintf_internal_r+0x119c>
   49554:	00ffdfc4 	movi	r3,-129
   49558:	d8802215 	stw	r2,136(sp)
   4955c:	a0e8703a 	and	r20,r20,r3
   49560:	903f5e1e 	bne	r18,zero,492dc <__alt_data_end+0xfffe21dc>
   49564:	0039883a 	mov	fp,zero
   49568:	4802a626 	beq	r9,zero,4a004 <___vfiprintf_internal_r+0x1408>
   4956c:	0025883a 	mov	r18,zero
   49570:	0027883a 	mov	r19,zero
   49574:	003f5a06 	br	492e0 <__alt_data_end+0xfffe21e0>
   49578:	21003fcc 	andi	r4,r4,255
   4957c:	20029f1e 	bne	r4,zero,49ffc <___vfiprintf_internal_r+0x1400>
   49580:	a5000414 	ori	r20,r20,16
   49584:	a080080c 	andi	r2,r20,32
   49588:	10005e1e 	bne	r2,zero,49704 <___vfiprintf_internal_r+0xb08>
   4958c:	a080040c 	andi	r2,r20,16
   49590:	1001a21e 	bne	r2,zero,49c1c <___vfiprintf_internal_r+0x1020>
   49594:	a080100c 	andi	r2,r20,64
   49598:	d8001d85 	stb	zero,118(sp)
   4959c:	da802217 	ldw	r10,136(sp)
   495a0:	1002231e 	bne	r2,zero,49e30 <___vfiprintf_internal_r+0x1234>
   495a4:	50800104 	addi	r2,r10,4
   495a8:	54800017 	ldw	r18,0(r10)
   495ac:	0027883a 	mov	r19,zero
   495b0:	4801a00e 	bge	r9,zero,49c34 <___vfiprintf_internal_r+0x1038>
   495b4:	d8802215 	stw	r2,136(sp)
   495b8:	0039883a 	mov	fp,zero
   495bc:	94c4b03a 	or	r2,r18,r19
   495c0:	103f901e 	bne	r2,zero,49404 <__alt_data_end+0xfffe2304>
   495c4:	00800044 	movi	r2,1
   495c8:	10803fcc 	andi	r2,r2,255
   495cc:	00c00044 	movi	r3,1
   495d0:	10c05926 	beq	r2,r3,49738 <___vfiprintf_internal_r+0xb3c>
   495d4:	00c00084 	movi	r3,2
   495d8:	10ffe41e 	bne	r2,r3,4956c <__alt_data_end+0xfffe246c>
   495dc:	0025883a 	mov	r18,zero
   495e0:	0027883a 	mov	r19,zero
   495e4:	00013d06 	br	49adc <___vfiprintf_internal_r+0xee0>
   495e8:	21003fcc 	andi	r4,r4,255
   495ec:	2002811e 	bne	r4,zero,49ff4 <___vfiprintf_internal_r+0x13f8>
   495f0:	00800174 	movhi	r2,5
   495f4:	1089c104 	addi	r2,r2,9988
   495f8:	d8802615 	stw	r2,152(sp)
   495fc:	a080080c 	andi	r2,r20,32
   49600:	103f561e 	bne	r2,zero,4935c <__alt_data_end+0xfffe225c>
   49604:	a080040c 	andi	r2,r20,16
   49608:	1001d126 	beq	r2,zero,49d50 <___vfiprintf_internal_r+0x1154>
   4960c:	da802217 	ldw	r10,136(sp)
   49610:	0027883a 	mov	r19,zero
   49614:	54800017 	ldw	r18,0(r10)
   49618:	52800104 	addi	r10,r10,4
   4961c:	da802215 	stw	r10,136(sp)
   49620:	003f5306 	br	49370 <__alt_data_end+0xfffe2270>
   49624:	da802217 	ldw	r10,136(sp)
   49628:	d8001d85 	stb	zero,118(sp)
   4962c:	55400017 	ldw	r21,0(r10)
   49630:	50c00104 	addi	r3,r10,4
   49634:	a8024226 	beq	r21,zero,49f40 <___vfiprintf_internal_r+0x1344>
   49638:	48021816 	blt	r9,zero,49e9c <___vfiprintf_internal_r+0x12a0>
   4963c:	480d883a 	mov	r6,r9
   49640:	000b883a 	mov	r5,zero
   49644:	a809883a 	mov	r4,r21
   49648:	d8c02a15 	stw	r3,168(sp)
   4964c:	da002b15 	stw	r8,172(sp)
   49650:	da402c15 	stw	r9,176(sp)
   49654:	0046df80 	call	46df8 <memchr>
   49658:	d8c02a17 	ldw	r3,168(sp)
   4965c:	da002b17 	ldw	r8,172(sp)
   49660:	da402c17 	ldw	r9,176(sp)
   49664:	10024826 	beq	r2,zero,49f88 <___vfiprintf_internal_r+0x138c>
   49668:	1567c83a 	sub	r19,r2,r21
   4966c:	df001d83 	ldbu	fp,118(sp)
   49670:	d8c02215 	stw	r3,136(sp)
   49674:	0013883a 	mov	r9,zero
   49678:	003e6006 	br	48ffc <__alt_data_end+0xfffe1efc>
   4967c:	21003fcc 	andi	r4,r4,255
   49680:	203fc026 	beq	r4,zero,49584 <__alt_data_end+0xfffe2484>
   49684:	d9c01d85 	stb	r7,118(sp)
   49688:	003fbe06 	br	49584 <__alt_data_end+0xfffe2484>
   4968c:	da802217 	ldw	r10,136(sp)
   49690:	54400017 	ldw	r17,0(r10)
   49694:	50800104 	addi	r2,r10,4
   49698:	883e3b16 	blt	r17,zero,48f88 <__alt_data_end+0xfffe1e88>
   4969c:	d8802215 	stw	r2,136(sp)
   496a0:	80c00007 	ldb	r3,0(r16)
   496a4:	003db406 	br	48d78 <__alt_data_end+0xfffe1c78>
   496a8:	01000044 	movi	r4,1
   496ac:	01c00ac4 	movi	r7,43
   496b0:	80c00007 	ldb	r3,0(r16)
   496b4:	003db006 	br	48d78 <__alt_data_end+0xfffe1c78>
   496b8:	80c00007 	ldb	r3,0(r16)
   496bc:	82800044 	addi	r10,r16,1
   496c0:	1b423c26 	beq	r3,r13,49fb4 <___vfiprintf_internal_r+0x13b8>
   496c4:	18bff404 	addi	r2,r3,-48
   496c8:	0013883a 	mov	r9,zero
   496cc:	30822b36 	bltu	r6,r2,49f7c <___vfiprintf_internal_r+0x1380>
   496d0:	50c00007 	ldb	r3,0(r10)
   496d4:	4a4002a4 	muli	r9,r9,10
   496d8:	54000044 	addi	r16,r10,1
   496dc:	8015883a 	mov	r10,r16
   496e0:	4893883a 	add	r9,r9,r2
   496e4:	18bff404 	addi	r2,r3,-48
   496e8:	30bff92e 	bgeu	r6,r2,496d0 <__alt_data_end+0xfffe25d0>
   496ec:	483da30e 	bge	r9,zero,48d7c <__alt_data_end+0xfffe1c7c>
   496f0:	027fffc4 	movi	r9,-1
   496f4:	003da106 	br	48d7c <__alt_data_end+0xfffe1c7c>
   496f8:	a5001014 	ori	r20,r20,64
   496fc:	80c00007 	ldb	r3,0(r16)
   49700:	003d9d06 	br	48d78 <__alt_data_end+0xfffe1c78>
   49704:	da802217 	ldw	r10,136(sp)
   49708:	d8001d85 	stb	zero,118(sp)
   4970c:	50c00204 	addi	r3,r10,8
   49710:	54800017 	ldw	r18,0(r10)
   49714:	54c00117 	ldw	r19,4(r10)
   49718:	4801ca16 	blt	r9,zero,49e44 <___vfiprintf_internal_r+0x1248>
   4971c:	013fdfc4 	movi	r4,-129
   49720:	94c4b03a 	or	r2,r18,r19
   49724:	d8c02215 	stw	r3,136(sp)
   49728:	a128703a 	and	r20,r20,r4
   4972c:	0039883a 	mov	fp,zero
   49730:	103f341e 	bne	r2,zero,49404 <__alt_data_end+0xfffe2304>
   49734:	483e2e26 	beq	r9,zero,48ff0 <__alt_data_end+0xfffe1ef0>
   49738:	0025883a 	mov	r18,zero
   4973c:	94800c04 	addi	r18,r18,48
   49740:	dc8019c5 	stb	r18,103(sp)
   49744:	dcc02717 	ldw	r19,156(sp)
   49748:	dd4019c4 	addi	r21,sp,103
   4974c:	003e2b06 	br	48ffc <__alt_data_end+0xfffe1efc>
   49750:	21003fcc 	andi	r4,r4,255
   49754:	2002361e 	bne	r4,zero,4a030 <___vfiprintf_internal_r+0x1434>
   49758:	1801c126 	beq	r3,zero,49e60 <___vfiprintf_internal_r+0x1264>
   4975c:	04800044 	movi	r18,1
   49760:	d8c01005 	stb	r3,64(sp)
   49764:	d8001d85 	stb	zero,118(sp)
   49768:	9027883a 	mov	r19,r18
   4976c:	dd401004 	addi	r21,sp,64
   49770:	003f1106 	br	493b8 <__alt_data_end+0xfffe22b8>
   49774:	d9402117 	ldw	r5,132(sp)
   49778:	d9002017 	ldw	r4,128(sp)
   4977c:	d9801a04 	addi	r6,sp,104
   49780:	d9c02b15 	stw	r7,172(sp)
   49784:	dbc02a15 	stw	r15,168(sp)
   49788:	0048ae80 	call	48ae8 <__sprint_r.part.0>
   4978c:	d9c02b17 	ldw	r7,172(sp)
   49790:	dbc02a17 	ldw	r15,168(sp)
   49794:	10006d1e 	bne	r2,zero,4994c <___vfiprintf_internal_r+0xd50>
   49798:	d9801b17 	ldw	r6,108(sp)
   4979c:	d8801c17 	ldw	r2,112(sp)
   497a0:	d811883a 	mov	r8,sp
   497a4:	31400044 	addi	r5,r6,1
   497a8:	003e3306 	br	49078 <__alt_data_end+0xfffe1f78>
   497ac:	d9401b17 	ldw	r5,108(sp)
   497b0:	d8801c17 	ldw	r2,112(sp)
   497b4:	29000044 	addi	r4,r5,1
   497b8:	d8c01d87 	ldb	r3,118(sp)
   497bc:	183e4d26 	beq	r3,zero,490f4 <__alt_data_end+0xfffe1ff4>
   497c0:	00c00044 	movi	r3,1
   497c4:	d9401d84 	addi	r5,sp,118
   497c8:	10c5883a 	add	r2,r2,r3
   497cc:	41400015 	stw	r5,0(r8)
   497d0:	40c00115 	stw	r3,4(r8)
   497d4:	d8801c15 	stw	r2,112(sp)
   497d8:	d9001b15 	stw	r4,108(sp)
   497dc:	014001c4 	movi	r5,7
   497e0:	2900a90e 	bge	r5,r4,49a88 <___vfiprintf_internal_r+0xe8c>
   497e4:	1000da1e 	bne	r2,zero,49b50 <___vfiprintf_internal_r+0xf54>
   497e8:	7000ab1e 	bne	r14,zero,49a98 <___vfiprintf_internal_r+0xe9c>
   497ec:	000b883a 	mov	r5,zero
   497f0:	1809883a 	mov	r4,r3
   497f4:	d811883a 	mov	r8,sp
   497f8:	00c02004 	movi	r3,128
   497fc:	e0fe4d26 	beq	fp,r3,49134 <__alt_data_end+0xfffe2034>
   49800:	4cf9c83a 	sub	fp,r9,r19
   49804:	073e7b0e 	bge	zero,fp,491f4 <__alt_data_end+0xfffe20f4>
   49808:	01c00404 	movi	r7,16
   4980c:	3f01900e 	bge	r7,fp,49e50 <___vfiprintf_internal_r+0x1254>
   49810:	00c00174 	movhi	r3,5
   49814:	18ca2704 	addi	r3,r3,10396
   49818:	d8c02415 	stw	r3,144(sp)
   4981c:	034001c4 	movi	r13,7
   49820:	00000506 	br	49838 <___vfiprintf_internal_r+0xc3c>
   49824:	29000084 	addi	r4,r5,2
   49828:	42000204 	addi	r8,r8,8
   4982c:	180b883a 	mov	r5,r3
   49830:	e73ffc04 	addi	fp,fp,-16
   49834:	3f000d0e 	bge	r7,fp,4986c <___vfiprintf_internal_r+0xc70>
   49838:	10800404 	addi	r2,r2,16
   4983c:	28c00044 	addi	r3,r5,1
   49840:	45c00015 	stw	r23,0(r8)
   49844:	41c00115 	stw	r7,4(r8)
   49848:	d8801c15 	stw	r2,112(sp)
   4984c:	d8c01b15 	stw	r3,108(sp)
   49850:	68fff40e 	bge	r13,r3,49824 <__alt_data_end+0xfffe2724>
   49854:	1000101e 	bne	r2,zero,49898 <___vfiprintf_internal_r+0xc9c>
   49858:	e73ffc04 	addi	fp,fp,-16
   4985c:	01000044 	movi	r4,1
   49860:	000b883a 	mov	r5,zero
   49864:	d811883a 	mov	r8,sp
   49868:	3f3ff316 	blt	r7,fp,49838 <__alt_data_end+0xfffe2738>
   4986c:	da802417 	ldw	r10,144(sp)
   49870:	1705883a 	add	r2,r2,fp
   49874:	47000115 	stw	fp,4(r8)
   49878:	42800015 	stw	r10,0(r8)
   4987c:	d8801c15 	stw	r2,112(sp)
   49880:	d9001b15 	stw	r4,108(sp)
   49884:	00c001c4 	movi	r3,7
   49888:	19003616 	blt	r3,r4,49964 <___vfiprintf_internal_r+0xd68>
   4988c:	42000204 	addi	r8,r8,8
   49890:	21000044 	addi	r4,r4,1
   49894:	003e5706 	br	491f4 <__alt_data_end+0xfffe20f4>
   49898:	d9402117 	ldw	r5,132(sp)
   4989c:	d9002017 	ldw	r4,128(sp)
   498a0:	d9801a04 	addi	r6,sp,104
   498a4:	d9c02b15 	stw	r7,172(sp)
   498a8:	db402a15 	stw	r13,168(sp)
   498ac:	0048ae80 	call	48ae8 <__sprint_r.part.0>
   498b0:	d9c02b17 	ldw	r7,172(sp)
   498b4:	db402a17 	ldw	r13,168(sp)
   498b8:	1000241e 	bne	r2,zero,4994c <___vfiprintf_internal_r+0xd50>
   498bc:	d9401b17 	ldw	r5,108(sp)
   498c0:	d8801c17 	ldw	r2,112(sp)
   498c4:	d811883a 	mov	r8,sp
   498c8:	29000044 	addi	r4,r5,1
   498cc:	003fd806 	br	49830 <__alt_data_end+0xfffe2730>
   498d0:	d9401b17 	ldw	r5,108(sp)
   498d4:	00c00174 	movhi	r3,5
   498d8:	18ca2b04 	addi	r3,r3,10412
   498dc:	d8c02415 	stw	r3,144(sp)
   498e0:	29400044 	addi	r5,r5,1
   498e4:	d8c02417 	ldw	r3,144(sp)
   498e8:	14c5883a 	add	r2,r2,r19
   498ec:	44c00115 	stw	r19,4(r8)
   498f0:	40c00015 	stw	r3,0(r8)
   498f4:	d8801c15 	stw	r2,112(sp)
   498f8:	d9401b15 	stw	r5,108(sp)
   498fc:	00c001c4 	movi	r3,7
   49900:	1940070e 	bge	r3,r5,49920 <___vfiprintf_internal_r+0xd24>
   49904:	103e4826 	beq	r2,zero,49228 <__alt_data_end+0xfffe2128>
   49908:	d9402117 	ldw	r5,132(sp)
   4990c:	d9002017 	ldw	r4,128(sp)
   49910:	d9801a04 	addi	r6,sp,104
   49914:	0048ae80 	call	48ae8 <__sprint_r.part.0>
   49918:	10000c1e 	bne	r2,zero,4994c <___vfiprintf_internal_r+0xd50>
   4991c:	d8801c17 	ldw	r2,112(sp)
   49920:	8c80010e 	bge	r17,r18,49928 <___vfiprintf_internal_r+0xd2c>
   49924:	9023883a 	mov	r17,r18
   49928:	da802317 	ldw	r10,140(sp)
   4992c:	5455883a 	add	r10,r10,r17
   49930:	da802315 	stw	r10,140(sp)
   49934:	103e4126 	beq	r2,zero,4923c <__alt_data_end+0xfffe213c>
   49938:	d9402117 	ldw	r5,132(sp)
   4993c:	d9002017 	ldw	r4,128(sp)
   49940:	d9801a04 	addi	r6,sp,104
   49944:	0048ae80 	call	48ae8 <__sprint_r.part.0>
   49948:	103e3c26 	beq	r2,zero,4923c <__alt_data_end+0xfffe213c>
   4994c:	dd002117 	ldw	r20,132(sp)
   49950:	a080030b 	ldhu	r2,12(r20)
   49954:	1080100c 	andi	r2,r2,64
   49958:	1001231e 	bne	r2,zero,49de8 <___vfiprintf_internal_r+0x11ec>
   4995c:	d8802317 	ldw	r2,140(sp)
   49960:	003d7b06 	br	48f50 <__alt_data_end+0xfffe1e50>
   49964:	1000991e 	bne	r2,zero,49bcc <___vfiprintf_internal_r+0xfd0>
   49968:	00c00044 	movi	r3,1
   4996c:	9805883a 	mov	r2,r19
   49970:	dd400015 	stw	r21,0(sp)
   49974:	dcc00115 	stw	r19,4(sp)
   49978:	dcc01c15 	stw	r19,112(sp)
   4997c:	d8c01b15 	stw	r3,108(sp)
   49980:	d811883a 	mov	r8,sp
   49984:	42000204 	addi	r8,r8,8
   49988:	a2c0010c 	andi	r11,r20,4
   4998c:	583fe426 	beq	r11,zero,49920 <__alt_data_end+0xfffe2820>
   49990:	8ca7c83a 	sub	r19,r17,r18
   49994:	04ffe20e 	bge	zero,r19,49920 <__alt_data_end+0xfffe2820>
   49998:	01c00404 	movi	r7,16
   4999c:	3cffcc0e 	bge	r7,r19,498d0 <__alt_data_end+0xfffe27d0>
   499a0:	02800174 	movhi	r10,5
   499a4:	528a2b04 	addi	r10,r10,10412
   499a8:	d9001b17 	ldw	r4,108(sp)
   499ac:	da802415 	stw	r10,144(sp)
   499b0:	382b883a 	mov	r21,r7
   499b4:	050001c4 	movi	r20,7
   499b8:	df002017 	ldw	fp,128(sp)
   499bc:	00000506 	br	499d4 <___vfiprintf_internal_r+0xdd8>
   499c0:	21400084 	addi	r5,r4,2
   499c4:	42000204 	addi	r8,r8,8
   499c8:	1809883a 	mov	r4,r3
   499cc:	9cfffc04 	addi	r19,r19,-16
   499d0:	acffc40e 	bge	r21,r19,498e4 <__alt_data_end+0xfffe27e4>
   499d4:	10800404 	addi	r2,r2,16
   499d8:	20c00044 	addi	r3,r4,1
   499dc:	45800015 	stw	r22,0(r8)
   499e0:	45400115 	stw	r21,4(r8)
   499e4:	d8801c15 	stw	r2,112(sp)
   499e8:	d8c01b15 	stw	r3,108(sp)
   499ec:	a0fff40e 	bge	r20,r3,499c0 <__alt_data_end+0xfffe28c0>
   499f0:	1000041e 	bne	r2,zero,49a04 <___vfiprintf_internal_r+0xe08>
   499f4:	01400044 	movi	r5,1
   499f8:	0009883a 	mov	r4,zero
   499fc:	d811883a 	mov	r8,sp
   49a00:	003ff206 	br	499cc <__alt_data_end+0xfffe28cc>
   49a04:	d9402117 	ldw	r5,132(sp)
   49a08:	d9801a04 	addi	r6,sp,104
   49a0c:	e009883a 	mov	r4,fp
   49a10:	0048ae80 	call	48ae8 <__sprint_r.part.0>
   49a14:	103fcd1e 	bne	r2,zero,4994c <__alt_data_end+0xfffe284c>
   49a18:	d9001b17 	ldw	r4,108(sp)
   49a1c:	d8801c17 	ldw	r2,112(sp)
   49a20:	d811883a 	mov	r8,sp
   49a24:	21400044 	addi	r5,r4,1
   49a28:	003fe806 	br	499cc <__alt_data_end+0xfffe28cc>
   49a2c:	d9402117 	ldw	r5,132(sp)
   49a30:	d9002017 	ldw	r4,128(sp)
   49a34:	d9801a04 	addi	r6,sp,104
   49a38:	d9c02b15 	stw	r7,172(sp)
   49a3c:	db402a15 	stw	r13,168(sp)
   49a40:	0048ae80 	call	48ae8 <__sprint_r.part.0>
   49a44:	d9c02b17 	ldw	r7,172(sp)
   49a48:	db402a17 	ldw	r13,168(sp)
   49a4c:	103fbf1e 	bne	r2,zero,4994c <__alt_data_end+0xfffe284c>
   49a50:	d9401b17 	ldw	r5,108(sp)
   49a54:	d8801c17 	ldw	r2,112(sp)
   49a58:	d811883a 	mov	r8,sp
   49a5c:	29800044 	addi	r6,r5,1
   49a60:	003dc406 	br	49174 <__alt_data_end+0xfffe2074>
   49a64:	1000d21e 	bne	r2,zero,49db0 <___vfiprintf_internal_r+0x11b4>
   49a68:	d8c01d87 	ldb	r3,118(sp)
   49a6c:	18009526 	beq	r3,zero,49cc4 <___vfiprintf_internal_r+0x10c8>
   49a70:	00800044 	movi	r2,1
   49a74:	d8c01d84 	addi	r3,sp,118
   49a78:	1009883a 	mov	r4,r2
   49a7c:	d8c00015 	stw	r3,0(sp)
   49a80:	d8800115 	stw	r2,4(sp)
   49a84:	d811883a 	mov	r8,sp
   49a88:	200b883a 	mov	r5,r4
   49a8c:	42000204 	addi	r8,r8,8
   49a90:	21000044 	addi	r4,r4,1
   49a94:	003d9706 	br	490f4 <__alt_data_end+0xfffe1ff4>
   49a98:	d9001d04 	addi	r4,sp,116
   49a9c:	00800084 	movi	r2,2
   49aa0:	d9000015 	stw	r4,0(sp)
   49aa4:	d8800115 	stw	r2,4(sp)
   49aa8:	1809883a 	mov	r4,r3
   49aac:	d811883a 	mov	r8,sp
   49ab0:	200b883a 	mov	r5,r4
   49ab4:	42000204 	addi	r8,r8,8
   49ab8:	21000044 	addi	r4,r4,1
   49abc:	003f4e06 	br	497f8 <__alt_data_end+0xfffe26f8>
   49ac0:	d8001d85 	stb	zero,118(sp)
   49ac4:	48005016 	blt	r9,zero,49c08 <___vfiprintf_internal_r+0x100c>
   49ac8:	00ffdfc4 	movi	r3,-129
   49acc:	94c4b03a 	or	r2,r18,r19
   49ad0:	a0e8703a 	and	r20,r20,r3
   49ad4:	103d4426 	beq	r2,zero,48fe8 <__alt_data_end+0xfffe1ee8>
   49ad8:	0039883a 	mov	fp,zero
   49adc:	d9002617 	ldw	r4,152(sp)
   49ae0:	dd401a04 	addi	r21,sp,104
   49ae4:	908003cc 	andi	r2,r18,15
   49ae8:	9806973a 	slli	r3,r19,28
   49aec:	2085883a 	add	r2,r4,r2
   49af0:	9024d13a 	srli	r18,r18,4
   49af4:	10800003 	ldbu	r2,0(r2)
   49af8:	9826d13a 	srli	r19,r19,4
   49afc:	ad7fffc4 	addi	r21,r21,-1
   49b00:	1ca4b03a 	or	r18,r3,r18
   49b04:	a8800005 	stb	r2,0(r21)
   49b08:	94c4b03a 	or	r2,r18,r19
   49b0c:	103ff51e 	bne	r2,zero,49ae4 <__alt_data_end+0xfffe29e4>
   49b10:	003e5906 	br	49478 <__alt_data_end+0xfffe2378>
   49b14:	d9402117 	ldw	r5,132(sp)
   49b18:	d9002017 	ldw	r4,128(sp)
   49b1c:	d9801a04 	addi	r6,sp,104
   49b20:	0048ae80 	call	48ae8 <__sprint_r.part.0>
   49b24:	103f891e 	bne	r2,zero,4994c <__alt_data_end+0xfffe284c>
   49b28:	d8801c17 	ldw	r2,112(sp)
   49b2c:	d811883a 	mov	r8,sp
   49b30:	003f9506 	br	49988 <__alt_data_end+0xfffe2888>
   49b34:	d9402117 	ldw	r5,132(sp)
   49b38:	d9002017 	ldw	r4,128(sp)
   49b3c:	d9801a04 	addi	r6,sp,104
   49b40:	0048ae80 	call	48ae8 <__sprint_r.part.0>
   49b44:	103f811e 	bne	r2,zero,4994c <__alt_data_end+0xfffe284c>
   49b48:	d811883a 	mov	r8,sp
   49b4c:	003ced06 	br	48f04 <__alt_data_end+0xfffe1e04>
   49b50:	d9402117 	ldw	r5,132(sp)
   49b54:	d9002017 	ldw	r4,128(sp)
   49b58:	d9801a04 	addi	r6,sp,104
   49b5c:	da402c15 	stw	r9,176(sp)
   49b60:	db802a15 	stw	r14,168(sp)
   49b64:	0048ae80 	call	48ae8 <__sprint_r.part.0>
   49b68:	da402c17 	ldw	r9,176(sp)
   49b6c:	db802a17 	ldw	r14,168(sp)
   49b70:	103f761e 	bne	r2,zero,4994c <__alt_data_end+0xfffe284c>
   49b74:	d9401b17 	ldw	r5,108(sp)
   49b78:	d8801c17 	ldw	r2,112(sp)
   49b7c:	d811883a 	mov	r8,sp
   49b80:	29000044 	addi	r4,r5,1
   49b84:	003d5b06 	br	490f4 <__alt_data_end+0xfffe1ff4>
   49b88:	d9402117 	ldw	r5,132(sp)
   49b8c:	d9002017 	ldw	r4,128(sp)
   49b90:	d9801a04 	addi	r6,sp,104
   49b94:	da402c15 	stw	r9,176(sp)
   49b98:	0048ae80 	call	48ae8 <__sprint_r.part.0>
   49b9c:	da402c17 	ldw	r9,176(sp)
   49ba0:	103f6a1e 	bne	r2,zero,4994c <__alt_data_end+0xfffe284c>
   49ba4:	d9401b17 	ldw	r5,108(sp)
   49ba8:	d8801c17 	ldw	r2,112(sp)
   49bac:	d811883a 	mov	r8,sp
   49bb0:	29000044 	addi	r4,r5,1
   49bb4:	003f1006 	br	497f8 <__alt_data_end+0xfffe26f8>
   49bb8:	1000c31e 	bne	r2,zero,49ec8 <___vfiprintf_internal_r+0x12cc>
   49bbc:	01000044 	movi	r4,1
   49bc0:	000b883a 	mov	r5,zero
   49bc4:	d811883a 	mov	r8,sp
   49bc8:	003f0d06 	br	49800 <__alt_data_end+0xfffe2700>
   49bcc:	d9402117 	ldw	r5,132(sp)
   49bd0:	d9002017 	ldw	r4,128(sp)
   49bd4:	d9801a04 	addi	r6,sp,104
   49bd8:	0048ae80 	call	48ae8 <__sprint_r.part.0>
   49bdc:	103f5b1e 	bne	r2,zero,4994c <__alt_data_end+0xfffe284c>
   49be0:	d9001b17 	ldw	r4,108(sp)
   49be4:	d8801c17 	ldw	r2,112(sp)
   49be8:	d811883a 	mov	r8,sp
   49bec:	21000044 	addi	r4,r4,1
   49bf0:	003d8006 	br	491f4 <__alt_data_end+0xfffe20f4>
   49bf4:	01000174 	movhi	r4,5
   49bf8:	2109c604 	addi	r4,r4,10008
   49bfc:	d9002615 	stw	r4,152(sp)
   49c00:	d8c02215 	stw	r3,136(sp)
   49c04:	1029883a 	mov	r20,r2
   49c08:	94c4b03a 	or	r2,r18,r19
   49c0c:	103fb21e 	bne	r2,zero,49ad8 <__alt_data_end+0xfffe29d8>
   49c10:	0039883a 	mov	fp,zero
   49c14:	00800084 	movi	r2,2
   49c18:	003e6b06 	br	495c8 <__alt_data_end+0xfffe24c8>
   49c1c:	da802217 	ldw	r10,136(sp)
   49c20:	d8001d85 	stb	zero,118(sp)
   49c24:	0027883a 	mov	r19,zero
   49c28:	50800104 	addi	r2,r10,4
   49c2c:	54800017 	ldw	r18,0(r10)
   49c30:	483e6016 	blt	r9,zero,495b4 <__alt_data_end+0xfffe24b4>
   49c34:	00ffdfc4 	movi	r3,-129
   49c38:	d8802215 	stw	r2,136(sp)
   49c3c:	a0e8703a 	and	r20,r20,r3
   49c40:	0039883a 	mov	fp,zero
   49c44:	903ebb26 	beq	r18,zero,49734 <__alt_data_end+0xfffe2634>
   49c48:	00800244 	movi	r2,9
   49c4c:	14bdee36 	bltu	r2,r18,49408 <__alt_data_end+0xfffe2308>
   49c50:	003eba06 	br	4973c <__alt_data_end+0xfffe263c>
   49c54:	00800c04 	movi	r2,48
   49c58:	d8c01d45 	stb	r3,117(sp)
   49c5c:	d8801d05 	stb	r2,116(sp)
   49c60:	d8001d85 	stb	zero,118(sp)
   49c64:	a0c00094 	ori	r3,r20,2
   49c68:	4800a916 	blt	r9,zero,49f10 <___vfiprintf_internal_r+0x1314>
   49c6c:	00bfdfc4 	movi	r2,-129
   49c70:	a096703a 	and	r11,r20,r2
   49c74:	5d000094 	ori	r20,r11,2
   49c78:	0039883a 	mov	fp,zero
   49c7c:	003f9706 	br	49adc <__alt_data_end+0xfffe29dc>
   49c80:	8025883a 	mov	r18,r16
   49c84:	003c2e06 	br	48d40 <__alt_data_end+0xfffe1c40>
   49c88:	00800174 	movhi	r2,5
   49c8c:	1089c604 	addi	r2,r2,10008
   49c90:	0039883a 	mov	fp,zero
   49c94:	d8802615 	stw	r2,152(sp)
   49c98:	003f9006 	br	49adc <__alt_data_end+0xfffe29dc>
   49c9c:	04a5c83a 	sub	r18,zero,r18
   49ca0:	07000b44 	movi	fp,45
   49ca4:	9004c03a 	cmpne	r2,r18,zero
   49ca8:	04e7c83a 	sub	r19,zero,r19
   49cac:	df001d85 	stb	fp,118(sp)
   49cb0:	98a7c83a 	sub	r19,r19,r2
   49cb4:	48009f16 	blt	r9,zero,49f34 <___vfiprintf_internal_r+0x1338>
   49cb8:	00bfdfc4 	movi	r2,-129
   49cbc:	a0a8703a 	and	r20,r20,r2
   49cc0:	003dd006 	br	49404 <__alt_data_end+0xfffe2304>
   49cc4:	70004c26 	beq	r14,zero,49df8 <___vfiprintf_internal_r+0x11fc>
   49cc8:	00800084 	movi	r2,2
   49ccc:	d8c01d04 	addi	r3,sp,116
   49cd0:	d8c00015 	stw	r3,0(sp)
   49cd4:	d8800115 	stw	r2,4(sp)
   49cd8:	01000044 	movi	r4,1
   49cdc:	d811883a 	mov	r8,sp
   49ce0:	003f7306 	br	49ab0 <__alt_data_end+0xfffe29b0>
   49ce4:	a080100c 	andi	r2,r20,64
   49ce8:	da802217 	ldw	r10,136(sp)
   49cec:	103e0626 	beq	r2,zero,49508 <__alt_data_end+0xfffe2408>
   49cf0:	5480000f 	ldh	r18,0(r10)
   49cf4:	52800104 	addi	r10,r10,4
   49cf8:	da802215 	stw	r10,136(sp)
   49cfc:	9027d7fa 	srai	r19,r18,31
   49d00:	9805883a 	mov	r2,r19
   49d04:	003db806 	br	493e8 <__alt_data_end+0xfffe22e8>
   49d08:	a080040c 	andi	r2,r20,16
   49d0c:	1000091e 	bne	r2,zero,49d34 <___vfiprintf_internal_r+0x1138>
   49d10:	a2c0100c 	andi	r11,r20,64
   49d14:	58000726 	beq	r11,zero,49d34 <___vfiprintf_internal_r+0x1138>
   49d18:	da802217 	ldw	r10,136(sp)
   49d1c:	50800017 	ldw	r2,0(r10)
   49d20:	52800104 	addi	r10,r10,4
   49d24:	da802215 	stw	r10,136(sp)
   49d28:	da802317 	ldw	r10,140(sp)
   49d2c:	1280000d 	sth	r10,0(r2)
   49d30:	003be706 	br	48cd0 <__alt_data_end+0xfffe1bd0>
   49d34:	da802217 	ldw	r10,136(sp)
   49d38:	50800017 	ldw	r2,0(r10)
   49d3c:	52800104 	addi	r10,r10,4
   49d40:	da802215 	stw	r10,136(sp)
   49d44:	da802317 	ldw	r10,140(sp)
   49d48:	12800015 	stw	r10,0(r2)
   49d4c:	003be006 	br	48cd0 <__alt_data_end+0xfffe1bd0>
   49d50:	a080100c 	andi	r2,r20,64
   49d54:	da802217 	ldw	r10,136(sp)
   49d58:	10003026 	beq	r2,zero,49e1c <___vfiprintf_internal_r+0x1220>
   49d5c:	5480000b 	ldhu	r18,0(r10)
   49d60:	52800104 	addi	r10,r10,4
   49d64:	0027883a 	mov	r19,zero
   49d68:	da802215 	stw	r10,136(sp)
   49d6c:	003d8006 	br	49370 <__alt_data_end+0xfffe2270>
   49d70:	80c00007 	ldb	r3,0(r16)
   49d74:	003c0006 	br	48d78 <__alt_data_end+0xfffe1c78>
   49d78:	a080100c 	andi	r2,r20,64
   49d7c:	d8001d85 	stb	zero,118(sp)
   49d80:	da802217 	ldw	r10,136(sp)
   49d84:	1000201e 	bne	r2,zero,49e08 <___vfiprintf_internal_r+0x120c>
   49d88:	50800104 	addi	r2,r10,4
   49d8c:	54800017 	ldw	r18,0(r10)
   49d90:	0027883a 	mov	r19,zero
   49d94:	483def0e 	bge	r9,zero,49554 <__alt_data_end+0xfffe2454>
   49d98:	94c6b03a 	or	r3,r18,r19
   49d9c:	d8802215 	stw	r2,136(sp)
   49da0:	183d4e1e 	bne	r3,zero,492dc <__alt_data_end+0xfffe21dc>
   49da4:	0039883a 	mov	fp,zero
   49da8:	0005883a 	mov	r2,zero
   49dac:	003e0606 	br	495c8 <__alt_data_end+0xfffe24c8>
   49db0:	d9402117 	ldw	r5,132(sp)
   49db4:	d9002017 	ldw	r4,128(sp)
   49db8:	d9801a04 	addi	r6,sp,104
   49dbc:	da402c15 	stw	r9,176(sp)
   49dc0:	db802a15 	stw	r14,168(sp)
   49dc4:	0048ae80 	call	48ae8 <__sprint_r.part.0>
   49dc8:	da402c17 	ldw	r9,176(sp)
   49dcc:	db802a17 	ldw	r14,168(sp)
   49dd0:	103ede1e 	bne	r2,zero,4994c <__alt_data_end+0xfffe284c>
   49dd4:	d9401b17 	ldw	r5,108(sp)
   49dd8:	d8801c17 	ldw	r2,112(sp)
   49ddc:	d811883a 	mov	r8,sp
   49de0:	29000044 	addi	r4,r5,1
   49de4:	003e7406 	br	497b8 <__alt_data_end+0xfffe26b8>
   49de8:	00bfffc4 	movi	r2,-1
   49dec:	003c5806 	br	48f50 <__alt_data_end+0xfffe1e50>
   49df0:	d811883a 	mov	r8,sp
   49df4:	003ee806 	br	49998 <__alt_data_end+0xfffe2898>
   49df8:	000b883a 	mov	r5,zero
   49dfc:	01000044 	movi	r4,1
   49e00:	d811883a 	mov	r8,sp
   49e04:	003e7c06 	br	497f8 <__alt_data_end+0xfffe26f8>
   49e08:	50800104 	addi	r2,r10,4
   49e0c:	5480000b 	ldhu	r18,0(r10)
   49e10:	0027883a 	mov	r19,zero
   49e14:	483dcf0e 	bge	r9,zero,49554 <__alt_data_end+0xfffe2454>
   49e18:	003fdf06 	br	49d98 <__alt_data_end+0xfffe2c98>
   49e1c:	54800017 	ldw	r18,0(r10)
   49e20:	52800104 	addi	r10,r10,4
   49e24:	0027883a 	mov	r19,zero
   49e28:	da802215 	stw	r10,136(sp)
   49e2c:	003d5006 	br	49370 <__alt_data_end+0xfffe2270>
   49e30:	50800104 	addi	r2,r10,4
   49e34:	5480000b 	ldhu	r18,0(r10)
   49e38:	0027883a 	mov	r19,zero
   49e3c:	483f7d0e 	bge	r9,zero,49c34 <__alt_data_end+0xfffe2b34>
   49e40:	003ddc06 	br	495b4 <__alt_data_end+0xfffe24b4>
   49e44:	d8c02215 	stw	r3,136(sp)
   49e48:	0039883a 	mov	fp,zero
   49e4c:	003ddb06 	br	495bc <__alt_data_end+0xfffe24bc>
   49e50:	02800174 	movhi	r10,5
   49e54:	528a2704 	addi	r10,r10,10396
   49e58:	da802415 	stw	r10,144(sp)
   49e5c:	003e8306 	br	4986c <__alt_data_end+0xfffe276c>
   49e60:	d8801c17 	ldw	r2,112(sp)
   49e64:	dd002117 	ldw	r20,132(sp)
   49e68:	103eb926 	beq	r2,zero,49950 <__alt_data_end+0xfffe2850>
   49e6c:	d9002017 	ldw	r4,128(sp)
   49e70:	d9801a04 	addi	r6,sp,104
   49e74:	a00b883a 	mov	r5,r20
   49e78:	0048ae80 	call	48ae8 <__sprint_r.part.0>
   49e7c:	003eb406 	br	49950 <__alt_data_end+0xfffe2850>
   49e80:	80c00043 	ldbu	r3,1(r16)
   49e84:	a5000814 	ori	r20,r20,32
   49e88:	84000044 	addi	r16,r16,1
   49e8c:	18c03fcc 	andi	r3,r3,255
   49e90:	18c0201c 	xori	r3,r3,128
   49e94:	18ffe004 	addi	r3,r3,-128
   49e98:	003bb706 	br	48d78 <__alt_data_end+0xfffe1c78>
   49e9c:	a809883a 	mov	r4,r21
   49ea0:	d8c02a15 	stw	r3,168(sp)
   49ea4:	da002b15 	stw	r8,172(sp)
   49ea8:	00415500 	call	41550 <strlen>
   49eac:	d8c02a17 	ldw	r3,168(sp)
   49eb0:	1027883a 	mov	r19,r2
   49eb4:	df001d83 	ldbu	fp,118(sp)
   49eb8:	d8c02215 	stw	r3,136(sp)
   49ebc:	0013883a 	mov	r9,zero
   49ec0:	da002b17 	ldw	r8,172(sp)
   49ec4:	003c4d06 	br	48ffc <__alt_data_end+0xfffe1efc>
   49ec8:	d9402117 	ldw	r5,132(sp)
   49ecc:	d9002017 	ldw	r4,128(sp)
   49ed0:	d9801a04 	addi	r6,sp,104
   49ed4:	da402c15 	stw	r9,176(sp)
   49ed8:	0048ae80 	call	48ae8 <__sprint_r.part.0>
   49edc:	da402c17 	ldw	r9,176(sp)
   49ee0:	103e9a1e 	bne	r2,zero,4994c <__alt_data_end+0xfffe284c>
   49ee4:	d9401b17 	ldw	r5,108(sp)
   49ee8:	d8801c17 	ldw	r2,112(sp)
   49eec:	d811883a 	mov	r8,sp
   49ef0:	29000044 	addi	r4,r5,1
   49ef4:	003e4206 	br	49800 <__alt_data_end+0xfffe2700>
   49ef8:	d9401b17 	ldw	r5,108(sp)
   49efc:	01000174 	movhi	r4,5
   49f00:	210a2b04 	addi	r4,r4,10412
   49f04:	d9002415 	stw	r4,144(sp)
   49f08:	29400044 	addi	r5,r5,1
   49f0c:	003c6d06 	br	490c4 <__alt_data_end+0xfffe1fc4>
   49f10:	0039883a 	mov	fp,zero
   49f14:	00800084 	movi	r2,2
   49f18:	10803fcc 	andi	r2,r2,255
   49f1c:	01000044 	movi	r4,1
   49f20:	11001e26 	beq	r2,r4,49f9c <___vfiprintf_internal_r+0x13a0>
   49f24:	01000084 	movi	r4,2
   49f28:	11001e1e 	bne	r2,r4,49fa4 <___vfiprintf_internal_r+0x13a8>
   49f2c:	1829883a 	mov	r20,r3
   49f30:	003eea06 	br	49adc <__alt_data_end+0xfffe29dc>
   49f34:	a007883a 	mov	r3,r20
   49f38:	00800044 	movi	r2,1
   49f3c:	003ff606 	br	49f18 <__alt_data_end+0xfffe2e18>
   49f40:	00800184 	movi	r2,6
   49f44:	1240012e 	bgeu	r2,r9,49f4c <___vfiprintf_internal_r+0x1350>
   49f48:	1013883a 	mov	r9,r2
   49f4c:	4827883a 	mov	r19,r9
   49f50:	4825883a 	mov	r18,r9
   49f54:	48001516 	blt	r9,zero,49fac <___vfiprintf_internal_r+0x13b0>
   49f58:	05400174 	movhi	r21,5
   49f5c:	d8c02215 	stw	r3,136(sp)
   49f60:	ad49cb04 	addi	r21,r21,10028
   49f64:	003d1406 	br	493b8 <__alt_data_end+0xfffe22b8>
   49f68:	02800174 	movhi	r10,5
   49f6c:	528a2704 	addi	r10,r10,10396
   49f70:	da802415 	stw	r10,144(sp)
   49f74:	200d883a 	mov	r6,r4
   49f78:	003c9106 	br	491c0 <__alt_data_end+0xfffe20c0>
   49f7c:	5021883a 	mov	r16,r10
   49f80:	0013883a 	mov	r9,zero
   49f84:	003b7d06 	br	48d7c <__alt_data_end+0xfffe1c7c>
   49f88:	4827883a 	mov	r19,r9
   49f8c:	df001d83 	ldbu	fp,118(sp)
   49f90:	d8c02215 	stw	r3,136(sp)
   49f94:	0013883a 	mov	r9,zero
   49f98:	003c1806 	br	48ffc <__alt_data_end+0xfffe1efc>
   49f9c:	1829883a 	mov	r20,r3
   49fa0:	003d1806 	br	49404 <__alt_data_end+0xfffe2304>
   49fa4:	1829883a 	mov	r20,r3
   49fa8:	003ccd06 	br	492e0 <__alt_data_end+0xfffe21e0>
   49fac:	0025883a 	mov	r18,zero
   49fb0:	003fe906 	br	49f58 <__alt_data_end+0xfffe2e58>
   49fb4:	d8802217 	ldw	r2,136(sp)
   49fb8:	80c00043 	ldbu	r3,1(r16)
   49fbc:	5021883a 	mov	r16,r10
   49fc0:	12400017 	ldw	r9,0(r2)
   49fc4:	10800104 	addi	r2,r2,4
   49fc8:	d8802215 	stw	r2,136(sp)
   49fcc:	483faf0e 	bge	r9,zero,49e8c <__alt_data_end+0xfffe2d8c>
   49fd0:	18c03fcc 	andi	r3,r3,255
   49fd4:	18c0201c 	xori	r3,r3,128
   49fd8:	027fffc4 	movi	r9,-1
   49fdc:	18ffe004 	addi	r3,r3,-128
   49fe0:	003b6506 	br	48d78 <__alt_data_end+0xfffe1c78>
   49fe4:	d9c01d85 	stb	r7,118(sp)
   49fe8:	003ca006 	br	4926c <__alt_data_end+0xfffe216c>
   49fec:	d9c01d85 	stb	r7,118(sp)
   49ff0:	003cad06 	br	492a8 <__alt_data_end+0xfffe21a8>
   49ff4:	d9c01d85 	stb	r7,118(sp)
   49ff8:	003d7d06 	br	495f0 <__alt_data_end+0xfffe24f0>
   49ffc:	d9c01d85 	stb	r7,118(sp)
   4a000:	003d5f06 	br	49580 <__alt_data_end+0xfffe2480>
   4a004:	a080004c 	andi	r2,r20,1
   4a008:	0039883a 	mov	fp,zero
   4a00c:	10000526 	beq	r2,zero,4a024 <___vfiprintf_internal_r+0x1428>
   4a010:	00800c04 	movi	r2,48
   4a014:	d88019c5 	stb	r2,103(sp)
   4a018:	dcc02717 	ldw	r19,156(sp)
   4a01c:	dd4019c4 	addi	r21,sp,103
   4a020:	003bf606 	br	48ffc <__alt_data_end+0xfffe1efc>
   4a024:	0027883a 	mov	r19,zero
   4a028:	dd401a04 	addi	r21,sp,104
   4a02c:	003bf306 	br	48ffc <__alt_data_end+0xfffe1efc>
   4a030:	d9c01d85 	stb	r7,118(sp)
   4a034:	003dc806 	br	49758 <__alt_data_end+0xfffe2658>
   4a038:	d9c01d85 	stb	r7,118(sp)
   4a03c:	003d3a06 	br	49528 <__alt_data_end+0xfffe2428>
   4a040:	d9c01d85 	stb	r7,118(sp)
   4a044:	003d2a06 	br	494f0 <__alt_data_end+0xfffe23f0>
   4a048:	d9c01d85 	stb	r7,118(sp)
   4a04c:	003cde06 	br	493c8 <__alt_data_end+0xfffe22c8>
   4a050:	d9c01d85 	stb	r7,118(sp)
   4a054:	003cbc06 	br	49348 <__alt_data_end+0xfffe2248>

0004a058 <__vfiprintf_internal>:
   4a058:	00800174 	movhi	r2,5
   4a05c:	10910004 	addi	r2,r2,17408
   4a060:	300f883a 	mov	r7,r6
   4a064:	280d883a 	mov	r6,r5
   4a068:	200b883a 	mov	r5,r4
   4a06c:	11000017 	ldw	r4,0(r2)
   4a070:	0048bfc1 	jmpi	48bfc <___vfiprintf_internal_r>

0004a074 <__sbprintf>:
   4a074:	2880030b 	ldhu	r2,12(r5)
   4a078:	2ac01917 	ldw	r11,100(r5)
   4a07c:	2a80038b 	ldhu	r10,14(r5)
   4a080:	2a400717 	ldw	r9,28(r5)
   4a084:	2a000917 	ldw	r8,36(r5)
   4a088:	defee204 	addi	sp,sp,-1144
   4a08c:	00c10004 	movi	r3,1024
   4a090:	dc011a15 	stw	r16,1128(sp)
   4a094:	10bfff4c 	andi	r2,r2,65533
   4a098:	2821883a 	mov	r16,r5
   4a09c:	d8cb883a 	add	r5,sp,r3
   4a0a0:	dc811c15 	stw	r18,1136(sp)
   4a0a4:	dc411b15 	stw	r17,1132(sp)
   4a0a8:	dfc11d15 	stw	ra,1140(sp)
   4a0ac:	2025883a 	mov	r18,r4
   4a0b0:	d881030d 	sth	r2,1036(sp)
   4a0b4:	dac11915 	stw	r11,1124(sp)
   4a0b8:	da81038d 	sth	r10,1038(sp)
   4a0bc:	da410715 	stw	r9,1052(sp)
   4a0c0:	da010915 	stw	r8,1060(sp)
   4a0c4:	dec10015 	stw	sp,1024(sp)
   4a0c8:	dec10415 	stw	sp,1040(sp)
   4a0cc:	d8c10215 	stw	r3,1032(sp)
   4a0d0:	d8c10515 	stw	r3,1044(sp)
   4a0d4:	d8010615 	stw	zero,1048(sp)
   4a0d8:	0048bfc0 	call	48bfc <___vfiprintf_internal_r>
   4a0dc:	1023883a 	mov	r17,r2
   4a0e0:	10000416 	blt	r2,zero,4a0f4 <__sbprintf+0x80>
   4a0e4:	d9410004 	addi	r5,sp,1024
   4a0e8:	9009883a 	mov	r4,r18
   4a0ec:	00454b00 	call	454b0 <_fflush_r>
   4a0f0:	10000d1e 	bne	r2,zero,4a128 <__sbprintf+0xb4>
   4a0f4:	d881030b 	ldhu	r2,1036(sp)
   4a0f8:	1080100c 	andi	r2,r2,64
   4a0fc:	10000326 	beq	r2,zero,4a10c <__sbprintf+0x98>
   4a100:	8080030b 	ldhu	r2,12(r16)
   4a104:	10801014 	ori	r2,r2,64
   4a108:	8080030d 	sth	r2,12(r16)
   4a10c:	8805883a 	mov	r2,r17
   4a110:	dfc11d17 	ldw	ra,1140(sp)
   4a114:	dc811c17 	ldw	r18,1136(sp)
   4a118:	dc411b17 	ldw	r17,1132(sp)
   4a11c:	dc011a17 	ldw	r16,1128(sp)
   4a120:	dec11e04 	addi	sp,sp,1144
   4a124:	f800283a 	ret
   4a128:	047fffc4 	movi	r17,-1
   4a12c:	003ff106 	br	4a0f4 <__alt_data_end+0xfffe2ff4>

0004a130 <_write_r>:
   4a130:	defffd04 	addi	sp,sp,-12
   4a134:	2805883a 	mov	r2,r5
   4a138:	dc000015 	stw	r16,0(sp)
   4a13c:	04000174 	movhi	r16,5
   4a140:	dc400115 	stw	r17,4(sp)
   4a144:	300b883a 	mov	r5,r6
   4a148:	8417e204 	addi	r16,r16,24456
   4a14c:	2023883a 	mov	r17,r4
   4a150:	380d883a 	mov	r6,r7
   4a154:	1009883a 	mov	r4,r2
   4a158:	dfc00215 	stw	ra,8(sp)
   4a15c:	80000015 	stw	zero,0(r16)
   4a160:	004e5900 	call	4e590 <write>
   4a164:	00ffffc4 	movi	r3,-1
   4a168:	10c00526 	beq	r2,r3,4a180 <_write_r+0x50>
   4a16c:	dfc00217 	ldw	ra,8(sp)
   4a170:	dc400117 	ldw	r17,4(sp)
   4a174:	dc000017 	ldw	r16,0(sp)
   4a178:	dec00304 	addi	sp,sp,12
   4a17c:	f800283a 	ret
   4a180:	80c00017 	ldw	r3,0(r16)
   4a184:	183ff926 	beq	r3,zero,4a16c <__alt_data_end+0xfffe306c>
   4a188:	88c00015 	stw	r3,0(r17)
   4a18c:	003ff706 	br	4a16c <__alt_data_end+0xfffe306c>

0004a190 <_close_r>:
   4a190:	defffd04 	addi	sp,sp,-12
   4a194:	dc000015 	stw	r16,0(sp)
   4a198:	04000174 	movhi	r16,5
   4a19c:	dc400115 	stw	r17,4(sp)
   4a1a0:	8417e204 	addi	r16,r16,24456
   4a1a4:	2023883a 	mov	r17,r4
   4a1a8:	2809883a 	mov	r4,r5
   4a1ac:	dfc00215 	stw	ra,8(sp)
   4a1b0:	80000015 	stw	zero,0(r16)
   4a1b4:	004dd1c0 	call	4dd1c <close>
   4a1b8:	00ffffc4 	movi	r3,-1
   4a1bc:	10c00526 	beq	r2,r3,4a1d4 <_close_r+0x44>
   4a1c0:	dfc00217 	ldw	ra,8(sp)
   4a1c4:	dc400117 	ldw	r17,4(sp)
   4a1c8:	dc000017 	ldw	r16,0(sp)
   4a1cc:	dec00304 	addi	sp,sp,12
   4a1d0:	f800283a 	ret
   4a1d4:	80c00017 	ldw	r3,0(r16)
   4a1d8:	183ff926 	beq	r3,zero,4a1c0 <__alt_data_end+0xfffe30c0>
   4a1dc:	88c00015 	stw	r3,0(r17)
   4a1e0:	003ff706 	br	4a1c0 <__alt_data_end+0xfffe30c0>

0004a1e4 <_calloc_r>:
   4a1e4:	298b383a 	mul	r5,r5,r6
   4a1e8:	defffe04 	addi	sp,sp,-8
   4a1ec:	dfc00115 	stw	ra,4(sp)
   4a1f0:	dc000015 	stw	r16,0(sp)
   4a1f4:	00465ec0 	call	465ec <_malloc_r>
   4a1f8:	10002926 	beq	r2,zero,4a2a0 <_calloc_r+0xbc>
   4a1fc:	11bfff17 	ldw	r6,-4(r2)
   4a200:	1021883a 	mov	r16,r2
   4a204:	00bfff04 	movi	r2,-4
   4a208:	308c703a 	and	r6,r6,r2
   4a20c:	00c00904 	movi	r3,36
   4a210:	308d883a 	add	r6,r6,r2
   4a214:	19801636 	bltu	r3,r6,4a270 <_calloc_r+0x8c>
   4a218:	008004c4 	movi	r2,19
   4a21c:	11800b2e 	bgeu	r2,r6,4a24c <_calloc_r+0x68>
   4a220:	80000015 	stw	zero,0(r16)
   4a224:	80000115 	stw	zero,4(r16)
   4a228:	008006c4 	movi	r2,27
   4a22c:	11801a2e 	bgeu	r2,r6,4a298 <_calloc_r+0xb4>
   4a230:	80000215 	stw	zero,8(r16)
   4a234:	80000315 	stw	zero,12(r16)
   4a238:	30c0151e 	bne	r6,r3,4a290 <_calloc_r+0xac>
   4a23c:	80000415 	stw	zero,16(r16)
   4a240:	80800604 	addi	r2,r16,24
   4a244:	80000515 	stw	zero,20(r16)
   4a248:	00000106 	br	4a250 <_calloc_r+0x6c>
   4a24c:	8005883a 	mov	r2,r16
   4a250:	10000015 	stw	zero,0(r2)
   4a254:	10000115 	stw	zero,4(r2)
   4a258:	10000215 	stw	zero,8(r2)
   4a25c:	8005883a 	mov	r2,r16
   4a260:	dfc00117 	ldw	ra,4(sp)
   4a264:	dc000017 	ldw	r16,0(sp)
   4a268:	dec00204 	addi	sp,sp,8
   4a26c:	f800283a 	ret
   4a270:	000b883a 	mov	r5,zero
   4a274:	8009883a 	mov	r4,r16
   4a278:	00471800 	call	47180 <memset>
   4a27c:	8005883a 	mov	r2,r16
   4a280:	dfc00117 	ldw	ra,4(sp)
   4a284:	dc000017 	ldw	r16,0(sp)
   4a288:	dec00204 	addi	sp,sp,8
   4a28c:	f800283a 	ret
   4a290:	80800404 	addi	r2,r16,16
   4a294:	003fee06 	br	4a250 <__alt_data_end+0xfffe3150>
   4a298:	80800204 	addi	r2,r16,8
   4a29c:	003fec06 	br	4a250 <__alt_data_end+0xfffe3150>
   4a2a0:	0005883a 	mov	r2,zero
   4a2a4:	003fee06 	br	4a260 <__alt_data_end+0xfffe3160>

0004a2a8 <_fclose_r>:
   4a2a8:	28003926 	beq	r5,zero,4a390 <_fclose_r+0xe8>
   4a2ac:	defffc04 	addi	sp,sp,-16
   4a2b0:	dc400115 	stw	r17,4(sp)
   4a2b4:	dc000015 	stw	r16,0(sp)
   4a2b8:	dfc00315 	stw	ra,12(sp)
   4a2bc:	dc800215 	stw	r18,8(sp)
   4a2c0:	2023883a 	mov	r17,r4
   4a2c4:	2821883a 	mov	r16,r5
   4a2c8:	20000226 	beq	r4,zero,4a2d4 <_fclose_r+0x2c>
   4a2cc:	20800e17 	ldw	r2,56(r4)
   4a2d0:	10002726 	beq	r2,zero,4a370 <_fclose_r+0xc8>
   4a2d4:	8080030f 	ldh	r2,12(r16)
   4a2d8:	1000071e 	bne	r2,zero,4a2f8 <_fclose_r+0x50>
   4a2dc:	0005883a 	mov	r2,zero
   4a2e0:	dfc00317 	ldw	ra,12(sp)
   4a2e4:	dc800217 	ldw	r18,8(sp)
   4a2e8:	dc400117 	ldw	r17,4(sp)
   4a2ec:	dc000017 	ldw	r16,0(sp)
   4a2f0:	dec00404 	addi	sp,sp,16
   4a2f4:	f800283a 	ret
   4a2f8:	800b883a 	mov	r5,r16
   4a2fc:	8809883a 	mov	r4,r17
   4a300:	00452940 	call	45294 <__sflush_r>
   4a304:	1025883a 	mov	r18,r2
   4a308:	80800b17 	ldw	r2,44(r16)
   4a30c:	10000426 	beq	r2,zero,4a320 <_fclose_r+0x78>
   4a310:	81400717 	ldw	r5,28(r16)
   4a314:	8809883a 	mov	r4,r17
   4a318:	103ee83a 	callr	r2
   4a31c:	10001616 	blt	r2,zero,4a378 <_fclose_r+0xd0>
   4a320:	8080030b 	ldhu	r2,12(r16)
   4a324:	1080200c 	andi	r2,r2,128
   4a328:	1000151e 	bne	r2,zero,4a380 <_fclose_r+0xd8>
   4a32c:	81400c17 	ldw	r5,48(r16)
   4a330:	28000526 	beq	r5,zero,4a348 <_fclose_r+0xa0>
   4a334:	80801004 	addi	r2,r16,64
   4a338:	28800226 	beq	r5,r2,4a344 <_fclose_r+0x9c>
   4a33c:	8809883a 	mov	r4,r17
   4a340:	0045a000 	call	45a00 <_free_r>
   4a344:	80000c15 	stw	zero,48(r16)
   4a348:	81401117 	ldw	r5,68(r16)
   4a34c:	28000326 	beq	r5,zero,4a35c <_fclose_r+0xb4>
   4a350:	8809883a 	mov	r4,r17
   4a354:	0045a000 	call	45a00 <_free_r>
   4a358:	80001115 	stw	zero,68(r16)
   4a35c:	004589c0 	call	4589c <__sfp_lock_acquire>
   4a360:	8000030d 	sth	zero,12(r16)
   4a364:	00458a00 	call	458a0 <__sfp_lock_release>
   4a368:	9005883a 	mov	r2,r18
   4a36c:	003fdc06 	br	4a2e0 <__alt_data_end+0xfffe31e0>
   4a370:	004588c0 	call	4588c <__sinit>
   4a374:	003fd706 	br	4a2d4 <__alt_data_end+0xfffe31d4>
   4a378:	04bfffc4 	movi	r18,-1
   4a37c:	003fe806 	br	4a320 <__alt_data_end+0xfffe3220>
   4a380:	81400417 	ldw	r5,16(r16)
   4a384:	8809883a 	mov	r4,r17
   4a388:	0045a000 	call	45a00 <_free_r>
   4a38c:	003fe706 	br	4a32c <__alt_data_end+0xfffe322c>
   4a390:	0005883a 	mov	r2,zero
   4a394:	f800283a 	ret

0004a398 <fclose>:
   4a398:	00800174 	movhi	r2,5
   4a39c:	10910004 	addi	r2,r2,17408
   4a3a0:	200b883a 	mov	r5,r4
   4a3a4:	11000017 	ldw	r4,0(r2)
   4a3a8:	004a2a81 	jmpi	4a2a8 <_fclose_r>

0004a3ac <__fputwc>:
   4a3ac:	defff804 	addi	sp,sp,-32
   4a3b0:	dcc00415 	stw	r19,16(sp)
   4a3b4:	dc800315 	stw	r18,12(sp)
   4a3b8:	dc000115 	stw	r16,4(sp)
   4a3bc:	dfc00715 	stw	ra,28(sp)
   4a3c0:	dd400615 	stw	r21,24(sp)
   4a3c4:	dd000515 	stw	r20,20(sp)
   4a3c8:	dc400215 	stw	r17,8(sp)
   4a3cc:	2027883a 	mov	r19,r4
   4a3d0:	2825883a 	mov	r18,r5
   4a3d4:	3021883a 	mov	r16,r6
   4a3d8:	00463dc0 	call	463dc <__locale_mb_cur_max>
   4a3dc:	00c00044 	movi	r3,1
   4a3e0:	10c03e26 	beq	r2,r3,4a4dc <__fputwc+0x130>
   4a3e4:	81c01704 	addi	r7,r16,92
   4a3e8:	900d883a 	mov	r6,r18
   4a3ec:	d80b883a 	mov	r5,sp
   4a3f0:	9809883a 	mov	r4,r19
   4a3f4:	004a87c0 	call	4a87c <_wcrtomb_r>
   4a3f8:	1029883a 	mov	r20,r2
   4a3fc:	00bfffc4 	movi	r2,-1
   4a400:	a0802026 	beq	r20,r2,4a484 <__fputwc+0xd8>
   4a404:	d9400003 	ldbu	r5,0(sp)
   4a408:	a0001c26 	beq	r20,zero,4a47c <__fputwc+0xd0>
   4a40c:	0023883a 	mov	r17,zero
   4a410:	05400284 	movi	r21,10
   4a414:	00000906 	br	4a43c <__fputwc+0x90>
   4a418:	80800017 	ldw	r2,0(r16)
   4a41c:	11400005 	stb	r5,0(r2)
   4a420:	80c00017 	ldw	r3,0(r16)
   4a424:	18c00044 	addi	r3,r3,1
   4a428:	80c00015 	stw	r3,0(r16)
   4a42c:	8c400044 	addi	r17,r17,1
   4a430:	dc45883a 	add	r2,sp,r17
   4a434:	8d00112e 	bgeu	r17,r20,4a47c <__fputwc+0xd0>
   4a438:	11400003 	ldbu	r5,0(r2)
   4a43c:	80c00217 	ldw	r3,8(r16)
   4a440:	18ffffc4 	addi	r3,r3,-1
   4a444:	80c00215 	stw	r3,8(r16)
   4a448:	183ff30e 	bge	r3,zero,4a418 <__alt_data_end+0xfffe3318>
   4a44c:	80800617 	ldw	r2,24(r16)
   4a450:	18801916 	blt	r3,r2,4a4b8 <__fputwc+0x10c>
   4a454:	80800017 	ldw	r2,0(r16)
   4a458:	11400005 	stb	r5,0(r2)
   4a45c:	80800017 	ldw	r2,0(r16)
   4a460:	10c00003 	ldbu	r3,0(r2)
   4a464:	10800044 	addi	r2,r2,1
   4a468:	1d402326 	beq	r3,r21,4a4f8 <__fputwc+0x14c>
   4a46c:	80800015 	stw	r2,0(r16)
   4a470:	8c400044 	addi	r17,r17,1
   4a474:	dc45883a 	add	r2,sp,r17
   4a478:	8d3fef36 	bltu	r17,r20,4a438 <__alt_data_end+0xfffe3338>
   4a47c:	9005883a 	mov	r2,r18
   4a480:	00000406 	br	4a494 <__fputwc+0xe8>
   4a484:	80c0030b 	ldhu	r3,12(r16)
   4a488:	a005883a 	mov	r2,r20
   4a48c:	18c01014 	ori	r3,r3,64
   4a490:	80c0030d 	sth	r3,12(r16)
   4a494:	dfc00717 	ldw	ra,28(sp)
   4a498:	dd400617 	ldw	r21,24(sp)
   4a49c:	dd000517 	ldw	r20,20(sp)
   4a4a0:	dcc00417 	ldw	r19,16(sp)
   4a4a4:	dc800317 	ldw	r18,12(sp)
   4a4a8:	dc400217 	ldw	r17,8(sp)
   4a4ac:	dc000117 	ldw	r16,4(sp)
   4a4b0:	dec00804 	addi	sp,sp,32
   4a4b4:	f800283a 	ret
   4a4b8:	800d883a 	mov	r6,r16
   4a4bc:	29403fcc 	andi	r5,r5,255
   4a4c0:	9809883a 	mov	r4,r19
   4a4c4:	004a7240 	call	4a724 <__swbuf_r>
   4a4c8:	10bfffe0 	cmpeqi	r2,r2,-1
   4a4cc:	10803fcc 	andi	r2,r2,255
   4a4d0:	103fd626 	beq	r2,zero,4a42c <__alt_data_end+0xfffe332c>
   4a4d4:	00bfffc4 	movi	r2,-1
   4a4d8:	003fee06 	br	4a494 <__alt_data_end+0xfffe3394>
   4a4dc:	90ffffc4 	addi	r3,r18,-1
   4a4e0:	01003f84 	movi	r4,254
   4a4e4:	20ffbf36 	bltu	r4,r3,4a3e4 <__alt_data_end+0xfffe32e4>
   4a4e8:	900b883a 	mov	r5,r18
   4a4ec:	dc800005 	stb	r18,0(sp)
   4a4f0:	1029883a 	mov	r20,r2
   4a4f4:	003fc506 	br	4a40c <__alt_data_end+0xfffe330c>
   4a4f8:	800d883a 	mov	r6,r16
   4a4fc:	a80b883a 	mov	r5,r21
   4a500:	9809883a 	mov	r4,r19
   4a504:	004a7240 	call	4a724 <__swbuf_r>
   4a508:	10bfffe0 	cmpeqi	r2,r2,-1
   4a50c:	003fef06 	br	4a4cc <__alt_data_end+0xfffe33cc>

0004a510 <_fputwc_r>:
   4a510:	3080030b 	ldhu	r2,12(r6)
   4a514:	10c8000c 	andi	r3,r2,8192
   4a518:	1800051e 	bne	r3,zero,4a530 <_fputwc_r+0x20>
   4a51c:	30c01917 	ldw	r3,100(r6)
   4a520:	10880014 	ori	r2,r2,8192
   4a524:	3080030d 	sth	r2,12(r6)
   4a528:	18880014 	ori	r2,r3,8192
   4a52c:	30801915 	stw	r2,100(r6)
   4a530:	004a3ac1 	jmpi	4a3ac <__fputwc>

0004a534 <fputwc>:
   4a534:	00800174 	movhi	r2,5
   4a538:	defffc04 	addi	sp,sp,-16
   4a53c:	10910004 	addi	r2,r2,17408
   4a540:	dc000115 	stw	r16,4(sp)
   4a544:	14000017 	ldw	r16,0(r2)
   4a548:	dc400215 	stw	r17,8(sp)
   4a54c:	dfc00315 	stw	ra,12(sp)
   4a550:	2023883a 	mov	r17,r4
   4a554:	80000226 	beq	r16,zero,4a560 <fputwc+0x2c>
   4a558:	80800e17 	ldw	r2,56(r16)
   4a55c:	10001026 	beq	r2,zero,4a5a0 <fputwc+0x6c>
   4a560:	2880030b 	ldhu	r2,12(r5)
   4a564:	10c8000c 	andi	r3,r2,8192
   4a568:	1800051e 	bne	r3,zero,4a580 <fputwc+0x4c>
   4a56c:	28c01917 	ldw	r3,100(r5)
   4a570:	10880014 	ori	r2,r2,8192
   4a574:	2880030d 	sth	r2,12(r5)
   4a578:	18880014 	ori	r2,r3,8192
   4a57c:	28801915 	stw	r2,100(r5)
   4a580:	280d883a 	mov	r6,r5
   4a584:	8009883a 	mov	r4,r16
   4a588:	880b883a 	mov	r5,r17
   4a58c:	dfc00317 	ldw	ra,12(sp)
   4a590:	dc400217 	ldw	r17,8(sp)
   4a594:	dc000117 	ldw	r16,4(sp)
   4a598:	dec00404 	addi	sp,sp,16
   4a59c:	004a3ac1 	jmpi	4a3ac <__fputwc>
   4a5a0:	8009883a 	mov	r4,r16
   4a5a4:	d9400015 	stw	r5,0(sp)
   4a5a8:	004588c0 	call	4588c <__sinit>
   4a5ac:	d9400017 	ldw	r5,0(sp)
   4a5b0:	003feb06 	br	4a560 <__alt_data_end+0xfffe3460>

0004a5b4 <_fstat_r>:
   4a5b4:	defffd04 	addi	sp,sp,-12
   4a5b8:	2805883a 	mov	r2,r5
   4a5bc:	dc000015 	stw	r16,0(sp)
   4a5c0:	04000174 	movhi	r16,5
   4a5c4:	dc400115 	stw	r17,4(sp)
   4a5c8:	8417e204 	addi	r16,r16,24456
   4a5cc:	2023883a 	mov	r17,r4
   4a5d0:	300b883a 	mov	r5,r6
   4a5d4:	1009883a 	mov	r4,r2
   4a5d8:	dfc00215 	stw	ra,8(sp)
   4a5dc:	80000015 	stw	zero,0(r16)
   4a5e0:	004de680 	call	4de68 <fstat>
   4a5e4:	00ffffc4 	movi	r3,-1
   4a5e8:	10c00526 	beq	r2,r3,4a600 <_fstat_r+0x4c>
   4a5ec:	dfc00217 	ldw	ra,8(sp)
   4a5f0:	dc400117 	ldw	r17,4(sp)
   4a5f4:	dc000017 	ldw	r16,0(sp)
   4a5f8:	dec00304 	addi	sp,sp,12
   4a5fc:	f800283a 	ret
   4a600:	80c00017 	ldw	r3,0(r16)
   4a604:	183ff926 	beq	r3,zero,4a5ec <__alt_data_end+0xfffe34ec>
   4a608:	88c00015 	stw	r3,0(r17)
   4a60c:	003ff706 	br	4a5ec <__alt_data_end+0xfffe34ec>

0004a610 <_isatty_r>:
   4a610:	defffd04 	addi	sp,sp,-12
   4a614:	dc000015 	stw	r16,0(sp)
   4a618:	04000174 	movhi	r16,5
   4a61c:	dc400115 	stw	r17,4(sp)
   4a620:	8417e204 	addi	r16,r16,24456
   4a624:	2023883a 	mov	r17,r4
   4a628:	2809883a 	mov	r4,r5
   4a62c:	dfc00215 	stw	ra,8(sp)
   4a630:	80000015 	stw	zero,0(r16)
   4a634:	004df680 	call	4df68 <isatty>
   4a638:	00ffffc4 	movi	r3,-1
   4a63c:	10c00526 	beq	r2,r3,4a654 <_isatty_r+0x44>
   4a640:	dfc00217 	ldw	ra,8(sp)
   4a644:	dc400117 	ldw	r17,4(sp)
   4a648:	dc000017 	ldw	r16,0(sp)
   4a64c:	dec00304 	addi	sp,sp,12
   4a650:	f800283a 	ret
   4a654:	80c00017 	ldw	r3,0(r16)
   4a658:	183ff926 	beq	r3,zero,4a640 <__alt_data_end+0xfffe3540>
   4a65c:	88c00015 	stw	r3,0(r17)
   4a660:	003ff706 	br	4a640 <__alt_data_end+0xfffe3540>

0004a664 <_lseek_r>:
   4a664:	defffd04 	addi	sp,sp,-12
   4a668:	2805883a 	mov	r2,r5
   4a66c:	dc000015 	stw	r16,0(sp)
   4a670:	04000174 	movhi	r16,5
   4a674:	dc400115 	stw	r17,4(sp)
   4a678:	300b883a 	mov	r5,r6
   4a67c:	8417e204 	addi	r16,r16,24456
   4a680:	2023883a 	mov	r17,r4
   4a684:	380d883a 	mov	r6,r7
   4a688:	1009883a 	mov	r4,r2
   4a68c:	dfc00215 	stw	ra,8(sp)
   4a690:	80000015 	stw	zero,0(r16)
   4a694:	004e1480 	call	4e148 <lseek>
   4a698:	00ffffc4 	movi	r3,-1
   4a69c:	10c00526 	beq	r2,r3,4a6b4 <_lseek_r+0x50>
   4a6a0:	dfc00217 	ldw	ra,8(sp)
   4a6a4:	dc400117 	ldw	r17,4(sp)
   4a6a8:	dc000017 	ldw	r16,0(sp)
   4a6ac:	dec00304 	addi	sp,sp,12
   4a6b0:	f800283a 	ret
   4a6b4:	80c00017 	ldw	r3,0(r16)
   4a6b8:	183ff926 	beq	r3,zero,4a6a0 <__alt_data_end+0xfffe35a0>
   4a6bc:	88c00015 	stw	r3,0(r17)
   4a6c0:	003ff706 	br	4a6a0 <__alt_data_end+0xfffe35a0>

0004a6c4 <_read_r>:
   4a6c4:	defffd04 	addi	sp,sp,-12
   4a6c8:	2805883a 	mov	r2,r5
   4a6cc:	dc000015 	stw	r16,0(sp)
   4a6d0:	04000174 	movhi	r16,5
   4a6d4:	dc400115 	stw	r17,4(sp)
   4a6d8:	300b883a 	mov	r5,r6
   4a6dc:	8417e204 	addi	r16,r16,24456
   4a6e0:	2023883a 	mov	r17,r4
   4a6e4:	380d883a 	mov	r6,r7
   4a6e8:	1009883a 	mov	r4,r2
   4a6ec:	dfc00215 	stw	ra,8(sp)
   4a6f0:	80000015 	stw	zero,0(r16)
   4a6f4:	004e3300 	call	4e330 <read>
   4a6f8:	00ffffc4 	movi	r3,-1
   4a6fc:	10c00526 	beq	r2,r3,4a714 <_read_r+0x50>
   4a700:	dfc00217 	ldw	ra,8(sp)
   4a704:	dc400117 	ldw	r17,4(sp)
   4a708:	dc000017 	ldw	r16,0(sp)
   4a70c:	dec00304 	addi	sp,sp,12
   4a710:	f800283a 	ret
   4a714:	80c00017 	ldw	r3,0(r16)
   4a718:	183ff926 	beq	r3,zero,4a700 <__alt_data_end+0xfffe3600>
   4a71c:	88c00015 	stw	r3,0(r17)
   4a720:	003ff706 	br	4a700 <__alt_data_end+0xfffe3600>

0004a724 <__swbuf_r>:
   4a724:	defffb04 	addi	sp,sp,-20
   4a728:	dcc00315 	stw	r19,12(sp)
   4a72c:	dc800215 	stw	r18,8(sp)
   4a730:	dc000015 	stw	r16,0(sp)
   4a734:	dfc00415 	stw	ra,16(sp)
   4a738:	dc400115 	stw	r17,4(sp)
   4a73c:	2025883a 	mov	r18,r4
   4a740:	2827883a 	mov	r19,r5
   4a744:	3021883a 	mov	r16,r6
   4a748:	20000226 	beq	r4,zero,4a754 <__swbuf_r+0x30>
   4a74c:	20800e17 	ldw	r2,56(r4)
   4a750:	10004226 	beq	r2,zero,4a85c <__swbuf_r+0x138>
   4a754:	80800617 	ldw	r2,24(r16)
   4a758:	8100030b 	ldhu	r4,12(r16)
   4a75c:	80800215 	stw	r2,8(r16)
   4a760:	2080020c 	andi	r2,r4,8
   4a764:	10003626 	beq	r2,zero,4a840 <__swbuf_r+0x11c>
   4a768:	80c00417 	ldw	r3,16(r16)
   4a76c:	18003426 	beq	r3,zero,4a840 <__swbuf_r+0x11c>
   4a770:	2088000c 	andi	r2,r4,8192
   4a774:	9c403fcc 	andi	r17,r19,255
   4a778:	10001a26 	beq	r2,zero,4a7e4 <__swbuf_r+0xc0>
   4a77c:	80800017 	ldw	r2,0(r16)
   4a780:	81000517 	ldw	r4,20(r16)
   4a784:	10c7c83a 	sub	r3,r2,r3
   4a788:	1900200e 	bge	r3,r4,4a80c <__swbuf_r+0xe8>
   4a78c:	18c00044 	addi	r3,r3,1
   4a790:	81000217 	ldw	r4,8(r16)
   4a794:	11400044 	addi	r5,r2,1
   4a798:	81400015 	stw	r5,0(r16)
   4a79c:	213fffc4 	addi	r4,r4,-1
   4a7a0:	81000215 	stw	r4,8(r16)
   4a7a4:	14c00005 	stb	r19,0(r2)
   4a7a8:	80800517 	ldw	r2,20(r16)
   4a7ac:	10c01e26 	beq	r2,r3,4a828 <__swbuf_r+0x104>
   4a7b0:	8080030b 	ldhu	r2,12(r16)
   4a7b4:	1080004c 	andi	r2,r2,1
   4a7b8:	10000226 	beq	r2,zero,4a7c4 <__swbuf_r+0xa0>
   4a7bc:	00800284 	movi	r2,10
   4a7c0:	88801926 	beq	r17,r2,4a828 <__swbuf_r+0x104>
   4a7c4:	8805883a 	mov	r2,r17
   4a7c8:	dfc00417 	ldw	ra,16(sp)
   4a7cc:	dcc00317 	ldw	r19,12(sp)
   4a7d0:	dc800217 	ldw	r18,8(sp)
   4a7d4:	dc400117 	ldw	r17,4(sp)
   4a7d8:	dc000017 	ldw	r16,0(sp)
   4a7dc:	dec00504 	addi	sp,sp,20
   4a7e0:	f800283a 	ret
   4a7e4:	81401917 	ldw	r5,100(r16)
   4a7e8:	00b7ffc4 	movi	r2,-8193
   4a7ec:	21080014 	ori	r4,r4,8192
   4a7f0:	2884703a 	and	r2,r5,r2
   4a7f4:	80801915 	stw	r2,100(r16)
   4a7f8:	80800017 	ldw	r2,0(r16)
   4a7fc:	8100030d 	sth	r4,12(r16)
   4a800:	81000517 	ldw	r4,20(r16)
   4a804:	10c7c83a 	sub	r3,r2,r3
   4a808:	193fe016 	blt	r3,r4,4a78c <__alt_data_end+0xfffe368c>
   4a80c:	800b883a 	mov	r5,r16
   4a810:	9009883a 	mov	r4,r18
   4a814:	00454b00 	call	454b0 <_fflush_r>
   4a818:	1000071e 	bne	r2,zero,4a838 <__swbuf_r+0x114>
   4a81c:	80800017 	ldw	r2,0(r16)
   4a820:	00c00044 	movi	r3,1
   4a824:	003fda06 	br	4a790 <__alt_data_end+0xfffe3690>
   4a828:	800b883a 	mov	r5,r16
   4a82c:	9009883a 	mov	r4,r18
   4a830:	00454b00 	call	454b0 <_fflush_r>
   4a834:	103fe326 	beq	r2,zero,4a7c4 <__alt_data_end+0xfffe36c4>
   4a838:	00bfffc4 	movi	r2,-1
   4a83c:	003fe206 	br	4a7c8 <__alt_data_end+0xfffe36c8>
   4a840:	800b883a 	mov	r5,r16
   4a844:	9009883a 	mov	r4,r18
   4a848:	00438b80 	call	438b8 <__swsetup_r>
   4a84c:	103ffa1e 	bne	r2,zero,4a838 <__alt_data_end+0xfffe3738>
   4a850:	8100030b 	ldhu	r4,12(r16)
   4a854:	80c00417 	ldw	r3,16(r16)
   4a858:	003fc506 	br	4a770 <__alt_data_end+0xfffe3670>
   4a85c:	004588c0 	call	4588c <__sinit>
   4a860:	003fbc06 	br	4a754 <__alt_data_end+0xfffe3654>

0004a864 <__swbuf>:
   4a864:	00800174 	movhi	r2,5
   4a868:	10910004 	addi	r2,r2,17408
   4a86c:	280d883a 	mov	r6,r5
   4a870:	200b883a 	mov	r5,r4
   4a874:	11000017 	ldw	r4,0(r2)
   4a878:	004a7241 	jmpi	4a724 <__swbuf_r>

0004a87c <_wcrtomb_r>:
   4a87c:	defff604 	addi	sp,sp,-40
   4a880:	00800174 	movhi	r2,5
   4a884:	dc800815 	stw	r18,32(sp)
   4a888:	dc400715 	stw	r17,28(sp)
   4a88c:	dc000615 	stw	r16,24(sp)
   4a890:	10910404 	addi	r2,r2,17424
   4a894:	dfc00915 	stw	ra,36(sp)
   4a898:	2021883a 	mov	r16,r4
   4a89c:	3823883a 	mov	r17,r7
   4a8a0:	14800017 	ldw	r18,0(r2)
   4a8a4:	28001426 	beq	r5,zero,4a8f8 <_wcrtomb_r+0x7c>
   4a8a8:	d9400415 	stw	r5,16(sp)
   4a8ac:	d9800515 	stw	r6,20(sp)
   4a8b0:	00463d00 	call	463d0 <__locale_charset>
   4a8b4:	d9800517 	ldw	r6,20(sp)
   4a8b8:	d9400417 	ldw	r5,16(sp)
   4a8bc:	100f883a 	mov	r7,r2
   4a8c0:	dc400015 	stw	r17,0(sp)
   4a8c4:	8009883a 	mov	r4,r16
   4a8c8:	903ee83a 	callr	r18
   4a8cc:	00ffffc4 	movi	r3,-1
   4a8d0:	10c0031e 	bne	r2,r3,4a8e0 <_wcrtomb_r+0x64>
   4a8d4:	88000015 	stw	zero,0(r17)
   4a8d8:	00c02284 	movi	r3,138
   4a8dc:	80c00015 	stw	r3,0(r16)
   4a8e0:	dfc00917 	ldw	ra,36(sp)
   4a8e4:	dc800817 	ldw	r18,32(sp)
   4a8e8:	dc400717 	ldw	r17,28(sp)
   4a8ec:	dc000617 	ldw	r16,24(sp)
   4a8f0:	dec00a04 	addi	sp,sp,40
   4a8f4:	f800283a 	ret
   4a8f8:	00463d00 	call	463d0 <__locale_charset>
   4a8fc:	100f883a 	mov	r7,r2
   4a900:	dc400015 	stw	r17,0(sp)
   4a904:	000d883a 	mov	r6,zero
   4a908:	d9400104 	addi	r5,sp,4
   4a90c:	8009883a 	mov	r4,r16
   4a910:	903ee83a 	callr	r18
   4a914:	003fed06 	br	4a8cc <__alt_data_end+0xfffe37cc>

0004a918 <wcrtomb>:
   4a918:	defff604 	addi	sp,sp,-40
   4a91c:	00800174 	movhi	r2,5
   4a920:	dc800615 	stw	r18,24(sp)
   4a924:	dc400515 	stw	r17,20(sp)
   4a928:	10910004 	addi	r2,r2,17408
   4a92c:	dfc00915 	stw	ra,36(sp)
   4a930:	dd000815 	stw	r20,32(sp)
   4a934:	dcc00715 	stw	r19,28(sp)
   4a938:	dc000415 	stw	r16,16(sp)
   4a93c:	3025883a 	mov	r18,r6
   4a940:	14400017 	ldw	r17,0(r2)
   4a944:	20001926 	beq	r4,zero,4a9ac <wcrtomb+0x94>
   4a948:	00800174 	movhi	r2,5
   4a94c:	10910404 	addi	r2,r2,17424
   4a950:	15000017 	ldw	r20,0(r2)
   4a954:	2021883a 	mov	r16,r4
   4a958:	2827883a 	mov	r19,r5
   4a95c:	00463d00 	call	463d0 <__locale_charset>
   4a960:	100f883a 	mov	r7,r2
   4a964:	dc800015 	stw	r18,0(sp)
   4a968:	980d883a 	mov	r6,r19
   4a96c:	800b883a 	mov	r5,r16
   4a970:	8809883a 	mov	r4,r17
   4a974:	a03ee83a 	callr	r20
   4a978:	00ffffc4 	movi	r3,-1
   4a97c:	10c0031e 	bne	r2,r3,4a98c <wcrtomb+0x74>
   4a980:	90000015 	stw	zero,0(r18)
   4a984:	00c02284 	movi	r3,138
   4a988:	88c00015 	stw	r3,0(r17)
   4a98c:	dfc00917 	ldw	ra,36(sp)
   4a990:	dd000817 	ldw	r20,32(sp)
   4a994:	dcc00717 	ldw	r19,28(sp)
   4a998:	dc800617 	ldw	r18,24(sp)
   4a99c:	dc400517 	ldw	r17,20(sp)
   4a9a0:	dc000417 	ldw	r16,16(sp)
   4a9a4:	dec00a04 	addi	sp,sp,40
   4a9a8:	f800283a 	ret
   4a9ac:	00800174 	movhi	r2,5
   4a9b0:	10910404 	addi	r2,r2,17424
   4a9b4:	14000017 	ldw	r16,0(r2)
   4a9b8:	00463d00 	call	463d0 <__locale_charset>
   4a9bc:	100f883a 	mov	r7,r2
   4a9c0:	dc800015 	stw	r18,0(sp)
   4a9c4:	000d883a 	mov	r6,zero
   4a9c8:	d9400104 	addi	r5,sp,4
   4a9cc:	8809883a 	mov	r4,r17
   4a9d0:	803ee83a 	callr	r16
   4a9d4:	003fe806 	br	4a978 <__alt_data_end+0xfffe3878>

0004a9d8 <__ascii_wctomb>:
   4a9d8:	28000526 	beq	r5,zero,4a9f0 <__ascii_wctomb+0x18>
   4a9dc:	00803fc4 	movi	r2,255
   4a9e0:	11800536 	bltu	r2,r6,4a9f8 <__ascii_wctomb+0x20>
   4a9e4:	29800005 	stb	r6,0(r5)
   4a9e8:	00800044 	movi	r2,1
   4a9ec:	f800283a 	ret
   4a9f0:	0005883a 	mov	r2,zero
   4a9f4:	f800283a 	ret
   4a9f8:	00802284 	movi	r2,138
   4a9fc:	20800015 	stw	r2,0(r4)
   4aa00:	00bfffc4 	movi	r2,-1
   4aa04:	f800283a 	ret

0004aa08 <_wctomb_r>:
   4aa08:	00800174 	movhi	r2,5
   4aa0c:	defff904 	addi	sp,sp,-28
   4aa10:	10910404 	addi	r2,r2,17424
   4aa14:	dfc00615 	stw	ra,24(sp)
   4aa18:	dc400515 	stw	r17,20(sp)
   4aa1c:	dc000415 	stw	r16,16(sp)
   4aa20:	3823883a 	mov	r17,r7
   4aa24:	14000017 	ldw	r16,0(r2)
   4aa28:	d9000115 	stw	r4,4(sp)
   4aa2c:	d9400215 	stw	r5,8(sp)
   4aa30:	d9800315 	stw	r6,12(sp)
   4aa34:	00463d00 	call	463d0 <__locale_charset>
   4aa38:	d9800317 	ldw	r6,12(sp)
   4aa3c:	d9400217 	ldw	r5,8(sp)
   4aa40:	d9000117 	ldw	r4,4(sp)
   4aa44:	100f883a 	mov	r7,r2
   4aa48:	dc400015 	stw	r17,0(sp)
   4aa4c:	803ee83a 	callr	r16
   4aa50:	dfc00617 	ldw	ra,24(sp)
   4aa54:	dc400517 	ldw	r17,20(sp)
   4aa58:	dc000417 	ldw	r16,16(sp)
   4aa5c:	dec00704 	addi	sp,sp,28
   4aa60:	f800283a 	ret

0004aa64 <__udivdi3>:
   4aa64:	defff504 	addi	sp,sp,-44
   4aa68:	dcc00415 	stw	r19,16(sp)
   4aa6c:	dc000115 	stw	r16,4(sp)
   4aa70:	dfc00a15 	stw	ra,40(sp)
   4aa74:	df000915 	stw	fp,36(sp)
   4aa78:	ddc00815 	stw	r23,32(sp)
   4aa7c:	dd800715 	stw	r22,28(sp)
   4aa80:	dd400615 	stw	r21,24(sp)
   4aa84:	dd000515 	stw	r20,20(sp)
   4aa88:	dc800315 	stw	r18,12(sp)
   4aa8c:	dc400215 	stw	r17,8(sp)
   4aa90:	2027883a 	mov	r19,r4
   4aa94:	2821883a 	mov	r16,r5
   4aa98:	3800411e 	bne	r7,zero,4aba0 <__udivdi3+0x13c>
   4aa9c:	3023883a 	mov	r17,r6
   4aaa0:	2025883a 	mov	r18,r4
   4aaa4:	2980522e 	bgeu	r5,r6,4abf0 <__udivdi3+0x18c>
   4aaa8:	00bfffd4 	movui	r2,65535
   4aaac:	282d883a 	mov	r22,r5
   4aab0:	1180a836 	bltu	r2,r6,4ad54 <__udivdi3+0x2f0>
   4aab4:	00803fc4 	movi	r2,255
   4aab8:	1185803a 	cmpltu	r2,r2,r6
   4aabc:	100490fa 	slli	r2,r2,3
   4aac0:	3086d83a 	srl	r3,r6,r2
   4aac4:	01000174 	movhi	r4,5
   4aac8:	21097c04 	addi	r4,r4,9712
   4aacc:	20c7883a 	add	r3,r4,r3
   4aad0:	18c00003 	ldbu	r3,0(r3)
   4aad4:	1885883a 	add	r2,r3,r2
   4aad8:	00c00804 	movi	r3,32
   4aadc:	1887c83a 	sub	r3,r3,r2
   4aae0:	18000526 	beq	r3,zero,4aaf8 <__udivdi3+0x94>
   4aae4:	80e0983a 	sll	r16,r16,r3
   4aae8:	9884d83a 	srl	r2,r19,r2
   4aaec:	30e2983a 	sll	r17,r6,r3
   4aaf0:	98e4983a 	sll	r18,r19,r3
   4aaf4:	142cb03a 	or	r22,r2,r16
   4aaf8:	882ad43a 	srli	r21,r17,16
   4aafc:	b009883a 	mov	r4,r22
   4ab00:	8d3fffcc 	andi	r20,r17,65535
   4ab04:	a80b883a 	mov	r5,r21
   4ab08:	004b6700 	call	4b670 <__umodsi3>
   4ab0c:	b009883a 	mov	r4,r22
   4ab10:	a80b883a 	mov	r5,r21
   4ab14:	1027883a 	mov	r19,r2
   4ab18:	004b60c0 	call	4b60c <__udivsi3>
   4ab1c:	102d883a 	mov	r22,r2
   4ab20:	9826943a 	slli	r19,r19,16
   4ab24:	9004d43a 	srli	r2,r18,16
   4ab28:	a5a1383a 	mul	r16,r20,r22
   4ab2c:	14c4b03a 	or	r2,r2,r19
   4ab30:	1400052e 	bgeu	r2,r16,4ab48 <__udivdi3+0xe4>
   4ab34:	1445883a 	add	r2,r2,r17
   4ab38:	b0ffffc4 	addi	r3,r22,-1
   4ab3c:	14400136 	bltu	r2,r17,4ab44 <__udivdi3+0xe0>
   4ab40:	14012336 	bltu	r2,r16,4afd0 <__udivdi3+0x56c>
   4ab44:	182d883a 	mov	r22,r3
   4ab48:	1421c83a 	sub	r16,r2,r16
   4ab4c:	a80b883a 	mov	r5,r21
   4ab50:	8009883a 	mov	r4,r16
   4ab54:	004b6700 	call	4b670 <__umodsi3>
   4ab58:	1027883a 	mov	r19,r2
   4ab5c:	a80b883a 	mov	r5,r21
   4ab60:	8009883a 	mov	r4,r16
   4ab64:	004b60c0 	call	4b60c <__udivsi3>
   4ab68:	9826943a 	slli	r19,r19,16
   4ab6c:	a0a9383a 	mul	r20,r20,r2
   4ab70:	94bfffcc 	andi	r18,r18,65535
   4ab74:	94e4b03a 	or	r18,r18,r19
   4ab78:	9500052e 	bgeu	r18,r20,4ab90 <__udivdi3+0x12c>
   4ab7c:	8ca5883a 	add	r18,r17,r18
   4ab80:	10ffffc4 	addi	r3,r2,-1
   4ab84:	9440f136 	bltu	r18,r17,4af4c <__udivdi3+0x4e8>
   4ab88:	9500f02e 	bgeu	r18,r20,4af4c <__udivdi3+0x4e8>
   4ab8c:	10bfff84 	addi	r2,r2,-2
   4ab90:	b00c943a 	slli	r6,r22,16
   4ab94:	0007883a 	mov	r3,zero
   4ab98:	3084b03a 	or	r2,r6,r2
   4ab9c:	00005906 	br	4ad04 <__udivdi3+0x2a0>
   4aba0:	29c05636 	bltu	r5,r7,4acfc <__udivdi3+0x298>
   4aba4:	00bfffd4 	movui	r2,65535
   4aba8:	11c0622e 	bgeu	r2,r7,4ad34 <__udivdi3+0x2d0>
   4abac:	00804034 	movhi	r2,256
   4abb0:	10bfffc4 	addi	r2,r2,-1
   4abb4:	11c0ee36 	bltu	r2,r7,4af70 <__udivdi3+0x50c>
   4abb8:	00800404 	movi	r2,16
   4abbc:	3886d83a 	srl	r3,r7,r2
   4abc0:	01000174 	movhi	r4,5
   4abc4:	21097c04 	addi	r4,r4,9712
   4abc8:	20c7883a 	add	r3,r4,r3
   4abcc:	18c00003 	ldbu	r3,0(r3)
   4abd0:	05400804 	movi	r21,32
   4abd4:	1885883a 	add	r2,r3,r2
   4abd8:	a8abc83a 	sub	r21,r21,r2
   4abdc:	a800621e 	bne	r21,zero,4ad68 <__udivdi3+0x304>
   4abe0:	3c00e936 	bltu	r7,r16,4af88 <__udivdi3+0x524>
   4abe4:	9985403a 	cmpgeu	r2,r19,r6
   4abe8:	0007883a 	mov	r3,zero
   4abec:	00004506 	br	4ad04 <__udivdi3+0x2a0>
   4abf0:	3000041e 	bne	r6,zero,4ac04 <__udivdi3+0x1a0>
   4abf4:	000b883a 	mov	r5,zero
   4abf8:	01000044 	movi	r4,1
   4abfc:	004b60c0 	call	4b60c <__udivsi3>
   4ac00:	1023883a 	mov	r17,r2
   4ac04:	00bfffd4 	movui	r2,65535
   4ac08:	14404e2e 	bgeu	r2,r17,4ad44 <__udivdi3+0x2e0>
   4ac0c:	00804034 	movhi	r2,256
   4ac10:	10bfffc4 	addi	r2,r2,-1
   4ac14:	1440d836 	bltu	r2,r17,4af78 <__udivdi3+0x514>
   4ac18:	00800404 	movi	r2,16
   4ac1c:	8886d83a 	srl	r3,r17,r2
   4ac20:	01000174 	movhi	r4,5
   4ac24:	21097c04 	addi	r4,r4,9712
   4ac28:	20c7883a 	add	r3,r4,r3
   4ac2c:	18c00003 	ldbu	r3,0(r3)
   4ac30:	1885883a 	add	r2,r3,r2
   4ac34:	00c00804 	movi	r3,32
   4ac38:	1887c83a 	sub	r3,r3,r2
   4ac3c:	18008f1e 	bne	r3,zero,4ae7c <__udivdi3+0x418>
   4ac40:	882ad43a 	srli	r21,r17,16
   4ac44:	8461c83a 	sub	r16,r16,r17
   4ac48:	8d3fffcc 	andi	r20,r17,65535
   4ac4c:	00c00044 	movi	r3,1
   4ac50:	8009883a 	mov	r4,r16
   4ac54:	a80b883a 	mov	r5,r21
   4ac58:	d8c00015 	stw	r3,0(sp)
   4ac5c:	004b6700 	call	4b670 <__umodsi3>
   4ac60:	8009883a 	mov	r4,r16
   4ac64:	a80b883a 	mov	r5,r21
   4ac68:	1027883a 	mov	r19,r2
   4ac6c:	004b60c0 	call	4b60c <__udivsi3>
   4ac70:	9826943a 	slli	r19,r19,16
   4ac74:	9008d43a 	srli	r4,r18,16
   4ac78:	1521383a 	mul	r16,r2,r20
   4ac7c:	102d883a 	mov	r22,r2
   4ac80:	24c8b03a 	or	r4,r4,r19
   4ac84:	d8c00017 	ldw	r3,0(sp)
   4ac88:	2400052e 	bgeu	r4,r16,4aca0 <__udivdi3+0x23c>
   4ac8c:	2449883a 	add	r4,r4,r17
   4ac90:	b0bfffc4 	addi	r2,r22,-1
   4ac94:	24400136 	bltu	r4,r17,4ac9c <__udivdi3+0x238>
   4ac98:	2400ca36 	bltu	r4,r16,4afc4 <__udivdi3+0x560>
   4ac9c:	102d883a 	mov	r22,r2
   4aca0:	2421c83a 	sub	r16,r4,r16
   4aca4:	a80b883a 	mov	r5,r21
   4aca8:	8009883a 	mov	r4,r16
   4acac:	d8c00015 	stw	r3,0(sp)
   4acb0:	004b6700 	call	4b670 <__umodsi3>
   4acb4:	1027883a 	mov	r19,r2
   4acb8:	a80b883a 	mov	r5,r21
   4acbc:	8009883a 	mov	r4,r16
   4acc0:	004b60c0 	call	4b60c <__udivsi3>
   4acc4:	9826943a 	slli	r19,r19,16
   4acc8:	1529383a 	mul	r20,r2,r20
   4accc:	94bfffcc 	andi	r18,r18,65535
   4acd0:	94e4b03a 	or	r18,r18,r19
   4acd4:	d8c00017 	ldw	r3,0(sp)
   4acd8:	9500052e 	bgeu	r18,r20,4acf0 <__udivdi3+0x28c>
   4acdc:	8ca5883a 	add	r18,r17,r18
   4ace0:	113fffc4 	addi	r4,r2,-1
   4ace4:	94409736 	bltu	r18,r17,4af44 <__udivdi3+0x4e0>
   4ace8:	9500962e 	bgeu	r18,r20,4af44 <__udivdi3+0x4e0>
   4acec:	10bfff84 	addi	r2,r2,-2
   4acf0:	b00c943a 	slli	r6,r22,16
   4acf4:	3084b03a 	or	r2,r6,r2
   4acf8:	00000206 	br	4ad04 <__udivdi3+0x2a0>
   4acfc:	0007883a 	mov	r3,zero
   4ad00:	0005883a 	mov	r2,zero
   4ad04:	dfc00a17 	ldw	ra,40(sp)
   4ad08:	df000917 	ldw	fp,36(sp)
   4ad0c:	ddc00817 	ldw	r23,32(sp)
   4ad10:	dd800717 	ldw	r22,28(sp)
   4ad14:	dd400617 	ldw	r21,24(sp)
   4ad18:	dd000517 	ldw	r20,20(sp)
   4ad1c:	dcc00417 	ldw	r19,16(sp)
   4ad20:	dc800317 	ldw	r18,12(sp)
   4ad24:	dc400217 	ldw	r17,8(sp)
   4ad28:	dc000117 	ldw	r16,4(sp)
   4ad2c:	dec00b04 	addi	sp,sp,44
   4ad30:	f800283a 	ret
   4ad34:	00803fc4 	movi	r2,255
   4ad38:	11c5803a 	cmpltu	r2,r2,r7
   4ad3c:	100490fa 	slli	r2,r2,3
   4ad40:	003f9e06 	br	4abbc <__alt_data_end+0xfffe3abc>
   4ad44:	00803fc4 	movi	r2,255
   4ad48:	1445803a 	cmpltu	r2,r2,r17
   4ad4c:	100490fa 	slli	r2,r2,3
   4ad50:	003fb206 	br	4ac1c <__alt_data_end+0xfffe3b1c>
   4ad54:	00804034 	movhi	r2,256
   4ad58:	10bfffc4 	addi	r2,r2,-1
   4ad5c:	11808836 	bltu	r2,r6,4af80 <__udivdi3+0x51c>
   4ad60:	00800404 	movi	r2,16
   4ad64:	003f5606 	br	4aac0 <__alt_data_end+0xfffe39c0>
   4ad68:	30aed83a 	srl	r23,r6,r2
   4ad6c:	3d4e983a 	sll	r7,r7,r21
   4ad70:	80acd83a 	srl	r22,r16,r2
   4ad74:	9884d83a 	srl	r2,r19,r2
   4ad78:	3deeb03a 	or	r23,r7,r23
   4ad7c:	b824d43a 	srli	r18,r23,16
   4ad80:	8560983a 	sll	r16,r16,r21
   4ad84:	b009883a 	mov	r4,r22
   4ad88:	900b883a 	mov	r5,r18
   4ad8c:	3568983a 	sll	r20,r6,r21
   4ad90:	1420b03a 	or	r16,r2,r16
   4ad94:	004b6700 	call	4b670 <__umodsi3>
   4ad98:	b009883a 	mov	r4,r22
   4ad9c:	900b883a 	mov	r5,r18
   4ada0:	1023883a 	mov	r17,r2
   4ada4:	004b60c0 	call	4b60c <__udivsi3>
   4ada8:	8808943a 	slli	r4,r17,16
   4adac:	bf3fffcc 	andi	fp,r23,65535
   4adb0:	8006d43a 	srli	r3,r16,16
   4adb4:	e0a3383a 	mul	r17,fp,r2
   4adb8:	100d883a 	mov	r6,r2
   4adbc:	1906b03a 	or	r3,r3,r4
   4adc0:	1c40042e 	bgeu	r3,r17,4add4 <__udivdi3+0x370>
   4adc4:	1dc7883a 	add	r3,r3,r23
   4adc8:	10bfffc4 	addi	r2,r2,-1
   4adcc:	1dc0752e 	bgeu	r3,r23,4afa4 <__udivdi3+0x540>
   4add0:	100d883a 	mov	r6,r2
   4add4:	1c63c83a 	sub	r17,r3,r17
   4add8:	900b883a 	mov	r5,r18
   4addc:	8809883a 	mov	r4,r17
   4ade0:	d9800015 	stw	r6,0(sp)
   4ade4:	004b6700 	call	4b670 <__umodsi3>
   4ade8:	102d883a 	mov	r22,r2
   4adec:	8809883a 	mov	r4,r17
   4adf0:	900b883a 	mov	r5,r18
   4adf4:	004b60c0 	call	4b60c <__udivsi3>
   4adf8:	b02c943a 	slli	r22,r22,16
   4adfc:	e089383a 	mul	r4,fp,r2
   4ae00:	843fffcc 	andi	r16,r16,65535
   4ae04:	85a0b03a 	or	r16,r16,r22
   4ae08:	d9800017 	ldw	r6,0(sp)
   4ae0c:	8100042e 	bgeu	r16,r4,4ae20 <__udivdi3+0x3bc>
   4ae10:	85e1883a 	add	r16,r16,r23
   4ae14:	10ffffc4 	addi	r3,r2,-1
   4ae18:	85c05e2e 	bgeu	r16,r23,4af94 <__udivdi3+0x530>
   4ae1c:	1805883a 	mov	r2,r3
   4ae20:	300c943a 	slli	r6,r6,16
   4ae24:	a17fffcc 	andi	r5,r20,65535
   4ae28:	a028d43a 	srli	r20,r20,16
   4ae2c:	3084b03a 	or	r2,r6,r2
   4ae30:	10ffffcc 	andi	r3,r2,65535
   4ae34:	100cd43a 	srli	r6,r2,16
   4ae38:	194f383a 	mul	r7,r3,r5
   4ae3c:	1d07383a 	mul	r3,r3,r20
   4ae40:	314b383a 	mul	r5,r6,r5
   4ae44:	3810d43a 	srli	r8,r7,16
   4ae48:	8121c83a 	sub	r16,r16,r4
   4ae4c:	1947883a 	add	r3,r3,r5
   4ae50:	40c7883a 	add	r3,r8,r3
   4ae54:	350d383a 	mul	r6,r6,r20
   4ae58:	1940022e 	bgeu	r3,r5,4ae64 <__udivdi3+0x400>
   4ae5c:	01000074 	movhi	r4,1
   4ae60:	310d883a 	add	r6,r6,r4
   4ae64:	1828d43a 	srli	r20,r3,16
   4ae68:	a18d883a 	add	r6,r20,r6
   4ae6c:	81803e36 	bltu	r16,r6,4af68 <__udivdi3+0x504>
   4ae70:	81803826 	beq	r16,r6,4af54 <__udivdi3+0x4f0>
   4ae74:	0007883a 	mov	r3,zero
   4ae78:	003fa206 	br	4ad04 <__alt_data_end+0xfffe3c04>
   4ae7c:	88e2983a 	sll	r17,r17,r3
   4ae80:	80a8d83a 	srl	r20,r16,r2
   4ae84:	80e0983a 	sll	r16,r16,r3
   4ae88:	882ad43a 	srli	r21,r17,16
   4ae8c:	9884d83a 	srl	r2,r19,r2
   4ae90:	a009883a 	mov	r4,r20
   4ae94:	a80b883a 	mov	r5,r21
   4ae98:	142eb03a 	or	r23,r2,r16
   4ae9c:	98e4983a 	sll	r18,r19,r3
   4aea0:	004b6700 	call	4b670 <__umodsi3>
   4aea4:	a009883a 	mov	r4,r20
   4aea8:	a80b883a 	mov	r5,r21
   4aeac:	1021883a 	mov	r16,r2
   4aeb0:	004b60c0 	call	4b60c <__udivsi3>
   4aeb4:	1039883a 	mov	fp,r2
   4aeb8:	8d3fffcc 	andi	r20,r17,65535
   4aebc:	8020943a 	slli	r16,r16,16
   4aec0:	b804d43a 	srli	r2,r23,16
   4aec4:	a72d383a 	mul	r22,r20,fp
   4aec8:	1404b03a 	or	r2,r2,r16
   4aecc:	1580062e 	bgeu	r2,r22,4aee8 <__udivdi3+0x484>
   4aed0:	1445883a 	add	r2,r2,r17
   4aed4:	e0ffffc4 	addi	r3,fp,-1
   4aed8:	14403836 	bltu	r2,r17,4afbc <__udivdi3+0x558>
   4aedc:	1580372e 	bgeu	r2,r22,4afbc <__udivdi3+0x558>
   4aee0:	e73fff84 	addi	fp,fp,-2
   4aee4:	1445883a 	add	r2,r2,r17
   4aee8:	15adc83a 	sub	r22,r2,r22
   4aeec:	a80b883a 	mov	r5,r21
   4aef0:	b009883a 	mov	r4,r22
   4aef4:	004b6700 	call	4b670 <__umodsi3>
   4aef8:	1027883a 	mov	r19,r2
   4aefc:	b009883a 	mov	r4,r22
   4af00:	a80b883a 	mov	r5,r21
   4af04:	004b60c0 	call	4b60c <__udivsi3>
   4af08:	9826943a 	slli	r19,r19,16
   4af0c:	a0a1383a 	mul	r16,r20,r2
   4af10:	b93fffcc 	andi	r4,r23,65535
   4af14:	24c8b03a 	or	r4,r4,r19
   4af18:	2400062e 	bgeu	r4,r16,4af34 <__udivdi3+0x4d0>
   4af1c:	2449883a 	add	r4,r4,r17
   4af20:	10ffffc4 	addi	r3,r2,-1
   4af24:	24402336 	bltu	r4,r17,4afb4 <__udivdi3+0x550>
   4af28:	2400222e 	bgeu	r4,r16,4afb4 <__udivdi3+0x550>
   4af2c:	10bfff84 	addi	r2,r2,-2
   4af30:	2449883a 	add	r4,r4,r17
   4af34:	e038943a 	slli	fp,fp,16
   4af38:	2421c83a 	sub	r16,r4,r16
   4af3c:	e086b03a 	or	r3,fp,r2
   4af40:	003f4306 	br	4ac50 <__alt_data_end+0xfffe3b50>
   4af44:	2005883a 	mov	r2,r4
   4af48:	003f6906 	br	4acf0 <__alt_data_end+0xfffe3bf0>
   4af4c:	1805883a 	mov	r2,r3
   4af50:	003f0f06 	br	4ab90 <__alt_data_end+0xfffe3a90>
   4af54:	1806943a 	slli	r3,r3,16
   4af58:	9d66983a 	sll	r19,r19,r21
   4af5c:	39ffffcc 	andi	r7,r7,65535
   4af60:	19c7883a 	add	r3,r3,r7
   4af64:	98ffc32e 	bgeu	r19,r3,4ae74 <__alt_data_end+0xfffe3d74>
   4af68:	10bfffc4 	addi	r2,r2,-1
   4af6c:	003fc106 	br	4ae74 <__alt_data_end+0xfffe3d74>
   4af70:	00800604 	movi	r2,24
   4af74:	003f1106 	br	4abbc <__alt_data_end+0xfffe3abc>
   4af78:	00800604 	movi	r2,24
   4af7c:	003f2706 	br	4ac1c <__alt_data_end+0xfffe3b1c>
   4af80:	00800604 	movi	r2,24
   4af84:	003ece06 	br	4aac0 <__alt_data_end+0xfffe39c0>
   4af88:	0007883a 	mov	r3,zero
   4af8c:	00800044 	movi	r2,1
   4af90:	003f5c06 	br	4ad04 <__alt_data_end+0xfffe3c04>
   4af94:	813fa12e 	bgeu	r16,r4,4ae1c <__alt_data_end+0xfffe3d1c>
   4af98:	10bfff84 	addi	r2,r2,-2
   4af9c:	85e1883a 	add	r16,r16,r23
   4afa0:	003f9f06 	br	4ae20 <__alt_data_end+0xfffe3d20>
   4afa4:	1c7f8a2e 	bgeu	r3,r17,4add0 <__alt_data_end+0xfffe3cd0>
   4afa8:	31bfff84 	addi	r6,r6,-2
   4afac:	1dc7883a 	add	r3,r3,r23
   4afb0:	003f8806 	br	4add4 <__alt_data_end+0xfffe3cd4>
   4afb4:	1805883a 	mov	r2,r3
   4afb8:	003fde06 	br	4af34 <__alt_data_end+0xfffe3e34>
   4afbc:	1839883a 	mov	fp,r3
   4afc0:	003fc906 	br	4aee8 <__alt_data_end+0xfffe3de8>
   4afc4:	b5bfff84 	addi	r22,r22,-2
   4afc8:	2449883a 	add	r4,r4,r17
   4afcc:	003f3406 	br	4aca0 <__alt_data_end+0xfffe3ba0>
   4afd0:	b5bfff84 	addi	r22,r22,-2
   4afd4:	1445883a 	add	r2,r2,r17
   4afd8:	003edb06 	br	4ab48 <__alt_data_end+0xfffe3a48>

0004afdc <__umoddi3>:
   4afdc:	defff404 	addi	sp,sp,-48
   4afe0:	df000a15 	stw	fp,40(sp)
   4afe4:	dc400315 	stw	r17,12(sp)
   4afe8:	dc000215 	stw	r16,8(sp)
   4afec:	dfc00b15 	stw	ra,44(sp)
   4aff0:	ddc00915 	stw	r23,36(sp)
   4aff4:	dd800815 	stw	r22,32(sp)
   4aff8:	dd400715 	stw	r21,28(sp)
   4affc:	dd000615 	stw	r20,24(sp)
   4b000:	dcc00515 	stw	r19,20(sp)
   4b004:	dc800415 	stw	r18,16(sp)
   4b008:	2021883a 	mov	r16,r4
   4b00c:	2823883a 	mov	r17,r5
   4b010:	2839883a 	mov	fp,r5
   4b014:	38003c1e 	bne	r7,zero,4b108 <__umoddi3+0x12c>
   4b018:	3027883a 	mov	r19,r6
   4b01c:	2029883a 	mov	r20,r4
   4b020:	2980512e 	bgeu	r5,r6,4b168 <__umoddi3+0x18c>
   4b024:	00bfffd4 	movui	r2,65535
   4b028:	11809a36 	bltu	r2,r6,4b294 <__umoddi3+0x2b8>
   4b02c:	01003fc4 	movi	r4,255
   4b030:	2189803a 	cmpltu	r4,r4,r6
   4b034:	200890fa 	slli	r4,r4,3
   4b038:	3104d83a 	srl	r2,r6,r4
   4b03c:	00c00174 	movhi	r3,5
   4b040:	18c97c04 	addi	r3,r3,9712
   4b044:	1885883a 	add	r2,r3,r2
   4b048:	10c00003 	ldbu	r3,0(r2)
   4b04c:	00800804 	movi	r2,32
   4b050:	1909883a 	add	r4,r3,r4
   4b054:	1125c83a 	sub	r18,r2,r4
   4b058:	90000526 	beq	r18,zero,4b070 <__umoddi3+0x94>
   4b05c:	8ca2983a 	sll	r17,r17,r18
   4b060:	8108d83a 	srl	r4,r16,r4
   4b064:	34a6983a 	sll	r19,r6,r18
   4b068:	84a8983a 	sll	r20,r16,r18
   4b06c:	2478b03a 	or	fp,r4,r17
   4b070:	982ed43a 	srli	r23,r19,16
   4b074:	e009883a 	mov	r4,fp
   4b078:	9dbfffcc 	andi	r22,r19,65535
   4b07c:	b80b883a 	mov	r5,r23
   4b080:	004b6700 	call	4b670 <__umodsi3>
   4b084:	e009883a 	mov	r4,fp
   4b088:	b80b883a 	mov	r5,r23
   4b08c:	102b883a 	mov	r21,r2
   4b090:	004b60c0 	call	4b60c <__udivsi3>
   4b094:	a806943a 	slli	r3,r21,16
   4b098:	a008d43a 	srli	r4,r20,16
   4b09c:	b085383a 	mul	r2,r22,r2
   4b0a0:	20c8b03a 	or	r4,r4,r3
   4b0a4:	2080032e 	bgeu	r4,r2,4b0b4 <__umoddi3+0xd8>
   4b0a8:	24c9883a 	add	r4,r4,r19
   4b0ac:	24c00136 	bltu	r4,r19,4b0b4 <__umoddi3+0xd8>
   4b0b0:	20811036 	bltu	r4,r2,4b4f4 <__umoddi3+0x518>
   4b0b4:	20abc83a 	sub	r21,r4,r2
   4b0b8:	b80b883a 	mov	r5,r23
   4b0bc:	a809883a 	mov	r4,r21
   4b0c0:	004b6700 	call	4b670 <__umodsi3>
   4b0c4:	1023883a 	mov	r17,r2
   4b0c8:	b80b883a 	mov	r5,r23
   4b0cc:	a809883a 	mov	r4,r21
   4b0d0:	004b60c0 	call	4b60c <__udivsi3>
   4b0d4:	8822943a 	slli	r17,r17,16
   4b0d8:	b085383a 	mul	r2,r22,r2
   4b0dc:	a0ffffcc 	andi	r3,r20,65535
   4b0e0:	1c46b03a 	or	r3,r3,r17
   4b0e4:	1880042e 	bgeu	r3,r2,4b0f8 <__umoddi3+0x11c>
   4b0e8:	1cc7883a 	add	r3,r3,r19
   4b0ec:	1cc00236 	bltu	r3,r19,4b0f8 <__umoddi3+0x11c>
   4b0f0:	1880012e 	bgeu	r3,r2,4b0f8 <__umoddi3+0x11c>
   4b0f4:	1cc7883a 	add	r3,r3,r19
   4b0f8:	1885c83a 	sub	r2,r3,r2
   4b0fc:	1484d83a 	srl	r2,r2,r18
   4b100:	0007883a 	mov	r3,zero
   4b104:	00004f06 	br	4b244 <__umoddi3+0x268>
   4b108:	29c04c36 	bltu	r5,r7,4b23c <__umoddi3+0x260>
   4b10c:	00bfffd4 	movui	r2,65535
   4b110:	11c0582e 	bgeu	r2,r7,4b274 <__umoddi3+0x298>
   4b114:	00804034 	movhi	r2,256
   4b118:	10bfffc4 	addi	r2,r2,-1
   4b11c:	11c0e736 	bltu	r2,r7,4b4bc <__umoddi3+0x4e0>
   4b120:	01000404 	movi	r4,16
   4b124:	3904d83a 	srl	r2,r7,r4
   4b128:	00c00174 	movhi	r3,5
   4b12c:	18c97c04 	addi	r3,r3,9712
   4b130:	1885883a 	add	r2,r3,r2
   4b134:	14c00003 	ldbu	r19,0(r2)
   4b138:	00c00804 	movi	r3,32
   4b13c:	9927883a 	add	r19,r19,r4
   4b140:	1ce9c83a 	sub	r20,r3,r19
   4b144:	a000581e 	bne	r20,zero,4b2a8 <__umoddi3+0x2cc>
   4b148:	3c400136 	bltu	r7,r17,4b150 <__umoddi3+0x174>
   4b14c:	8180eb36 	bltu	r16,r6,4b4fc <__umoddi3+0x520>
   4b150:	8185c83a 	sub	r2,r16,r6
   4b154:	89e3c83a 	sub	r17,r17,r7
   4b158:	8089803a 	cmpltu	r4,r16,r2
   4b15c:	8939c83a 	sub	fp,r17,r4
   4b160:	e007883a 	mov	r3,fp
   4b164:	00003706 	br	4b244 <__umoddi3+0x268>
   4b168:	3000041e 	bne	r6,zero,4b17c <__umoddi3+0x1a0>
   4b16c:	000b883a 	mov	r5,zero
   4b170:	01000044 	movi	r4,1
   4b174:	004b60c0 	call	4b60c <__udivsi3>
   4b178:	1027883a 	mov	r19,r2
   4b17c:	00bfffd4 	movui	r2,65535
   4b180:	14c0402e 	bgeu	r2,r19,4b284 <__umoddi3+0x2a8>
   4b184:	00804034 	movhi	r2,256
   4b188:	10bfffc4 	addi	r2,r2,-1
   4b18c:	14c0cd36 	bltu	r2,r19,4b4c4 <__umoddi3+0x4e8>
   4b190:	00800404 	movi	r2,16
   4b194:	9886d83a 	srl	r3,r19,r2
   4b198:	01000174 	movhi	r4,5
   4b19c:	21097c04 	addi	r4,r4,9712
   4b1a0:	20c7883a 	add	r3,r4,r3
   4b1a4:	18c00003 	ldbu	r3,0(r3)
   4b1a8:	1887883a 	add	r3,r3,r2
   4b1ac:	00800804 	movi	r2,32
   4b1b0:	10e5c83a 	sub	r18,r2,r3
   4b1b4:	9000901e 	bne	r18,zero,4b3f8 <__umoddi3+0x41c>
   4b1b8:	982cd43a 	srli	r22,r19,16
   4b1bc:	8ce3c83a 	sub	r17,r17,r19
   4b1c0:	9d7fffcc 	andi	r21,r19,65535
   4b1c4:	b00b883a 	mov	r5,r22
   4b1c8:	8809883a 	mov	r4,r17
   4b1cc:	004b6700 	call	4b670 <__umodsi3>
   4b1d0:	8809883a 	mov	r4,r17
   4b1d4:	b00b883a 	mov	r5,r22
   4b1d8:	1021883a 	mov	r16,r2
   4b1dc:	004b60c0 	call	4b60c <__udivsi3>
   4b1e0:	8006943a 	slli	r3,r16,16
   4b1e4:	a008d43a 	srli	r4,r20,16
   4b1e8:	1545383a 	mul	r2,r2,r21
   4b1ec:	20c8b03a 	or	r4,r4,r3
   4b1f0:	2080042e 	bgeu	r4,r2,4b204 <__umoddi3+0x228>
   4b1f4:	24c9883a 	add	r4,r4,r19
   4b1f8:	24c00236 	bltu	r4,r19,4b204 <__umoddi3+0x228>
   4b1fc:	2080012e 	bgeu	r4,r2,4b204 <__umoddi3+0x228>
   4b200:	24c9883a 	add	r4,r4,r19
   4b204:	20a1c83a 	sub	r16,r4,r2
   4b208:	b00b883a 	mov	r5,r22
   4b20c:	8009883a 	mov	r4,r16
   4b210:	004b6700 	call	4b670 <__umodsi3>
   4b214:	1023883a 	mov	r17,r2
   4b218:	b00b883a 	mov	r5,r22
   4b21c:	8009883a 	mov	r4,r16
   4b220:	004b60c0 	call	4b60c <__udivsi3>
   4b224:	8822943a 	slli	r17,r17,16
   4b228:	1545383a 	mul	r2,r2,r21
   4b22c:	a53fffcc 	andi	r20,r20,65535
   4b230:	a446b03a 	or	r3,r20,r17
   4b234:	18bfb02e 	bgeu	r3,r2,4b0f8 <__alt_data_end+0xfffe3ff8>
   4b238:	003fab06 	br	4b0e8 <__alt_data_end+0xfffe3fe8>
   4b23c:	2005883a 	mov	r2,r4
   4b240:	2807883a 	mov	r3,r5
   4b244:	dfc00b17 	ldw	ra,44(sp)
   4b248:	df000a17 	ldw	fp,40(sp)
   4b24c:	ddc00917 	ldw	r23,36(sp)
   4b250:	dd800817 	ldw	r22,32(sp)
   4b254:	dd400717 	ldw	r21,28(sp)
   4b258:	dd000617 	ldw	r20,24(sp)
   4b25c:	dcc00517 	ldw	r19,20(sp)
   4b260:	dc800417 	ldw	r18,16(sp)
   4b264:	dc400317 	ldw	r17,12(sp)
   4b268:	dc000217 	ldw	r16,8(sp)
   4b26c:	dec00c04 	addi	sp,sp,48
   4b270:	f800283a 	ret
   4b274:	04c03fc4 	movi	r19,255
   4b278:	99c9803a 	cmpltu	r4,r19,r7
   4b27c:	200890fa 	slli	r4,r4,3
   4b280:	003fa806 	br	4b124 <__alt_data_end+0xfffe4024>
   4b284:	00803fc4 	movi	r2,255
   4b288:	14c5803a 	cmpltu	r2,r2,r19
   4b28c:	100490fa 	slli	r2,r2,3
   4b290:	003fc006 	br	4b194 <__alt_data_end+0xfffe4094>
   4b294:	00804034 	movhi	r2,256
   4b298:	10bfffc4 	addi	r2,r2,-1
   4b29c:	11808b36 	bltu	r2,r6,4b4cc <__umoddi3+0x4f0>
   4b2a0:	01000404 	movi	r4,16
   4b2a4:	003f6406 	br	4b038 <__alt_data_end+0xfffe3f38>
   4b2a8:	34c4d83a 	srl	r2,r6,r19
   4b2ac:	3d0e983a 	sll	r7,r7,r20
   4b2b0:	8cf8d83a 	srl	fp,r17,r19
   4b2b4:	8d10983a 	sll	r8,r17,r20
   4b2b8:	38aab03a 	or	r21,r7,r2
   4b2bc:	a82cd43a 	srli	r22,r21,16
   4b2c0:	84e2d83a 	srl	r17,r16,r19
   4b2c4:	e009883a 	mov	r4,fp
   4b2c8:	b00b883a 	mov	r5,r22
   4b2cc:	8a22b03a 	or	r17,r17,r8
   4b2d0:	3524983a 	sll	r18,r6,r20
   4b2d4:	004b6700 	call	4b670 <__umodsi3>
   4b2d8:	e009883a 	mov	r4,fp
   4b2dc:	b00b883a 	mov	r5,r22
   4b2e0:	102f883a 	mov	r23,r2
   4b2e4:	004b60c0 	call	4b60c <__udivsi3>
   4b2e8:	100d883a 	mov	r6,r2
   4b2ec:	b808943a 	slli	r4,r23,16
   4b2f0:	aa3fffcc 	andi	r8,r21,65535
   4b2f4:	8804d43a 	srli	r2,r17,16
   4b2f8:	41af383a 	mul	r23,r8,r6
   4b2fc:	8520983a 	sll	r16,r16,r20
   4b300:	1104b03a 	or	r2,r2,r4
   4b304:	15c0042e 	bgeu	r2,r23,4b318 <__umoddi3+0x33c>
   4b308:	1545883a 	add	r2,r2,r21
   4b30c:	30ffffc4 	addi	r3,r6,-1
   4b310:	1540742e 	bgeu	r2,r21,4b4e4 <__umoddi3+0x508>
   4b314:	180d883a 	mov	r6,r3
   4b318:	15efc83a 	sub	r23,r2,r23
   4b31c:	b00b883a 	mov	r5,r22
   4b320:	b809883a 	mov	r4,r23
   4b324:	d9800115 	stw	r6,4(sp)
   4b328:	da000015 	stw	r8,0(sp)
   4b32c:	004b6700 	call	4b670 <__umodsi3>
   4b330:	b00b883a 	mov	r5,r22
   4b334:	b809883a 	mov	r4,r23
   4b338:	1039883a 	mov	fp,r2
   4b33c:	004b60c0 	call	4b60c <__udivsi3>
   4b340:	da000017 	ldw	r8,0(sp)
   4b344:	e038943a 	slli	fp,fp,16
   4b348:	100b883a 	mov	r5,r2
   4b34c:	4089383a 	mul	r4,r8,r2
   4b350:	8a3fffcc 	andi	r8,r17,65535
   4b354:	4710b03a 	or	r8,r8,fp
   4b358:	d9800117 	ldw	r6,4(sp)
   4b35c:	4100042e 	bgeu	r8,r4,4b370 <__umoddi3+0x394>
   4b360:	4551883a 	add	r8,r8,r21
   4b364:	10bfffc4 	addi	r2,r2,-1
   4b368:	45405a2e 	bgeu	r8,r21,4b4d4 <__umoddi3+0x4f8>
   4b36c:	100b883a 	mov	r5,r2
   4b370:	300c943a 	slli	r6,r6,16
   4b374:	91ffffcc 	andi	r7,r18,65535
   4b378:	9004d43a 	srli	r2,r18,16
   4b37c:	314cb03a 	or	r6,r6,r5
   4b380:	317fffcc 	andi	r5,r6,65535
   4b384:	300cd43a 	srli	r6,r6,16
   4b388:	29d3383a 	mul	r9,r5,r7
   4b38c:	288b383a 	mul	r5,r5,r2
   4b390:	31cf383a 	mul	r7,r6,r7
   4b394:	4806d43a 	srli	r3,r9,16
   4b398:	4111c83a 	sub	r8,r8,r4
   4b39c:	29cb883a 	add	r5,r5,r7
   4b3a0:	194b883a 	add	r5,r3,r5
   4b3a4:	3085383a 	mul	r2,r6,r2
   4b3a8:	29c0022e 	bgeu	r5,r7,4b3b4 <__umoddi3+0x3d8>
   4b3ac:	00c00074 	movhi	r3,1
   4b3b0:	10c5883a 	add	r2,r2,r3
   4b3b4:	2808d43a 	srli	r4,r5,16
   4b3b8:	280a943a 	slli	r5,r5,16
   4b3bc:	4a7fffcc 	andi	r9,r9,65535
   4b3c0:	2085883a 	add	r2,r4,r2
   4b3c4:	2a4b883a 	add	r5,r5,r9
   4b3c8:	40803636 	bltu	r8,r2,4b4a4 <__umoddi3+0x4c8>
   4b3cc:	40804d26 	beq	r8,r2,4b504 <__umoddi3+0x528>
   4b3d0:	4089c83a 	sub	r4,r8,r2
   4b3d4:	280f883a 	mov	r7,r5
   4b3d8:	81cfc83a 	sub	r7,r16,r7
   4b3dc:	81c7803a 	cmpltu	r3,r16,r7
   4b3e0:	20c7c83a 	sub	r3,r4,r3
   4b3e4:	1cc4983a 	sll	r2,r3,r19
   4b3e8:	3d0ed83a 	srl	r7,r7,r20
   4b3ec:	1d06d83a 	srl	r3,r3,r20
   4b3f0:	11c4b03a 	or	r2,r2,r7
   4b3f4:	003f9306 	br	4b244 <__alt_data_end+0xfffe4144>
   4b3f8:	9ca6983a 	sll	r19,r19,r18
   4b3fc:	88e8d83a 	srl	r20,r17,r3
   4b400:	80c4d83a 	srl	r2,r16,r3
   4b404:	982cd43a 	srli	r22,r19,16
   4b408:	8ca2983a 	sll	r17,r17,r18
   4b40c:	a009883a 	mov	r4,r20
   4b410:	b00b883a 	mov	r5,r22
   4b414:	1478b03a 	or	fp,r2,r17
   4b418:	004b6700 	call	4b670 <__umodsi3>
   4b41c:	a009883a 	mov	r4,r20
   4b420:	b00b883a 	mov	r5,r22
   4b424:	1023883a 	mov	r17,r2
   4b428:	004b60c0 	call	4b60c <__udivsi3>
   4b42c:	9d7fffcc 	andi	r21,r19,65535
   4b430:	880a943a 	slli	r5,r17,16
   4b434:	e008d43a 	srli	r4,fp,16
   4b438:	a885383a 	mul	r2,r21,r2
   4b43c:	84a8983a 	sll	r20,r16,r18
   4b440:	2148b03a 	or	r4,r4,r5
   4b444:	2080042e 	bgeu	r4,r2,4b458 <__umoddi3+0x47c>
   4b448:	24c9883a 	add	r4,r4,r19
   4b44c:	24c00236 	bltu	r4,r19,4b458 <__umoddi3+0x47c>
   4b450:	2080012e 	bgeu	r4,r2,4b458 <__umoddi3+0x47c>
   4b454:	24c9883a 	add	r4,r4,r19
   4b458:	20a3c83a 	sub	r17,r4,r2
   4b45c:	b00b883a 	mov	r5,r22
   4b460:	8809883a 	mov	r4,r17
   4b464:	004b6700 	call	4b670 <__umodsi3>
   4b468:	102f883a 	mov	r23,r2
   4b46c:	8809883a 	mov	r4,r17
   4b470:	b00b883a 	mov	r5,r22
   4b474:	004b60c0 	call	4b60c <__udivsi3>
   4b478:	b82e943a 	slli	r23,r23,16
   4b47c:	a885383a 	mul	r2,r21,r2
   4b480:	e13fffcc 	andi	r4,fp,65535
   4b484:	25c8b03a 	or	r4,r4,r23
   4b488:	2080042e 	bgeu	r4,r2,4b49c <__umoddi3+0x4c0>
   4b48c:	24c9883a 	add	r4,r4,r19
   4b490:	24c00236 	bltu	r4,r19,4b49c <__umoddi3+0x4c0>
   4b494:	2080012e 	bgeu	r4,r2,4b49c <__umoddi3+0x4c0>
   4b498:	24c9883a 	add	r4,r4,r19
   4b49c:	20a3c83a 	sub	r17,r4,r2
   4b4a0:	003f4806 	br	4b1c4 <__alt_data_end+0xfffe40c4>
   4b4a4:	2c8fc83a 	sub	r7,r5,r18
   4b4a8:	1545c83a 	sub	r2,r2,r21
   4b4ac:	29cb803a 	cmpltu	r5,r5,r7
   4b4b0:	1145c83a 	sub	r2,r2,r5
   4b4b4:	4089c83a 	sub	r4,r8,r2
   4b4b8:	003fc706 	br	4b3d8 <__alt_data_end+0xfffe42d8>
   4b4bc:	01000604 	movi	r4,24
   4b4c0:	003f1806 	br	4b124 <__alt_data_end+0xfffe4024>
   4b4c4:	00800604 	movi	r2,24
   4b4c8:	003f3206 	br	4b194 <__alt_data_end+0xfffe4094>
   4b4cc:	01000604 	movi	r4,24
   4b4d0:	003ed906 	br	4b038 <__alt_data_end+0xfffe3f38>
   4b4d4:	413fa52e 	bgeu	r8,r4,4b36c <__alt_data_end+0xfffe426c>
   4b4d8:	297fff84 	addi	r5,r5,-2
   4b4dc:	4551883a 	add	r8,r8,r21
   4b4e0:	003fa306 	br	4b370 <__alt_data_end+0xfffe4270>
   4b4e4:	15ff8b2e 	bgeu	r2,r23,4b314 <__alt_data_end+0xfffe4214>
   4b4e8:	31bfff84 	addi	r6,r6,-2
   4b4ec:	1545883a 	add	r2,r2,r21
   4b4f0:	003f8906 	br	4b318 <__alt_data_end+0xfffe4218>
   4b4f4:	24c9883a 	add	r4,r4,r19
   4b4f8:	003eee06 	br	4b0b4 <__alt_data_end+0xfffe3fb4>
   4b4fc:	8005883a 	mov	r2,r16
   4b500:	003f1706 	br	4b160 <__alt_data_end+0xfffe4060>
   4b504:	817fe736 	bltu	r16,r5,4b4a4 <__alt_data_end+0xfffe43a4>
   4b508:	280f883a 	mov	r7,r5
   4b50c:	0009883a 	mov	r4,zero
   4b510:	003fb106 	br	4b3d8 <__alt_data_end+0xfffe42d8>

0004b514 <__divsi3>:
   4b514:	20001b16 	blt	r4,zero,4b584 <__divsi3+0x70>
   4b518:	000f883a 	mov	r7,zero
   4b51c:	28001616 	blt	r5,zero,4b578 <__divsi3+0x64>
   4b520:	200d883a 	mov	r6,r4
   4b524:	29001a2e 	bgeu	r5,r4,4b590 <__divsi3+0x7c>
   4b528:	00800804 	movi	r2,32
   4b52c:	00c00044 	movi	r3,1
   4b530:	00000106 	br	4b538 <__divsi3+0x24>
   4b534:	10000d26 	beq	r2,zero,4b56c <__divsi3+0x58>
   4b538:	294b883a 	add	r5,r5,r5
   4b53c:	10bfffc4 	addi	r2,r2,-1
   4b540:	18c7883a 	add	r3,r3,r3
   4b544:	293ffb36 	bltu	r5,r4,4b534 <__alt_data_end+0xfffe4434>
   4b548:	0005883a 	mov	r2,zero
   4b54c:	18000726 	beq	r3,zero,4b56c <__divsi3+0x58>
   4b550:	0005883a 	mov	r2,zero
   4b554:	31400236 	bltu	r6,r5,4b560 <__divsi3+0x4c>
   4b558:	314dc83a 	sub	r6,r6,r5
   4b55c:	10c4b03a 	or	r2,r2,r3
   4b560:	1806d07a 	srli	r3,r3,1
   4b564:	280ad07a 	srli	r5,r5,1
   4b568:	183ffa1e 	bne	r3,zero,4b554 <__alt_data_end+0xfffe4454>
   4b56c:	38000126 	beq	r7,zero,4b574 <__divsi3+0x60>
   4b570:	0085c83a 	sub	r2,zero,r2
   4b574:	f800283a 	ret
   4b578:	014bc83a 	sub	r5,zero,r5
   4b57c:	39c0005c 	xori	r7,r7,1
   4b580:	003fe706 	br	4b520 <__alt_data_end+0xfffe4420>
   4b584:	0109c83a 	sub	r4,zero,r4
   4b588:	01c00044 	movi	r7,1
   4b58c:	003fe306 	br	4b51c <__alt_data_end+0xfffe441c>
   4b590:	00c00044 	movi	r3,1
   4b594:	003fee06 	br	4b550 <__alt_data_end+0xfffe4450>

0004b598 <__modsi3>:
   4b598:	20001716 	blt	r4,zero,4b5f8 <__modsi3+0x60>
   4b59c:	000f883a 	mov	r7,zero
   4b5a0:	2005883a 	mov	r2,r4
   4b5a4:	28001216 	blt	r5,zero,4b5f0 <__modsi3+0x58>
   4b5a8:	2900162e 	bgeu	r5,r4,4b604 <__modsi3+0x6c>
   4b5ac:	01800804 	movi	r6,32
   4b5b0:	00c00044 	movi	r3,1
   4b5b4:	00000106 	br	4b5bc <__modsi3+0x24>
   4b5b8:	30000a26 	beq	r6,zero,4b5e4 <__modsi3+0x4c>
   4b5bc:	294b883a 	add	r5,r5,r5
   4b5c0:	31bfffc4 	addi	r6,r6,-1
   4b5c4:	18c7883a 	add	r3,r3,r3
   4b5c8:	293ffb36 	bltu	r5,r4,4b5b8 <__alt_data_end+0xfffe44b8>
   4b5cc:	18000526 	beq	r3,zero,4b5e4 <__modsi3+0x4c>
   4b5d0:	1806d07a 	srli	r3,r3,1
   4b5d4:	11400136 	bltu	r2,r5,4b5dc <__modsi3+0x44>
   4b5d8:	1145c83a 	sub	r2,r2,r5
   4b5dc:	280ad07a 	srli	r5,r5,1
   4b5e0:	183ffb1e 	bne	r3,zero,4b5d0 <__alt_data_end+0xfffe44d0>
   4b5e4:	38000126 	beq	r7,zero,4b5ec <__modsi3+0x54>
   4b5e8:	0085c83a 	sub	r2,zero,r2
   4b5ec:	f800283a 	ret
   4b5f0:	014bc83a 	sub	r5,zero,r5
   4b5f4:	003fec06 	br	4b5a8 <__alt_data_end+0xfffe44a8>
   4b5f8:	0109c83a 	sub	r4,zero,r4
   4b5fc:	01c00044 	movi	r7,1
   4b600:	003fe706 	br	4b5a0 <__alt_data_end+0xfffe44a0>
   4b604:	00c00044 	movi	r3,1
   4b608:	003ff106 	br	4b5d0 <__alt_data_end+0xfffe44d0>

0004b60c <__udivsi3>:
   4b60c:	200d883a 	mov	r6,r4
   4b610:	2900152e 	bgeu	r5,r4,4b668 <__udivsi3+0x5c>
   4b614:	28001416 	blt	r5,zero,4b668 <__udivsi3+0x5c>
   4b618:	00800804 	movi	r2,32
   4b61c:	00c00044 	movi	r3,1
   4b620:	00000206 	br	4b62c <__udivsi3+0x20>
   4b624:	10000e26 	beq	r2,zero,4b660 <__udivsi3+0x54>
   4b628:	28000516 	blt	r5,zero,4b640 <__udivsi3+0x34>
   4b62c:	294b883a 	add	r5,r5,r5
   4b630:	10bfffc4 	addi	r2,r2,-1
   4b634:	18c7883a 	add	r3,r3,r3
   4b638:	293ffa36 	bltu	r5,r4,4b624 <__alt_data_end+0xfffe4524>
   4b63c:	18000826 	beq	r3,zero,4b660 <__udivsi3+0x54>
   4b640:	0005883a 	mov	r2,zero
   4b644:	31400236 	bltu	r6,r5,4b650 <__udivsi3+0x44>
   4b648:	314dc83a 	sub	r6,r6,r5
   4b64c:	10c4b03a 	or	r2,r2,r3
   4b650:	1806d07a 	srli	r3,r3,1
   4b654:	280ad07a 	srli	r5,r5,1
   4b658:	183ffa1e 	bne	r3,zero,4b644 <__alt_data_end+0xfffe4544>
   4b65c:	f800283a 	ret
   4b660:	0005883a 	mov	r2,zero
   4b664:	f800283a 	ret
   4b668:	00c00044 	movi	r3,1
   4b66c:	003ff406 	br	4b640 <__alt_data_end+0xfffe4540>

0004b670 <__umodsi3>:
   4b670:	2005883a 	mov	r2,r4
   4b674:	2900122e 	bgeu	r5,r4,4b6c0 <__umodsi3+0x50>
   4b678:	28001116 	blt	r5,zero,4b6c0 <__umodsi3+0x50>
   4b67c:	01800804 	movi	r6,32
   4b680:	00c00044 	movi	r3,1
   4b684:	00000206 	br	4b690 <__umodsi3+0x20>
   4b688:	30000c26 	beq	r6,zero,4b6bc <__umodsi3+0x4c>
   4b68c:	28000516 	blt	r5,zero,4b6a4 <__umodsi3+0x34>
   4b690:	294b883a 	add	r5,r5,r5
   4b694:	31bfffc4 	addi	r6,r6,-1
   4b698:	18c7883a 	add	r3,r3,r3
   4b69c:	293ffa36 	bltu	r5,r4,4b688 <__alt_data_end+0xfffe4588>
   4b6a0:	18000626 	beq	r3,zero,4b6bc <__umodsi3+0x4c>
   4b6a4:	1806d07a 	srli	r3,r3,1
   4b6a8:	11400136 	bltu	r2,r5,4b6b0 <__umodsi3+0x40>
   4b6ac:	1145c83a 	sub	r2,r2,r5
   4b6b0:	280ad07a 	srli	r5,r5,1
   4b6b4:	183ffb1e 	bne	r3,zero,4b6a4 <__alt_data_end+0xfffe45a4>
   4b6b8:	f800283a 	ret
   4b6bc:	f800283a 	ret
   4b6c0:	00c00044 	movi	r3,1
   4b6c4:	003ff706 	br	4b6a4 <__alt_data_end+0xfffe45a4>

0004b6c8 <__adddf3>:
   4b6c8:	02c00434 	movhi	r11,16
   4b6cc:	5affffc4 	addi	r11,r11,-1
   4b6d0:	2806d7fa 	srli	r3,r5,31
   4b6d4:	2ad4703a 	and	r10,r5,r11
   4b6d8:	3ad2703a 	and	r9,r7,r11
   4b6dc:	3804d53a 	srli	r2,r7,20
   4b6e0:	3018d77a 	srli	r12,r6,29
   4b6e4:	280ad53a 	srli	r5,r5,20
   4b6e8:	501490fa 	slli	r10,r10,3
   4b6ec:	2010d77a 	srli	r8,r4,29
   4b6f0:	481290fa 	slli	r9,r9,3
   4b6f4:	380ed7fa 	srli	r7,r7,31
   4b6f8:	defffb04 	addi	sp,sp,-20
   4b6fc:	dc800215 	stw	r18,8(sp)
   4b700:	dc400115 	stw	r17,4(sp)
   4b704:	dc000015 	stw	r16,0(sp)
   4b708:	dfc00415 	stw	ra,16(sp)
   4b70c:	dcc00315 	stw	r19,12(sp)
   4b710:	1c803fcc 	andi	r18,r3,255
   4b714:	2c01ffcc 	andi	r16,r5,2047
   4b718:	5210b03a 	or	r8,r10,r8
   4b71c:	202290fa 	slli	r17,r4,3
   4b720:	1081ffcc 	andi	r2,r2,2047
   4b724:	4b12b03a 	or	r9,r9,r12
   4b728:	300c90fa 	slli	r6,r6,3
   4b72c:	91c07526 	beq	r18,r7,4b904 <__adddf3+0x23c>
   4b730:	8087c83a 	sub	r3,r16,r2
   4b734:	00c0ab0e 	bge	zero,r3,4b9e4 <__adddf3+0x31c>
   4b738:	10002a1e 	bne	r2,zero,4b7e4 <__adddf3+0x11c>
   4b73c:	4984b03a 	or	r2,r9,r6
   4b740:	1000961e 	bne	r2,zero,4b99c <__adddf3+0x2d4>
   4b744:	888001cc 	andi	r2,r17,7
   4b748:	10000726 	beq	r2,zero,4b768 <__adddf3+0xa0>
   4b74c:	888003cc 	andi	r2,r17,15
   4b750:	00c00104 	movi	r3,4
   4b754:	10c00426 	beq	r2,r3,4b768 <__adddf3+0xa0>
   4b758:	88c7883a 	add	r3,r17,r3
   4b75c:	1c63803a 	cmpltu	r17,r3,r17
   4b760:	4451883a 	add	r8,r8,r17
   4b764:	1823883a 	mov	r17,r3
   4b768:	4080202c 	andhi	r2,r8,128
   4b76c:	10005926 	beq	r2,zero,4b8d4 <__adddf3+0x20c>
   4b770:	84000044 	addi	r16,r16,1
   4b774:	0081ffc4 	movi	r2,2047
   4b778:	8080ba26 	beq	r16,r2,4ba64 <__adddf3+0x39c>
   4b77c:	00bfe034 	movhi	r2,65408
   4b780:	10bfffc4 	addi	r2,r2,-1
   4b784:	4090703a 	and	r8,r8,r2
   4b788:	4004977a 	slli	r2,r8,29
   4b78c:	4010927a 	slli	r8,r8,9
   4b790:	8822d0fa 	srli	r17,r17,3
   4b794:	8401ffcc 	andi	r16,r16,2047
   4b798:	4010d33a 	srli	r8,r8,12
   4b79c:	9007883a 	mov	r3,r18
   4b7a0:	1444b03a 	or	r2,r2,r17
   4b7a4:	8401ffcc 	andi	r16,r16,2047
   4b7a8:	8020953a 	slli	r16,r16,20
   4b7ac:	18c03fcc 	andi	r3,r3,255
   4b7b0:	01000434 	movhi	r4,16
   4b7b4:	213fffc4 	addi	r4,r4,-1
   4b7b8:	180697fa 	slli	r3,r3,31
   4b7bc:	4110703a 	and	r8,r8,r4
   4b7c0:	4410b03a 	or	r8,r8,r16
   4b7c4:	40c6b03a 	or	r3,r8,r3
   4b7c8:	dfc00417 	ldw	ra,16(sp)
   4b7cc:	dcc00317 	ldw	r19,12(sp)
   4b7d0:	dc800217 	ldw	r18,8(sp)
   4b7d4:	dc400117 	ldw	r17,4(sp)
   4b7d8:	dc000017 	ldw	r16,0(sp)
   4b7dc:	dec00504 	addi	sp,sp,20
   4b7e0:	f800283a 	ret
   4b7e4:	0081ffc4 	movi	r2,2047
   4b7e8:	80bfd626 	beq	r16,r2,4b744 <__alt_data_end+0xfffe4644>
   4b7ec:	4a402034 	orhi	r9,r9,128
   4b7f0:	00800e04 	movi	r2,56
   4b7f4:	10c09f16 	blt	r2,r3,4ba74 <__adddf3+0x3ac>
   4b7f8:	008007c4 	movi	r2,31
   4b7fc:	10c0c216 	blt	r2,r3,4bb08 <__adddf3+0x440>
   4b800:	00800804 	movi	r2,32
   4b804:	10c5c83a 	sub	r2,r2,r3
   4b808:	488a983a 	sll	r5,r9,r2
   4b80c:	30c8d83a 	srl	r4,r6,r3
   4b810:	3084983a 	sll	r2,r6,r2
   4b814:	48c6d83a 	srl	r3,r9,r3
   4b818:	290cb03a 	or	r6,r5,r4
   4b81c:	1004c03a 	cmpne	r2,r2,zero
   4b820:	308cb03a 	or	r6,r6,r2
   4b824:	898dc83a 	sub	r6,r17,r6
   4b828:	89a3803a 	cmpltu	r17,r17,r6
   4b82c:	40d1c83a 	sub	r8,r8,r3
   4b830:	4451c83a 	sub	r8,r8,r17
   4b834:	3023883a 	mov	r17,r6
   4b838:	4080202c 	andhi	r2,r8,128
   4b83c:	10002326 	beq	r2,zero,4b8cc <__adddf3+0x204>
   4b840:	04c02034 	movhi	r19,128
   4b844:	9cffffc4 	addi	r19,r19,-1
   4b848:	44e6703a 	and	r19,r8,r19
   4b84c:	98007626 	beq	r19,zero,4ba28 <__adddf3+0x360>
   4b850:	9809883a 	mov	r4,r19
   4b854:	00413ac0 	call	413ac <__clzsi2>
   4b858:	10fffe04 	addi	r3,r2,-8
   4b85c:	010007c4 	movi	r4,31
   4b860:	20c07716 	blt	r4,r3,4ba40 <__adddf3+0x378>
   4b864:	00800804 	movi	r2,32
   4b868:	10c5c83a 	sub	r2,r2,r3
   4b86c:	8884d83a 	srl	r2,r17,r2
   4b870:	98d0983a 	sll	r8,r19,r3
   4b874:	88e2983a 	sll	r17,r17,r3
   4b878:	1204b03a 	or	r2,r2,r8
   4b87c:	1c007416 	blt	r3,r16,4ba50 <__adddf3+0x388>
   4b880:	1c21c83a 	sub	r16,r3,r16
   4b884:	82000044 	addi	r8,r16,1
   4b888:	00c007c4 	movi	r3,31
   4b88c:	1a009116 	blt	r3,r8,4bad4 <__adddf3+0x40c>
   4b890:	00c00804 	movi	r3,32
   4b894:	1a07c83a 	sub	r3,r3,r8
   4b898:	8a08d83a 	srl	r4,r17,r8
   4b89c:	88e2983a 	sll	r17,r17,r3
   4b8a0:	10c6983a 	sll	r3,r2,r3
   4b8a4:	1210d83a 	srl	r8,r2,r8
   4b8a8:	8804c03a 	cmpne	r2,r17,zero
   4b8ac:	1906b03a 	or	r3,r3,r4
   4b8b0:	18a2b03a 	or	r17,r3,r2
   4b8b4:	0021883a 	mov	r16,zero
   4b8b8:	003fa206 	br	4b744 <__alt_data_end+0xfffe4644>
   4b8bc:	1890b03a 	or	r8,r3,r2
   4b8c0:	40017d26 	beq	r8,zero,4beb8 <__adddf3+0x7f0>
   4b8c4:	1011883a 	mov	r8,r2
   4b8c8:	1823883a 	mov	r17,r3
   4b8cc:	888001cc 	andi	r2,r17,7
   4b8d0:	103f9e1e 	bne	r2,zero,4b74c <__alt_data_end+0xfffe464c>
   4b8d4:	4004977a 	slli	r2,r8,29
   4b8d8:	8822d0fa 	srli	r17,r17,3
   4b8dc:	4010d0fa 	srli	r8,r8,3
   4b8e0:	9007883a 	mov	r3,r18
   4b8e4:	1444b03a 	or	r2,r2,r17
   4b8e8:	0101ffc4 	movi	r4,2047
   4b8ec:	81002426 	beq	r16,r4,4b980 <__adddf3+0x2b8>
   4b8f0:	8120703a 	and	r16,r16,r4
   4b8f4:	01000434 	movhi	r4,16
   4b8f8:	213fffc4 	addi	r4,r4,-1
   4b8fc:	4110703a 	and	r8,r8,r4
   4b900:	003fa806 	br	4b7a4 <__alt_data_end+0xfffe46a4>
   4b904:	8089c83a 	sub	r4,r16,r2
   4b908:	01005e0e 	bge	zero,r4,4ba84 <__adddf3+0x3bc>
   4b90c:	10002b26 	beq	r2,zero,4b9bc <__adddf3+0x2f4>
   4b910:	0081ffc4 	movi	r2,2047
   4b914:	80bf8b26 	beq	r16,r2,4b744 <__alt_data_end+0xfffe4644>
   4b918:	4a402034 	orhi	r9,r9,128
   4b91c:	00800e04 	movi	r2,56
   4b920:	1100a40e 	bge	r2,r4,4bbb4 <__adddf3+0x4ec>
   4b924:	498cb03a 	or	r6,r9,r6
   4b928:	300ac03a 	cmpne	r5,r6,zero
   4b92c:	0013883a 	mov	r9,zero
   4b930:	2c4b883a 	add	r5,r5,r17
   4b934:	2c63803a 	cmpltu	r17,r5,r17
   4b938:	4a11883a 	add	r8,r9,r8
   4b93c:	8a11883a 	add	r8,r17,r8
   4b940:	2823883a 	mov	r17,r5
   4b944:	4080202c 	andhi	r2,r8,128
   4b948:	103fe026 	beq	r2,zero,4b8cc <__alt_data_end+0xfffe47cc>
   4b94c:	84000044 	addi	r16,r16,1
   4b950:	0081ffc4 	movi	r2,2047
   4b954:	8080d226 	beq	r16,r2,4bca0 <__adddf3+0x5d8>
   4b958:	00bfe034 	movhi	r2,65408
   4b95c:	10bfffc4 	addi	r2,r2,-1
   4b960:	4090703a 	and	r8,r8,r2
   4b964:	880ad07a 	srli	r5,r17,1
   4b968:	400897fa 	slli	r4,r8,31
   4b96c:	88c0004c 	andi	r3,r17,1
   4b970:	28e2b03a 	or	r17,r5,r3
   4b974:	4010d07a 	srli	r8,r8,1
   4b978:	2462b03a 	or	r17,r4,r17
   4b97c:	003f7106 	br	4b744 <__alt_data_end+0xfffe4644>
   4b980:	4088b03a 	or	r4,r8,r2
   4b984:	20014526 	beq	r4,zero,4be9c <__adddf3+0x7d4>
   4b988:	01000434 	movhi	r4,16
   4b98c:	42000234 	orhi	r8,r8,8
   4b990:	213fffc4 	addi	r4,r4,-1
   4b994:	4110703a 	and	r8,r8,r4
   4b998:	003f8206 	br	4b7a4 <__alt_data_end+0xfffe46a4>
   4b99c:	18ffffc4 	addi	r3,r3,-1
   4b9a0:	1800491e 	bne	r3,zero,4bac8 <__adddf3+0x400>
   4b9a4:	898bc83a 	sub	r5,r17,r6
   4b9a8:	8963803a 	cmpltu	r17,r17,r5
   4b9ac:	4251c83a 	sub	r8,r8,r9
   4b9b0:	4451c83a 	sub	r8,r8,r17
   4b9b4:	2823883a 	mov	r17,r5
   4b9b8:	003f9f06 	br	4b838 <__alt_data_end+0xfffe4738>
   4b9bc:	4984b03a 	or	r2,r9,r6
   4b9c0:	103f6026 	beq	r2,zero,4b744 <__alt_data_end+0xfffe4644>
   4b9c4:	213fffc4 	addi	r4,r4,-1
   4b9c8:	2000931e 	bne	r4,zero,4bc18 <__adddf3+0x550>
   4b9cc:	898d883a 	add	r6,r17,r6
   4b9d0:	3463803a 	cmpltu	r17,r6,r17
   4b9d4:	4251883a 	add	r8,r8,r9
   4b9d8:	8a11883a 	add	r8,r17,r8
   4b9dc:	3023883a 	mov	r17,r6
   4b9e0:	003fd806 	br	4b944 <__alt_data_end+0xfffe4844>
   4b9e4:	1800541e 	bne	r3,zero,4bb38 <__adddf3+0x470>
   4b9e8:	80800044 	addi	r2,r16,1
   4b9ec:	1081ffcc 	andi	r2,r2,2047
   4b9f0:	00c00044 	movi	r3,1
   4b9f4:	1880a00e 	bge	r3,r2,4bc78 <__adddf3+0x5b0>
   4b9f8:	8989c83a 	sub	r4,r17,r6
   4b9fc:	8905803a 	cmpltu	r2,r17,r4
   4ba00:	4267c83a 	sub	r19,r8,r9
   4ba04:	98a7c83a 	sub	r19,r19,r2
   4ba08:	9880202c 	andhi	r2,r19,128
   4ba0c:	10006326 	beq	r2,zero,4bb9c <__adddf3+0x4d4>
   4ba10:	3463c83a 	sub	r17,r6,r17
   4ba14:	4a07c83a 	sub	r3,r9,r8
   4ba18:	344d803a 	cmpltu	r6,r6,r17
   4ba1c:	19a7c83a 	sub	r19,r3,r6
   4ba20:	3825883a 	mov	r18,r7
   4ba24:	983f8a1e 	bne	r19,zero,4b850 <__alt_data_end+0xfffe4750>
   4ba28:	8809883a 	mov	r4,r17
   4ba2c:	00413ac0 	call	413ac <__clzsi2>
   4ba30:	10800804 	addi	r2,r2,32
   4ba34:	10fffe04 	addi	r3,r2,-8
   4ba38:	010007c4 	movi	r4,31
   4ba3c:	20ff890e 	bge	r4,r3,4b864 <__alt_data_end+0xfffe4764>
   4ba40:	10bff604 	addi	r2,r2,-40
   4ba44:	8884983a 	sll	r2,r17,r2
   4ba48:	0023883a 	mov	r17,zero
   4ba4c:	1c3f8c0e 	bge	r3,r16,4b880 <__alt_data_end+0xfffe4780>
   4ba50:	023fe034 	movhi	r8,65408
   4ba54:	423fffc4 	addi	r8,r8,-1
   4ba58:	80e1c83a 	sub	r16,r16,r3
   4ba5c:	1210703a 	and	r8,r2,r8
   4ba60:	003f3806 	br	4b744 <__alt_data_end+0xfffe4644>
   4ba64:	9007883a 	mov	r3,r18
   4ba68:	0011883a 	mov	r8,zero
   4ba6c:	0005883a 	mov	r2,zero
   4ba70:	003f4c06 	br	4b7a4 <__alt_data_end+0xfffe46a4>
   4ba74:	498cb03a 	or	r6,r9,r6
   4ba78:	300cc03a 	cmpne	r6,r6,zero
   4ba7c:	0007883a 	mov	r3,zero
   4ba80:	003f6806 	br	4b824 <__alt_data_end+0xfffe4724>
   4ba84:	20009c1e 	bne	r4,zero,4bcf8 <__adddf3+0x630>
   4ba88:	80800044 	addi	r2,r16,1
   4ba8c:	1141ffcc 	andi	r5,r2,2047
   4ba90:	01000044 	movi	r4,1
   4ba94:	2140670e 	bge	r4,r5,4bc34 <__adddf3+0x56c>
   4ba98:	0101ffc4 	movi	r4,2047
   4ba9c:	11007f26 	beq	r2,r4,4bc9c <__adddf3+0x5d4>
   4baa0:	898d883a 	add	r6,r17,r6
   4baa4:	4247883a 	add	r3,r8,r9
   4baa8:	3451803a 	cmpltu	r8,r6,r17
   4baac:	40d1883a 	add	r8,r8,r3
   4bab0:	402297fa 	slli	r17,r8,31
   4bab4:	300cd07a 	srli	r6,r6,1
   4bab8:	4010d07a 	srli	r8,r8,1
   4babc:	1021883a 	mov	r16,r2
   4bac0:	89a2b03a 	or	r17,r17,r6
   4bac4:	003f1f06 	br	4b744 <__alt_data_end+0xfffe4644>
   4bac8:	0081ffc4 	movi	r2,2047
   4bacc:	80bf481e 	bne	r16,r2,4b7f0 <__alt_data_end+0xfffe46f0>
   4bad0:	003f1c06 	br	4b744 <__alt_data_end+0xfffe4644>
   4bad4:	843ff844 	addi	r16,r16,-31
   4bad8:	01000804 	movi	r4,32
   4badc:	1406d83a 	srl	r3,r2,r16
   4bae0:	41005026 	beq	r8,r4,4bc24 <__adddf3+0x55c>
   4bae4:	01001004 	movi	r4,64
   4bae8:	2211c83a 	sub	r8,r4,r8
   4baec:	1204983a 	sll	r2,r2,r8
   4baf0:	88a2b03a 	or	r17,r17,r2
   4baf4:	8822c03a 	cmpne	r17,r17,zero
   4baf8:	1c62b03a 	or	r17,r3,r17
   4bafc:	0011883a 	mov	r8,zero
   4bb00:	0021883a 	mov	r16,zero
   4bb04:	003f7106 	br	4b8cc <__alt_data_end+0xfffe47cc>
   4bb08:	193ff804 	addi	r4,r3,-32
   4bb0c:	00800804 	movi	r2,32
   4bb10:	4908d83a 	srl	r4,r9,r4
   4bb14:	18804526 	beq	r3,r2,4bc2c <__adddf3+0x564>
   4bb18:	00801004 	movi	r2,64
   4bb1c:	10c5c83a 	sub	r2,r2,r3
   4bb20:	4886983a 	sll	r3,r9,r2
   4bb24:	198cb03a 	or	r6,r3,r6
   4bb28:	300cc03a 	cmpne	r6,r6,zero
   4bb2c:	218cb03a 	or	r6,r4,r6
   4bb30:	0007883a 	mov	r3,zero
   4bb34:	003f3b06 	br	4b824 <__alt_data_end+0xfffe4724>
   4bb38:	80002a26 	beq	r16,zero,4bbe4 <__adddf3+0x51c>
   4bb3c:	0101ffc4 	movi	r4,2047
   4bb40:	11006826 	beq	r2,r4,4bce4 <__adddf3+0x61c>
   4bb44:	00c7c83a 	sub	r3,zero,r3
   4bb48:	42002034 	orhi	r8,r8,128
   4bb4c:	01000e04 	movi	r4,56
   4bb50:	20c07c16 	blt	r4,r3,4bd44 <__adddf3+0x67c>
   4bb54:	010007c4 	movi	r4,31
   4bb58:	20c0da16 	blt	r4,r3,4bec4 <__adddf3+0x7fc>
   4bb5c:	01000804 	movi	r4,32
   4bb60:	20c9c83a 	sub	r4,r4,r3
   4bb64:	4114983a 	sll	r10,r8,r4
   4bb68:	88cad83a 	srl	r5,r17,r3
   4bb6c:	8908983a 	sll	r4,r17,r4
   4bb70:	40c6d83a 	srl	r3,r8,r3
   4bb74:	5162b03a 	or	r17,r10,r5
   4bb78:	2008c03a 	cmpne	r4,r4,zero
   4bb7c:	8922b03a 	or	r17,r17,r4
   4bb80:	3463c83a 	sub	r17,r6,r17
   4bb84:	48c7c83a 	sub	r3,r9,r3
   4bb88:	344d803a 	cmpltu	r6,r6,r17
   4bb8c:	1991c83a 	sub	r8,r3,r6
   4bb90:	1021883a 	mov	r16,r2
   4bb94:	3825883a 	mov	r18,r7
   4bb98:	003f2706 	br	4b838 <__alt_data_end+0xfffe4738>
   4bb9c:	24d0b03a 	or	r8,r4,r19
   4bba0:	40001b1e 	bne	r8,zero,4bc10 <__adddf3+0x548>
   4bba4:	0005883a 	mov	r2,zero
   4bba8:	0007883a 	mov	r3,zero
   4bbac:	0021883a 	mov	r16,zero
   4bbb0:	003f4d06 	br	4b8e8 <__alt_data_end+0xfffe47e8>
   4bbb4:	008007c4 	movi	r2,31
   4bbb8:	11003c16 	blt	r2,r4,4bcac <__adddf3+0x5e4>
   4bbbc:	00800804 	movi	r2,32
   4bbc0:	1105c83a 	sub	r2,r2,r4
   4bbc4:	488e983a 	sll	r7,r9,r2
   4bbc8:	310ad83a 	srl	r5,r6,r4
   4bbcc:	3084983a 	sll	r2,r6,r2
   4bbd0:	4912d83a 	srl	r9,r9,r4
   4bbd4:	394ab03a 	or	r5,r7,r5
   4bbd8:	1004c03a 	cmpne	r2,r2,zero
   4bbdc:	288ab03a 	or	r5,r5,r2
   4bbe0:	003f5306 	br	4b930 <__alt_data_end+0xfffe4830>
   4bbe4:	4448b03a 	or	r4,r8,r17
   4bbe8:	20003e26 	beq	r4,zero,4bce4 <__adddf3+0x61c>
   4bbec:	00c6303a 	nor	r3,zero,r3
   4bbf0:	18003a1e 	bne	r3,zero,4bcdc <__adddf3+0x614>
   4bbf4:	3463c83a 	sub	r17,r6,r17
   4bbf8:	4a07c83a 	sub	r3,r9,r8
   4bbfc:	344d803a 	cmpltu	r6,r6,r17
   4bc00:	1991c83a 	sub	r8,r3,r6
   4bc04:	1021883a 	mov	r16,r2
   4bc08:	3825883a 	mov	r18,r7
   4bc0c:	003f0a06 	br	4b838 <__alt_data_end+0xfffe4738>
   4bc10:	2023883a 	mov	r17,r4
   4bc14:	003f0d06 	br	4b84c <__alt_data_end+0xfffe474c>
   4bc18:	0081ffc4 	movi	r2,2047
   4bc1c:	80bf3f1e 	bne	r16,r2,4b91c <__alt_data_end+0xfffe481c>
   4bc20:	003ec806 	br	4b744 <__alt_data_end+0xfffe4644>
   4bc24:	0005883a 	mov	r2,zero
   4bc28:	003fb106 	br	4baf0 <__alt_data_end+0xfffe49f0>
   4bc2c:	0007883a 	mov	r3,zero
   4bc30:	003fbc06 	br	4bb24 <__alt_data_end+0xfffe4a24>
   4bc34:	4444b03a 	or	r2,r8,r17
   4bc38:	8000871e 	bne	r16,zero,4be58 <__adddf3+0x790>
   4bc3c:	1000ba26 	beq	r2,zero,4bf28 <__adddf3+0x860>
   4bc40:	4984b03a 	or	r2,r9,r6
   4bc44:	103ebf26 	beq	r2,zero,4b744 <__alt_data_end+0xfffe4644>
   4bc48:	8985883a 	add	r2,r17,r6
   4bc4c:	4247883a 	add	r3,r8,r9
   4bc50:	1451803a 	cmpltu	r8,r2,r17
   4bc54:	40d1883a 	add	r8,r8,r3
   4bc58:	40c0202c 	andhi	r3,r8,128
   4bc5c:	1023883a 	mov	r17,r2
   4bc60:	183f1a26 	beq	r3,zero,4b8cc <__alt_data_end+0xfffe47cc>
   4bc64:	00bfe034 	movhi	r2,65408
   4bc68:	10bfffc4 	addi	r2,r2,-1
   4bc6c:	2021883a 	mov	r16,r4
   4bc70:	4090703a 	and	r8,r8,r2
   4bc74:	003eb306 	br	4b744 <__alt_data_end+0xfffe4644>
   4bc78:	4444b03a 	or	r2,r8,r17
   4bc7c:	8000291e 	bne	r16,zero,4bd24 <__adddf3+0x65c>
   4bc80:	10004b1e 	bne	r2,zero,4bdb0 <__adddf3+0x6e8>
   4bc84:	4990b03a 	or	r8,r9,r6
   4bc88:	40008b26 	beq	r8,zero,4beb8 <__adddf3+0x7f0>
   4bc8c:	4811883a 	mov	r8,r9
   4bc90:	3023883a 	mov	r17,r6
   4bc94:	3825883a 	mov	r18,r7
   4bc98:	003eaa06 	br	4b744 <__alt_data_end+0xfffe4644>
   4bc9c:	1021883a 	mov	r16,r2
   4bca0:	0011883a 	mov	r8,zero
   4bca4:	0005883a 	mov	r2,zero
   4bca8:	003f0f06 	br	4b8e8 <__alt_data_end+0xfffe47e8>
   4bcac:	217ff804 	addi	r5,r4,-32
   4bcb0:	00800804 	movi	r2,32
   4bcb4:	494ad83a 	srl	r5,r9,r5
   4bcb8:	20807d26 	beq	r4,r2,4beb0 <__adddf3+0x7e8>
   4bcbc:	00801004 	movi	r2,64
   4bcc0:	1109c83a 	sub	r4,r2,r4
   4bcc4:	4912983a 	sll	r9,r9,r4
   4bcc8:	498cb03a 	or	r6,r9,r6
   4bccc:	300cc03a 	cmpne	r6,r6,zero
   4bcd0:	298ab03a 	or	r5,r5,r6
   4bcd4:	0013883a 	mov	r9,zero
   4bcd8:	003f1506 	br	4b930 <__alt_data_end+0xfffe4830>
   4bcdc:	0101ffc4 	movi	r4,2047
   4bce0:	113f9a1e 	bne	r2,r4,4bb4c <__alt_data_end+0xfffe4a4c>
   4bce4:	4811883a 	mov	r8,r9
   4bce8:	3023883a 	mov	r17,r6
   4bcec:	1021883a 	mov	r16,r2
   4bcf0:	3825883a 	mov	r18,r7
   4bcf4:	003e9306 	br	4b744 <__alt_data_end+0xfffe4644>
   4bcf8:	8000161e 	bne	r16,zero,4bd54 <__adddf3+0x68c>
   4bcfc:	444ab03a 	or	r5,r8,r17
   4bd00:	28005126 	beq	r5,zero,4be48 <__adddf3+0x780>
   4bd04:	0108303a 	nor	r4,zero,r4
   4bd08:	20004d1e 	bne	r4,zero,4be40 <__adddf3+0x778>
   4bd0c:	89a3883a 	add	r17,r17,r6
   4bd10:	4253883a 	add	r9,r8,r9
   4bd14:	898d803a 	cmpltu	r6,r17,r6
   4bd18:	3251883a 	add	r8,r6,r9
   4bd1c:	1021883a 	mov	r16,r2
   4bd20:	003f0806 	br	4b944 <__alt_data_end+0xfffe4844>
   4bd24:	1000301e 	bne	r2,zero,4bde8 <__adddf3+0x720>
   4bd28:	4984b03a 	or	r2,r9,r6
   4bd2c:	10007126 	beq	r2,zero,4bef4 <__adddf3+0x82c>
   4bd30:	4811883a 	mov	r8,r9
   4bd34:	3023883a 	mov	r17,r6
   4bd38:	3825883a 	mov	r18,r7
   4bd3c:	0401ffc4 	movi	r16,2047
   4bd40:	003e8006 	br	4b744 <__alt_data_end+0xfffe4644>
   4bd44:	4462b03a 	or	r17,r8,r17
   4bd48:	8822c03a 	cmpne	r17,r17,zero
   4bd4c:	0007883a 	mov	r3,zero
   4bd50:	003f8b06 	br	4bb80 <__alt_data_end+0xfffe4a80>
   4bd54:	0141ffc4 	movi	r5,2047
   4bd58:	11403b26 	beq	r2,r5,4be48 <__adddf3+0x780>
   4bd5c:	0109c83a 	sub	r4,zero,r4
   4bd60:	42002034 	orhi	r8,r8,128
   4bd64:	01400e04 	movi	r5,56
   4bd68:	29006716 	blt	r5,r4,4bf08 <__adddf3+0x840>
   4bd6c:	014007c4 	movi	r5,31
   4bd70:	29007016 	blt	r5,r4,4bf34 <__adddf3+0x86c>
   4bd74:	01400804 	movi	r5,32
   4bd78:	290bc83a 	sub	r5,r5,r4
   4bd7c:	4154983a 	sll	r10,r8,r5
   4bd80:	890ed83a 	srl	r7,r17,r4
   4bd84:	894a983a 	sll	r5,r17,r5
   4bd88:	4108d83a 	srl	r4,r8,r4
   4bd8c:	51e2b03a 	or	r17,r10,r7
   4bd90:	280ac03a 	cmpne	r5,r5,zero
   4bd94:	8962b03a 	or	r17,r17,r5
   4bd98:	89a3883a 	add	r17,r17,r6
   4bd9c:	2253883a 	add	r9,r4,r9
   4bda0:	898d803a 	cmpltu	r6,r17,r6
   4bda4:	3251883a 	add	r8,r6,r9
   4bda8:	1021883a 	mov	r16,r2
   4bdac:	003ee506 	br	4b944 <__alt_data_end+0xfffe4844>
   4bdb0:	4984b03a 	or	r2,r9,r6
   4bdb4:	103e6326 	beq	r2,zero,4b744 <__alt_data_end+0xfffe4644>
   4bdb8:	8987c83a 	sub	r3,r17,r6
   4bdbc:	88c9803a 	cmpltu	r4,r17,r3
   4bdc0:	4245c83a 	sub	r2,r8,r9
   4bdc4:	1105c83a 	sub	r2,r2,r4
   4bdc8:	1100202c 	andhi	r4,r2,128
   4bdcc:	203ebb26 	beq	r4,zero,4b8bc <__alt_data_end+0xfffe47bc>
   4bdd0:	3463c83a 	sub	r17,r6,r17
   4bdd4:	4a07c83a 	sub	r3,r9,r8
   4bdd8:	344d803a 	cmpltu	r6,r6,r17
   4bddc:	1991c83a 	sub	r8,r3,r6
   4bde0:	3825883a 	mov	r18,r7
   4bde4:	003e5706 	br	4b744 <__alt_data_end+0xfffe4644>
   4bde8:	4984b03a 	or	r2,r9,r6
   4bdec:	10002e26 	beq	r2,zero,4bea8 <__adddf3+0x7e0>
   4bdf0:	4004d0fa 	srli	r2,r8,3
   4bdf4:	8822d0fa 	srli	r17,r17,3
   4bdf8:	4010977a 	slli	r8,r8,29
   4bdfc:	10c0022c 	andhi	r3,r2,8
   4be00:	4462b03a 	or	r17,r8,r17
   4be04:	18000826 	beq	r3,zero,4be28 <__adddf3+0x760>
   4be08:	4808d0fa 	srli	r4,r9,3
   4be0c:	20c0022c 	andhi	r3,r4,8
   4be10:	1800051e 	bne	r3,zero,4be28 <__adddf3+0x760>
   4be14:	300cd0fa 	srli	r6,r6,3
   4be18:	4806977a 	slli	r3,r9,29
   4be1c:	2005883a 	mov	r2,r4
   4be20:	3825883a 	mov	r18,r7
   4be24:	19a2b03a 	or	r17,r3,r6
   4be28:	8810d77a 	srli	r8,r17,29
   4be2c:	100490fa 	slli	r2,r2,3
   4be30:	882290fa 	slli	r17,r17,3
   4be34:	0401ffc4 	movi	r16,2047
   4be38:	4090b03a 	or	r8,r8,r2
   4be3c:	003e4106 	br	4b744 <__alt_data_end+0xfffe4644>
   4be40:	0141ffc4 	movi	r5,2047
   4be44:	117fc71e 	bne	r2,r5,4bd64 <__alt_data_end+0xfffe4c64>
   4be48:	4811883a 	mov	r8,r9
   4be4c:	3023883a 	mov	r17,r6
   4be50:	1021883a 	mov	r16,r2
   4be54:	003e3b06 	br	4b744 <__alt_data_end+0xfffe4644>
   4be58:	10002f26 	beq	r2,zero,4bf18 <__adddf3+0x850>
   4be5c:	4984b03a 	or	r2,r9,r6
   4be60:	10001126 	beq	r2,zero,4bea8 <__adddf3+0x7e0>
   4be64:	4004d0fa 	srli	r2,r8,3
   4be68:	8822d0fa 	srli	r17,r17,3
   4be6c:	4010977a 	slli	r8,r8,29
   4be70:	10c0022c 	andhi	r3,r2,8
   4be74:	4462b03a 	or	r17,r8,r17
   4be78:	183feb26 	beq	r3,zero,4be28 <__alt_data_end+0xfffe4d28>
   4be7c:	4808d0fa 	srli	r4,r9,3
   4be80:	20c0022c 	andhi	r3,r4,8
   4be84:	183fe81e 	bne	r3,zero,4be28 <__alt_data_end+0xfffe4d28>
   4be88:	300cd0fa 	srli	r6,r6,3
   4be8c:	4806977a 	slli	r3,r9,29
   4be90:	2005883a 	mov	r2,r4
   4be94:	19a2b03a 	or	r17,r3,r6
   4be98:	003fe306 	br	4be28 <__alt_data_end+0xfffe4d28>
   4be9c:	0011883a 	mov	r8,zero
   4bea0:	0005883a 	mov	r2,zero
   4bea4:	003e3f06 	br	4b7a4 <__alt_data_end+0xfffe46a4>
   4bea8:	0401ffc4 	movi	r16,2047
   4beac:	003e2506 	br	4b744 <__alt_data_end+0xfffe4644>
   4beb0:	0013883a 	mov	r9,zero
   4beb4:	003f8406 	br	4bcc8 <__alt_data_end+0xfffe4bc8>
   4beb8:	0005883a 	mov	r2,zero
   4bebc:	0007883a 	mov	r3,zero
   4bec0:	003e8906 	br	4b8e8 <__alt_data_end+0xfffe47e8>
   4bec4:	197ff804 	addi	r5,r3,-32
   4bec8:	01000804 	movi	r4,32
   4becc:	414ad83a 	srl	r5,r8,r5
   4bed0:	19002426 	beq	r3,r4,4bf64 <__adddf3+0x89c>
   4bed4:	01001004 	movi	r4,64
   4bed8:	20c7c83a 	sub	r3,r4,r3
   4bedc:	40c6983a 	sll	r3,r8,r3
   4bee0:	1c46b03a 	or	r3,r3,r17
   4bee4:	1806c03a 	cmpne	r3,r3,zero
   4bee8:	28e2b03a 	or	r17,r5,r3
   4beec:	0007883a 	mov	r3,zero
   4bef0:	003f2306 	br	4bb80 <__alt_data_end+0xfffe4a80>
   4bef4:	0007883a 	mov	r3,zero
   4bef8:	5811883a 	mov	r8,r11
   4befc:	00bfffc4 	movi	r2,-1
   4bf00:	0401ffc4 	movi	r16,2047
   4bf04:	003e7806 	br	4b8e8 <__alt_data_end+0xfffe47e8>
   4bf08:	4462b03a 	or	r17,r8,r17
   4bf0c:	8822c03a 	cmpne	r17,r17,zero
   4bf10:	0009883a 	mov	r4,zero
   4bf14:	003fa006 	br	4bd98 <__alt_data_end+0xfffe4c98>
   4bf18:	4811883a 	mov	r8,r9
   4bf1c:	3023883a 	mov	r17,r6
   4bf20:	0401ffc4 	movi	r16,2047
   4bf24:	003e0706 	br	4b744 <__alt_data_end+0xfffe4644>
   4bf28:	4811883a 	mov	r8,r9
   4bf2c:	3023883a 	mov	r17,r6
   4bf30:	003e0406 	br	4b744 <__alt_data_end+0xfffe4644>
   4bf34:	21fff804 	addi	r7,r4,-32
   4bf38:	01400804 	movi	r5,32
   4bf3c:	41ced83a 	srl	r7,r8,r7
   4bf40:	21400a26 	beq	r4,r5,4bf6c <__adddf3+0x8a4>
   4bf44:	01401004 	movi	r5,64
   4bf48:	2909c83a 	sub	r4,r5,r4
   4bf4c:	4108983a 	sll	r4,r8,r4
   4bf50:	2448b03a 	or	r4,r4,r17
   4bf54:	2008c03a 	cmpne	r4,r4,zero
   4bf58:	3922b03a 	or	r17,r7,r4
   4bf5c:	0009883a 	mov	r4,zero
   4bf60:	003f8d06 	br	4bd98 <__alt_data_end+0xfffe4c98>
   4bf64:	0007883a 	mov	r3,zero
   4bf68:	003fdd06 	br	4bee0 <__alt_data_end+0xfffe4de0>
   4bf6c:	0009883a 	mov	r4,zero
   4bf70:	003ff706 	br	4bf50 <__alt_data_end+0xfffe4e50>

0004bf74 <__divdf3>:
   4bf74:	defff204 	addi	sp,sp,-56
   4bf78:	dd400915 	stw	r21,36(sp)
   4bf7c:	282ad53a 	srli	r21,r5,20
   4bf80:	dd000815 	stw	r20,32(sp)
   4bf84:	2828d7fa 	srli	r20,r5,31
   4bf88:	dc000415 	stw	r16,16(sp)
   4bf8c:	04000434 	movhi	r16,16
   4bf90:	df000c15 	stw	fp,48(sp)
   4bf94:	843fffc4 	addi	r16,r16,-1
   4bf98:	dfc00d15 	stw	ra,52(sp)
   4bf9c:	ddc00b15 	stw	r23,44(sp)
   4bfa0:	dd800a15 	stw	r22,40(sp)
   4bfa4:	dcc00715 	stw	r19,28(sp)
   4bfa8:	dc800615 	stw	r18,24(sp)
   4bfac:	dc400515 	stw	r17,20(sp)
   4bfb0:	ad41ffcc 	andi	r21,r21,2047
   4bfb4:	2c20703a 	and	r16,r5,r16
   4bfb8:	a7003fcc 	andi	fp,r20,255
   4bfbc:	a8006126 	beq	r21,zero,4c144 <__divdf3+0x1d0>
   4bfc0:	0081ffc4 	movi	r2,2047
   4bfc4:	2025883a 	mov	r18,r4
   4bfc8:	a8803726 	beq	r21,r2,4c0a8 <__divdf3+0x134>
   4bfcc:	80800434 	orhi	r2,r16,16
   4bfd0:	100490fa 	slli	r2,r2,3
   4bfd4:	2020d77a 	srli	r16,r4,29
   4bfd8:	202490fa 	slli	r18,r4,3
   4bfdc:	ad7f0044 	addi	r21,r21,-1023
   4bfe0:	80a0b03a 	or	r16,r16,r2
   4bfe4:	0027883a 	mov	r19,zero
   4bfe8:	0013883a 	mov	r9,zero
   4bfec:	3804d53a 	srli	r2,r7,20
   4bff0:	382cd7fa 	srli	r22,r7,31
   4bff4:	04400434 	movhi	r17,16
   4bff8:	8c7fffc4 	addi	r17,r17,-1
   4bffc:	1081ffcc 	andi	r2,r2,2047
   4c000:	3011883a 	mov	r8,r6
   4c004:	3c62703a 	and	r17,r7,r17
   4c008:	b5c03fcc 	andi	r23,r22,255
   4c00c:	10006c26 	beq	r2,zero,4c1c0 <__divdf3+0x24c>
   4c010:	00c1ffc4 	movi	r3,2047
   4c014:	10c06426 	beq	r2,r3,4c1a8 <__divdf3+0x234>
   4c018:	88c00434 	orhi	r3,r17,16
   4c01c:	180690fa 	slli	r3,r3,3
   4c020:	3022d77a 	srli	r17,r6,29
   4c024:	301090fa 	slli	r8,r6,3
   4c028:	10bf0044 	addi	r2,r2,-1023
   4c02c:	88e2b03a 	or	r17,r17,r3
   4c030:	000f883a 	mov	r7,zero
   4c034:	a58cf03a 	xor	r6,r20,r22
   4c038:	3cc8b03a 	or	r4,r7,r19
   4c03c:	a8abc83a 	sub	r21,r21,r2
   4c040:	008003c4 	movi	r2,15
   4c044:	3007883a 	mov	r3,r6
   4c048:	34c03fcc 	andi	r19,r6,255
   4c04c:	11009036 	bltu	r2,r4,4c290 <__divdf3+0x31c>
   4c050:	200890ba 	slli	r4,r4,2
   4c054:	00800174 	movhi	r2,5
   4c058:	10b01a04 	addi	r2,r2,-16280
   4c05c:	2089883a 	add	r4,r4,r2
   4c060:	20800017 	ldw	r2,0(r4)
   4c064:	1000683a 	jmp	r2
   4c068:	0004c290 	cmplti	zero,zero,4874
   4c06c:	0004c0e0 	cmpeqi	zero,zero,4867
   4c070:	0004c280 	call	4c28 <__alt_mem_onchip_memory2-0x3b3d8>
   4c074:	0004c0d4 	movui	zero,4867
   4c078:	0004c280 	call	4c28 <__alt_mem_onchip_memory2-0x3b3d8>
   4c07c:	0004c254 	movui	zero,4873
   4c080:	0004c280 	call	4c28 <__alt_mem_onchip_memory2-0x3b3d8>
   4c084:	0004c0d4 	movui	zero,4867
   4c088:	0004c0e0 	cmpeqi	zero,zero,4867
   4c08c:	0004c0e0 	cmpeqi	zero,zero,4867
   4c090:	0004c254 	movui	zero,4873
   4c094:	0004c0d4 	movui	zero,4867
   4c098:	0004c0c4 	movi	zero,4867
   4c09c:	0004c0c4 	movi	zero,4867
   4c0a0:	0004c0c4 	movi	zero,4867
   4c0a4:	0004c574 	movhi	zero,4885
   4c0a8:	2404b03a 	or	r2,r4,r16
   4c0ac:	1000661e 	bne	r2,zero,4c248 <__divdf3+0x2d4>
   4c0b0:	04c00204 	movi	r19,8
   4c0b4:	0021883a 	mov	r16,zero
   4c0b8:	0025883a 	mov	r18,zero
   4c0bc:	02400084 	movi	r9,2
   4c0c0:	003fca06 	br	4bfec <__alt_data_end+0xfffe4eec>
   4c0c4:	8023883a 	mov	r17,r16
   4c0c8:	9011883a 	mov	r8,r18
   4c0cc:	e02f883a 	mov	r23,fp
   4c0d0:	480f883a 	mov	r7,r9
   4c0d4:	00800084 	movi	r2,2
   4c0d8:	3881311e 	bne	r7,r2,4c5a0 <__divdf3+0x62c>
   4c0dc:	b827883a 	mov	r19,r23
   4c0e0:	98c0004c 	andi	r3,r19,1
   4c0e4:	0081ffc4 	movi	r2,2047
   4c0e8:	000b883a 	mov	r5,zero
   4c0ec:	0025883a 	mov	r18,zero
   4c0f0:	1004953a 	slli	r2,r2,20
   4c0f4:	18c03fcc 	andi	r3,r3,255
   4c0f8:	04400434 	movhi	r17,16
   4c0fc:	8c7fffc4 	addi	r17,r17,-1
   4c100:	180697fa 	slli	r3,r3,31
   4c104:	2c4a703a 	and	r5,r5,r17
   4c108:	288ab03a 	or	r5,r5,r2
   4c10c:	28c6b03a 	or	r3,r5,r3
   4c110:	9005883a 	mov	r2,r18
   4c114:	dfc00d17 	ldw	ra,52(sp)
   4c118:	df000c17 	ldw	fp,48(sp)
   4c11c:	ddc00b17 	ldw	r23,44(sp)
   4c120:	dd800a17 	ldw	r22,40(sp)
   4c124:	dd400917 	ldw	r21,36(sp)
   4c128:	dd000817 	ldw	r20,32(sp)
   4c12c:	dcc00717 	ldw	r19,28(sp)
   4c130:	dc800617 	ldw	r18,24(sp)
   4c134:	dc400517 	ldw	r17,20(sp)
   4c138:	dc000417 	ldw	r16,16(sp)
   4c13c:	dec00e04 	addi	sp,sp,56
   4c140:	f800283a 	ret
   4c144:	2404b03a 	or	r2,r4,r16
   4c148:	2027883a 	mov	r19,r4
   4c14c:	10003926 	beq	r2,zero,4c234 <__divdf3+0x2c0>
   4c150:	80012e26 	beq	r16,zero,4c60c <__divdf3+0x698>
   4c154:	8009883a 	mov	r4,r16
   4c158:	d9800315 	stw	r6,12(sp)
   4c15c:	d9c00215 	stw	r7,8(sp)
   4c160:	00413ac0 	call	413ac <__clzsi2>
   4c164:	d9800317 	ldw	r6,12(sp)
   4c168:	d9c00217 	ldw	r7,8(sp)
   4c16c:	113ffd44 	addi	r4,r2,-11
   4c170:	00c00704 	movi	r3,28
   4c174:	19012116 	blt	r3,r4,4c5fc <__divdf3+0x688>
   4c178:	00c00744 	movi	r3,29
   4c17c:	147ffe04 	addi	r17,r2,-8
   4c180:	1907c83a 	sub	r3,r3,r4
   4c184:	8460983a 	sll	r16,r16,r17
   4c188:	98c6d83a 	srl	r3,r19,r3
   4c18c:	9c64983a 	sll	r18,r19,r17
   4c190:	1c20b03a 	or	r16,r3,r16
   4c194:	1080fcc4 	addi	r2,r2,1011
   4c198:	00abc83a 	sub	r21,zero,r2
   4c19c:	0027883a 	mov	r19,zero
   4c1a0:	0013883a 	mov	r9,zero
   4c1a4:	003f9106 	br	4bfec <__alt_data_end+0xfffe4eec>
   4c1a8:	3446b03a 	or	r3,r6,r17
   4c1ac:	18001f1e 	bne	r3,zero,4c22c <__divdf3+0x2b8>
   4c1b0:	0023883a 	mov	r17,zero
   4c1b4:	0011883a 	mov	r8,zero
   4c1b8:	01c00084 	movi	r7,2
   4c1bc:	003f9d06 	br	4c034 <__alt_data_end+0xfffe4f34>
   4c1c0:	3446b03a 	or	r3,r6,r17
   4c1c4:	18001526 	beq	r3,zero,4c21c <__divdf3+0x2a8>
   4c1c8:	88011b26 	beq	r17,zero,4c638 <__divdf3+0x6c4>
   4c1cc:	8809883a 	mov	r4,r17
   4c1d0:	d9800315 	stw	r6,12(sp)
   4c1d4:	da400115 	stw	r9,4(sp)
   4c1d8:	00413ac0 	call	413ac <__clzsi2>
   4c1dc:	d9800317 	ldw	r6,12(sp)
   4c1e0:	da400117 	ldw	r9,4(sp)
   4c1e4:	113ffd44 	addi	r4,r2,-11
   4c1e8:	00c00704 	movi	r3,28
   4c1ec:	19010e16 	blt	r3,r4,4c628 <__divdf3+0x6b4>
   4c1f0:	00c00744 	movi	r3,29
   4c1f4:	123ffe04 	addi	r8,r2,-8
   4c1f8:	1907c83a 	sub	r3,r3,r4
   4c1fc:	8a22983a 	sll	r17,r17,r8
   4c200:	30c6d83a 	srl	r3,r6,r3
   4c204:	3210983a 	sll	r8,r6,r8
   4c208:	1c62b03a 	or	r17,r3,r17
   4c20c:	1080fcc4 	addi	r2,r2,1011
   4c210:	0085c83a 	sub	r2,zero,r2
   4c214:	000f883a 	mov	r7,zero
   4c218:	003f8606 	br	4c034 <__alt_data_end+0xfffe4f34>
   4c21c:	0023883a 	mov	r17,zero
   4c220:	0011883a 	mov	r8,zero
   4c224:	01c00044 	movi	r7,1
   4c228:	003f8206 	br	4c034 <__alt_data_end+0xfffe4f34>
   4c22c:	01c000c4 	movi	r7,3
   4c230:	003f8006 	br	4c034 <__alt_data_end+0xfffe4f34>
   4c234:	04c00104 	movi	r19,4
   4c238:	0021883a 	mov	r16,zero
   4c23c:	0025883a 	mov	r18,zero
   4c240:	02400044 	movi	r9,1
   4c244:	003f6906 	br	4bfec <__alt_data_end+0xfffe4eec>
   4c248:	04c00304 	movi	r19,12
   4c24c:	024000c4 	movi	r9,3
   4c250:	003f6606 	br	4bfec <__alt_data_end+0xfffe4eec>
   4c254:	01400434 	movhi	r5,16
   4c258:	0007883a 	mov	r3,zero
   4c25c:	297fffc4 	addi	r5,r5,-1
   4c260:	04bfffc4 	movi	r18,-1
   4c264:	0081ffc4 	movi	r2,2047
   4c268:	003fa106 	br	4c0f0 <__alt_data_end+0xfffe4ff0>
   4c26c:	00c00044 	movi	r3,1
   4c270:	1887c83a 	sub	r3,r3,r2
   4c274:	01000e04 	movi	r4,56
   4c278:	20c1210e 	bge	r4,r3,4c700 <__divdf3+0x78c>
   4c27c:	98c0004c 	andi	r3,r19,1
   4c280:	0005883a 	mov	r2,zero
   4c284:	000b883a 	mov	r5,zero
   4c288:	0025883a 	mov	r18,zero
   4c28c:	003f9806 	br	4c0f0 <__alt_data_end+0xfffe4ff0>
   4c290:	8c00fd36 	bltu	r17,r16,4c688 <__divdf3+0x714>
   4c294:	8440fb26 	beq	r16,r17,4c684 <__divdf3+0x710>
   4c298:	8007883a 	mov	r3,r16
   4c29c:	ad7fffc4 	addi	r21,r21,-1
   4c2a0:	0021883a 	mov	r16,zero
   4c2a4:	4004d63a 	srli	r2,r8,24
   4c2a8:	8822923a 	slli	r17,r17,8
   4c2ac:	1809883a 	mov	r4,r3
   4c2b0:	402c923a 	slli	r22,r8,8
   4c2b4:	88b8b03a 	or	fp,r17,r2
   4c2b8:	e028d43a 	srli	r20,fp,16
   4c2bc:	d8c00015 	stw	r3,0(sp)
   4c2c0:	e5ffffcc 	andi	r23,fp,65535
   4c2c4:	a00b883a 	mov	r5,r20
   4c2c8:	004b60c0 	call	4b60c <__udivsi3>
   4c2cc:	d8c00017 	ldw	r3,0(sp)
   4c2d0:	a00b883a 	mov	r5,r20
   4c2d4:	d8800315 	stw	r2,12(sp)
   4c2d8:	1809883a 	mov	r4,r3
   4c2dc:	004b6700 	call	4b670 <__umodsi3>
   4c2e0:	d9800317 	ldw	r6,12(sp)
   4c2e4:	1006943a 	slli	r3,r2,16
   4c2e8:	9004d43a 	srli	r2,r18,16
   4c2ec:	b9a3383a 	mul	r17,r23,r6
   4c2f0:	10c4b03a 	or	r2,r2,r3
   4c2f4:	1440062e 	bgeu	r2,r17,4c310 <__divdf3+0x39c>
   4c2f8:	1705883a 	add	r2,r2,fp
   4c2fc:	30ffffc4 	addi	r3,r6,-1
   4c300:	1700ee36 	bltu	r2,fp,4c6bc <__divdf3+0x748>
   4c304:	1440ed2e 	bgeu	r2,r17,4c6bc <__divdf3+0x748>
   4c308:	31bfff84 	addi	r6,r6,-2
   4c30c:	1705883a 	add	r2,r2,fp
   4c310:	1463c83a 	sub	r17,r2,r17
   4c314:	a00b883a 	mov	r5,r20
   4c318:	8809883a 	mov	r4,r17
   4c31c:	d9800315 	stw	r6,12(sp)
   4c320:	004b60c0 	call	4b60c <__udivsi3>
   4c324:	a00b883a 	mov	r5,r20
   4c328:	8809883a 	mov	r4,r17
   4c32c:	d8800215 	stw	r2,8(sp)
   4c330:	004b6700 	call	4b670 <__umodsi3>
   4c334:	d9c00217 	ldw	r7,8(sp)
   4c338:	1004943a 	slli	r2,r2,16
   4c33c:	94bfffcc 	andi	r18,r18,65535
   4c340:	b9d1383a 	mul	r8,r23,r7
   4c344:	90a4b03a 	or	r18,r18,r2
   4c348:	d9800317 	ldw	r6,12(sp)
   4c34c:	9200062e 	bgeu	r18,r8,4c368 <__divdf3+0x3f4>
   4c350:	9725883a 	add	r18,r18,fp
   4c354:	38bfffc4 	addi	r2,r7,-1
   4c358:	9700d636 	bltu	r18,fp,4c6b4 <__divdf3+0x740>
   4c35c:	9200d52e 	bgeu	r18,r8,4c6b4 <__divdf3+0x740>
   4c360:	39ffff84 	addi	r7,r7,-2
   4c364:	9725883a 	add	r18,r18,fp
   4c368:	3004943a 	slli	r2,r6,16
   4c36c:	b012d43a 	srli	r9,r22,16
   4c370:	b1bfffcc 	andi	r6,r22,65535
   4c374:	11e2b03a 	or	r17,r2,r7
   4c378:	8806d43a 	srli	r3,r17,16
   4c37c:	893fffcc 	andi	r4,r17,65535
   4c380:	218b383a 	mul	r5,r4,r6
   4c384:	30c5383a 	mul	r2,r6,r3
   4c388:	2249383a 	mul	r4,r4,r9
   4c38c:	280ed43a 	srli	r7,r5,16
   4c390:	9225c83a 	sub	r18,r18,r8
   4c394:	2089883a 	add	r4,r4,r2
   4c398:	3909883a 	add	r4,r7,r4
   4c39c:	1a47383a 	mul	r3,r3,r9
   4c3a0:	2080022e 	bgeu	r4,r2,4c3ac <__divdf3+0x438>
   4c3a4:	00800074 	movhi	r2,1
   4c3a8:	1887883a 	add	r3,r3,r2
   4c3ac:	2004d43a 	srli	r2,r4,16
   4c3b0:	2008943a 	slli	r4,r4,16
   4c3b4:	297fffcc 	andi	r5,r5,65535
   4c3b8:	10c7883a 	add	r3,r2,r3
   4c3bc:	2149883a 	add	r4,r4,r5
   4c3c0:	90c0a536 	bltu	r18,r3,4c658 <__divdf3+0x6e4>
   4c3c4:	90c0bf26 	beq	r18,r3,4c6c4 <__divdf3+0x750>
   4c3c8:	90c7c83a 	sub	r3,r18,r3
   4c3cc:	810fc83a 	sub	r7,r16,r4
   4c3d0:	81e5803a 	cmpltu	r18,r16,r7
   4c3d4:	1ca5c83a 	sub	r18,r3,r18
   4c3d8:	e480c126 	beq	fp,r18,4c6e0 <__divdf3+0x76c>
   4c3dc:	a00b883a 	mov	r5,r20
   4c3e0:	9009883a 	mov	r4,r18
   4c3e4:	d9800315 	stw	r6,12(sp)
   4c3e8:	d9c00215 	stw	r7,8(sp)
   4c3ec:	da400115 	stw	r9,4(sp)
   4c3f0:	004b60c0 	call	4b60c <__udivsi3>
   4c3f4:	a00b883a 	mov	r5,r20
   4c3f8:	9009883a 	mov	r4,r18
   4c3fc:	d8800015 	stw	r2,0(sp)
   4c400:	004b6700 	call	4b670 <__umodsi3>
   4c404:	d9c00217 	ldw	r7,8(sp)
   4c408:	da000017 	ldw	r8,0(sp)
   4c40c:	1006943a 	slli	r3,r2,16
   4c410:	3804d43a 	srli	r2,r7,16
   4c414:	ba21383a 	mul	r16,r23,r8
   4c418:	d9800317 	ldw	r6,12(sp)
   4c41c:	10c4b03a 	or	r2,r2,r3
   4c420:	da400117 	ldw	r9,4(sp)
   4c424:	1400062e 	bgeu	r2,r16,4c440 <__divdf3+0x4cc>
   4c428:	1705883a 	add	r2,r2,fp
   4c42c:	40ffffc4 	addi	r3,r8,-1
   4c430:	1700ad36 	bltu	r2,fp,4c6e8 <__divdf3+0x774>
   4c434:	1400ac2e 	bgeu	r2,r16,4c6e8 <__divdf3+0x774>
   4c438:	423fff84 	addi	r8,r8,-2
   4c43c:	1705883a 	add	r2,r2,fp
   4c440:	1421c83a 	sub	r16,r2,r16
   4c444:	a00b883a 	mov	r5,r20
   4c448:	8009883a 	mov	r4,r16
   4c44c:	d9800315 	stw	r6,12(sp)
   4c450:	d9c00215 	stw	r7,8(sp)
   4c454:	da000015 	stw	r8,0(sp)
   4c458:	da400115 	stw	r9,4(sp)
   4c45c:	004b60c0 	call	4b60c <__udivsi3>
   4c460:	8009883a 	mov	r4,r16
   4c464:	a00b883a 	mov	r5,r20
   4c468:	1025883a 	mov	r18,r2
   4c46c:	004b6700 	call	4b670 <__umodsi3>
   4c470:	d9c00217 	ldw	r7,8(sp)
   4c474:	1004943a 	slli	r2,r2,16
   4c478:	bcaf383a 	mul	r23,r23,r18
   4c47c:	393fffcc 	andi	r4,r7,65535
   4c480:	2088b03a 	or	r4,r4,r2
   4c484:	d9800317 	ldw	r6,12(sp)
   4c488:	da000017 	ldw	r8,0(sp)
   4c48c:	da400117 	ldw	r9,4(sp)
   4c490:	25c0062e 	bgeu	r4,r23,4c4ac <__divdf3+0x538>
   4c494:	2709883a 	add	r4,r4,fp
   4c498:	90bfffc4 	addi	r2,r18,-1
   4c49c:	27009436 	bltu	r4,fp,4c6f0 <__divdf3+0x77c>
   4c4a0:	25c0932e 	bgeu	r4,r23,4c6f0 <__divdf3+0x77c>
   4c4a4:	94bfff84 	addi	r18,r18,-2
   4c4a8:	2709883a 	add	r4,r4,fp
   4c4ac:	4004943a 	slli	r2,r8,16
   4c4b0:	25efc83a 	sub	r23,r4,r23
   4c4b4:	1490b03a 	or	r8,r2,r18
   4c4b8:	4008d43a 	srli	r4,r8,16
   4c4bc:	40ffffcc 	andi	r3,r8,65535
   4c4c0:	30c5383a 	mul	r2,r6,r3
   4c4c4:	1a47383a 	mul	r3,r3,r9
   4c4c8:	310d383a 	mul	r6,r6,r4
   4c4cc:	100ad43a 	srli	r5,r2,16
   4c4d0:	4913383a 	mul	r9,r9,r4
   4c4d4:	1987883a 	add	r3,r3,r6
   4c4d8:	28c7883a 	add	r3,r5,r3
   4c4dc:	1980022e 	bgeu	r3,r6,4c4e8 <__divdf3+0x574>
   4c4e0:	01000074 	movhi	r4,1
   4c4e4:	4913883a 	add	r9,r9,r4
   4c4e8:	1808d43a 	srli	r4,r3,16
   4c4ec:	1806943a 	slli	r3,r3,16
   4c4f0:	10bfffcc 	andi	r2,r2,65535
   4c4f4:	2253883a 	add	r9,r4,r9
   4c4f8:	1887883a 	add	r3,r3,r2
   4c4fc:	ba403836 	bltu	r23,r9,4c5e0 <__divdf3+0x66c>
   4c500:	ba403626 	beq	r23,r9,4c5dc <__divdf3+0x668>
   4c504:	42000054 	ori	r8,r8,1
   4c508:	a880ffc4 	addi	r2,r21,1023
   4c50c:	00bf570e 	bge	zero,r2,4c26c <__alt_data_end+0xfffe516c>
   4c510:	40c001cc 	andi	r3,r8,7
   4c514:	18000726 	beq	r3,zero,4c534 <__divdf3+0x5c0>
   4c518:	40c003cc 	andi	r3,r8,15
   4c51c:	01000104 	movi	r4,4
   4c520:	19000426 	beq	r3,r4,4c534 <__divdf3+0x5c0>
   4c524:	4107883a 	add	r3,r8,r4
   4c528:	1a11803a 	cmpltu	r8,r3,r8
   4c52c:	8a23883a 	add	r17,r17,r8
   4c530:	1811883a 	mov	r8,r3
   4c534:	88c0402c 	andhi	r3,r17,256
   4c538:	18000426 	beq	r3,zero,4c54c <__divdf3+0x5d8>
   4c53c:	00ffc034 	movhi	r3,65280
   4c540:	18ffffc4 	addi	r3,r3,-1
   4c544:	a8810004 	addi	r2,r21,1024
   4c548:	88e2703a 	and	r17,r17,r3
   4c54c:	00c1ff84 	movi	r3,2046
   4c550:	18bee316 	blt	r3,r2,4c0e0 <__alt_data_end+0xfffe4fe0>
   4c554:	8824977a 	slli	r18,r17,29
   4c558:	4010d0fa 	srli	r8,r8,3
   4c55c:	8822927a 	slli	r17,r17,9
   4c560:	1081ffcc 	andi	r2,r2,2047
   4c564:	9224b03a 	or	r18,r18,r8
   4c568:	880ad33a 	srli	r5,r17,12
   4c56c:	98c0004c 	andi	r3,r19,1
   4c570:	003edf06 	br	4c0f0 <__alt_data_end+0xfffe4ff0>
   4c574:	8080022c 	andhi	r2,r16,8
   4c578:	10001226 	beq	r2,zero,4c5c4 <__divdf3+0x650>
   4c57c:	8880022c 	andhi	r2,r17,8
   4c580:	1000101e 	bne	r2,zero,4c5c4 <__divdf3+0x650>
   4c584:	00800434 	movhi	r2,16
   4c588:	89400234 	orhi	r5,r17,8
   4c58c:	10bfffc4 	addi	r2,r2,-1
   4c590:	b007883a 	mov	r3,r22
   4c594:	288a703a 	and	r5,r5,r2
   4c598:	4025883a 	mov	r18,r8
   4c59c:	003f3106 	br	4c264 <__alt_data_end+0xfffe5164>
   4c5a0:	008000c4 	movi	r2,3
   4c5a4:	3880a626 	beq	r7,r2,4c840 <__divdf3+0x8cc>
   4c5a8:	00800044 	movi	r2,1
   4c5ac:	3880521e 	bne	r7,r2,4c6f8 <__divdf3+0x784>
   4c5b0:	b807883a 	mov	r3,r23
   4c5b4:	0005883a 	mov	r2,zero
   4c5b8:	000b883a 	mov	r5,zero
   4c5bc:	0025883a 	mov	r18,zero
   4c5c0:	003ecb06 	br	4c0f0 <__alt_data_end+0xfffe4ff0>
   4c5c4:	00800434 	movhi	r2,16
   4c5c8:	81400234 	orhi	r5,r16,8
   4c5cc:	10bfffc4 	addi	r2,r2,-1
   4c5d0:	a007883a 	mov	r3,r20
   4c5d4:	288a703a 	and	r5,r5,r2
   4c5d8:	003f2206 	br	4c264 <__alt_data_end+0xfffe5164>
   4c5dc:	183fca26 	beq	r3,zero,4c508 <__alt_data_end+0xfffe5408>
   4c5e0:	e5ef883a 	add	r23,fp,r23
   4c5e4:	40bfffc4 	addi	r2,r8,-1
   4c5e8:	bf00392e 	bgeu	r23,fp,4c6d0 <__divdf3+0x75c>
   4c5ec:	1011883a 	mov	r8,r2
   4c5f0:	ba7fc41e 	bne	r23,r9,4c504 <__alt_data_end+0xfffe5404>
   4c5f4:	b0ffc31e 	bne	r22,r3,4c504 <__alt_data_end+0xfffe5404>
   4c5f8:	003fc306 	br	4c508 <__alt_data_end+0xfffe5408>
   4c5fc:	143ff604 	addi	r16,r2,-40
   4c600:	9c20983a 	sll	r16,r19,r16
   4c604:	0025883a 	mov	r18,zero
   4c608:	003ee206 	br	4c194 <__alt_data_end+0xfffe5094>
   4c60c:	d9800315 	stw	r6,12(sp)
   4c610:	d9c00215 	stw	r7,8(sp)
   4c614:	00413ac0 	call	413ac <__clzsi2>
   4c618:	10800804 	addi	r2,r2,32
   4c61c:	d9c00217 	ldw	r7,8(sp)
   4c620:	d9800317 	ldw	r6,12(sp)
   4c624:	003ed106 	br	4c16c <__alt_data_end+0xfffe506c>
   4c628:	147ff604 	addi	r17,r2,-40
   4c62c:	3462983a 	sll	r17,r6,r17
   4c630:	0011883a 	mov	r8,zero
   4c634:	003ef506 	br	4c20c <__alt_data_end+0xfffe510c>
   4c638:	3009883a 	mov	r4,r6
   4c63c:	d9800315 	stw	r6,12(sp)
   4c640:	da400115 	stw	r9,4(sp)
   4c644:	00413ac0 	call	413ac <__clzsi2>
   4c648:	10800804 	addi	r2,r2,32
   4c64c:	da400117 	ldw	r9,4(sp)
   4c650:	d9800317 	ldw	r6,12(sp)
   4c654:	003ee306 	br	4c1e4 <__alt_data_end+0xfffe50e4>
   4c658:	85a1883a 	add	r16,r16,r22
   4c65c:	8585803a 	cmpltu	r2,r16,r22
   4c660:	1705883a 	add	r2,r2,fp
   4c664:	14a5883a 	add	r18,r2,r18
   4c668:	88bfffc4 	addi	r2,r17,-1
   4c66c:	e4800c2e 	bgeu	fp,r18,4c6a0 <__divdf3+0x72c>
   4c670:	90c03e36 	bltu	r18,r3,4c76c <__divdf3+0x7f8>
   4c674:	1c806926 	beq	r3,r18,4c81c <__divdf3+0x8a8>
   4c678:	90c7c83a 	sub	r3,r18,r3
   4c67c:	1023883a 	mov	r17,r2
   4c680:	003f5206 	br	4c3cc <__alt_data_end+0xfffe52cc>
   4c684:	923f0436 	bltu	r18,r8,4c298 <__alt_data_end+0xfffe5198>
   4c688:	800897fa 	slli	r4,r16,31
   4c68c:	9004d07a 	srli	r2,r18,1
   4c690:	8006d07a 	srli	r3,r16,1
   4c694:	902097fa 	slli	r16,r18,31
   4c698:	20a4b03a 	or	r18,r4,r2
   4c69c:	003f0106 	br	4c2a4 <__alt_data_end+0xfffe51a4>
   4c6a0:	e4bff51e 	bne	fp,r18,4c678 <__alt_data_end+0xfffe5578>
   4c6a4:	85bff22e 	bgeu	r16,r22,4c670 <__alt_data_end+0xfffe5570>
   4c6a8:	e0c7c83a 	sub	r3,fp,r3
   4c6ac:	1023883a 	mov	r17,r2
   4c6b0:	003f4606 	br	4c3cc <__alt_data_end+0xfffe52cc>
   4c6b4:	100f883a 	mov	r7,r2
   4c6b8:	003f2b06 	br	4c368 <__alt_data_end+0xfffe5268>
   4c6bc:	180d883a 	mov	r6,r3
   4c6c0:	003f1306 	br	4c310 <__alt_data_end+0xfffe5210>
   4c6c4:	813fe436 	bltu	r16,r4,4c658 <__alt_data_end+0xfffe5558>
   4c6c8:	0007883a 	mov	r3,zero
   4c6cc:	003f3f06 	br	4c3cc <__alt_data_end+0xfffe52cc>
   4c6d0:	ba402c36 	bltu	r23,r9,4c784 <__divdf3+0x810>
   4c6d4:	4dc05426 	beq	r9,r23,4c828 <__divdf3+0x8b4>
   4c6d8:	1011883a 	mov	r8,r2
   4c6dc:	003f8906 	br	4c504 <__alt_data_end+0xfffe5404>
   4c6e0:	023fffc4 	movi	r8,-1
   4c6e4:	003f8806 	br	4c508 <__alt_data_end+0xfffe5408>
   4c6e8:	1811883a 	mov	r8,r3
   4c6ec:	003f5406 	br	4c440 <__alt_data_end+0xfffe5340>
   4c6f0:	1025883a 	mov	r18,r2
   4c6f4:	003f6d06 	br	4c4ac <__alt_data_end+0xfffe53ac>
   4c6f8:	b827883a 	mov	r19,r23
   4c6fc:	003f8206 	br	4c508 <__alt_data_end+0xfffe5408>
   4c700:	010007c4 	movi	r4,31
   4c704:	20c02616 	blt	r4,r3,4c7a0 <__divdf3+0x82c>
   4c708:	00800804 	movi	r2,32
   4c70c:	10c5c83a 	sub	r2,r2,r3
   4c710:	888a983a 	sll	r5,r17,r2
   4c714:	40c8d83a 	srl	r4,r8,r3
   4c718:	4084983a 	sll	r2,r8,r2
   4c71c:	88e2d83a 	srl	r17,r17,r3
   4c720:	2906b03a 	or	r3,r5,r4
   4c724:	1004c03a 	cmpne	r2,r2,zero
   4c728:	1886b03a 	or	r3,r3,r2
   4c72c:	188001cc 	andi	r2,r3,7
   4c730:	10000726 	beq	r2,zero,4c750 <__divdf3+0x7dc>
   4c734:	188003cc 	andi	r2,r3,15
   4c738:	01000104 	movi	r4,4
   4c73c:	11000426 	beq	r2,r4,4c750 <__divdf3+0x7dc>
   4c740:	1805883a 	mov	r2,r3
   4c744:	10c00104 	addi	r3,r2,4
   4c748:	1885803a 	cmpltu	r2,r3,r2
   4c74c:	88a3883a 	add	r17,r17,r2
   4c750:	8880202c 	andhi	r2,r17,128
   4c754:	10002726 	beq	r2,zero,4c7f4 <__divdf3+0x880>
   4c758:	98c0004c 	andi	r3,r19,1
   4c75c:	00800044 	movi	r2,1
   4c760:	000b883a 	mov	r5,zero
   4c764:	0025883a 	mov	r18,zero
   4c768:	003e6106 	br	4c0f0 <__alt_data_end+0xfffe4ff0>
   4c76c:	85a1883a 	add	r16,r16,r22
   4c770:	8585803a 	cmpltu	r2,r16,r22
   4c774:	1705883a 	add	r2,r2,fp
   4c778:	14a5883a 	add	r18,r2,r18
   4c77c:	8c7fff84 	addi	r17,r17,-2
   4c780:	003f1106 	br	4c3c8 <__alt_data_end+0xfffe52c8>
   4c784:	b589883a 	add	r4,r22,r22
   4c788:	25ad803a 	cmpltu	r22,r4,r22
   4c78c:	b739883a 	add	fp,r22,fp
   4c790:	40bfff84 	addi	r2,r8,-2
   4c794:	bf2f883a 	add	r23,r23,fp
   4c798:	202d883a 	mov	r22,r4
   4c79c:	003f9306 	br	4c5ec <__alt_data_end+0xfffe54ec>
   4c7a0:	013ff844 	movi	r4,-31
   4c7a4:	2085c83a 	sub	r2,r4,r2
   4c7a8:	8888d83a 	srl	r4,r17,r2
   4c7ac:	00800804 	movi	r2,32
   4c7b0:	18802126 	beq	r3,r2,4c838 <__divdf3+0x8c4>
   4c7b4:	00801004 	movi	r2,64
   4c7b8:	10c5c83a 	sub	r2,r2,r3
   4c7bc:	8884983a 	sll	r2,r17,r2
   4c7c0:	1204b03a 	or	r2,r2,r8
   4c7c4:	1004c03a 	cmpne	r2,r2,zero
   4c7c8:	2084b03a 	or	r2,r4,r2
   4c7cc:	144001cc 	andi	r17,r2,7
   4c7d0:	88000d1e 	bne	r17,zero,4c808 <__divdf3+0x894>
   4c7d4:	000b883a 	mov	r5,zero
   4c7d8:	1024d0fa 	srli	r18,r2,3
   4c7dc:	98c0004c 	andi	r3,r19,1
   4c7e0:	0005883a 	mov	r2,zero
   4c7e4:	9464b03a 	or	r18,r18,r17
   4c7e8:	003e4106 	br	4c0f0 <__alt_data_end+0xfffe4ff0>
   4c7ec:	1007883a 	mov	r3,r2
   4c7f0:	0023883a 	mov	r17,zero
   4c7f4:	880a927a 	slli	r5,r17,9
   4c7f8:	1805883a 	mov	r2,r3
   4c7fc:	8822977a 	slli	r17,r17,29
   4c800:	280ad33a 	srli	r5,r5,12
   4c804:	003ff406 	br	4c7d8 <__alt_data_end+0xfffe56d8>
   4c808:	10c003cc 	andi	r3,r2,15
   4c80c:	01000104 	movi	r4,4
   4c810:	193ff626 	beq	r3,r4,4c7ec <__alt_data_end+0xfffe56ec>
   4c814:	0023883a 	mov	r17,zero
   4c818:	003fca06 	br	4c744 <__alt_data_end+0xfffe5644>
   4c81c:	813fd336 	bltu	r16,r4,4c76c <__alt_data_end+0xfffe566c>
   4c820:	1023883a 	mov	r17,r2
   4c824:	003fa806 	br	4c6c8 <__alt_data_end+0xfffe55c8>
   4c828:	b0ffd636 	bltu	r22,r3,4c784 <__alt_data_end+0xfffe5684>
   4c82c:	1011883a 	mov	r8,r2
   4c830:	b0ff341e 	bne	r22,r3,4c504 <__alt_data_end+0xfffe5404>
   4c834:	003f3406 	br	4c508 <__alt_data_end+0xfffe5408>
   4c838:	0005883a 	mov	r2,zero
   4c83c:	003fe006 	br	4c7c0 <__alt_data_end+0xfffe56c0>
   4c840:	00800434 	movhi	r2,16
   4c844:	89400234 	orhi	r5,r17,8
   4c848:	10bfffc4 	addi	r2,r2,-1
   4c84c:	b807883a 	mov	r3,r23
   4c850:	288a703a 	and	r5,r5,r2
   4c854:	4025883a 	mov	r18,r8
   4c858:	003e8206 	br	4c264 <__alt_data_end+0xfffe5164>

0004c85c <__eqdf2>:
   4c85c:	2804d53a 	srli	r2,r5,20
   4c860:	3806d53a 	srli	r3,r7,20
   4c864:	02000434 	movhi	r8,16
   4c868:	423fffc4 	addi	r8,r8,-1
   4c86c:	1081ffcc 	andi	r2,r2,2047
   4c870:	0281ffc4 	movi	r10,2047
   4c874:	2a12703a 	and	r9,r5,r8
   4c878:	18c1ffcc 	andi	r3,r3,2047
   4c87c:	3a10703a 	and	r8,r7,r8
   4c880:	280ad7fa 	srli	r5,r5,31
   4c884:	380ed7fa 	srli	r7,r7,31
   4c888:	12801026 	beq	r2,r10,4c8cc <__eqdf2+0x70>
   4c88c:	0281ffc4 	movi	r10,2047
   4c890:	1a800a26 	beq	r3,r10,4c8bc <__eqdf2+0x60>
   4c894:	10c00226 	beq	r2,r3,4c8a0 <__eqdf2+0x44>
   4c898:	00800044 	movi	r2,1
   4c89c:	f800283a 	ret
   4c8a0:	4a3ffd1e 	bne	r9,r8,4c898 <__alt_data_end+0xfffe5798>
   4c8a4:	21bffc1e 	bne	r4,r6,4c898 <__alt_data_end+0xfffe5798>
   4c8a8:	29c00c26 	beq	r5,r7,4c8dc <__eqdf2+0x80>
   4c8ac:	103ffa1e 	bne	r2,zero,4c898 <__alt_data_end+0xfffe5798>
   4c8b0:	2244b03a 	or	r2,r4,r9
   4c8b4:	1004c03a 	cmpne	r2,r2,zero
   4c8b8:	f800283a 	ret
   4c8bc:	3214b03a 	or	r10,r6,r8
   4c8c0:	503ff426 	beq	r10,zero,4c894 <__alt_data_end+0xfffe5794>
   4c8c4:	00800044 	movi	r2,1
   4c8c8:	f800283a 	ret
   4c8cc:	2254b03a 	or	r10,r4,r9
   4c8d0:	503fee26 	beq	r10,zero,4c88c <__alt_data_end+0xfffe578c>
   4c8d4:	00800044 	movi	r2,1
   4c8d8:	f800283a 	ret
   4c8dc:	0005883a 	mov	r2,zero
   4c8e0:	f800283a 	ret

0004c8e4 <__gedf2>:
   4c8e4:	2804d53a 	srli	r2,r5,20
   4c8e8:	3806d53a 	srli	r3,r7,20
   4c8ec:	02000434 	movhi	r8,16
   4c8f0:	423fffc4 	addi	r8,r8,-1
   4c8f4:	1081ffcc 	andi	r2,r2,2047
   4c8f8:	0241ffc4 	movi	r9,2047
   4c8fc:	2a14703a 	and	r10,r5,r8
   4c900:	18c1ffcc 	andi	r3,r3,2047
   4c904:	3a10703a 	and	r8,r7,r8
   4c908:	280ad7fa 	srli	r5,r5,31
   4c90c:	380ed7fa 	srli	r7,r7,31
   4c910:	12401d26 	beq	r2,r9,4c988 <__gedf2+0xa4>
   4c914:	0241ffc4 	movi	r9,2047
   4c918:	1a401226 	beq	r3,r9,4c964 <__gedf2+0x80>
   4c91c:	1000081e 	bne	r2,zero,4c940 <__gedf2+0x5c>
   4c920:	2296b03a 	or	r11,r4,r10
   4c924:	5813003a 	cmpeq	r9,r11,zero
   4c928:	1800091e 	bne	r3,zero,4c950 <__gedf2+0x6c>
   4c92c:	3218b03a 	or	r12,r6,r8
   4c930:	6000071e 	bne	r12,zero,4c950 <__gedf2+0x6c>
   4c934:	0005883a 	mov	r2,zero
   4c938:	5800101e 	bne	r11,zero,4c97c <__gedf2+0x98>
   4c93c:	f800283a 	ret
   4c940:	18000c1e 	bne	r3,zero,4c974 <__gedf2+0x90>
   4c944:	3212b03a 	or	r9,r6,r8
   4c948:	48000c26 	beq	r9,zero,4c97c <__gedf2+0x98>
   4c94c:	0013883a 	mov	r9,zero
   4c950:	39c03fcc 	andi	r7,r7,255
   4c954:	48000826 	beq	r9,zero,4c978 <__gedf2+0x94>
   4c958:	38000926 	beq	r7,zero,4c980 <__gedf2+0x9c>
   4c95c:	00800044 	movi	r2,1
   4c960:	f800283a 	ret
   4c964:	3212b03a 	or	r9,r6,r8
   4c968:	483fec26 	beq	r9,zero,4c91c <__alt_data_end+0xfffe581c>
   4c96c:	00bfff84 	movi	r2,-2
   4c970:	f800283a 	ret
   4c974:	39c03fcc 	andi	r7,r7,255
   4c978:	29c00626 	beq	r5,r7,4c994 <__gedf2+0xb0>
   4c97c:	283ff726 	beq	r5,zero,4c95c <__alt_data_end+0xfffe585c>
   4c980:	00bfffc4 	movi	r2,-1
   4c984:	f800283a 	ret
   4c988:	2292b03a 	or	r9,r4,r10
   4c98c:	483fe126 	beq	r9,zero,4c914 <__alt_data_end+0xfffe5814>
   4c990:	003ff606 	br	4c96c <__alt_data_end+0xfffe586c>
   4c994:	18bff916 	blt	r3,r2,4c97c <__alt_data_end+0xfffe587c>
   4c998:	10c00316 	blt	r2,r3,4c9a8 <__gedf2+0xc4>
   4c99c:	42bff736 	bltu	r8,r10,4c97c <__alt_data_end+0xfffe587c>
   4c9a0:	52000326 	beq	r10,r8,4c9b0 <__gedf2+0xcc>
   4c9a4:	5200042e 	bgeu	r10,r8,4c9b8 <__gedf2+0xd4>
   4c9a8:	283fec1e 	bne	r5,zero,4c95c <__alt_data_end+0xfffe585c>
   4c9ac:	003ff406 	br	4c980 <__alt_data_end+0xfffe5880>
   4c9b0:	313ff236 	bltu	r6,r4,4c97c <__alt_data_end+0xfffe587c>
   4c9b4:	21bffc36 	bltu	r4,r6,4c9a8 <__alt_data_end+0xfffe58a8>
   4c9b8:	0005883a 	mov	r2,zero
   4c9bc:	f800283a 	ret

0004c9c0 <__ledf2>:
   4c9c0:	2804d53a 	srli	r2,r5,20
   4c9c4:	3810d53a 	srli	r8,r7,20
   4c9c8:	00c00434 	movhi	r3,16
   4c9cc:	18ffffc4 	addi	r3,r3,-1
   4c9d0:	1081ffcc 	andi	r2,r2,2047
   4c9d4:	0241ffc4 	movi	r9,2047
   4c9d8:	28d4703a 	and	r10,r5,r3
   4c9dc:	4201ffcc 	andi	r8,r8,2047
   4c9e0:	38c6703a 	and	r3,r7,r3
   4c9e4:	280ad7fa 	srli	r5,r5,31
   4c9e8:	380ed7fa 	srli	r7,r7,31
   4c9ec:	12401f26 	beq	r2,r9,4ca6c <__ledf2+0xac>
   4c9f0:	0241ffc4 	movi	r9,2047
   4c9f4:	42401426 	beq	r8,r9,4ca48 <__ledf2+0x88>
   4c9f8:	1000091e 	bne	r2,zero,4ca20 <__ledf2+0x60>
   4c9fc:	2296b03a 	or	r11,r4,r10
   4ca00:	5813003a 	cmpeq	r9,r11,zero
   4ca04:	29403fcc 	andi	r5,r5,255
   4ca08:	40000a1e 	bne	r8,zero,4ca34 <__ledf2+0x74>
   4ca0c:	30d8b03a 	or	r12,r6,r3
   4ca10:	6000081e 	bne	r12,zero,4ca34 <__ledf2+0x74>
   4ca14:	0005883a 	mov	r2,zero
   4ca18:	5800111e 	bne	r11,zero,4ca60 <__ledf2+0xa0>
   4ca1c:	f800283a 	ret
   4ca20:	29403fcc 	andi	r5,r5,255
   4ca24:	40000c1e 	bne	r8,zero,4ca58 <__ledf2+0x98>
   4ca28:	30d2b03a 	or	r9,r6,r3
   4ca2c:	48000c26 	beq	r9,zero,4ca60 <__ledf2+0xa0>
   4ca30:	0013883a 	mov	r9,zero
   4ca34:	39c03fcc 	andi	r7,r7,255
   4ca38:	48000826 	beq	r9,zero,4ca5c <__ledf2+0x9c>
   4ca3c:	38001126 	beq	r7,zero,4ca84 <__ledf2+0xc4>
   4ca40:	00800044 	movi	r2,1
   4ca44:	f800283a 	ret
   4ca48:	30d2b03a 	or	r9,r6,r3
   4ca4c:	483fea26 	beq	r9,zero,4c9f8 <__alt_data_end+0xfffe58f8>
   4ca50:	00800084 	movi	r2,2
   4ca54:	f800283a 	ret
   4ca58:	39c03fcc 	andi	r7,r7,255
   4ca5c:	39400726 	beq	r7,r5,4ca7c <__ledf2+0xbc>
   4ca60:	2800081e 	bne	r5,zero,4ca84 <__ledf2+0xc4>
   4ca64:	00800044 	movi	r2,1
   4ca68:	f800283a 	ret
   4ca6c:	2292b03a 	or	r9,r4,r10
   4ca70:	483fdf26 	beq	r9,zero,4c9f0 <__alt_data_end+0xfffe58f0>
   4ca74:	00800084 	movi	r2,2
   4ca78:	f800283a 	ret
   4ca7c:	4080030e 	bge	r8,r2,4ca8c <__ledf2+0xcc>
   4ca80:	383fef26 	beq	r7,zero,4ca40 <__alt_data_end+0xfffe5940>
   4ca84:	00bfffc4 	movi	r2,-1
   4ca88:	f800283a 	ret
   4ca8c:	123feb16 	blt	r2,r8,4ca3c <__alt_data_end+0xfffe593c>
   4ca90:	1abff336 	bltu	r3,r10,4ca60 <__alt_data_end+0xfffe5960>
   4ca94:	50c00326 	beq	r10,r3,4caa4 <__ledf2+0xe4>
   4ca98:	50c0042e 	bgeu	r10,r3,4caac <__ledf2+0xec>
   4ca9c:	283fe81e 	bne	r5,zero,4ca40 <__alt_data_end+0xfffe5940>
   4caa0:	003ff806 	br	4ca84 <__alt_data_end+0xfffe5984>
   4caa4:	313fee36 	bltu	r6,r4,4ca60 <__alt_data_end+0xfffe5960>
   4caa8:	21bffc36 	bltu	r4,r6,4ca9c <__alt_data_end+0xfffe599c>
   4caac:	0005883a 	mov	r2,zero
   4cab0:	f800283a 	ret

0004cab4 <__muldf3>:
   4cab4:	defff304 	addi	sp,sp,-52
   4cab8:	2804d53a 	srli	r2,r5,20
   4cabc:	dd800915 	stw	r22,36(sp)
   4cac0:	282cd7fa 	srli	r22,r5,31
   4cac4:	dc000315 	stw	r16,12(sp)
   4cac8:	04000434 	movhi	r16,16
   4cacc:	dd400815 	stw	r21,32(sp)
   4cad0:	dc800515 	stw	r18,20(sp)
   4cad4:	843fffc4 	addi	r16,r16,-1
   4cad8:	dfc00c15 	stw	ra,48(sp)
   4cadc:	df000b15 	stw	fp,44(sp)
   4cae0:	ddc00a15 	stw	r23,40(sp)
   4cae4:	dd000715 	stw	r20,28(sp)
   4cae8:	dcc00615 	stw	r19,24(sp)
   4caec:	dc400415 	stw	r17,16(sp)
   4caf0:	1481ffcc 	andi	r18,r2,2047
   4caf4:	2c20703a 	and	r16,r5,r16
   4caf8:	b02b883a 	mov	r21,r22
   4cafc:	b2403fcc 	andi	r9,r22,255
   4cb00:	90006026 	beq	r18,zero,4cc84 <__muldf3+0x1d0>
   4cb04:	0081ffc4 	movi	r2,2047
   4cb08:	2029883a 	mov	r20,r4
   4cb0c:	90803626 	beq	r18,r2,4cbe8 <__muldf3+0x134>
   4cb10:	80800434 	orhi	r2,r16,16
   4cb14:	100490fa 	slli	r2,r2,3
   4cb18:	2020d77a 	srli	r16,r4,29
   4cb1c:	202890fa 	slli	r20,r4,3
   4cb20:	94bf0044 	addi	r18,r18,-1023
   4cb24:	80a0b03a 	or	r16,r16,r2
   4cb28:	0027883a 	mov	r19,zero
   4cb2c:	0039883a 	mov	fp,zero
   4cb30:	3804d53a 	srli	r2,r7,20
   4cb34:	382ed7fa 	srli	r23,r7,31
   4cb38:	04400434 	movhi	r17,16
   4cb3c:	8c7fffc4 	addi	r17,r17,-1
   4cb40:	1081ffcc 	andi	r2,r2,2047
   4cb44:	3011883a 	mov	r8,r6
   4cb48:	3c62703a 	and	r17,r7,r17
   4cb4c:	ba803fcc 	andi	r10,r23,255
   4cb50:	10006d26 	beq	r2,zero,4cd08 <__muldf3+0x254>
   4cb54:	00c1ffc4 	movi	r3,2047
   4cb58:	10c06526 	beq	r2,r3,4ccf0 <__muldf3+0x23c>
   4cb5c:	88c00434 	orhi	r3,r17,16
   4cb60:	180690fa 	slli	r3,r3,3
   4cb64:	3022d77a 	srli	r17,r6,29
   4cb68:	301090fa 	slli	r8,r6,3
   4cb6c:	10bf0044 	addi	r2,r2,-1023
   4cb70:	88e2b03a 	or	r17,r17,r3
   4cb74:	000b883a 	mov	r5,zero
   4cb78:	9085883a 	add	r2,r18,r2
   4cb7c:	2cc8b03a 	or	r4,r5,r19
   4cb80:	00c003c4 	movi	r3,15
   4cb84:	bdacf03a 	xor	r22,r23,r22
   4cb88:	12c00044 	addi	r11,r2,1
   4cb8c:	19009936 	bltu	r3,r4,4cdf4 <__muldf3+0x340>
   4cb90:	200890ba 	slli	r4,r4,2
   4cb94:	00c00174 	movhi	r3,5
   4cb98:	18f2ea04 	addi	r3,r3,-13400
   4cb9c:	20c9883a 	add	r4,r4,r3
   4cba0:	20c00017 	ldw	r3,0(r4)
   4cba4:	1800683a 	jmp	r3
   4cba8:	0004cdf4 	movhi	zero,4919
   4cbac:	0004cc08 	cmpgei	zero,zero,4912
   4cbb0:	0004cc08 	cmpgei	zero,zero,4912
   4cbb4:	0004cc04 	movi	zero,4912
   4cbb8:	0004cdd0 	cmplti	zero,zero,4919
   4cbbc:	0004cdd0 	cmplti	zero,zero,4919
   4cbc0:	0004cdb8 	rdprs	zero,zero,4918
   4cbc4:	0004cc04 	movi	zero,4912
   4cbc8:	0004cdd0 	cmplti	zero,zero,4919
   4cbcc:	0004cdb8 	rdprs	zero,zero,4918
   4cbd0:	0004cdd0 	cmplti	zero,zero,4919
   4cbd4:	0004cc04 	movi	zero,4912
   4cbd8:	0004cde0 	cmpeqi	zero,zero,4919
   4cbdc:	0004cde0 	cmpeqi	zero,zero,4919
   4cbe0:	0004cde0 	cmpeqi	zero,zero,4919
   4cbe4:	0004cffc 	xorhi	zero,zero,4927
   4cbe8:	2404b03a 	or	r2,r4,r16
   4cbec:	10006f1e 	bne	r2,zero,4cdac <__muldf3+0x2f8>
   4cbf0:	04c00204 	movi	r19,8
   4cbf4:	0021883a 	mov	r16,zero
   4cbf8:	0029883a 	mov	r20,zero
   4cbfc:	07000084 	movi	fp,2
   4cc00:	003fcb06 	br	4cb30 <__alt_data_end+0xfffe5a30>
   4cc04:	502d883a 	mov	r22,r10
   4cc08:	00800084 	movi	r2,2
   4cc0c:	28805726 	beq	r5,r2,4cd6c <__muldf3+0x2b8>
   4cc10:	008000c4 	movi	r2,3
   4cc14:	28816626 	beq	r5,r2,4d1b0 <__muldf3+0x6fc>
   4cc18:	00800044 	movi	r2,1
   4cc1c:	2881411e 	bne	r5,r2,4d124 <__muldf3+0x670>
   4cc20:	b02b883a 	mov	r21,r22
   4cc24:	0005883a 	mov	r2,zero
   4cc28:	000b883a 	mov	r5,zero
   4cc2c:	0029883a 	mov	r20,zero
   4cc30:	1004953a 	slli	r2,r2,20
   4cc34:	a8c03fcc 	andi	r3,r21,255
   4cc38:	04400434 	movhi	r17,16
   4cc3c:	8c7fffc4 	addi	r17,r17,-1
   4cc40:	180697fa 	slli	r3,r3,31
   4cc44:	2c4a703a 	and	r5,r5,r17
   4cc48:	288ab03a 	or	r5,r5,r2
   4cc4c:	28c6b03a 	or	r3,r5,r3
   4cc50:	a005883a 	mov	r2,r20
   4cc54:	dfc00c17 	ldw	ra,48(sp)
   4cc58:	df000b17 	ldw	fp,44(sp)
   4cc5c:	ddc00a17 	ldw	r23,40(sp)
   4cc60:	dd800917 	ldw	r22,36(sp)
   4cc64:	dd400817 	ldw	r21,32(sp)
   4cc68:	dd000717 	ldw	r20,28(sp)
   4cc6c:	dcc00617 	ldw	r19,24(sp)
   4cc70:	dc800517 	ldw	r18,20(sp)
   4cc74:	dc400417 	ldw	r17,16(sp)
   4cc78:	dc000317 	ldw	r16,12(sp)
   4cc7c:	dec00d04 	addi	sp,sp,52
   4cc80:	f800283a 	ret
   4cc84:	2404b03a 	or	r2,r4,r16
   4cc88:	2027883a 	mov	r19,r4
   4cc8c:	10004226 	beq	r2,zero,4cd98 <__muldf3+0x2e4>
   4cc90:	8000fc26 	beq	r16,zero,4d084 <__muldf3+0x5d0>
   4cc94:	8009883a 	mov	r4,r16
   4cc98:	d9800215 	stw	r6,8(sp)
   4cc9c:	d9c00015 	stw	r7,0(sp)
   4cca0:	da400115 	stw	r9,4(sp)
   4cca4:	00413ac0 	call	413ac <__clzsi2>
   4cca8:	d9800217 	ldw	r6,8(sp)
   4ccac:	d9c00017 	ldw	r7,0(sp)
   4ccb0:	da400117 	ldw	r9,4(sp)
   4ccb4:	113ffd44 	addi	r4,r2,-11
   4ccb8:	00c00704 	movi	r3,28
   4ccbc:	1900ed16 	blt	r3,r4,4d074 <__muldf3+0x5c0>
   4ccc0:	00c00744 	movi	r3,29
   4ccc4:	147ffe04 	addi	r17,r2,-8
   4ccc8:	1907c83a 	sub	r3,r3,r4
   4cccc:	8460983a 	sll	r16,r16,r17
   4ccd0:	98c6d83a 	srl	r3,r19,r3
   4ccd4:	9c68983a 	sll	r20,r19,r17
   4ccd8:	1c20b03a 	or	r16,r3,r16
   4ccdc:	1080fcc4 	addi	r2,r2,1011
   4cce0:	00a5c83a 	sub	r18,zero,r2
   4cce4:	0027883a 	mov	r19,zero
   4cce8:	0039883a 	mov	fp,zero
   4ccec:	003f9006 	br	4cb30 <__alt_data_end+0xfffe5a30>
   4ccf0:	3446b03a 	or	r3,r6,r17
   4ccf4:	1800261e 	bne	r3,zero,4cd90 <__muldf3+0x2dc>
   4ccf8:	0023883a 	mov	r17,zero
   4ccfc:	0011883a 	mov	r8,zero
   4cd00:	01400084 	movi	r5,2
   4cd04:	003f9c06 	br	4cb78 <__alt_data_end+0xfffe5a78>
   4cd08:	3446b03a 	or	r3,r6,r17
   4cd0c:	18001c26 	beq	r3,zero,4cd80 <__muldf3+0x2cc>
   4cd10:	8800ce26 	beq	r17,zero,4d04c <__muldf3+0x598>
   4cd14:	8809883a 	mov	r4,r17
   4cd18:	d9800215 	stw	r6,8(sp)
   4cd1c:	da400115 	stw	r9,4(sp)
   4cd20:	da800015 	stw	r10,0(sp)
   4cd24:	00413ac0 	call	413ac <__clzsi2>
   4cd28:	d9800217 	ldw	r6,8(sp)
   4cd2c:	da400117 	ldw	r9,4(sp)
   4cd30:	da800017 	ldw	r10,0(sp)
   4cd34:	113ffd44 	addi	r4,r2,-11
   4cd38:	00c00704 	movi	r3,28
   4cd3c:	1900bf16 	blt	r3,r4,4d03c <__muldf3+0x588>
   4cd40:	00c00744 	movi	r3,29
   4cd44:	123ffe04 	addi	r8,r2,-8
   4cd48:	1907c83a 	sub	r3,r3,r4
   4cd4c:	8a22983a 	sll	r17,r17,r8
   4cd50:	30c6d83a 	srl	r3,r6,r3
   4cd54:	3210983a 	sll	r8,r6,r8
   4cd58:	1c62b03a 	or	r17,r3,r17
   4cd5c:	1080fcc4 	addi	r2,r2,1011
   4cd60:	0085c83a 	sub	r2,zero,r2
   4cd64:	000b883a 	mov	r5,zero
   4cd68:	003f8306 	br	4cb78 <__alt_data_end+0xfffe5a78>
   4cd6c:	b02b883a 	mov	r21,r22
   4cd70:	0081ffc4 	movi	r2,2047
   4cd74:	000b883a 	mov	r5,zero
   4cd78:	0029883a 	mov	r20,zero
   4cd7c:	003fac06 	br	4cc30 <__alt_data_end+0xfffe5b30>
   4cd80:	0023883a 	mov	r17,zero
   4cd84:	0011883a 	mov	r8,zero
   4cd88:	01400044 	movi	r5,1
   4cd8c:	003f7a06 	br	4cb78 <__alt_data_end+0xfffe5a78>
   4cd90:	014000c4 	movi	r5,3
   4cd94:	003f7806 	br	4cb78 <__alt_data_end+0xfffe5a78>
   4cd98:	04c00104 	movi	r19,4
   4cd9c:	0021883a 	mov	r16,zero
   4cda0:	0029883a 	mov	r20,zero
   4cda4:	07000044 	movi	fp,1
   4cda8:	003f6106 	br	4cb30 <__alt_data_end+0xfffe5a30>
   4cdac:	04c00304 	movi	r19,12
   4cdb0:	070000c4 	movi	fp,3
   4cdb4:	003f5e06 	br	4cb30 <__alt_data_end+0xfffe5a30>
   4cdb8:	01400434 	movhi	r5,16
   4cdbc:	002b883a 	mov	r21,zero
   4cdc0:	297fffc4 	addi	r5,r5,-1
   4cdc4:	053fffc4 	movi	r20,-1
   4cdc8:	0081ffc4 	movi	r2,2047
   4cdcc:	003f9806 	br	4cc30 <__alt_data_end+0xfffe5b30>
   4cdd0:	8023883a 	mov	r17,r16
   4cdd4:	a011883a 	mov	r8,r20
   4cdd8:	e00b883a 	mov	r5,fp
   4cddc:	003f8a06 	br	4cc08 <__alt_data_end+0xfffe5b08>
   4cde0:	8023883a 	mov	r17,r16
   4cde4:	a011883a 	mov	r8,r20
   4cde8:	482d883a 	mov	r22,r9
   4cdec:	e00b883a 	mov	r5,fp
   4cdf0:	003f8506 	br	4cc08 <__alt_data_end+0xfffe5b08>
   4cdf4:	a00ad43a 	srli	r5,r20,16
   4cdf8:	401ad43a 	srli	r13,r8,16
   4cdfc:	a53fffcc 	andi	r20,r20,65535
   4ce00:	423fffcc 	andi	r8,r8,65535
   4ce04:	4519383a 	mul	r12,r8,r20
   4ce08:	4147383a 	mul	r3,r8,r5
   4ce0c:	6d09383a 	mul	r4,r13,r20
   4ce10:	600cd43a 	srli	r6,r12,16
   4ce14:	2b5d383a 	mul	r14,r5,r13
   4ce18:	20c9883a 	add	r4,r4,r3
   4ce1c:	310d883a 	add	r6,r6,r4
   4ce20:	30c0022e 	bgeu	r6,r3,4ce2c <__muldf3+0x378>
   4ce24:	00c00074 	movhi	r3,1
   4ce28:	70dd883a 	add	r14,r14,r3
   4ce2c:	8826d43a 	srli	r19,r17,16
   4ce30:	8bffffcc 	andi	r15,r17,65535
   4ce34:	7d23383a 	mul	r17,r15,r20
   4ce38:	7949383a 	mul	r4,r15,r5
   4ce3c:	9d29383a 	mul	r20,r19,r20
   4ce40:	8814d43a 	srli	r10,r17,16
   4ce44:	3012943a 	slli	r9,r6,16
   4ce48:	a129883a 	add	r20,r20,r4
   4ce4c:	633fffcc 	andi	r12,r12,65535
   4ce50:	5515883a 	add	r10,r10,r20
   4ce54:	3006d43a 	srli	r3,r6,16
   4ce58:	4b13883a 	add	r9,r9,r12
   4ce5c:	2ccb383a 	mul	r5,r5,r19
   4ce60:	5100022e 	bgeu	r10,r4,4ce6c <__muldf3+0x3b8>
   4ce64:	01000074 	movhi	r4,1
   4ce68:	290b883a 	add	r5,r5,r4
   4ce6c:	802ad43a 	srli	r21,r16,16
   4ce70:	843fffcc 	andi	r16,r16,65535
   4ce74:	440d383a 	mul	r6,r8,r16
   4ce78:	4565383a 	mul	r18,r8,r21
   4ce7c:	8349383a 	mul	r4,r16,r13
   4ce80:	500e943a 	slli	r7,r10,16
   4ce84:	3010d43a 	srli	r8,r6,16
   4ce88:	5028d43a 	srli	r20,r10,16
   4ce8c:	2489883a 	add	r4,r4,r18
   4ce90:	8abfffcc 	andi	r10,r17,65535
   4ce94:	3a95883a 	add	r10,r7,r10
   4ce98:	4119883a 	add	r12,r8,r4
   4ce9c:	a169883a 	add	r20,r20,r5
   4cea0:	1a87883a 	add	r3,r3,r10
   4cea4:	6d5b383a 	mul	r13,r13,r21
   4cea8:	6480022e 	bgeu	r12,r18,4ceb4 <__muldf3+0x400>
   4ceac:	01000074 	movhi	r4,1
   4ceb0:	691b883a 	add	r13,r13,r4
   4ceb4:	7c25383a 	mul	r18,r15,r16
   4ceb8:	7d4b383a 	mul	r5,r15,r21
   4cebc:	84cf383a 	mul	r7,r16,r19
   4cec0:	901ed43a 	srli	r15,r18,16
   4cec4:	6008d43a 	srli	r4,r12,16
   4cec8:	6010943a 	slli	r8,r12,16
   4cecc:	394f883a 	add	r7,r7,r5
   4ced0:	333fffcc 	andi	r12,r6,65535
   4ced4:	79df883a 	add	r15,r15,r7
   4ced8:	235b883a 	add	r13,r4,r13
   4cedc:	9d63383a 	mul	r17,r19,r21
   4cee0:	4309883a 	add	r4,r8,r12
   4cee4:	7940022e 	bgeu	r15,r5,4cef0 <__muldf3+0x43c>
   4cee8:	01400074 	movhi	r5,1
   4ceec:	8963883a 	add	r17,r17,r5
   4cef0:	780a943a 	slli	r5,r15,16
   4cef4:	91bfffcc 	andi	r6,r18,65535
   4cef8:	70c7883a 	add	r3,r14,r3
   4cefc:	298d883a 	add	r6,r5,r6
   4cf00:	1a8f803a 	cmpltu	r7,r3,r10
   4cf04:	350b883a 	add	r5,r6,r20
   4cf08:	20c7883a 	add	r3,r4,r3
   4cf0c:	3955883a 	add	r10,r7,r5
   4cf10:	1909803a 	cmpltu	r4,r3,r4
   4cf14:	6a91883a 	add	r8,r13,r10
   4cf18:	780cd43a 	srli	r6,r15,16
   4cf1c:	2219883a 	add	r12,r4,r8
   4cf20:	2d0b803a 	cmpltu	r5,r5,r20
   4cf24:	51cf803a 	cmpltu	r7,r10,r7
   4cf28:	29ceb03a 	or	r7,r5,r7
   4cf2c:	4351803a 	cmpltu	r8,r8,r13
   4cf30:	610b803a 	cmpltu	r5,r12,r4
   4cf34:	4148b03a 	or	r4,r8,r5
   4cf38:	398f883a 	add	r7,r7,r6
   4cf3c:	3909883a 	add	r4,r7,r4
   4cf40:	1810927a 	slli	r8,r3,9
   4cf44:	2449883a 	add	r4,r4,r17
   4cf48:	2008927a 	slli	r4,r4,9
   4cf4c:	6022d5fa 	srli	r17,r12,23
   4cf50:	1806d5fa 	srli	r3,r3,23
   4cf54:	4252b03a 	or	r9,r8,r9
   4cf58:	600a927a 	slli	r5,r12,9
   4cf5c:	4810c03a 	cmpne	r8,r9,zero
   4cf60:	2462b03a 	or	r17,r4,r17
   4cf64:	40c6b03a 	or	r3,r8,r3
   4cf68:	8900402c 	andhi	r4,r17,256
   4cf6c:	1950b03a 	or	r8,r3,r5
   4cf70:	20000726 	beq	r4,zero,4cf90 <__muldf3+0x4dc>
   4cf74:	4006d07a 	srli	r3,r8,1
   4cf78:	880497fa 	slli	r2,r17,31
   4cf7c:	4200004c 	andi	r8,r8,1
   4cf80:	8822d07a 	srli	r17,r17,1
   4cf84:	1a10b03a 	or	r8,r3,r8
   4cf88:	1210b03a 	or	r8,r2,r8
   4cf8c:	5805883a 	mov	r2,r11
   4cf90:	1140ffc4 	addi	r5,r2,1023
   4cf94:	0140440e 	bge	zero,r5,4d0a8 <__muldf3+0x5f4>
   4cf98:	40c001cc 	andi	r3,r8,7
   4cf9c:	18000726 	beq	r3,zero,4cfbc <__muldf3+0x508>
   4cfa0:	40c003cc 	andi	r3,r8,15
   4cfa4:	01000104 	movi	r4,4
   4cfa8:	19000426 	beq	r3,r4,4cfbc <__muldf3+0x508>
   4cfac:	4107883a 	add	r3,r8,r4
   4cfb0:	1a11803a 	cmpltu	r8,r3,r8
   4cfb4:	8a23883a 	add	r17,r17,r8
   4cfb8:	1811883a 	mov	r8,r3
   4cfbc:	88c0402c 	andhi	r3,r17,256
   4cfc0:	18000426 	beq	r3,zero,4cfd4 <__muldf3+0x520>
   4cfc4:	11410004 	addi	r5,r2,1024
   4cfc8:	00bfc034 	movhi	r2,65280
   4cfcc:	10bfffc4 	addi	r2,r2,-1
   4cfd0:	88a2703a 	and	r17,r17,r2
   4cfd4:	0081ff84 	movi	r2,2046
   4cfd8:	117f6416 	blt	r2,r5,4cd6c <__alt_data_end+0xfffe5c6c>
   4cfdc:	8828977a 	slli	r20,r17,29
   4cfe0:	4010d0fa 	srli	r8,r8,3
   4cfe4:	8822927a 	slli	r17,r17,9
   4cfe8:	2881ffcc 	andi	r2,r5,2047
   4cfec:	a228b03a 	or	r20,r20,r8
   4cff0:	880ad33a 	srli	r5,r17,12
   4cff4:	b02b883a 	mov	r21,r22
   4cff8:	003f0d06 	br	4cc30 <__alt_data_end+0xfffe5b30>
   4cffc:	8080022c 	andhi	r2,r16,8
   4d000:	10000926 	beq	r2,zero,4d028 <__muldf3+0x574>
   4d004:	8880022c 	andhi	r2,r17,8
   4d008:	1000071e 	bne	r2,zero,4d028 <__muldf3+0x574>
   4d00c:	00800434 	movhi	r2,16
   4d010:	89400234 	orhi	r5,r17,8
   4d014:	10bfffc4 	addi	r2,r2,-1
   4d018:	b82b883a 	mov	r21,r23
   4d01c:	288a703a 	and	r5,r5,r2
   4d020:	4029883a 	mov	r20,r8
   4d024:	003f6806 	br	4cdc8 <__alt_data_end+0xfffe5cc8>
   4d028:	00800434 	movhi	r2,16
   4d02c:	81400234 	orhi	r5,r16,8
   4d030:	10bfffc4 	addi	r2,r2,-1
   4d034:	288a703a 	and	r5,r5,r2
   4d038:	003f6306 	br	4cdc8 <__alt_data_end+0xfffe5cc8>
   4d03c:	147ff604 	addi	r17,r2,-40
   4d040:	3462983a 	sll	r17,r6,r17
   4d044:	0011883a 	mov	r8,zero
   4d048:	003f4406 	br	4cd5c <__alt_data_end+0xfffe5c5c>
   4d04c:	3009883a 	mov	r4,r6
   4d050:	d9800215 	stw	r6,8(sp)
   4d054:	da400115 	stw	r9,4(sp)
   4d058:	da800015 	stw	r10,0(sp)
   4d05c:	00413ac0 	call	413ac <__clzsi2>
   4d060:	10800804 	addi	r2,r2,32
   4d064:	da800017 	ldw	r10,0(sp)
   4d068:	da400117 	ldw	r9,4(sp)
   4d06c:	d9800217 	ldw	r6,8(sp)
   4d070:	003f3006 	br	4cd34 <__alt_data_end+0xfffe5c34>
   4d074:	143ff604 	addi	r16,r2,-40
   4d078:	9c20983a 	sll	r16,r19,r16
   4d07c:	0029883a 	mov	r20,zero
   4d080:	003f1606 	br	4ccdc <__alt_data_end+0xfffe5bdc>
   4d084:	d9800215 	stw	r6,8(sp)
   4d088:	d9c00015 	stw	r7,0(sp)
   4d08c:	da400115 	stw	r9,4(sp)
   4d090:	00413ac0 	call	413ac <__clzsi2>
   4d094:	10800804 	addi	r2,r2,32
   4d098:	da400117 	ldw	r9,4(sp)
   4d09c:	d9c00017 	ldw	r7,0(sp)
   4d0a0:	d9800217 	ldw	r6,8(sp)
   4d0a4:	003f0306 	br	4ccb4 <__alt_data_end+0xfffe5bb4>
   4d0a8:	00c00044 	movi	r3,1
   4d0ac:	1947c83a 	sub	r3,r3,r5
   4d0b0:	00800e04 	movi	r2,56
   4d0b4:	10feda16 	blt	r2,r3,4cc20 <__alt_data_end+0xfffe5b20>
   4d0b8:	008007c4 	movi	r2,31
   4d0bc:	10c01b16 	blt	r2,r3,4d12c <__muldf3+0x678>
   4d0c0:	00800804 	movi	r2,32
   4d0c4:	10c5c83a 	sub	r2,r2,r3
   4d0c8:	888a983a 	sll	r5,r17,r2
   4d0cc:	40c8d83a 	srl	r4,r8,r3
   4d0d0:	4084983a 	sll	r2,r8,r2
   4d0d4:	88e2d83a 	srl	r17,r17,r3
   4d0d8:	2906b03a 	or	r3,r5,r4
   4d0dc:	1004c03a 	cmpne	r2,r2,zero
   4d0e0:	1886b03a 	or	r3,r3,r2
   4d0e4:	188001cc 	andi	r2,r3,7
   4d0e8:	10000726 	beq	r2,zero,4d108 <__muldf3+0x654>
   4d0ec:	188003cc 	andi	r2,r3,15
   4d0f0:	01000104 	movi	r4,4
   4d0f4:	11000426 	beq	r2,r4,4d108 <__muldf3+0x654>
   4d0f8:	1805883a 	mov	r2,r3
   4d0fc:	10c00104 	addi	r3,r2,4
   4d100:	1885803a 	cmpltu	r2,r3,r2
   4d104:	88a3883a 	add	r17,r17,r2
   4d108:	8880202c 	andhi	r2,r17,128
   4d10c:	10001c26 	beq	r2,zero,4d180 <__muldf3+0x6cc>
   4d110:	b02b883a 	mov	r21,r22
   4d114:	00800044 	movi	r2,1
   4d118:	000b883a 	mov	r5,zero
   4d11c:	0029883a 	mov	r20,zero
   4d120:	003ec306 	br	4cc30 <__alt_data_end+0xfffe5b30>
   4d124:	5805883a 	mov	r2,r11
   4d128:	003f9906 	br	4cf90 <__alt_data_end+0xfffe5e90>
   4d12c:	00bff844 	movi	r2,-31
   4d130:	1145c83a 	sub	r2,r2,r5
   4d134:	8888d83a 	srl	r4,r17,r2
   4d138:	00800804 	movi	r2,32
   4d13c:	18801a26 	beq	r3,r2,4d1a8 <__muldf3+0x6f4>
   4d140:	00801004 	movi	r2,64
   4d144:	10c5c83a 	sub	r2,r2,r3
   4d148:	8884983a 	sll	r2,r17,r2
   4d14c:	1204b03a 	or	r2,r2,r8
   4d150:	1004c03a 	cmpne	r2,r2,zero
   4d154:	2084b03a 	or	r2,r4,r2
   4d158:	144001cc 	andi	r17,r2,7
   4d15c:	88000d1e 	bne	r17,zero,4d194 <__muldf3+0x6e0>
   4d160:	000b883a 	mov	r5,zero
   4d164:	1028d0fa 	srli	r20,r2,3
   4d168:	b02b883a 	mov	r21,r22
   4d16c:	0005883a 	mov	r2,zero
   4d170:	a468b03a 	or	r20,r20,r17
   4d174:	003eae06 	br	4cc30 <__alt_data_end+0xfffe5b30>
   4d178:	1007883a 	mov	r3,r2
   4d17c:	0023883a 	mov	r17,zero
   4d180:	880a927a 	slli	r5,r17,9
   4d184:	1805883a 	mov	r2,r3
   4d188:	8822977a 	slli	r17,r17,29
   4d18c:	280ad33a 	srli	r5,r5,12
   4d190:	003ff406 	br	4d164 <__alt_data_end+0xfffe6064>
   4d194:	10c003cc 	andi	r3,r2,15
   4d198:	01000104 	movi	r4,4
   4d19c:	193ff626 	beq	r3,r4,4d178 <__alt_data_end+0xfffe6078>
   4d1a0:	0023883a 	mov	r17,zero
   4d1a4:	003fd506 	br	4d0fc <__alt_data_end+0xfffe5ffc>
   4d1a8:	0005883a 	mov	r2,zero
   4d1ac:	003fe706 	br	4d14c <__alt_data_end+0xfffe604c>
   4d1b0:	00800434 	movhi	r2,16
   4d1b4:	89400234 	orhi	r5,r17,8
   4d1b8:	10bfffc4 	addi	r2,r2,-1
   4d1bc:	b02b883a 	mov	r21,r22
   4d1c0:	288a703a 	and	r5,r5,r2
   4d1c4:	4029883a 	mov	r20,r8
   4d1c8:	003eff06 	br	4cdc8 <__alt_data_end+0xfffe5cc8>

0004d1cc <__subdf3>:
   4d1cc:	02000434 	movhi	r8,16
   4d1d0:	423fffc4 	addi	r8,r8,-1
   4d1d4:	defffb04 	addi	sp,sp,-20
   4d1d8:	2a14703a 	and	r10,r5,r8
   4d1dc:	3812d53a 	srli	r9,r7,20
   4d1e0:	3a10703a 	and	r8,r7,r8
   4d1e4:	2006d77a 	srli	r3,r4,29
   4d1e8:	3004d77a 	srli	r2,r6,29
   4d1ec:	dc000015 	stw	r16,0(sp)
   4d1f0:	501490fa 	slli	r10,r10,3
   4d1f4:	2820d53a 	srli	r16,r5,20
   4d1f8:	401090fa 	slli	r8,r8,3
   4d1fc:	dc800215 	stw	r18,8(sp)
   4d200:	dc400115 	stw	r17,4(sp)
   4d204:	dfc00415 	stw	ra,16(sp)
   4d208:	202290fa 	slli	r17,r4,3
   4d20c:	dcc00315 	stw	r19,12(sp)
   4d210:	4a41ffcc 	andi	r9,r9,2047
   4d214:	0101ffc4 	movi	r4,2047
   4d218:	2824d7fa 	srli	r18,r5,31
   4d21c:	8401ffcc 	andi	r16,r16,2047
   4d220:	50c6b03a 	or	r3,r10,r3
   4d224:	380ed7fa 	srli	r7,r7,31
   4d228:	408ab03a 	or	r5,r8,r2
   4d22c:	300c90fa 	slli	r6,r6,3
   4d230:	49009626 	beq	r9,r4,4d48c <__subdf3+0x2c0>
   4d234:	39c0005c 	xori	r7,r7,1
   4d238:	8245c83a 	sub	r2,r16,r9
   4d23c:	3c807426 	beq	r7,r18,4d410 <__subdf3+0x244>
   4d240:	0080af0e 	bge	zero,r2,4d500 <__subdf3+0x334>
   4d244:	48002a1e 	bne	r9,zero,4d2f0 <__subdf3+0x124>
   4d248:	2988b03a 	or	r4,r5,r6
   4d24c:	20009a1e 	bne	r4,zero,4d4b8 <__subdf3+0x2ec>
   4d250:	888001cc 	andi	r2,r17,7
   4d254:	10000726 	beq	r2,zero,4d274 <__subdf3+0xa8>
   4d258:	888003cc 	andi	r2,r17,15
   4d25c:	01000104 	movi	r4,4
   4d260:	11000426 	beq	r2,r4,4d274 <__subdf3+0xa8>
   4d264:	890b883a 	add	r5,r17,r4
   4d268:	2c63803a 	cmpltu	r17,r5,r17
   4d26c:	1c47883a 	add	r3,r3,r17
   4d270:	2823883a 	mov	r17,r5
   4d274:	1880202c 	andhi	r2,r3,128
   4d278:	10005926 	beq	r2,zero,4d3e0 <__subdf3+0x214>
   4d27c:	84000044 	addi	r16,r16,1
   4d280:	0081ffc4 	movi	r2,2047
   4d284:	8080be26 	beq	r16,r2,4d580 <__subdf3+0x3b4>
   4d288:	017fe034 	movhi	r5,65408
   4d28c:	297fffc4 	addi	r5,r5,-1
   4d290:	1946703a 	and	r3,r3,r5
   4d294:	1804977a 	slli	r2,r3,29
   4d298:	1806927a 	slli	r3,r3,9
   4d29c:	8822d0fa 	srli	r17,r17,3
   4d2a0:	8401ffcc 	andi	r16,r16,2047
   4d2a4:	180ad33a 	srli	r5,r3,12
   4d2a8:	9100004c 	andi	r4,r18,1
   4d2ac:	1444b03a 	or	r2,r2,r17
   4d2b0:	80c1ffcc 	andi	r3,r16,2047
   4d2b4:	1820953a 	slli	r16,r3,20
   4d2b8:	20c03fcc 	andi	r3,r4,255
   4d2bc:	180897fa 	slli	r4,r3,31
   4d2c0:	00c00434 	movhi	r3,16
   4d2c4:	18ffffc4 	addi	r3,r3,-1
   4d2c8:	28c6703a 	and	r3,r5,r3
   4d2cc:	1c06b03a 	or	r3,r3,r16
   4d2d0:	1906b03a 	or	r3,r3,r4
   4d2d4:	dfc00417 	ldw	ra,16(sp)
   4d2d8:	dcc00317 	ldw	r19,12(sp)
   4d2dc:	dc800217 	ldw	r18,8(sp)
   4d2e0:	dc400117 	ldw	r17,4(sp)
   4d2e4:	dc000017 	ldw	r16,0(sp)
   4d2e8:	dec00504 	addi	sp,sp,20
   4d2ec:	f800283a 	ret
   4d2f0:	0101ffc4 	movi	r4,2047
   4d2f4:	813fd626 	beq	r16,r4,4d250 <__alt_data_end+0xfffe6150>
   4d2f8:	29402034 	orhi	r5,r5,128
   4d2fc:	01000e04 	movi	r4,56
   4d300:	2080a316 	blt	r4,r2,4d590 <__subdf3+0x3c4>
   4d304:	010007c4 	movi	r4,31
   4d308:	2080c616 	blt	r4,r2,4d624 <__subdf3+0x458>
   4d30c:	01000804 	movi	r4,32
   4d310:	2089c83a 	sub	r4,r4,r2
   4d314:	2910983a 	sll	r8,r5,r4
   4d318:	308ed83a 	srl	r7,r6,r2
   4d31c:	3108983a 	sll	r4,r6,r4
   4d320:	2884d83a 	srl	r2,r5,r2
   4d324:	41ccb03a 	or	r6,r8,r7
   4d328:	2008c03a 	cmpne	r4,r4,zero
   4d32c:	310cb03a 	or	r6,r6,r4
   4d330:	898dc83a 	sub	r6,r17,r6
   4d334:	89a3803a 	cmpltu	r17,r17,r6
   4d338:	1887c83a 	sub	r3,r3,r2
   4d33c:	1c47c83a 	sub	r3,r3,r17
   4d340:	3023883a 	mov	r17,r6
   4d344:	1880202c 	andhi	r2,r3,128
   4d348:	10002326 	beq	r2,zero,4d3d8 <__subdf3+0x20c>
   4d34c:	04c02034 	movhi	r19,128
   4d350:	9cffffc4 	addi	r19,r19,-1
   4d354:	1ce6703a 	and	r19,r3,r19
   4d358:	98007a26 	beq	r19,zero,4d544 <__subdf3+0x378>
   4d35c:	9809883a 	mov	r4,r19
   4d360:	00413ac0 	call	413ac <__clzsi2>
   4d364:	113ffe04 	addi	r4,r2,-8
   4d368:	00c007c4 	movi	r3,31
   4d36c:	19007b16 	blt	r3,r4,4d55c <__subdf3+0x390>
   4d370:	00800804 	movi	r2,32
   4d374:	1105c83a 	sub	r2,r2,r4
   4d378:	8884d83a 	srl	r2,r17,r2
   4d37c:	9906983a 	sll	r3,r19,r4
   4d380:	8922983a 	sll	r17,r17,r4
   4d384:	10c4b03a 	or	r2,r2,r3
   4d388:	24007816 	blt	r4,r16,4d56c <__subdf3+0x3a0>
   4d38c:	2421c83a 	sub	r16,r4,r16
   4d390:	80c00044 	addi	r3,r16,1
   4d394:	010007c4 	movi	r4,31
   4d398:	20c09516 	blt	r4,r3,4d5f0 <__subdf3+0x424>
   4d39c:	01400804 	movi	r5,32
   4d3a0:	28cbc83a 	sub	r5,r5,r3
   4d3a4:	88c8d83a 	srl	r4,r17,r3
   4d3a8:	8962983a 	sll	r17,r17,r5
   4d3ac:	114a983a 	sll	r5,r2,r5
   4d3b0:	10c6d83a 	srl	r3,r2,r3
   4d3b4:	8804c03a 	cmpne	r2,r17,zero
   4d3b8:	290ab03a 	or	r5,r5,r4
   4d3bc:	28a2b03a 	or	r17,r5,r2
   4d3c0:	0021883a 	mov	r16,zero
   4d3c4:	003fa206 	br	4d250 <__alt_data_end+0xfffe6150>
   4d3c8:	2090b03a 	or	r8,r4,r2
   4d3cc:	40018e26 	beq	r8,zero,4da08 <__subdf3+0x83c>
   4d3d0:	1007883a 	mov	r3,r2
   4d3d4:	2023883a 	mov	r17,r4
   4d3d8:	888001cc 	andi	r2,r17,7
   4d3dc:	103f9e1e 	bne	r2,zero,4d258 <__alt_data_end+0xfffe6158>
   4d3e0:	1804977a 	slli	r2,r3,29
   4d3e4:	8822d0fa 	srli	r17,r17,3
   4d3e8:	1810d0fa 	srli	r8,r3,3
   4d3ec:	9100004c 	andi	r4,r18,1
   4d3f0:	1444b03a 	or	r2,r2,r17
   4d3f4:	00c1ffc4 	movi	r3,2047
   4d3f8:	80c02826 	beq	r16,r3,4d49c <__subdf3+0x2d0>
   4d3fc:	01400434 	movhi	r5,16
   4d400:	297fffc4 	addi	r5,r5,-1
   4d404:	80e0703a 	and	r16,r16,r3
   4d408:	414a703a 	and	r5,r8,r5
   4d40c:	003fa806 	br	4d2b0 <__alt_data_end+0xfffe61b0>
   4d410:	0080630e 	bge	zero,r2,4d5a0 <__subdf3+0x3d4>
   4d414:	48003026 	beq	r9,zero,4d4d8 <__subdf3+0x30c>
   4d418:	0101ffc4 	movi	r4,2047
   4d41c:	813f8c26 	beq	r16,r4,4d250 <__alt_data_end+0xfffe6150>
   4d420:	29402034 	orhi	r5,r5,128
   4d424:	01000e04 	movi	r4,56
   4d428:	2080a90e 	bge	r4,r2,4d6d0 <__subdf3+0x504>
   4d42c:	298cb03a 	or	r6,r5,r6
   4d430:	3012c03a 	cmpne	r9,r6,zero
   4d434:	0005883a 	mov	r2,zero
   4d438:	4c53883a 	add	r9,r9,r17
   4d43c:	4c63803a 	cmpltu	r17,r9,r17
   4d440:	10c7883a 	add	r3,r2,r3
   4d444:	88c7883a 	add	r3,r17,r3
   4d448:	4823883a 	mov	r17,r9
   4d44c:	1880202c 	andhi	r2,r3,128
   4d450:	1000d026 	beq	r2,zero,4d794 <__subdf3+0x5c8>
   4d454:	84000044 	addi	r16,r16,1
   4d458:	0081ffc4 	movi	r2,2047
   4d45c:	8080fe26 	beq	r16,r2,4d858 <__subdf3+0x68c>
   4d460:	00bfe034 	movhi	r2,65408
   4d464:	10bfffc4 	addi	r2,r2,-1
   4d468:	1886703a 	and	r3,r3,r2
   4d46c:	880ad07a 	srli	r5,r17,1
   4d470:	180497fa 	slli	r2,r3,31
   4d474:	8900004c 	andi	r4,r17,1
   4d478:	2922b03a 	or	r17,r5,r4
   4d47c:	1806d07a 	srli	r3,r3,1
   4d480:	1462b03a 	or	r17,r2,r17
   4d484:	3825883a 	mov	r18,r7
   4d488:	003f7106 	br	4d250 <__alt_data_end+0xfffe6150>
   4d48c:	2984b03a 	or	r2,r5,r6
   4d490:	103f6826 	beq	r2,zero,4d234 <__alt_data_end+0xfffe6134>
   4d494:	39c03fcc 	andi	r7,r7,255
   4d498:	003f6706 	br	4d238 <__alt_data_end+0xfffe6138>
   4d49c:	4086b03a 	or	r3,r8,r2
   4d4a0:	18015226 	beq	r3,zero,4d9ec <__subdf3+0x820>
   4d4a4:	00c00434 	movhi	r3,16
   4d4a8:	41400234 	orhi	r5,r8,8
   4d4ac:	18ffffc4 	addi	r3,r3,-1
   4d4b0:	28ca703a 	and	r5,r5,r3
   4d4b4:	003f7e06 	br	4d2b0 <__alt_data_end+0xfffe61b0>
   4d4b8:	10bfffc4 	addi	r2,r2,-1
   4d4bc:	1000491e 	bne	r2,zero,4d5e4 <__subdf3+0x418>
   4d4c0:	898fc83a 	sub	r7,r17,r6
   4d4c4:	89e3803a 	cmpltu	r17,r17,r7
   4d4c8:	1947c83a 	sub	r3,r3,r5
   4d4cc:	1c47c83a 	sub	r3,r3,r17
   4d4d0:	3823883a 	mov	r17,r7
   4d4d4:	003f9b06 	br	4d344 <__alt_data_end+0xfffe6244>
   4d4d8:	2988b03a 	or	r4,r5,r6
   4d4dc:	203f5c26 	beq	r4,zero,4d250 <__alt_data_end+0xfffe6150>
   4d4e0:	10bfffc4 	addi	r2,r2,-1
   4d4e4:	1000931e 	bne	r2,zero,4d734 <__subdf3+0x568>
   4d4e8:	898d883a 	add	r6,r17,r6
   4d4ec:	3463803a 	cmpltu	r17,r6,r17
   4d4f0:	1947883a 	add	r3,r3,r5
   4d4f4:	88c7883a 	add	r3,r17,r3
   4d4f8:	3023883a 	mov	r17,r6
   4d4fc:	003fd306 	br	4d44c <__alt_data_end+0xfffe634c>
   4d500:	1000541e 	bne	r2,zero,4d654 <__subdf3+0x488>
   4d504:	80800044 	addi	r2,r16,1
   4d508:	1081ffcc 	andi	r2,r2,2047
   4d50c:	01000044 	movi	r4,1
   4d510:	2080a20e 	bge	r4,r2,4d79c <__subdf3+0x5d0>
   4d514:	8989c83a 	sub	r4,r17,r6
   4d518:	8905803a 	cmpltu	r2,r17,r4
   4d51c:	1967c83a 	sub	r19,r3,r5
   4d520:	98a7c83a 	sub	r19,r19,r2
   4d524:	9880202c 	andhi	r2,r19,128
   4d528:	10006326 	beq	r2,zero,4d6b8 <__subdf3+0x4ec>
   4d52c:	3463c83a 	sub	r17,r6,r17
   4d530:	28c7c83a 	sub	r3,r5,r3
   4d534:	344d803a 	cmpltu	r6,r6,r17
   4d538:	19a7c83a 	sub	r19,r3,r6
   4d53c:	3825883a 	mov	r18,r7
   4d540:	983f861e 	bne	r19,zero,4d35c <__alt_data_end+0xfffe625c>
   4d544:	8809883a 	mov	r4,r17
   4d548:	00413ac0 	call	413ac <__clzsi2>
   4d54c:	10800804 	addi	r2,r2,32
   4d550:	113ffe04 	addi	r4,r2,-8
   4d554:	00c007c4 	movi	r3,31
   4d558:	193f850e 	bge	r3,r4,4d370 <__alt_data_end+0xfffe6270>
   4d55c:	10bff604 	addi	r2,r2,-40
   4d560:	8884983a 	sll	r2,r17,r2
   4d564:	0023883a 	mov	r17,zero
   4d568:	243f880e 	bge	r4,r16,4d38c <__alt_data_end+0xfffe628c>
   4d56c:	00ffe034 	movhi	r3,65408
   4d570:	18ffffc4 	addi	r3,r3,-1
   4d574:	8121c83a 	sub	r16,r16,r4
   4d578:	10c6703a 	and	r3,r2,r3
   4d57c:	003f3406 	br	4d250 <__alt_data_end+0xfffe6150>
   4d580:	9100004c 	andi	r4,r18,1
   4d584:	000b883a 	mov	r5,zero
   4d588:	0005883a 	mov	r2,zero
   4d58c:	003f4806 	br	4d2b0 <__alt_data_end+0xfffe61b0>
   4d590:	298cb03a 	or	r6,r5,r6
   4d594:	300cc03a 	cmpne	r6,r6,zero
   4d598:	0005883a 	mov	r2,zero
   4d59c:	003f6406 	br	4d330 <__alt_data_end+0xfffe6230>
   4d5a0:	10009a1e 	bne	r2,zero,4d80c <__subdf3+0x640>
   4d5a4:	82400044 	addi	r9,r16,1
   4d5a8:	4881ffcc 	andi	r2,r9,2047
   4d5ac:	02800044 	movi	r10,1
   4d5b0:	5080670e 	bge	r10,r2,4d750 <__subdf3+0x584>
   4d5b4:	0081ffc4 	movi	r2,2047
   4d5b8:	4880af26 	beq	r9,r2,4d878 <__subdf3+0x6ac>
   4d5bc:	898d883a 	add	r6,r17,r6
   4d5c0:	1945883a 	add	r2,r3,r5
   4d5c4:	3447803a 	cmpltu	r3,r6,r17
   4d5c8:	1887883a 	add	r3,r3,r2
   4d5cc:	182297fa 	slli	r17,r3,31
   4d5d0:	300cd07a 	srli	r6,r6,1
   4d5d4:	1806d07a 	srli	r3,r3,1
   4d5d8:	4821883a 	mov	r16,r9
   4d5dc:	89a2b03a 	or	r17,r17,r6
   4d5e0:	003f1b06 	br	4d250 <__alt_data_end+0xfffe6150>
   4d5e4:	0101ffc4 	movi	r4,2047
   4d5e8:	813f441e 	bne	r16,r4,4d2fc <__alt_data_end+0xfffe61fc>
   4d5ec:	003f1806 	br	4d250 <__alt_data_end+0xfffe6150>
   4d5f0:	843ff844 	addi	r16,r16,-31
   4d5f4:	01400804 	movi	r5,32
   4d5f8:	1408d83a 	srl	r4,r2,r16
   4d5fc:	19405026 	beq	r3,r5,4d740 <__subdf3+0x574>
   4d600:	01401004 	movi	r5,64
   4d604:	28c7c83a 	sub	r3,r5,r3
   4d608:	10c4983a 	sll	r2,r2,r3
   4d60c:	88a2b03a 	or	r17,r17,r2
   4d610:	8822c03a 	cmpne	r17,r17,zero
   4d614:	2462b03a 	or	r17,r4,r17
   4d618:	0007883a 	mov	r3,zero
   4d61c:	0021883a 	mov	r16,zero
   4d620:	003f6d06 	br	4d3d8 <__alt_data_end+0xfffe62d8>
   4d624:	11fff804 	addi	r7,r2,-32
   4d628:	01000804 	movi	r4,32
   4d62c:	29ced83a 	srl	r7,r5,r7
   4d630:	11004526 	beq	r2,r4,4d748 <__subdf3+0x57c>
   4d634:	01001004 	movi	r4,64
   4d638:	2089c83a 	sub	r4,r4,r2
   4d63c:	2904983a 	sll	r2,r5,r4
   4d640:	118cb03a 	or	r6,r2,r6
   4d644:	300cc03a 	cmpne	r6,r6,zero
   4d648:	398cb03a 	or	r6,r7,r6
   4d64c:	0005883a 	mov	r2,zero
   4d650:	003f3706 	br	4d330 <__alt_data_end+0xfffe6230>
   4d654:	80002a26 	beq	r16,zero,4d700 <__subdf3+0x534>
   4d658:	0101ffc4 	movi	r4,2047
   4d65c:	49006626 	beq	r9,r4,4d7f8 <__subdf3+0x62c>
   4d660:	0085c83a 	sub	r2,zero,r2
   4d664:	18c02034 	orhi	r3,r3,128
   4d668:	01000e04 	movi	r4,56
   4d66c:	20807e16 	blt	r4,r2,4d868 <__subdf3+0x69c>
   4d670:	010007c4 	movi	r4,31
   4d674:	2080e716 	blt	r4,r2,4da14 <__subdf3+0x848>
   4d678:	01000804 	movi	r4,32
   4d67c:	2089c83a 	sub	r4,r4,r2
   4d680:	1914983a 	sll	r10,r3,r4
   4d684:	8890d83a 	srl	r8,r17,r2
   4d688:	8908983a 	sll	r4,r17,r4
   4d68c:	1884d83a 	srl	r2,r3,r2
   4d690:	5222b03a 	or	r17,r10,r8
   4d694:	2006c03a 	cmpne	r3,r4,zero
   4d698:	88e2b03a 	or	r17,r17,r3
   4d69c:	3463c83a 	sub	r17,r6,r17
   4d6a0:	2885c83a 	sub	r2,r5,r2
   4d6a4:	344d803a 	cmpltu	r6,r6,r17
   4d6a8:	1187c83a 	sub	r3,r2,r6
   4d6ac:	4821883a 	mov	r16,r9
   4d6b0:	3825883a 	mov	r18,r7
   4d6b4:	003f2306 	br	4d344 <__alt_data_end+0xfffe6244>
   4d6b8:	24d0b03a 	or	r8,r4,r19
   4d6bc:	40001b1e 	bne	r8,zero,4d72c <__subdf3+0x560>
   4d6c0:	0005883a 	mov	r2,zero
   4d6c4:	0009883a 	mov	r4,zero
   4d6c8:	0021883a 	mov	r16,zero
   4d6cc:	003f4906 	br	4d3f4 <__alt_data_end+0xfffe62f4>
   4d6d0:	010007c4 	movi	r4,31
   4d6d4:	20803a16 	blt	r4,r2,4d7c0 <__subdf3+0x5f4>
   4d6d8:	01000804 	movi	r4,32
   4d6dc:	2089c83a 	sub	r4,r4,r2
   4d6e0:	2912983a 	sll	r9,r5,r4
   4d6e4:	3090d83a 	srl	r8,r6,r2
   4d6e8:	3108983a 	sll	r4,r6,r4
   4d6ec:	2884d83a 	srl	r2,r5,r2
   4d6f0:	4a12b03a 	or	r9,r9,r8
   4d6f4:	2008c03a 	cmpne	r4,r4,zero
   4d6f8:	4912b03a 	or	r9,r9,r4
   4d6fc:	003f4e06 	br	4d438 <__alt_data_end+0xfffe6338>
   4d700:	1c48b03a 	or	r4,r3,r17
   4d704:	20003c26 	beq	r4,zero,4d7f8 <__subdf3+0x62c>
   4d708:	0084303a 	nor	r2,zero,r2
   4d70c:	1000381e 	bne	r2,zero,4d7f0 <__subdf3+0x624>
   4d710:	3463c83a 	sub	r17,r6,r17
   4d714:	28c5c83a 	sub	r2,r5,r3
   4d718:	344d803a 	cmpltu	r6,r6,r17
   4d71c:	1187c83a 	sub	r3,r2,r6
   4d720:	4821883a 	mov	r16,r9
   4d724:	3825883a 	mov	r18,r7
   4d728:	003f0606 	br	4d344 <__alt_data_end+0xfffe6244>
   4d72c:	2023883a 	mov	r17,r4
   4d730:	003f0906 	br	4d358 <__alt_data_end+0xfffe6258>
   4d734:	0101ffc4 	movi	r4,2047
   4d738:	813f3a1e 	bne	r16,r4,4d424 <__alt_data_end+0xfffe6324>
   4d73c:	003ec406 	br	4d250 <__alt_data_end+0xfffe6150>
   4d740:	0005883a 	mov	r2,zero
   4d744:	003fb106 	br	4d60c <__alt_data_end+0xfffe650c>
   4d748:	0005883a 	mov	r2,zero
   4d74c:	003fbc06 	br	4d640 <__alt_data_end+0xfffe6540>
   4d750:	1c44b03a 	or	r2,r3,r17
   4d754:	80008e1e 	bne	r16,zero,4d990 <__subdf3+0x7c4>
   4d758:	1000c826 	beq	r2,zero,4da7c <__subdf3+0x8b0>
   4d75c:	2984b03a 	or	r2,r5,r6
   4d760:	103ebb26 	beq	r2,zero,4d250 <__alt_data_end+0xfffe6150>
   4d764:	8989883a 	add	r4,r17,r6
   4d768:	1945883a 	add	r2,r3,r5
   4d76c:	2447803a 	cmpltu	r3,r4,r17
   4d770:	1887883a 	add	r3,r3,r2
   4d774:	1880202c 	andhi	r2,r3,128
   4d778:	2023883a 	mov	r17,r4
   4d77c:	103f1626 	beq	r2,zero,4d3d8 <__alt_data_end+0xfffe62d8>
   4d780:	00bfe034 	movhi	r2,65408
   4d784:	10bfffc4 	addi	r2,r2,-1
   4d788:	5021883a 	mov	r16,r10
   4d78c:	1886703a 	and	r3,r3,r2
   4d790:	003eaf06 	br	4d250 <__alt_data_end+0xfffe6150>
   4d794:	3825883a 	mov	r18,r7
   4d798:	003f0f06 	br	4d3d8 <__alt_data_end+0xfffe62d8>
   4d79c:	1c44b03a 	or	r2,r3,r17
   4d7a0:	8000251e 	bne	r16,zero,4d838 <__subdf3+0x66c>
   4d7a4:	1000661e 	bne	r2,zero,4d940 <__subdf3+0x774>
   4d7a8:	2990b03a 	or	r8,r5,r6
   4d7ac:	40009626 	beq	r8,zero,4da08 <__subdf3+0x83c>
   4d7b0:	2807883a 	mov	r3,r5
   4d7b4:	3023883a 	mov	r17,r6
   4d7b8:	3825883a 	mov	r18,r7
   4d7bc:	003ea406 	br	4d250 <__alt_data_end+0xfffe6150>
   4d7c0:	127ff804 	addi	r9,r2,-32
   4d7c4:	01000804 	movi	r4,32
   4d7c8:	2a52d83a 	srl	r9,r5,r9
   4d7cc:	11008c26 	beq	r2,r4,4da00 <__subdf3+0x834>
   4d7d0:	01001004 	movi	r4,64
   4d7d4:	2085c83a 	sub	r2,r4,r2
   4d7d8:	2884983a 	sll	r2,r5,r2
   4d7dc:	118cb03a 	or	r6,r2,r6
   4d7e0:	300cc03a 	cmpne	r6,r6,zero
   4d7e4:	4992b03a 	or	r9,r9,r6
   4d7e8:	0005883a 	mov	r2,zero
   4d7ec:	003f1206 	br	4d438 <__alt_data_end+0xfffe6338>
   4d7f0:	0101ffc4 	movi	r4,2047
   4d7f4:	493f9c1e 	bne	r9,r4,4d668 <__alt_data_end+0xfffe6568>
   4d7f8:	2807883a 	mov	r3,r5
   4d7fc:	3023883a 	mov	r17,r6
   4d800:	4821883a 	mov	r16,r9
   4d804:	3825883a 	mov	r18,r7
   4d808:	003e9106 	br	4d250 <__alt_data_end+0xfffe6150>
   4d80c:	80001f1e 	bne	r16,zero,4d88c <__subdf3+0x6c0>
   4d810:	1c48b03a 	or	r4,r3,r17
   4d814:	20005a26 	beq	r4,zero,4d980 <__subdf3+0x7b4>
   4d818:	0084303a 	nor	r2,zero,r2
   4d81c:	1000561e 	bne	r2,zero,4d978 <__subdf3+0x7ac>
   4d820:	89a3883a 	add	r17,r17,r6
   4d824:	1945883a 	add	r2,r3,r5
   4d828:	898d803a 	cmpltu	r6,r17,r6
   4d82c:	3087883a 	add	r3,r6,r2
   4d830:	4821883a 	mov	r16,r9
   4d834:	003f0506 	br	4d44c <__alt_data_end+0xfffe634c>
   4d838:	10002b1e 	bne	r2,zero,4d8e8 <__subdf3+0x71c>
   4d83c:	2984b03a 	or	r2,r5,r6
   4d840:	10008026 	beq	r2,zero,4da44 <__subdf3+0x878>
   4d844:	2807883a 	mov	r3,r5
   4d848:	3023883a 	mov	r17,r6
   4d84c:	3825883a 	mov	r18,r7
   4d850:	0401ffc4 	movi	r16,2047
   4d854:	003e7e06 	br	4d250 <__alt_data_end+0xfffe6150>
   4d858:	3809883a 	mov	r4,r7
   4d85c:	0011883a 	mov	r8,zero
   4d860:	0005883a 	mov	r2,zero
   4d864:	003ee306 	br	4d3f4 <__alt_data_end+0xfffe62f4>
   4d868:	1c62b03a 	or	r17,r3,r17
   4d86c:	8822c03a 	cmpne	r17,r17,zero
   4d870:	0005883a 	mov	r2,zero
   4d874:	003f8906 	br	4d69c <__alt_data_end+0xfffe659c>
   4d878:	3809883a 	mov	r4,r7
   4d87c:	4821883a 	mov	r16,r9
   4d880:	0011883a 	mov	r8,zero
   4d884:	0005883a 	mov	r2,zero
   4d888:	003eda06 	br	4d3f4 <__alt_data_end+0xfffe62f4>
   4d88c:	0101ffc4 	movi	r4,2047
   4d890:	49003b26 	beq	r9,r4,4d980 <__subdf3+0x7b4>
   4d894:	0085c83a 	sub	r2,zero,r2
   4d898:	18c02034 	orhi	r3,r3,128
   4d89c:	01000e04 	movi	r4,56
   4d8a0:	20806e16 	blt	r4,r2,4da5c <__subdf3+0x890>
   4d8a4:	010007c4 	movi	r4,31
   4d8a8:	20807716 	blt	r4,r2,4da88 <__subdf3+0x8bc>
   4d8ac:	01000804 	movi	r4,32
   4d8b0:	2089c83a 	sub	r4,r4,r2
   4d8b4:	1914983a 	sll	r10,r3,r4
   4d8b8:	8890d83a 	srl	r8,r17,r2
   4d8bc:	8908983a 	sll	r4,r17,r4
   4d8c0:	1884d83a 	srl	r2,r3,r2
   4d8c4:	5222b03a 	or	r17,r10,r8
   4d8c8:	2006c03a 	cmpne	r3,r4,zero
   4d8cc:	88e2b03a 	or	r17,r17,r3
   4d8d0:	89a3883a 	add	r17,r17,r6
   4d8d4:	1145883a 	add	r2,r2,r5
   4d8d8:	898d803a 	cmpltu	r6,r17,r6
   4d8dc:	3087883a 	add	r3,r6,r2
   4d8e0:	4821883a 	mov	r16,r9
   4d8e4:	003ed906 	br	4d44c <__alt_data_end+0xfffe634c>
   4d8e8:	2984b03a 	or	r2,r5,r6
   4d8ec:	10004226 	beq	r2,zero,4d9f8 <__subdf3+0x82c>
   4d8f0:	1808d0fa 	srli	r4,r3,3
   4d8f4:	8822d0fa 	srli	r17,r17,3
   4d8f8:	1806977a 	slli	r3,r3,29
   4d8fc:	2080022c 	andhi	r2,r4,8
   4d900:	1c62b03a 	or	r17,r3,r17
   4d904:	10000826 	beq	r2,zero,4d928 <__subdf3+0x75c>
   4d908:	2812d0fa 	srli	r9,r5,3
   4d90c:	4880022c 	andhi	r2,r9,8
   4d910:	1000051e 	bne	r2,zero,4d928 <__subdf3+0x75c>
   4d914:	300cd0fa 	srli	r6,r6,3
   4d918:	2804977a 	slli	r2,r5,29
   4d91c:	4809883a 	mov	r4,r9
   4d920:	3825883a 	mov	r18,r7
   4d924:	11a2b03a 	or	r17,r2,r6
   4d928:	8806d77a 	srli	r3,r17,29
   4d92c:	200890fa 	slli	r4,r4,3
   4d930:	882290fa 	slli	r17,r17,3
   4d934:	0401ffc4 	movi	r16,2047
   4d938:	1906b03a 	or	r3,r3,r4
   4d93c:	003e4406 	br	4d250 <__alt_data_end+0xfffe6150>
   4d940:	2984b03a 	or	r2,r5,r6
   4d944:	103e4226 	beq	r2,zero,4d250 <__alt_data_end+0xfffe6150>
   4d948:	8989c83a 	sub	r4,r17,r6
   4d94c:	8911803a 	cmpltu	r8,r17,r4
   4d950:	1945c83a 	sub	r2,r3,r5
   4d954:	1205c83a 	sub	r2,r2,r8
   4d958:	1200202c 	andhi	r8,r2,128
   4d95c:	403e9a26 	beq	r8,zero,4d3c8 <__alt_data_end+0xfffe62c8>
   4d960:	3463c83a 	sub	r17,r6,r17
   4d964:	28c5c83a 	sub	r2,r5,r3
   4d968:	344d803a 	cmpltu	r6,r6,r17
   4d96c:	1187c83a 	sub	r3,r2,r6
   4d970:	3825883a 	mov	r18,r7
   4d974:	003e3606 	br	4d250 <__alt_data_end+0xfffe6150>
   4d978:	0101ffc4 	movi	r4,2047
   4d97c:	493fc71e 	bne	r9,r4,4d89c <__alt_data_end+0xfffe679c>
   4d980:	2807883a 	mov	r3,r5
   4d984:	3023883a 	mov	r17,r6
   4d988:	4821883a 	mov	r16,r9
   4d98c:	003e3006 	br	4d250 <__alt_data_end+0xfffe6150>
   4d990:	10003626 	beq	r2,zero,4da6c <__subdf3+0x8a0>
   4d994:	2984b03a 	or	r2,r5,r6
   4d998:	10001726 	beq	r2,zero,4d9f8 <__subdf3+0x82c>
   4d99c:	1808d0fa 	srli	r4,r3,3
   4d9a0:	8822d0fa 	srli	r17,r17,3
   4d9a4:	1806977a 	slli	r3,r3,29
   4d9a8:	2080022c 	andhi	r2,r4,8
   4d9ac:	1c62b03a 	or	r17,r3,r17
   4d9b0:	10000726 	beq	r2,zero,4d9d0 <__subdf3+0x804>
   4d9b4:	2812d0fa 	srli	r9,r5,3
   4d9b8:	4880022c 	andhi	r2,r9,8
   4d9bc:	1000041e 	bne	r2,zero,4d9d0 <__subdf3+0x804>
   4d9c0:	300cd0fa 	srli	r6,r6,3
   4d9c4:	2804977a 	slli	r2,r5,29
   4d9c8:	4809883a 	mov	r4,r9
   4d9cc:	11a2b03a 	or	r17,r2,r6
   4d9d0:	8806d77a 	srli	r3,r17,29
   4d9d4:	200890fa 	slli	r4,r4,3
   4d9d8:	882290fa 	slli	r17,r17,3
   4d9dc:	3825883a 	mov	r18,r7
   4d9e0:	1906b03a 	or	r3,r3,r4
   4d9e4:	0401ffc4 	movi	r16,2047
   4d9e8:	003e1906 	br	4d250 <__alt_data_end+0xfffe6150>
   4d9ec:	000b883a 	mov	r5,zero
   4d9f0:	0005883a 	mov	r2,zero
   4d9f4:	003e2e06 	br	4d2b0 <__alt_data_end+0xfffe61b0>
   4d9f8:	0401ffc4 	movi	r16,2047
   4d9fc:	003e1406 	br	4d250 <__alt_data_end+0xfffe6150>
   4da00:	0005883a 	mov	r2,zero
   4da04:	003f7506 	br	4d7dc <__alt_data_end+0xfffe66dc>
   4da08:	0005883a 	mov	r2,zero
   4da0c:	0009883a 	mov	r4,zero
   4da10:	003e7806 	br	4d3f4 <__alt_data_end+0xfffe62f4>
   4da14:	123ff804 	addi	r8,r2,-32
   4da18:	01000804 	movi	r4,32
   4da1c:	1a10d83a 	srl	r8,r3,r8
   4da20:	11002526 	beq	r2,r4,4dab8 <__subdf3+0x8ec>
   4da24:	01001004 	movi	r4,64
   4da28:	2085c83a 	sub	r2,r4,r2
   4da2c:	1884983a 	sll	r2,r3,r2
   4da30:	1444b03a 	or	r2,r2,r17
   4da34:	1004c03a 	cmpne	r2,r2,zero
   4da38:	40a2b03a 	or	r17,r8,r2
   4da3c:	0005883a 	mov	r2,zero
   4da40:	003f1606 	br	4d69c <__alt_data_end+0xfffe659c>
   4da44:	02000434 	movhi	r8,16
   4da48:	0009883a 	mov	r4,zero
   4da4c:	423fffc4 	addi	r8,r8,-1
   4da50:	00bfffc4 	movi	r2,-1
   4da54:	0401ffc4 	movi	r16,2047
   4da58:	003e6606 	br	4d3f4 <__alt_data_end+0xfffe62f4>
   4da5c:	1c62b03a 	or	r17,r3,r17
   4da60:	8822c03a 	cmpne	r17,r17,zero
   4da64:	0005883a 	mov	r2,zero
   4da68:	003f9906 	br	4d8d0 <__alt_data_end+0xfffe67d0>
   4da6c:	2807883a 	mov	r3,r5
   4da70:	3023883a 	mov	r17,r6
   4da74:	0401ffc4 	movi	r16,2047
   4da78:	003df506 	br	4d250 <__alt_data_end+0xfffe6150>
   4da7c:	2807883a 	mov	r3,r5
   4da80:	3023883a 	mov	r17,r6
   4da84:	003df206 	br	4d250 <__alt_data_end+0xfffe6150>
   4da88:	123ff804 	addi	r8,r2,-32
   4da8c:	01000804 	movi	r4,32
   4da90:	1a10d83a 	srl	r8,r3,r8
   4da94:	11000a26 	beq	r2,r4,4dac0 <__subdf3+0x8f4>
   4da98:	01001004 	movi	r4,64
   4da9c:	2085c83a 	sub	r2,r4,r2
   4daa0:	1884983a 	sll	r2,r3,r2
   4daa4:	1444b03a 	or	r2,r2,r17
   4daa8:	1004c03a 	cmpne	r2,r2,zero
   4daac:	40a2b03a 	or	r17,r8,r2
   4dab0:	0005883a 	mov	r2,zero
   4dab4:	003f8606 	br	4d8d0 <__alt_data_end+0xfffe67d0>
   4dab8:	0005883a 	mov	r2,zero
   4dabc:	003fdc06 	br	4da30 <__alt_data_end+0xfffe6930>
   4dac0:	0005883a 	mov	r2,zero
   4dac4:	003ff706 	br	4daa4 <__alt_data_end+0xfffe69a4>

0004dac8 <__fixdfsi>:
   4dac8:	280cd53a 	srli	r6,r5,20
   4dacc:	00c00434 	movhi	r3,16
   4dad0:	18ffffc4 	addi	r3,r3,-1
   4dad4:	3181ffcc 	andi	r6,r6,2047
   4dad8:	01c0ff84 	movi	r7,1022
   4dadc:	28c6703a 	and	r3,r5,r3
   4dae0:	280ad7fa 	srli	r5,r5,31
   4dae4:	3980120e 	bge	r7,r6,4db30 <__fixdfsi+0x68>
   4dae8:	00810744 	movi	r2,1053
   4daec:	11800c16 	blt	r2,r6,4db20 <__fixdfsi+0x58>
   4daf0:	00810cc4 	movi	r2,1075
   4daf4:	1185c83a 	sub	r2,r2,r6
   4daf8:	01c007c4 	movi	r7,31
   4dafc:	18c00434 	orhi	r3,r3,16
   4db00:	38800d16 	blt	r7,r2,4db38 <__fixdfsi+0x70>
   4db04:	31befb44 	addi	r6,r6,-1043
   4db08:	2084d83a 	srl	r2,r4,r2
   4db0c:	1986983a 	sll	r3,r3,r6
   4db10:	1884b03a 	or	r2,r3,r2
   4db14:	28000726 	beq	r5,zero,4db34 <__fixdfsi+0x6c>
   4db18:	0085c83a 	sub	r2,zero,r2
   4db1c:	f800283a 	ret
   4db20:	00a00034 	movhi	r2,32768
   4db24:	10bfffc4 	addi	r2,r2,-1
   4db28:	2885883a 	add	r2,r5,r2
   4db2c:	f800283a 	ret
   4db30:	0005883a 	mov	r2,zero
   4db34:	f800283a 	ret
   4db38:	008104c4 	movi	r2,1043
   4db3c:	1185c83a 	sub	r2,r2,r6
   4db40:	1884d83a 	srl	r2,r3,r2
   4db44:	003ff306 	br	4db14 <__alt_data_end+0xfffe6a14>

0004db48 <__floatsidf>:
   4db48:	defffd04 	addi	sp,sp,-12
   4db4c:	dfc00215 	stw	ra,8(sp)
   4db50:	dc400115 	stw	r17,4(sp)
   4db54:	dc000015 	stw	r16,0(sp)
   4db58:	20002b26 	beq	r4,zero,4dc08 <__floatsidf+0xc0>
   4db5c:	2023883a 	mov	r17,r4
   4db60:	2020d7fa 	srli	r16,r4,31
   4db64:	20002d16 	blt	r4,zero,4dc1c <__floatsidf+0xd4>
   4db68:	8809883a 	mov	r4,r17
   4db6c:	00413ac0 	call	413ac <__clzsi2>
   4db70:	01410784 	movi	r5,1054
   4db74:	288bc83a 	sub	r5,r5,r2
   4db78:	01010cc4 	movi	r4,1075
   4db7c:	2149c83a 	sub	r4,r4,r5
   4db80:	00c007c4 	movi	r3,31
   4db84:	1900160e 	bge	r3,r4,4dbe0 <__floatsidf+0x98>
   4db88:	00c104c4 	movi	r3,1043
   4db8c:	1947c83a 	sub	r3,r3,r5
   4db90:	88c6983a 	sll	r3,r17,r3
   4db94:	00800434 	movhi	r2,16
   4db98:	10bfffc4 	addi	r2,r2,-1
   4db9c:	1886703a 	and	r3,r3,r2
   4dba0:	2941ffcc 	andi	r5,r5,2047
   4dba4:	800d883a 	mov	r6,r16
   4dba8:	0005883a 	mov	r2,zero
   4dbac:	280a953a 	slli	r5,r5,20
   4dbb0:	31803fcc 	andi	r6,r6,255
   4dbb4:	01000434 	movhi	r4,16
   4dbb8:	300c97fa 	slli	r6,r6,31
   4dbbc:	213fffc4 	addi	r4,r4,-1
   4dbc0:	1906703a 	and	r3,r3,r4
   4dbc4:	1946b03a 	or	r3,r3,r5
   4dbc8:	1986b03a 	or	r3,r3,r6
   4dbcc:	dfc00217 	ldw	ra,8(sp)
   4dbd0:	dc400117 	ldw	r17,4(sp)
   4dbd4:	dc000017 	ldw	r16,0(sp)
   4dbd8:	dec00304 	addi	sp,sp,12
   4dbdc:	f800283a 	ret
   4dbe0:	00c002c4 	movi	r3,11
   4dbe4:	1887c83a 	sub	r3,r3,r2
   4dbe8:	88c6d83a 	srl	r3,r17,r3
   4dbec:	8904983a 	sll	r2,r17,r4
   4dbf0:	01000434 	movhi	r4,16
   4dbf4:	213fffc4 	addi	r4,r4,-1
   4dbf8:	2941ffcc 	andi	r5,r5,2047
   4dbfc:	1906703a 	and	r3,r3,r4
   4dc00:	800d883a 	mov	r6,r16
   4dc04:	003fe906 	br	4dbac <__alt_data_end+0xfffe6aac>
   4dc08:	000d883a 	mov	r6,zero
   4dc0c:	000b883a 	mov	r5,zero
   4dc10:	0007883a 	mov	r3,zero
   4dc14:	0005883a 	mov	r2,zero
   4dc18:	003fe406 	br	4dbac <__alt_data_end+0xfffe6aac>
   4dc1c:	0123c83a 	sub	r17,zero,r4
   4dc20:	003fd106 	br	4db68 <__alt_data_end+0xfffe6a68>

0004dc24 <__floatunsidf>:
   4dc24:	defffe04 	addi	sp,sp,-8
   4dc28:	dc000015 	stw	r16,0(sp)
   4dc2c:	dfc00115 	stw	ra,4(sp)
   4dc30:	2021883a 	mov	r16,r4
   4dc34:	20002226 	beq	r4,zero,4dcc0 <__floatunsidf+0x9c>
   4dc38:	00413ac0 	call	413ac <__clzsi2>
   4dc3c:	01010784 	movi	r4,1054
   4dc40:	2089c83a 	sub	r4,r4,r2
   4dc44:	01810cc4 	movi	r6,1075
   4dc48:	310dc83a 	sub	r6,r6,r4
   4dc4c:	00c007c4 	movi	r3,31
   4dc50:	1980120e 	bge	r3,r6,4dc9c <__floatunsidf+0x78>
   4dc54:	00c104c4 	movi	r3,1043
   4dc58:	1907c83a 	sub	r3,r3,r4
   4dc5c:	80ca983a 	sll	r5,r16,r3
   4dc60:	00800434 	movhi	r2,16
   4dc64:	10bfffc4 	addi	r2,r2,-1
   4dc68:	2101ffcc 	andi	r4,r4,2047
   4dc6c:	0021883a 	mov	r16,zero
   4dc70:	288a703a 	and	r5,r5,r2
   4dc74:	2008953a 	slli	r4,r4,20
   4dc78:	00c00434 	movhi	r3,16
   4dc7c:	18ffffc4 	addi	r3,r3,-1
   4dc80:	28c6703a 	and	r3,r5,r3
   4dc84:	8005883a 	mov	r2,r16
   4dc88:	1906b03a 	or	r3,r3,r4
   4dc8c:	dfc00117 	ldw	ra,4(sp)
   4dc90:	dc000017 	ldw	r16,0(sp)
   4dc94:	dec00204 	addi	sp,sp,8
   4dc98:	f800283a 	ret
   4dc9c:	00c002c4 	movi	r3,11
   4dca0:	188bc83a 	sub	r5,r3,r2
   4dca4:	814ad83a 	srl	r5,r16,r5
   4dca8:	00c00434 	movhi	r3,16
   4dcac:	18ffffc4 	addi	r3,r3,-1
   4dcb0:	81a0983a 	sll	r16,r16,r6
   4dcb4:	2101ffcc 	andi	r4,r4,2047
   4dcb8:	28ca703a 	and	r5,r5,r3
   4dcbc:	003fed06 	br	4dc74 <__alt_data_end+0xfffe6b74>
   4dcc0:	0009883a 	mov	r4,zero
   4dcc4:	000b883a 	mov	r5,zero
   4dcc8:	003fea06 	br	4dc74 <__alt_data_end+0xfffe6b74>

0004dccc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4dccc:	defffe04 	addi	sp,sp,-8
   4dcd0:	dfc00115 	stw	ra,4(sp)
   4dcd4:	df000015 	stw	fp,0(sp)
   4dcd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4dcdc:	00800174 	movhi	r2,5
   4dce0:	10910a04 	addi	r2,r2,17448
   4dce4:	10800017 	ldw	r2,0(r2)
   4dce8:	10000526 	beq	r2,zero,4dd00 <alt_get_errno+0x34>
   4dcec:	00800174 	movhi	r2,5
   4dcf0:	10910a04 	addi	r2,r2,17448
   4dcf4:	10800017 	ldw	r2,0(r2)
   4dcf8:	103ee83a 	callr	r2
   4dcfc:	00000206 	br	4dd08 <alt_get_errno+0x3c>
   4dd00:	00800174 	movhi	r2,5
   4dd04:	1097e204 	addi	r2,r2,24456
}
   4dd08:	e037883a 	mov	sp,fp
   4dd0c:	dfc00117 	ldw	ra,4(sp)
   4dd10:	df000017 	ldw	fp,0(sp)
   4dd14:	dec00204 	addi	sp,sp,8
   4dd18:	f800283a 	ret

0004dd1c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4dd1c:	defffb04 	addi	sp,sp,-20
   4dd20:	dfc00415 	stw	ra,16(sp)
   4dd24:	df000315 	stw	fp,12(sp)
   4dd28:	df000304 	addi	fp,sp,12
   4dd2c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4dd30:	e0bfff17 	ldw	r2,-4(fp)
   4dd34:	10000616 	blt	r2,zero,4dd50 <close+0x34>
   4dd38:	e0bfff17 	ldw	r2,-4(fp)
   4dd3c:	10c00324 	muli	r3,r2,12
   4dd40:	00800174 	movhi	r2,5
   4dd44:	108c7904 	addi	r2,r2,12772
   4dd48:	1885883a 	add	r2,r3,r2
   4dd4c:	00000106 	br	4dd54 <close+0x38>
   4dd50:	0005883a 	mov	r2,zero
   4dd54:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4dd58:	e0bffd17 	ldw	r2,-12(fp)
   4dd5c:	10001926 	beq	r2,zero,4ddc4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4dd60:	e0bffd17 	ldw	r2,-12(fp)
   4dd64:	10800017 	ldw	r2,0(r2)
   4dd68:	10800417 	ldw	r2,16(r2)
   4dd6c:	10000626 	beq	r2,zero,4dd88 <close+0x6c>
   4dd70:	e0bffd17 	ldw	r2,-12(fp)
   4dd74:	10800017 	ldw	r2,0(r2)
   4dd78:	10800417 	ldw	r2,16(r2)
   4dd7c:	e13ffd17 	ldw	r4,-12(fp)
   4dd80:	103ee83a 	callr	r2
   4dd84:	00000106 	br	4dd8c <close+0x70>
   4dd88:	0005883a 	mov	r2,zero
   4dd8c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4dd90:	e13fff17 	ldw	r4,-4(fp)
   4dd94:	004e42c0 	call	4e42c <alt_release_fd>
    if (rval < 0)
   4dd98:	e0bffe17 	ldw	r2,-8(fp)
   4dd9c:	1000070e 	bge	r2,zero,4ddbc <close+0xa0>
    {
      ALT_ERRNO = -rval;
   4dda0:	004dccc0 	call	4dccc <alt_get_errno>
   4dda4:	1007883a 	mov	r3,r2
   4dda8:	e0bffe17 	ldw	r2,-8(fp)
   4ddac:	0085c83a 	sub	r2,zero,r2
   4ddb0:	18800015 	stw	r2,0(r3)
      return -1;
   4ddb4:	00bfffc4 	movi	r2,-1
   4ddb8:	00000706 	br	4ddd8 <close+0xbc>
    }
    return 0;
   4ddbc:	0005883a 	mov	r2,zero
   4ddc0:	00000506 	br	4ddd8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4ddc4:	004dccc0 	call	4dccc <alt_get_errno>
   4ddc8:	1007883a 	mov	r3,r2
   4ddcc:	00801444 	movi	r2,81
   4ddd0:	18800015 	stw	r2,0(r3)
    return -1;
   4ddd4:	00bfffc4 	movi	r2,-1
  }
}
   4ddd8:	e037883a 	mov	sp,fp
   4dddc:	dfc00117 	ldw	ra,4(sp)
   4dde0:	df000017 	ldw	fp,0(sp)
   4dde4:	dec00204 	addi	sp,sp,8
   4dde8:	f800283a 	ret

0004ddec <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4ddec:	defffc04 	addi	sp,sp,-16
   4ddf0:	df000315 	stw	fp,12(sp)
   4ddf4:	df000304 	addi	fp,sp,12
   4ddf8:	e13ffd15 	stw	r4,-12(fp)
   4ddfc:	e17ffe15 	stw	r5,-8(fp)
   4de00:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4de04:	e0bfff17 	ldw	r2,-4(fp)
}
   4de08:	e037883a 	mov	sp,fp
   4de0c:	df000017 	ldw	fp,0(sp)
   4de10:	dec00104 	addi	sp,sp,4
   4de14:	f800283a 	ret

0004de18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4de18:	defffe04 	addi	sp,sp,-8
   4de1c:	dfc00115 	stw	ra,4(sp)
   4de20:	df000015 	stw	fp,0(sp)
   4de24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4de28:	00800174 	movhi	r2,5
   4de2c:	10910a04 	addi	r2,r2,17448
   4de30:	10800017 	ldw	r2,0(r2)
   4de34:	10000526 	beq	r2,zero,4de4c <alt_get_errno+0x34>
   4de38:	00800174 	movhi	r2,5
   4de3c:	10910a04 	addi	r2,r2,17448
   4de40:	10800017 	ldw	r2,0(r2)
   4de44:	103ee83a 	callr	r2
   4de48:	00000206 	br	4de54 <alt_get_errno+0x3c>
   4de4c:	00800174 	movhi	r2,5
   4de50:	1097e204 	addi	r2,r2,24456
}
   4de54:	e037883a 	mov	sp,fp
   4de58:	dfc00117 	ldw	ra,4(sp)
   4de5c:	df000017 	ldw	fp,0(sp)
   4de60:	dec00204 	addi	sp,sp,8
   4de64:	f800283a 	ret

0004de68 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4de68:	defffb04 	addi	sp,sp,-20
   4de6c:	dfc00415 	stw	ra,16(sp)
   4de70:	df000315 	stw	fp,12(sp)
   4de74:	df000304 	addi	fp,sp,12
   4de78:	e13ffe15 	stw	r4,-8(fp)
   4de7c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4de80:	e0bffe17 	ldw	r2,-8(fp)
   4de84:	10000616 	blt	r2,zero,4dea0 <fstat+0x38>
   4de88:	e0bffe17 	ldw	r2,-8(fp)
   4de8c:	10c00324 	muli	r3,r2,12
   4de90:	00800174 	movhi	r2,5
   4de94:	108c7904 	addi	r2,r2,12772
   4de98:	1885883a 	add	r2,r3,r2
   4de9c:	00000106 	br	4dea4 <fstat+0x3c>
   4dea0:	0005883a 	mov	r2,zero
   4dea4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   4dea8:	e0bffd17 	ldw	r2,-12(fp)
   4deac:	10001026 	beq	r2,zero,4def0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4deb0:	e0bffd17 	ldw	r2,-12(fp)
   4deb4:	10800017 	ldw	r2,0(r2)
   4deb8:	10800817 	ldw	r2,32(r2)
   4debc:	10000726 	beq	r2,zero,4dedc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   4dec0:	e0bffd17 	ldw	r2,-12(fp)
   4dec4:	10800017 	ldw	r2,0(r2)
   4dec8:	10800817 	ldw	r2,32(r2)
   4decc:	e17fff17 	ldw	r5,-4(fp)
   4ded0:	e13ffd17 	ldw	r4,-12(fp)
   4ded4:	103ee83a 	callr	r2
   4ded8:	00000a06 	br	4df04 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4dedc:	e0bfff17 	ldw	r2,-4(fp)
   4dee0:	00c80004 	movi	r3,8192
   4dee4:	10c00115 	stw	r3,4(r2)
      return 0;
   4dee8:	0005883a 	mov	r2,zero
   4deec:	00000506 	br	4df04 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4def0:	004de180 	call	4de18 <alt_get_errno>
   4def4:	1007883a 	mov	r3,r2
   4def8:	00801444 	movi	r2,81
   4defc:	18800015 	stw	r2,0(r3)
    return -1;
   4df00:	00bfffc4 	movi	r2,-1
  }
}
   4df04:	e037883a 	mov	sp,fp
   4df08:	dfc00117 	ldw	ra,4(sp)
   4df0c:	df000017 	ldw	fp,0(sp)
   4df10:	dec00204 	addi	sp,sp,8
   4df14:	f800283a 	ret

0004df18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4df18:	defffe04 	addi	sp,sp,-8
   4df1c:	dfc00115 	stw	ra,4(sp)
   4df20:	df000015 	stw	fp,0(sp)
   4df24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4df28:	00800174 	movhi	r2,5
   4df2c:	10910a04 	addi	r2,r2,17448
   4df30:	10800017 	ldw	r2,0(r2)
   4df34:	10000526 	beq	r2,zero,4df4c <alt_get_errno+0x34>
   4df38:	00800174 	movhi	r2,5
   4df3c:	10910a04 	addi	r2,r2,17448
   4df40:	10800017 	ldw	r2,0(r2)
   4df44:	103ee83a 	callr	r2
   4df48:	00000206 	br	4df54 <alt_get_errno+0x3c>
   4df4c:	00800174 	movhi	r2,5
   4df50:	1097e204 	addi	r2,r2,24456
}
   4df54:	e037883a 	mov	sp,fp
   4df58:	dfc00117 	ldw	ra,4(sp)
   4df5c:	df000017 	ldw	fp,0(sp)
   4df60:	dec00204 	addi	sp,sp,8
   4df64:	f800283a 	ret

0004df68 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4df68:	deffed04 	addi	sp,sp,-76
   4df6c:	dfc01215 	stw	ra,72(sp)
   4df70:	df001115 	stw	fp,68(sp)
   4df74:	df001104 	addi	fp,sp,68
   4df78:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4df7c:	e0bfff17 	ldw	r2,-4(fp)
   4df80:	10000616 	blt	r2,zero,4df9c <isatty+0x34>
   4df84:	e0bfff17 	ldw	r2,-4(fp)
   4df88:	10c00324 	muli	r3,r2,12
   4df8c:	00800174 	movhi	r2,5
   4df90:	108c7904 	addi	r2,r2,12772
   4df94:	1885883a 	add	r2,r3,r2
   4df98:	00000106 	br	4dfa0 <isatty+0x38>
   4df9c:	0005883a 	mov	r2,zero
   4dfa0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   4dfa4:	e0bfef17 	ldw	r2,-68(fp)
   4dfa8:	10000e26 	beq	r2,zero,4dfe4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4dfac:	e0bfef17 	ldw	r2,-68(fp)
   4dfb0:	10800017 	ldw	r2,0(r2)
   4dfb4:	10800817 	ldw	r2,32(r2)
   4dfb8:	1000021e 	bne	r2,zero,4dfc4 <isatty+0x5c>
    {
      return 1;
   4dfbc:	00800044 	movi	r2,1
   4dfc0:	00000d06 	br	4dff8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4dfc4:	e0bff004 	addi	r2,fp,-64
   4dfc8:	100b883a 	mov	r5,r2
   4dfcc:	e13fff17 	ldw	r4,-4(fp)
   4dfd0:	004de680 	call	4de68 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4dfd4:	e0bff117 	ldw	r2,-60(fp)
   4dfd8:	10880020 	cmpeqi	r2,r2,8192
   4dfdc:	10803fcc 	andi	r2,r2,255
   4dfe0:	00000506 	br	4dff8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4dfe4:	004df180 	call	4df18 <alt_get_errno>
   4dfe8:	1007883a 	mov	r3,r2
   4dfec:	00801444 	movi	r2,81
   4dff0:	18800015 	stw	r2,0(r3)
    return 0;
   4dff4:	0005883a 	mov	r2,zero
  }
}
   4dff8:	e037883a 	mov	sp,fp
   4dffc:	dfc00117 	ldw	ra,4(sp)
   4e000:	df000017 	ldw	fp,0(sp)
   4e004:	dec00204 	addi	sp,sp,8
   4e008:	f800283a 	ret

0004e00c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4e00c:	defffc04 	addi	sp,sp,-16
   4e010:	df000315 	stw	fp,12(sp)
   4e014:	df000304 	addi	fp,sp,12
   4e018:	e13ffd15 	stw	r4,-12(fp)
   4e01c:	e17ffe15 	stw	r5,-8(fp)
   4e020:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4e024:	e0fffe17 	ldw	r3,-8(fp)
   4e028:	e0bffd17 	ldw	r2,-12(fp)
   4e02c:	18800c26 	beq	r3,r2,4e060 <alt_load_section+0x54>
  {
    while( to != end )
   4e030:	00000806 	br	4e054 <alt_load_section+0x48>
    {
      *to++ = *from++;
   4e034:	e0bffe17 	ldw	r2,-8(fp)
   4e038:	10c00104 	addi	r3,r2,4
   4e03c:	e0fffe15 	stw	r3,-8(fp)
   4e040:	e0fffd17 	ldw	r3,-12(fp)
   4e044:	19000104 	addi	r4,r3,4
   4e048:	e13ffd15 	stw	r4,-12(fp)
   4e04c:	18c00017 	ldw	r3,0(r3)
   4e050:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4e054:	e0fffe17 	ldw	r3,-8(fp)
   4e058:	e0bfff17 	ldw	r2,-4(fp)
   4e05c:	18bff51e 	bne	r3,r2,4e034 <__alt_data_end+0xfffe6f34>
    {
      *to++ = *from++;
    }
  }
}
   4e060:	0001883a 	nop
   4e064:	e037883a 	mov	sp,fp
   4e068:	df000017 	ldw	fp,0(sp)
   4e06c:	dec00104 	addi	sp,sp,4
   4e070:	f800283a 	ret

0004e074 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4e074:	defffe04 	addi	sp,sp,-8
   4e078:	dfc00115 	stw	ra,4(sp)
   4e07c:	df000015 	stw	fp,0(sp)
   4e080:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4e084:	01800174 	movhi	r6,5
   4e088:	31911104 	addi	r6,r6,17476
   4e08c:	01400174 	movhi	r5,5
   4e090:	294a4604 	addi	r5,r5,10520
   4e094:	01000174 	movhi	r4,5
   4e098:	21111104 	addi	r4,r4,17476
   4e09c:	004e00c0 	call	4e00c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4e0a0:	01800134 	movhi	r6,4
   4e0a4:	31807004 	addi	r6,r6,448
   4e0a8:	01400134 	movhi	r5,4
   4e0ac:	29400804 	addi	r5,r5,32
   4e0b0:	01000134 	movhi	r4,4
   4e0b4:	21000804 	addi	r4,r4,32
   4e0b8:	004e00c0 	call	4e00c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4e0bc:	01800174 	movhi	r6,5
   4e0c0:	318a4604 	addi	r6,r6,10520
   4e0c4:	01400174 	movhi	r5,5
   4e0c8:	29494c04 	addi	r5,r5,9520
   4e0cc:	01000174 	movhi	r4,5
   4e0d0:	21094c04 	addi	r4,r4,9520
   4e0d4:	004e00c0 	call	4e00c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4e0d8:	00510600 	call	51060 <alt_dcache_flush_all>
  alt_icache_flush_all();
   4e0dc:	00512ec0 	call	512ec <alt_icache_flush_all>
}
   4e0e0:	0001883a 	nop
   4e0e4:	e037883a 	mov	sp,fp
   4e0e8:	dfc00117 	ldw	ra,4(sp)
   4e0ec:	df000017 	ldw	fp,0(sp)
   4e0f0:	dec00204 	addi	sp,sp,8
   4e0f4:	f800283a 	ret

0004e0f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e0f8:	defffe04 	addi	sp,sp,-8
   4e0fc:	dfc00115 	stw	ra,4(sp)
   4e100:	df000015 	stw	fp,0(sp)
   4e104:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e108:	00800174 	movhi	r2,5
   4e10c:	10910a04 	addi	r2,r2,17448
   4e110:	10800017 	ldw	r2,0(r2)
   4e114:	10000526 	beq	r2,zero,4e12c <alt_get_errno+0x34>
   4e118:	00800174 	movhi	r2,5
   4e11c:	10910a04 	addi	r2,r2,17448
   4e120:	10800017 	ldw	r2,0(r2)
   4e124:	103ee83a 	callr	r2
   4e128:	00000206 	br	4e134 <alt_get_errno+0x3c>
   4e12c:	00800174 	movhi	r2,5
   4e130:	1097e204 	addi	r2,r2,24456
}
   4e134:	e037883a 	mov	sp,fp
   4e138:	dfc00117 	ldw	ra,4(sp)
   4e13c:	df000017 	ldw	fp,0(sp)
   4e140:	dec00204 	addi	sp,sp,8
   4e144:	f800283a 	ret

0004e148 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4e148:	defff904 	addi	sp,sp,-28
   4e14c:	dfc00615 	stw	ra,24(sp)
   4e150:	df000515 	stw	fp,20(sp)
   4e154:	df000504 	addi	fp,sp,20
   4e158:	e13ffd15 	stw	r4,-12(fp)
   4e15c:	e17ffe15 	stw	r5,-8(fp)
   4e160:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4e164:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4e168:	e0bffd17 	ldw	r2,-12(fp)
   4e16c:	10000616 	blt	r2,zero,4e188 <lseek+0x40>
   4e170:	e0bffd17 	ldw	r2,-12(fp)
   4e174:	10c00324 	muli	r3,r2,12
   4e178:	00800174 	movhi	r2,5
   4e17c:	108c7904 	addi	r2,r2,12772
   4e180:	1885883a 	add	r2,r3,r2
   4e184:	00000106 	br	4e18c <lseek+0x44>
   4e188:	0005883a 	mov	r2,zero
   4e18c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   4e190:	e0bffc17 	ldw	r2,-16(fp)
   4e194:	10001026 	beq	r2,zero,4e1d8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4e198:	e0bffc17 	ldw	r2,-16(fp)
   4e19c:	10800017 	ldw	r2,0(r2)
   4e1a0:	10800717 	ldw	r2,28(r2)
   4e1a4:	10000926 	beq	r2,zero,4e1cc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4e1a8:	e0bffc17 	ldw	r2,-16(fp)
   4e1ac:	10800017 	ldw	r2,0(r2)
   4e1b0:	10800717 	ldw	r2,28(r2)
   4e1b4:	e1bfff17 	ldw	r6,-4(fp)
   4e1b8:	e17ffe17 	ldw	r5,-8(fp)
   4e1bc:	e13ffc17 	ldw	r4,-16(fp)
   4e1c0:	103ee83a 	callr	r2
   4e1c4:	e0bffb15 	stw	r2,-20(fp)
   4e1c8:	00000506 	br	4e1e0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4e1cc:	00bfde84 	movi	r2,-134
   4e1d0:	e0bffb15 	stw	r2,-20(fp)
   4e1d4:	00000206 	br	4e1e0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   4e1d8:	00bfebc4 	movi	r2,-81
   4e1dc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   4e1e0:	e0bffb17 	ldw	r2,-20(fp)
   4e1e4:	1000070e 	bge	r2,zero,4e204 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   4e1e8:	004e0f80 	call	4e0f8 <alt_get_errno>
   4e1ec:	1007883a 	mov	r3,r2
   4e1f0:	e0bffb17 	ldw	r2,-20(fp)
   4e1f4:	0085c83a 	sub	r2,zero,r2
   4e1f8:	18800015 	stw	r2,0(r3)
    rc = -1;
   4e1fc:	00bfffc4 	movi	r2,-1
   4e200:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   4e204:	e0bffb17 	ldw	r2,-20(fp)
}
   4e208:	e037883a 	mov	sp,fp
   4e20c:	dfc00117 	ldw	ra,4(sp)
   4e210:	df000017 	ldw	fp,0(sp)
   4e214:	dec00204 	addi	sp,sp,8
   4e218:	f800283a 	ret

0004e21c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4e21c:	defffd04 	addi	sp,sp,-12
   4e220:	dfc00215 	stw	ra,8(sp)
   4e224:	df000115 	stw	fp,4(sp)
   4e228:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4e22c:	0009883a 	mov	r4,zero
   4e230:	004e6c00 	call	4e6c0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   4e234:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4e238:	004e6f80 	call	4e6f8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4e23c:	01800174 	movhi	r6,5
   4e240:	318a3204 	addi	r6,r6,10440
   4e244:	01400174 	movhi	r5,5
   4e248:	294a3204 	addi	r5,r5,10440
   4e24c:	01000174 	movhi	r4,5
   4e250:	210a3204 	addi	r4,r4,10440
   4e254:	00516b40 	call	516b4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4e258:	005119c0 	call	5119c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4e25c:	01000174 	movhi	r4,5
   4e260:	21047f04 	addi	r4,r4,4604
   4e264:	00520340 	call	52034 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4e268:	d0a6e417 	ldw	r2,-25712(gp)
   4e26c:	d0e6e517 	ldw	r3,-25708(gp)
   4e270:	d126e617 	ldw	r4,-25704(gp)
   4e274:	200d883a 	mov	r6,r4
   4e278:	180b883a 	mov	r5,r3
   4e27c:	1009883a 	mov	r4,r2
   4e280:	00403b40 	call	403b4 <main>
   4e284:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4e288:	01000044 	movi	r4,1
   4e28c:	004dd1c0 	call	4dd1c <close>
  exit (result);
   4e290:	e13fff17 	ldw	r4,-4(fp)
   4e294:	00520480 	call	52048 <exit>

0004e298 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4e298:	defffe04 	addi	sp,sp,-8
   4e29c:	df000115 	stw	fp,4(sp)
   4e2a0:	df000104 	addi	fp,sp,4
   4e2a4:	e13fff15 	stw	r4,-4(fp)
}
   4e2a8:	0001883a 	nop
   4e2ac:	e037883a 	mov	sp,fp
   4e2b0:	df000017 	ldw	fp,0(sp)
   4e2b4:	dec00104 	addi	sp,sp,4
   4e2b8:	f800283a 	ret

0004e2bc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4e2bc:	defffe04 	addi	sp,sp,-8
   4e2c0:	df000115 	stw	fp,4(sp)
   4e2c4:	df000104 	addi	fp,sp,4
   4e2c8:	e13fff15 	stw	r4,-4(fp)
}
   4e2cc:	0001883a 	nop
   4e2d0:	e037883a 	mov	sp,fp
   4e2d4:	df000017 	ldw	fp,0(sp)
   4e2d8:	dec00104 	addi	sp,sp,4
   4e2dc:	f800283a 	ret

0004e2e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e2e0:	defffe04 	addi	sp,sp,-8
   4e2e4:	dfc00115 	stw	ra,4(sp)
   4e2e8:	df000015 	stw	fp,0(sp)
   4e2ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e2f0:	00800174 	movhi	r2,5
   4e2f4:	10910a04 	addi	r2,r2,17448
   4e2f8:	10800017 	ldw	r2,0(r2)
   4e2fc:	10000526 	beq	r2,zero,4e314 <alt_get_errno+0x34>
   4e300:	00800174 	movhi	r2,5
   4e304:	10910a04 	addi	r2,r2,17448
   4e308:	10800017 	ldw	r2,0(r2)
   4e30c:	103ee83a 	callr	r2
   4e310:	00000206 	br	4e31c <alt_get_errno+0x3c>
   4e314:	00800174 	movhi	r2,5
   4e318:	1097e204 	addi	r2,r2,24456
}
   4e31c:	e037883a 	mov	sp,fp
   4e320:	dfc00117 	ldw	ra,4(sp)
   4e324:	df000017 	ldw	fp,0(sp)
   4e328:	dec00204 	addi	sp,sp,8
   4e32c:	f800283a 	ret

0004e330 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4e330:	defff904 	addi	sp,sp,-28
   4e334:	dfc00615 	stw	ra,24(sp)
   4e338:	df000515 	stw	fp,20(sp)
   4e33c:	df000504 	addi	fp,sp,20
   4e340:	e13ffd15 	stw	r4,-12(fp)
   4e344:	e17ffe15 	stw	r5,-8(fp)
   4e348:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4e34c:	e0bffd17 	ldw	r2,-12(fp)
   4e350:	10000616 	blt	r2,zero,4e36c <read+0x3c>
   4e354:	e0bffd17 	ldw	r2,-12(fp)
   4e358:	10c00324 	muli	r3,r2,12
   4e35c:	00800174 	movhi	r2,5
   4e360:	108c7904 	addi	r2,r2,12772
   4e364:	1885883a 	add	r2,r3,r2
   4e368:	00000106 	br	4e370 <read+0x40>
   4e36c:	0005883a 	mov	r2,zero
   4e370:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4e374:	e0bffb17 	ldw	r2,-20(fp)
   4e378:	10002226 	beq	r2,zero,4e404 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4e37c:	e0bffb17 	ldw	r2,-20(fp)
   4e380:	10800217 	ldw	r2,8(r2)
   4e384:	108000cc 	andi	r2,r2,3
   4e388:	10800060 	cmpeqi	r2,r2,1
   4e38c:	1000181e 	bne	r2,zero,4e3f0 <read+0xc0>
        (fd->dev->read))
   4e390:	e0bffb17 	ldw	r2,-20(fp)
   4e394:	10800017 	ldw	r2,0(r2)
   4e398:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4e39c:	10001426 	beq	r2,zero,4e3f0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4e3a0:	e0bffb17 	ldw	r2,-20(fp)
   4e3a4:	10800017 	ldw	r2,0(r2)
   4e3a8:	10800517 	ldw	r2,20(r2)
   4e3ac:	e0ffff17 	ldw	r3,-4(fp)
   4e3b0:	180d883a 	mov	r6,r3
   4e3b4:	e17ffe17 	ldw	r5,-8(fp)
   4e3b8:	e13ffb17 	ldw	r4,-20(fp)
   4e3bc:	103ee83a 	callr	r2
   4e3c0:	e0bffc15 	stw	r2,-16(fp)
   4e3c4:	e0bffc17 	ldw	r2,-16(fp)
   4e3c8:	1000070e 	bge	r2,zero,4e3e8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   4e3cc:	004e2e00 	call	4e2e0 <alt_get_errno>
   4e3d0:	1007883a 	mov	r3,r2
   4e3d4:	e0bffc17 	ldw	r2,-16(fp)
   4e3d8:	0085c83a 	sub	r2,zero,r2
   4e3dc:	18800015 	stw	r2,0(r3)
          return -1;
   4e3e0:	00bfffc4 	movi	r2,-1
   4e3e4:	00000c06 	br	4e418 <read+0xe8>
        }
        return rval;
   4e3e8:	e0bffc17 	ldw	r2,-16(fp)
   4e3ec:	00000a06 	br	4e418 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4e3f0:	004e2e00 	call	4e2e0 <alt_get_errno>
   4e3f4:	1007883a 	mov	r3,r2
   4e3f8:	00800344 	movi	r2,13
   4e3fc:	18800015 	stw	r2,0(r3)
   4e400:	00000406 	br	4e414 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4e404:	004e2e00 	call	4e2e0 <alt_get_errno>
   4e408:	1007883a 	mov	r3,r2
   4e40c:	00801444 	movi	r2,81
   4e410:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4e414:	00bfffc4 	movi	r2,-1
}
   4e418:	e037883a 	mov	sp,fp
   4e41c:	dfc00117 	ldw	ra,4(sp)
   4e420:	df000017 	ldw	fp,0(sp)
   4e424:	dec00204 	addi	sp,sp,8
   4e428:	f800283a 	ret

0004e42c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4e42c:	defffe04 	addi	sp,sp,-8
   4e430:	df000115 	stw	fp,4(sp)
   4e434:	df000104 	addi	fp,sp,4
   4e438:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4e43c:	e0bfff17 	ldw	r2,-4(fp)
   4e440:	108000d0 	cmplti	r2,r2,3
   4e444:	10000d1e 	bne	r2,zero,4e47c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   4e448:	00800174 	movhi	r2,5
   4e44c:	108c7904 	addi	r2,r2,12772
   4e450:	e0ffff17 	ldw	r3,-4(fp)
   4e454:	18c00324 	muli	r3,r3,12
   4e458:	10c5883a 	add	r2,r2,r3
   4e45c:	10800204 	addi	r2,r2,8
   4e460:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4e464:	00800174 	movhi	r2,5
   4e468:	108c7904 	addi	r2,r2,12772
   4e46c:	e0ffff17 	ldw	r3,-4(fp)
   4e470:	18c00324 	muli	r3,r3,12
   4e474:	10c5883a 	add	r2,r2,r3
   4e478:	10000015 	stw	zero,0(r2)
  }
}
   4e47c:	0001883a 	nop
   4e480:	e037883a 	mov	sp,fp
   4e484:	df000017 	ldw	fp,0(sp)
   4e488:	dec00104 	addi	sp,sp,4
   4e48c:	f800283a 	ret

0004e490 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4e490:	defff904 	addi	sp,sp,-28
   4e494:	df000615 	stw	fp,24(sp)
   4e498:	df000604 	addi	fp,sp,24
   4e49c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e4a0:	0005303a 	rdctl	r2,status
   4e4a4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e4a8:	e0fffe17 	ldw	r3,-8(fp)
   4e4ac:	00bfff84 	movi	r2,-2
   4e4b0:	1884703a 	and	r2,r3,r2
   4e4b4:	1001703a 	wrctl	status,r2
  
  return context;
   4e4b8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4e4bc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4e4c0:	d0a00c17 	ldw	r2,-32720(gp)
   4e4c4:	10c000c4 	addi	r3,r2,3
   4e4c8:	00bfff04 	movi	r2,-4
   4e4cc:	1884703a 	and	r2,r3,r2
   4e4d0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4e4d4:	d0e00c17 	ldw	r3,-32720(gp)
   4e4d8:	e0bfff17 	ldw	r2,-4(fp)
   4e4dc:	1887883a 	add	r3,r3,r2
   4e4e0:	008001b4 	movhi	r2,6
   4e4e4:	109c4004 	addi	r2,r2,28928
   4e4e8:	10c0062e 	bgeu	r2,r3,4e504 <sbrk+0x74>
   4e4ec:	e0bffb17 	ldw	r2,-20(fp)
   4e4f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e4f4:	e0bffa17 	ldw	r2,-24(fp)
   4e4f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4e4fc:	00bfffc4 	movi	r2,-1
   4e500:	00000b06 	br	4e530 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   4e504:	d0a00c17 	ldw	r2,-32720(gp)
   4e508:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   4e50c:	d0e00c17 	ldw	r3,-32720(gp)
   4e510:	e0bfff17 	ldw	r2,-4(fp)
   4e514:	1885883a 	add	r2,r3,r2
   4e518:	d0a00c15 	stw	r2,-32720(gp)
   4e51c:	e0bffb17 	ldw	r2,-20(fp)
   4e520:	e0bffc15 	stw	r2,-16(fp)
   4e524:	e0bffc17 	ldw	r2,-16(fp)
   4e528:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4e52c:	e0bffd17 	ldw	r2,-12(fp)
} 
   4e530:	e037883a 	mov	sp,fp
   4e534:	df000017 	ldw	fp,0(sp)
   4e538:	dec00104 	addi	sp,sp,4
   4e53c:	f800283a 	ret

0004e540 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e540:	defffe04 	addi	sp,sp,-8
   4e544:	dfc00115 	stw	ra,4(sp)
   4e548:	df000015 	stw	fp,0(sp)
   4e54c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e550:	00800174 	movhi	r2,5
   4e554:	10910a04 	addi	r2,r2,17448
   4e558:	10800017 	ldw	r2,0(r2)
   4e55c:	10000526 	beq	r2,zero,4e574 <alt_get_errno+0x34>
   4e560:	00800174 	movhi	r2,5
   4e564:	10910a04 	addi	r2,r2,17448
   4e568:	10800017 	ldw	r2,0(r2)
   4e56c:	103ee83a 	callr	r2
   4e570:	00000206 	br	4e57c <alt_get_errno+0x3c>
   4e574:	00800174 	movhi	r2,5
   4e578:	1097e204 	addi	r2,r2,24456
}
   4e57c:	e037883a 	mov	sp,fp
   4e580:	dfc00117 	ldw	ra,4(sp)
   4e584:	df000017 	ldw	fp,0(sp)
   4e588:	dec00204 	addi	sp,sp,8
   4e58c:	f800283a 	ret

0004e590 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4e590:	defff904 	addi	sp,sp,-28
   4e594:	dfc00615 	stw	ra,24(sp)
   4e598:	df000515 	stw	fp,20(sp)
   4e59c:	df000504 	addi	fp,sp,20
   4e5a0:	e13ffd15 	stw	r4,-12(fp)
   4e5a4:	e17ffe15 	stw	r5,-8(fp)
   4e5a8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4e5ac:	e0bffd17 	ldw	r2,-12(fp)
   4e5b0:	10000616 	blt	r2,zero,4e5cc <write+0x3c>
   4e5b4:	e0bffd17 	ldw	r2,-12(fp)
   4e5b8:	10c00324 	muli	r3,r2,12
   4e5bc:	00800174 	movhi	r2,5
   4e5c0:	108c7904 	addi	r2,r2,12772
   4e5c4:	1885883a 	add	r2,r3,r2
   4e5c8:	00000106 	br	4e5d0 <write+0x40>
   4e5cc:	0005883a 	mov	r2,zero
   4e5d0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4e5d4:	e0bffb17 	ldw	r2,-20(fp)
   4e5d8:	10002126 	beq	r2,zero,4e660 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4e5dc:	e0bffb17 	ldw	r2,-20(fp)
   4e5e0:	10800217 	ldw	r2,8(r2)
   4e5e4:	108000cc 	andi	r2,r2,3
   4e5e8:	10001826 	beq	r2,zero,4e64c <write+0xbc>
   4e5ec:	e0bffb17 	ldw	r2,-20(fp)
   4e5f0:	10800017 	ldw	r2,0(r2)
   4e5f4:	10800617 	ldw	r2,24(r2)
   4e5f8:	10001426 	beq	r2,zero,4e64c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4e5fc:	e0bffb17 	ldw	r2,-20(fp)
   4e600:	10800017 	ldw	r2,0(r2)
   4e604:	10800617 	ldw	r2,24(r2)
   4e608:	e0ffff17 	ldw	r3,-4(fp)
   4e60c:	180d883a 	mov	r6,r3
   4e610:	e17ffe17 	ldw	r5,-8(fp)
   4e614:	e13ffb17 	ldw	r4,-20(fp)
   4e618:	103ee83a 	callr	r2
   4e61c:	e0bffc15 	stw	r2,-16(fp)
   4e620:	e0bffc17 	ldw	r2,-16(fp)
   4e624:	1000070e 	bge	r2,zero,4e644 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   4e628:	004e5400 	call	4e540 <alt_get_errno>
   4e62c:	1007883a 	mov	r3,r2
   4e630:	e0bffc17 	ldw	r2,-16(fp)
   4e634:	0085c83a 	sub	r2,zero,r2
   4e638:	18800015 	stw	r2,0(r3)
        return -1;
   4e63c:	00bfffc4 	movi	r2,-1
   4e640:	00000c06 	br	4e674 <write+0xe4>
      }
      return rval;
   4e644:	e0bffc17 	ldw	r2,-16(fp)
   4e648:	00000a06 	br	4e674 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4e64c:	004e5400 	call	4e540 <alt_get_errno>
   4e650:	1007883a 	mov	r3,r2
   4e654:	00800344 	movi	r2,13
   4e658:	18800015 	stw	r2,0(r3)
   4e65c:	00000406 	br	4e670 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4e660:	004e5400 	call	4e540 <alt_get_errno>
   4e664:	1007883a 	mov	r3,r2
   4e668:	00801444 	movi	r2,81
   4e66c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4e670:	00bfffc4 	movi	r2,-1
}
   4e674:	e037883a 	mov	sp,fp
   4e678:	dfc00117 	ldw	ra,4(sp)
   4e67c:	df000017 	ldw	fp,0(sp)
   4e680:	dec00204 	addi	sp,sp,8
   4e684:	f800283a 	ret

0004e688 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4e688:	defffd04 	addi	sp,sp,-12
   4e68c:	dfc00215 	stw	ra,8(sp)
   4e690:	df000115 	stw	fp,4(sp)
   4e694:	df000104 	addi	fp,sp,4
   4e698:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4e69c:	01400174 	movhi	r5,5
   4e6a0:	29510704 	addi	r5,r5,17436
   4e6a4:	e13fff17 	ldw	r4,-4(fp)
   4e6a8:	00510f80 	call	510f8 <alt_dev_llist_insert>
}
   4e6ac:	e037883a 	mov	sp,fp
   4e6b0:	dfc00117 	ldw	ra,4(sp)
   4e6b4:	df000017 	ldw	fp,0(sp)
   4e6b8:	dec00204 	addi	sp,sp,8
   4e6bc:	f800283a 	ret

0004e6c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4e6c0:	defffd04 	addi	sp,sp,-12
   4e6c4:	dfc00215 	stw	ra,8(sp)
   4e6c8:	df000115 	stw	fp,4(sp)
   4e6cc:	df000104 	addi	fp,sp,4
   4e6d0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   4e6d4:	0051db80 	call	51db8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4e6d8:	00800044 	movi	r2,1
   4e6dc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4e6e0:	0001883a 	nop
   4e6e4:	e037883a 	mov	sp,fp
   4e6e8:	dfc00117 	ldw	ra,4(sp)
   4e6ec:	df000017 	ldw	fp,0(sp)
   4e6f0:	dec00204 	addi	sp,sp,8
   4e6f4:	f800283a 	ret

0004e6f8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4e6f8:	defffe04 	addi	sp,sp,-8
   4e6fc:	dfc00115 	stw	ra,4(sp)
   4e700:	df000015 	stw	fp,0(sp)
   4e704:	d839883a 	mov	fp,sp
    ALTERA_AVALON_I2C_INIT ( I2C_DAC, i2c_dac);
   4e708:	01000174 	movhi	r4,5
   4e70c:	210cd904 	addi	r4,r4,13156
   4e710:	004e9a00 	call	4e9a0 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   4e714:	000d883a 	mov	r6,zero
   4e718:	000b883a 	mov	r5,zero
   4e71c:	01000174 	movhi	r4,5
   4e720:	210cf104 	addi	r4,r4,13252
   4e724:	00504b40 	call	504b4 <altera_avalon_jtag_uart_init>
   4e728:	01000174 	movhi	r4,5
   4e72c:	210ce704 	addi	r4,r4,13212
   4e730:	004e6880 	call	4e688 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   4e734:	0001883a 	nop
}
   4e738:	0001883a 	nop
   4e73c:	e037883a 	mov	sp,fp
   4e740:	dfc00117 	ldw	ra,4(sp)
   4e744:	df000017 	ldw	fp,0(sp)
   4e748:	dec00204 	addi	sp,sp,8
   4e74c:	f800283a 	ret

0004e750 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   4e750:	defff904 	addi	sp,sp,-28
   4e754:	dfc00615 	stw	ra,24(sp)
   4e758:	df000515 	stw	fp,20(sp)
   4e75c:	df000504 	addi	fp,sp,20
   4e760:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   4e764:	008000b4 	movhi	r2,2
   4e768:	10a1a804 	addi	r2,r2,-31072
   4e76c:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   4e770:	e0bfff17 	ldw	r2,-4(fp)
   4e774:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   4e778:	e0bffc17 	ldw	r2,-16(fp)
   4e77c:	10800717 	ldw	r2,28(r2)
   4e780:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   4e784:	e0bffd17 	ldw	r2,-12(fp)
   4e788:	10800217 	ldw	r2,8(r2)
   4e78c:	10800098 	cmpnei	r2,r2,2
   4e790:	1000251e 	bne	r2,zero,4e828 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   4e794:	e0bffd17 	ldw	r2,-12(fp)
   4e798:	10c00017 	ldw	r3,0(r2)
   4e79c:	e0bffd17 	ldw	r2,-12(fp)
   4e7a0:	10800117 	ldw	r2,4(r2)
   4e7a4:	e13ffe04 	addi	r4,fp,-8
   4e7a8:	200f883a 	mov	r7,r4
   4e7ac:	100d883a 	mov	r6,r2
   4e7b0:	180b883a 	mov	r5,r3
   4e7b4:	e13ffc17 	ldw	r4,-16(fp)
   4e7b8:	004ef000 	call	4ef00 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   4e7bc:	e0bffd17 	ldw	r2,-12(fp)
   4e7c0:	10c00117 	ldw	r3,4(r2)
   4e7c4:	e0bffe17 	ldw	r2,-8(fp)
   4e7c8:	1887c83a 	sub	r3,r3,r2
   4e7cc:	e0bffd17 	ldw	r2,-12(fp)
   4e7d0:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   4e7d4:	e0bffd17 	ldw	r2,-12(fp)
   4e7d8:	10c00017 	ldw	r3,0(r2)
   4e7dc:	e0bffe17 	ldw	r2,-8(fp)
   4e7e0:	1887883a 	add	r3,r3,r2
   4e7e4:	e0bffd17 	ldw	r2,-12(fp)
   4e7e8:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   4e7ec:	e0bffd17 	ldw	r2,-12(fp)
   4e7f0:	10800117 	ldw	r2,4(r2)
   4e7f4:	10000c26 	beq	r2,zero,4e828 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   4e7f8:	01400704 	movi	r5,28
   4e7fc:	e13ffc17 	ldw	r4,-16(fp)
   4e800:	00500a00 	call	500a0 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   4e804:	01400084 	movi	r5,2
   4e808:	e13ffc17 	ldw	r4,-16(fp)
   4e80c:	00501440 	call	50144 <alt_avalon_i2c_int_enable>
   4e810:	00000e06 	br	4e84c <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   4e814:	e0bffb17 	ldw	r2,-20(fp)
   4e818:	10bfffc4 	addi	r2,r2,-1
   4e81c:	e0bffb15 	stw	r2,-20(fp)
   4e820:	e0bffb17 	ldw	r2,-20(fp)
   4e824:	10000426 	beq	r2,zero,4e838 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   4e828:	e13ffc17 	ldw	r4,-16(fp)
   4e82c:	004eebc0 	call	4eebc <alt_avalon_i2c_is_busy>
   4e830:	103ff81e 	bne	r2,zero,4e814 <__alt_data_end+0xfffe7714>
   4e834:	00000106 	br	4e83c <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   4e838:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   4e83c:	e13ffc17 	ldw	r4,-16(fp)
   4e840:	004eb640 	call	4eb64 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   4e844:	e0bffd17 	ldw	r2,-12(fp)
   4e848:	10000215 	stw	zero,8(r2)
}
   4e84c:	e037883a 	mov	sp,fp
   4e850:	dfc00117 	ldw	ra,4(sp)
   4e854:	df000017 	ldw	fp,0(sp)
   4e858:	dec00204 	addi	sp,sp,8
   4e85c:	f800283a 	ret

0004e860 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   4e860:	defffc04 	addi	sp,sp,-16
   4e864:	dfc00315 	stw	ra,12(sp)
   4e868:	df000215 	stw	fp,8(sp)
   4e86c:	df000204 	addi	fp,sp,8
   4e870:	e13ffe15 	stw	r4,-8(fp)
   4e874:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   4e878:	e0bfff17 	ldw	r2,-4(fp)
   4e87c:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   4e880:	e1ffff17 	ldw	r7,-4(fp)
   4e884:	000d883a 	mov	r6,zero
   4e888:	01400174 	movhi	r5,5
   4e88c:	2979d404 	addi	r5,r5,-6320
   4e890:	e13ffe17 	ldw	r4,-8(fp)
   4e894:	004e94c0 	call	4e94c <alt_avalon_i2c_register_callback>
}
   4e898:	0001883a 	nop
   4e89c:	e037883a 	mov	sp,fp
   4e8a0:	dfc00117 	ldw	ra,4(sp)
   4e8a4:	df000017 	ldw	fp,0(sp)
   4e8a8:	dec00204 	addi	sp,sp,8
   4e8ac:	f800283a 	ret

0004e8b0 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   4e8b0:	defff904 	addi	sp,sp,-28
   4e8b4:	dfc00615 	stw	ra,24(sp)
   4e8b8:	df000515 	stw	fp,20(sp)
   4e8bc:	df000504 	addi	fp,sp,20
   4e8c0:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   4e8c4:	e0bfff17 	ldw	r2,-4(fp)
   4e8c8:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   4e8cc:	014007c4 	movi	r5,31
   4e8d0:	e13ffb17 	ldw	r4,-20(fp)
   4e8d4:	00500dc0 	call	500dc <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   4e8d8:	01400704 	movi	r5,28
   4e8dc:	e13ffb17 	ldw	r4,-20(fp)
   4e8e0:	00500a00 	call	500a0 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   4e8e4:	e0bffb17 	ldw	r2,-20(fp)
   4e8e8:	10800617 	ldw	r2,24(r2)
   4e8ec:	10001126 	beq	r2,zero,4e934 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e8f0:	0005303a 	rdctl	r2,status
   4e8f4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e8f8:	e0fffd17 	ldw	r3,-12(fp)
   4e8fc:	00bfff84 	movi	r2,-2
   4e900:	1884703a 	and	r2,r3,r2
   4e904:	1001703a 	wrctl	status,r2
  
  return context;
   4e908:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   4e90c:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   4e910:	e0bffb17 	ldw	r2,-20(fp)
   4e914:	10800617 	ldw	r2,24(r2)
   4e918:	e13ffb17 	ldw	r4,-20(fp)
   4e91c:	103ee83a 	callr	r2
   4e920:	e0bffc17 	ldw	r2,-16(fp)
   4e924:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e928:	e0bffe17 	ldw	r2,-8(fp)
   4e92c:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   4e930:	0001883a 	nop
   4e934:	0001883a 	nop
}
   4e938:	e037883a 	mov	sp,fp
   4e93c:	dfc00117 	ldw	ra,4(sp)
   4e940:	df000017 	ldw	fp,0(sp)
   4e944:	dec00204 	addi	sp,sp,8
   4e948:	f800283a 	ret

0004e94c <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   4e94c:	defffb04 	addi	sp,sp,-20
   4e950:	df000415 	stw	fp,16(sp)
   4e954:	df000404 	addi	fp,sp,16
   4e958:	e13ffc15 	stw	r4,-16(fp)
   4e95c:	e17ffd15 	stw	r5,-12(fp)
   4e960:	e1bffe15 	stw	r6,-8(fp)
   4e964:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   4e968:	e0bffc17 	ldw	r2,-16(fp)
   4e96c:	e0fffd17 	ldw	r3,-12(fp)
   4e970:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   4e974:	e0bffc17 	ldw	r2,-16(fp)
   4e978:	e0ffff17 	ldw	r3,-4(fp)
   4e97c:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   4e980:	e0bffc17 	ldw	r2,-16(fp)
   4e984:	e0fffe17 	ldw	r3,-8(fp)
   4e988:	10c00815 	stw	r3,32(r2)

    return ;
   4e98c:	0001883a 	nop
}
   4e990:	e037883a 	mov	sp,fp
   4e994:	df000017 	ldw	fp,0(sp)
   4e998:	dec00104 	addi	sp,sp,4
   4e99c:	f800283a 	ret

0004e9a0 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   4e9a0:	defff704 	addi	sp,sp,-36
   4e9a4:	dfc00815 	stw	ra,32(sp)
   4e9a8:	df000715 	stw	fp,28(sp)
   4e9ac:	df000704 	addi	fp,sp,28
   4e9b0:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   4e9b4:	e13fff17 	ldw	r4,-4(fp)
   4e9b8:	004eb640 	call	4eb64 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   4e9bc:	014007c4 	movi	r5,31
   4e9c0:	e13fff17 	ldw	r4,-4(fp)
   4e9c4:	00500dc0 	call	500dc <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   4e9c8:	01400704 	movi	r5,28
   4e9cc:	e13fff17 	ldw	r4,-4(fp)
   4e9d0:	00500a00 	call	500a0 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   4e9d4:	014000c4 	movi	r5,3
   4e9d8:	e13fff17 	ldw	r4,-4(fp)
   4e9dc:	00502e80 	call	502e8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   4e9e0:	014000c4 	movi	r5,3
   4e9e4:	e13fff17 	ldw	r4,-4(fp)
   4e9e8:	00502380 	call	50238 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   4e9ec:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   4e9f0:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   4e9f4:	e0bffb04 	addi	r2,fp,-20
   4e9f8:	018000b4 	movhi	r6,2
   4e9fc:	31a1a804 	addi	r6,r6,-31072
   4ea00:	100b883a 	mov	r5,r2
   4ea04:	e13fff17 	ldw	r4,-4(fp)
   4ea08:	004edc00 	call	4edc0 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   4ea0c:	e0bffb04 	addi	r2,fp,-20
   4ea10:	100b883a 	mov	r5,r2
   4ea14:	e13fff17 	ldw	r4,-4(fp)
   4ea18:	004ec600 	call	4ec60 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   4ea1c:	d1600d04 	addi	r5,gp,-32716
   4ea20:	e13fff17 	ldw	r4,-4(fp)
   4ea24:	00510f80 	call	510f8 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   4ea28:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   4ea2c:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   4ea30:	e0bffa17 	ldw	r2,-24(fp)
   4ea34:	10000c1e 	bne	r2,zero,4ea68 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   4ea38:	e0bfff17 	ldw	r2,-4(fp)
   4ea3c:	10c00417 	ldw	r3,16(r2)
   4ea40:	e0bfff17 	ldw	r2,-4(fp)
   4ea44:	10800517 	ldw	r2,20(r2)
   4ea48:	d8000015 	stw	zero,0(sp)
   4ea4c:	e1ffff17 	ldw	r7,-4(fp)
   4ea50:	01800174 	movhi	r6,5
   4ea54:	31ba2c04 	addi	r6,r6,-5968
   4ea58:	100b883a 	mov	r5,r2
   4ea5c:	1809883a 	mov	r4,r3
   4ea60:	00513200 	call	51320 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   4ea64:	00000406 	br	4ea78 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   4ea68:	01000174 	movhi	r4,5
   4ea6c:	210a3e04 	addi	r4,r4,10488
   4ea70:	00519a40 	call	519a4 <alt_printf>
    }

    return;
   4ea74:	0001883a 	nop

}
   4ea78:	e037883a 	mov	sp,fp
   4ea7c:	dfc00117 	ldw	ra,4(sp)
   4ea80:	df000017 	ldw	fp,0(sp)
   4ea84:	dec00204 	addi	sp,sp,8
   4ea88:	f800283a 	ret

0004ea8c <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   4ea8c:	defffc04 	addi	sp,sp,-16
   4ea90:	dfc00315 	stw	ra,12(sp)
   4ea94:	df000215 	stw	fp,8(sp)
   4ea98:	df000204 	addi	fp,sp,8
   4ea9c:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   4eaa0:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   4eaa4:	d1600d04 	addi	r5,gp,-32716
   4eaa8:	e13fff17 	ldw	r4,-4(fp)
   4eaac:	005125c0 	call	5125c <alt_find_dev>
   4eab0:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   4eab4:	e0bffe17 	ldw	r2,-8(fp)
}
   4eab8:	e037883a 	mov	sp,fp
   4eabc:	dfc00117 	ldw	ra,4(sp)
   4eac0:	df000017 	ldw	fp,0(sp)
   4eac4:	dec00204 	addi	sp,sp,8
   4eac8:	f800283a 	ret

0004eacc <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   4eacc:	defffc04 	addi	sp,sp,-16
   4ead0:	df000315 	stw	fp,12(sp)
   4ead4:	df000304 	addi	fp,sp,12
   4ead8:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   4eadc:	e0bfff17 	ldw	r2,-4(fp)
   4eae0:	10800717 	ldw	r2,28(r2)
   4eae4:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   4eae8:	e0bfff17 	ldw	r2,-4(fp)
   4eaec:	10800317 	ldw	r2,12(r2)
   4eaf0:	10800204 	addi	r2,r2,8
   4eaf4:	10800037 	ldwio	r2,0(r2)
   4eaf8:	1080004c 	andi	r2,r2,1
   4eafc:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   4eb00:	e0bffe17 	ldw	r2,-8(fp)
   4eb04:	10000226 	beq	r2,zero,4eb10 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   4eb08:	00bffe44 	movi	r2,-7
   4eb0c:	00001106 	br	4eb54 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   4eb10:	e0bfff17 	ldw	r2,-4(fp)
   4eb14:	10c00617 	ldw	r3,24(r2)
   4eb18:	00800174 	movhi	r2,5
   4eb1c:	10b9d404 	addi	r2,r2,-6320
   4eb20:	1880021e 	bne	r3,r2,4eb2c <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   4eb24:	e0bffd17 	ldw	r2,-12(fp)
   4eb28:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   4eb2c:	e0bfff17 	ldw	r2,-4(fp)
   4eb30:	10800317 	ldw	r2,12(r2)
   4eb34:	10800204 	addi	r2,r2,8
   4eb38:	e0ffff17 	ldw	r3,-4(fp)
   4eb3c:	18c00317 	ldw	r3,12(r3)
   4eb40:	18c00204 	addi	r3,r3,8
   4eb44:	18c00037 	ldwio	r3,0(r3)
   4eb48:	18c00054 	ori	r3,r3,1
   4eb4c:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   4eb50:	0005883a 	mov	r2,zero
}
   4eb54:	e037883a 	mov	sp,fp
   4eb58:	df000017 	ldw	fp,0(sp)
   4eb5c:	dec00104 	addi	sp,sp,4
   4eb60:	f800283a 	ret

0004eb64 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   4eb64:	defffe04 	addi	sp,sp,-8
   4eb68:	df000115 	stw	fp,4(sp)
   4eb6c:	df000104 	addi	fp,sp,4
   4eb70:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   4eb74:	e0bfff17 	ldw	r2,-4(fp)
   4eb78:	10800317 	ldw	r2,12(r2)
   4eb7c:	10800204 	addi	r2,r2,8
   4eb80:	e0ffff17 	ldw	r3,-4(fp)
   4eb84:	18c00317 	ldw	r3,12(r3)
   4eb88:	18c00204 	addi	r3,r3,8
   4eb8c:	19000037 	ldwio	r4,0(r3)
   4eb90:	00ffff84 	movi	r3,-2
   4eb94:	20c6703a 	and	r3,r4,r3
   4eb98:	10c00035 	stwio	r3,0(r2)

}
   4eb9c:	0001883a 	nop
   4eba0:	e037883a 	mov	sp,fp
   4eba4:	df000017 	ldw	fp,0(sp)
   4eba8:	dec00104 	addi	sp,sp,4
   4ebac:	f800283a 	ret

0004ebb0 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   4ebb0:	defffd04 	addi	sp,sp,-12
   4ebb4:	df000215 	stw	fp,8(sp)
   4ebb8:	df000204 	addi	fp,sp,8
   4ebbc:	e13ffe15 	stw	r4,-8(fp)
   4ebc0:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   4ebc4:	e0bffe17 	ldw	r2,-8(fp)
   4ebc8:	10c00d17 	ldw	r3,52(r2)
   4ebcc:	e0bfff17 	ldw	r2,-4(fp)
   4ebd0:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   4ebd4:	e0bffe17 	ldw	r2,-8(fp)
   4ebd8:	10800317 	ldw	r2,12(r2)
   4ebdc:	10800204 	addi	r2,r2,8
   4ebe0:	10800037 	ldwio	r2,0(r2)
   4ebe4:	1080008c 	andi	r2,r2,2
   4ebe8:	1005d07a 	srai	r2,r2,1
   4ebec:	1007883a 	mov	r3,r2
   4ebf0:	e0bfff17 	ldw	r2,-4(fp)
   4ebf4:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   4ebf8:	e0bffe17 	ldw	r2,-8(fp)
   4ebfc:	10800317 	ldw	r2,12(r2)
   4ec00:	10800904 	addi	r2,r2,36
   4ec04:	10800037 	ldwio	r2,0(r2)
   4ec08:	1007883a 	mov	r3,r2
   4ec0c:	e0bfff17 	ldw	r2,-4(fp)
   4ec10:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   4ec14:	e0bffe17 	ldw	r2,-8(fp)
   4ec18:	10800317 	ldw	r2,12(r2)
   4ec1c:	10800804 	addi	r2,r2,32
   4ec20:	10800037 	ldwio	r2,0(r2)
   4ec24:	1007883a 	mov	r3,r2
   4ec28:	e0bfff17 	ldw	r2,-4(fp)
   4ec2c:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   4ec30:	e0bffe17 	ldw	r2,-8(fp)
   4ec34:	10800317 	ldw	r2,12(r2)
   4ec38:	10800a04 	addi	r2,r2,40
   4ec3c:	10800037 	ldwio	r2,0(r2)
   4ec40:	1007883a 	mov	r3,r2
   4ec44:	e0bfff17 	ldw	r2,-4(fp)
   4ec48:	10c0030d 	sth	r3,12(r2)
}
   4ec4c:	0001883a 	nop
   4ec50:	e037883a 	mov	sp,fp
   4ec54:	df000017 	ldw	fp,0(sp)
   4ec58:	dec00104 	addi	sp,sp,4
   4ec5c:	f800283a 	ret

0004ec60 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   4ec60:	defffd04 	addi	sp,sp,-12
   4ec64:	df000215 	stw	fp,8(sp)
   4ec68:	df000204 	addi	fp,sp,8
   4ec6c:	e13ffe15 	stw	r4,-8(fp)
   4ec70:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   4ec74:	e0bfff17 	ldw	r2,-4(fp)
   4ec78:	10c00017 	ldw	r3,0(r2)
   4ec7c:	e0bffe17 	ldw	r2,-8(fp)
   4ec80:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   4ec84:	e0bffe17 	ldw	r2,-8(fp)
   4ec88:	10800317 	ldw	r2,12(r2)
   4ec8c:	10c00204 	addi	r3,r2,8
   4ec90:	e0bffe17 	ldw	r2,-8(fp)
   4ec94:	10800317 	ldw	r2,12(r2)
   4ec98:	10800204 	addi	r2,r2,8
   4ec9c:	10800037 	ldwio	r2,0(r2)
   4eca0:	1009883a 	mov	r4,r2
   4eca4:	00bfff44 	movi	r2,-3
   4eca8:	2088703a 	and	r4,r4,r2
   4ecac:	e0bfff17 	ldw	r2,-4(fp)
   4ecb0:	10800117 	ldw	r2,4(r2)
   4ecb4:	1085883a 	add	r2,r2,r2
   4ecb8:	1080008c 	andi	r2,r2,2
   4ecbc:	2084b03a 	or	r2,r4,r2
   4ecc0:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   4ecc4:	e0bffe17 	ldw	r2,-8(fp)
   4ecc8:	10800317 	ldw	r2,12(r2)
   4eccc:	10800904 	addi	r2,r2,36
   4ecd0:	e0ffff17 	ldw	r3,-4(fp)
   4ecd4:	18c0020b 	ldhu	r3,8(r3)
   4ecd8:	18ffffcc 	andi	r3,r3,65535
   4ecdc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   4ece0:	e0bffe17 	ldw	r2,-8(fp)
   4ece4:	10800317 	ldw	r2,12(r2)
   4ece8:	10800804 	addi	r2,r2,32
   4ecec:	e0ffff17 	ldw	r3,-4(fp)
   4ecf0:	18c0028b 	ldhu	r3,10(r3)
   4ecf4:	18ffffcc 	andi	r3,r3,65535
   4ecf8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   4ecfc:	e0bffe17 	ldw	r2,-8(fp)
   4ed00:	10800317 	ldw	r2,12(r2)
   4ed04:	10800a04 	addi	r2,r2,40
   4ed08:	e0ffff17 	ldw	r3,-4(fp)
   4ed0c:	18c0030b 	ldhu	r3,12(r3)
   4ed10:	18ffffcc 	andi	r3,r3,65535
   4ed14:	10c00035 	stwio	r3,0(r2)
}
   4ed18:	0001883a 	nop
   4ed1c:	e037883a 	mov	sp,fp
   4ed20:	df000017 	ldw	fp,0(sp)
   4ed24:	dec00104 	addi	sp,sp,4
   4ed28:	f800283a 	ret

0004ed2c <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   4ed2c:	defffb04 	addi	sp,sp,-20
   4ed30:	dfc00415 	stw	ra,16(sp)
   4ed34:	df000315 	stw	fp,12(sp)
   4ed38:	df000304 	addi	fp,sp,12
   4ed3c:	e13ffd15 	stw	r4,-12(fp)
   4ed40:	e17ffe15 	stw	r5,-8(fp)
   4ed44:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   4ed48:	e0bffe17 	ldw	r2,-8(fp)
   4ed4c:	1080028b 	ldhu	r2,10(r2)
   4ed50:	10bfffcc 	andi	r2,r2,65535
   4ed54:	10000426 	beq	r2,zero,4ed68 <alt_avalon_i2c_master_config_speed_get+0x3c>
   4ed58:	e0bffe17 	ldw	r2,-8(fp)
   4ed5c:	1080020b 	ldhu	r2,8(r2)
   4ed60:	10bfffcc 	andi	r2,r2,65535
   4ed64:	1000021e 	bne	r2,zero,4ed70 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   4ed68:	00bfff44 	movi	r2,-3
   4ed6c:	00000f06 	br	4edac <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   4ed70:	e0bffd17 	ldw	r2,-12(fp)
   4ed74:	11000c17 	ldw	r4,48(r2)
   4ed78:	e0bffe17 	ldw	r2,-8(fp)
   4ed7c:	1080028b 	ldhu	r2,10(r2)
   4ed80:	10ffffcc 	andi	r3,r2,65535
   4ed84:	e0bffe17 	ldw	r2,-8(fp)
   4ed88:	1080020b 	ldhu	r2,8(r2)
   4ed8c:	10bfffcc 	andi	r2,r2,65535
   4ed90:	1885883a 	add	r2,r3,r2
   4ed94:	100b883a 	mov	r5,r2
   4ed98:	004b60c0 	call	4b60c <__udivsi3>
   4ed9c:	1007883a 	mov	r3,r2
   4eda0:	e0bfff17 	ldw	r2,-4(fp)
   4eda4:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   4eda8:	0005883a 	mov	r2,zero
}
   4edac:	e037883a 	mov	sp,fp
   4edb0:	dfc00117 	ldw	ra,4(sp)
   4edb4:	df000017 	ldw	fp,0(sp)
   4edb8:	dec00204 	addi	sp,sp,8
   4edbc:	f800283a 	ret

0004edc0 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   4edc0:	defff904 	addi	sp,sp,-28
   4edc4:	dfc00615 	stw	ra,24(sp)
   4edc8:	df000515 	stw	fp,20(sp)
   4edcc:	df000504 	addi	fp,sp,20
   4edd0:	e13ffd15 	stw	r4,-12(fp)
   4edd4:	e17ffe15 	stw	r5,-8(fp)
   4edd8:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   4eddc:	e0ffff17 	ldw	r3,-4(fp)
   4ede0:	008001b4 	movhi	r2,6
   4ede4:	1086a004 	addi	r2,r2,6784
   4ede8:	10c00436 	bltu	r2,r3,4edfc <alt_avalon_i2c_master_config_speed_set+0x3c>
   4edec:	e0bfff17 	ldw	r2,-4(fp)
   4edf0:	10000226 	beq	r2,zero,4edfc <alt_avalon_i2c_master_config_speed_set+0x3c>
   4edf4:	e0bfff17 	ldw	r2,-4(fp)
   4edf8:	1000021e 	bne	r2,zero,4ee04 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   4edfc:	00bfff04 	movi	r2,-4
   4ee00:	00002906 	br	4eea8 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   4ee04:	e0bffd17 	ldw	r2,-12(fp)
   4ee08:	10c00c17 	ldw	r3,48(r2)
   4ee0c:	e0bfff17 	ldw	r2,-4(fp)
   4ee10:	1085883a 	add	r2,r2,r2
   4ee14:	100b883a 	mov	r5,r2
   4ee18:	1809883a 	mov	r4,r3
   4ee1c:	004b60c0 	call	4b60c <__udivsi3>
   4ee20:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   4ee24:	e0bffb17 	ldw	r2,-20(fp)
   4ee28:	10800f04 	addi	r2,r2,60
   4ee2c:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   4ee30:	e0bffb17 	ldw	r2,-20(fp)
   4ee34:	10bff104 	addi	r2,r2,-60
   4ee38:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   4ee3c:	e0ffff17 	ldw	r3,-4(fp)
   4ee40:	008000b4 	movhi	r2,2
   4ee44:	10a1a804 	addi	r2,r2,-31072
   4ee48:	10c0042e 	bgeu	r2,r3,4ee5c <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   4ee4c:	e0bffe17 	ldw	r2,-8(fp)
   4ee50:	00c00044 	movi	r3,1
   4ee54:	10c00115 	stw	r3,4(r2)
   4ee58:	00000206 	br	4ee64 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   4ee5c:	e0bffe17 	ldw	r2,-8(fp)
   4ee60:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   4ee64:	e0bffb17 	ldw	r2,-20(fp)
   4ee68:	1007883a 	mov	r3,r2
   4ee6c:	e0bffe17 	ldw	r2,-8(fp)
   4ee70:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   4ee74:	e0bffc17 	ldw	r2,-16(fp)
   4ee78:	1007883a 	mov	r3,r2
   4ee7c:	e0bffe17 	ldw	r2,-8(fp)
   4ee80:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   4ee84:	e0bffb17 	ldw	r2,-20(fp)
   4ee88:	1007883a 	mov	r3,r2
   4ee8c:	e0bffb17 	ldw	r2,-20(fp)
   4ee90:	1004d07a 	srli	r2,r2,1
   4ee94:	1885c83a 	sub	r2,r3,r2
   4ee98:	1007883a 	mov	r3,r2
   4ee9c:	e0bffe17 	ldw	r2,-8(fp)
   4eea0:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   4eea4:	0005883a 	mov	r2,zero

}
   4eea8:	e037883a 	mov	sp,fp
   4eeac:	dfc00117 	ldw	ra,4(sp)
   4eeb0:	df000017 	ldw	fp,0(sp)
   4eeb4:	dec00204 	addi	sp,sp,8
   4eeb8:	f800283a 	ret

0004eebc <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   4eebc:	defffe04 	addi	sp,sp,-8
   4eec0:	df000115 	stw	fp,4(sp)
   4eec4:	df000104 	addi	fp,sp,4
   4eec8:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   4eecc:	e0bfff17 	ldw	r2,-4(fp)
   4eed0:	10800317 	ldw	r2,12(r2)
   4eed4:	10800504 	addi	r2,r2,20
   4eed8:	10800037 	ldwio	r2,0(r2)
   4eedc:	1080004c 	andi	r2,r2,1
   4eee0:	10000226 	beq	r2,zero,4eeec <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   4eee4:	00800044 	movi	r2,1
   4eee8:	00000106 	br	4eef0 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   4eeec:	0005883a 	mov	r2,zero
}
   4eef0:	e037883a 	mov	sp,fp
   4eef4:	df000017 	ldw	fp,0(sp)
   4eef8:	dec00104 	addi	sp,sp,4
   4eefc:	f800283a 	ret

0004ef00 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   4ef00:	defffb04 	addi	sp,sp,-20
   4ef04:	df000415 	stw	fp,16(sp)
   4ef08:	df000404 	addi	fp,sp,16
   4ef0c:	e13ffc15 	stw	r4,-16(fp)
   4ef10:	e17ffd15 	stw	r5,-12(fp)
   4ef14:	e1bffe15 	stw	r6,-8(fp)
   4ef18:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   4ef1c:	e0bfff17 	ldw	r2,-4(fp)
   4ef20:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   4ef24:	00001406 	br	4ef78 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   4ef28:	e0bfff17 	ldw	r2,-4(fp)
   4ef2c:	10800017 	ldw	r2,0(r2)
   4ef30:	e0fffd17 	ldw	r3,-12(fp)
   4ef34:	1885883a 	add	r2,r3,r2
   4ef38:	e0fffc17 	ldw	r3,-16(fp)
   4ef3c:	18c00317 	ldw	r3,12(r3)
   4ef40:	18c00104 	addi	r3,r3,4
   4ef44:	18c00037 	ldwio	r3,0(r3)
   4ef48:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   4ef4c:	e0bfff17 	ldw	r2,-4(fp)
   4ef50:	10800017 	ldw	r2,0(r2)
   4ef54:	10c00044 	addi	r3,r2,1
   4ef58:	e0bfff17 	ldw	r2,-4(fp)
   4ef5c:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   4ef60:	e0bfff17 	ldw	r2,-4(fp)
   4ef64:	10c00017 	ldw	r3,0(r2)
   4ef68:	e0bffe17 	ldw	r2,-8(fp)
   4ef6c:	1880021e 	bne	r3,r2,4ef78 <alt_avalon_i2c_rx_read_available+0x78>
   4ef70:	e0bffe17 	ldw	r2,-8(fp)
   4ef74:	1000061e 	bne	r2,zero,4ef90 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   4ef78:	e0bffc17 	ldw	r2,-16(fp)
   4ef7c:	10800317 	ldw	r2,12(r2)
   4ef80:	10800704 	addi	r2,r2,28
   4ef84:	10800037 	ldwio	r2,0(r2)
   4ef88:	103fe71e 	bne	r2,zero,4ef28 <__alt_data_end+0xfffe7e28>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   4ef8c:	00000106 	br	4ef94 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   4ef90:	0001883a 	nop
    }
}
   4ef94:	0001883a 	nop
   4ef98:	e037883a 	mov	sp,fp
   4ef9c:	df000017 	ldw	fp,0(sp)
   4efa0:	dec00104 	addi	sp,sp,4
   4efa4:	f800283a 	ret

0004efa8 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   4efa8:	defffa04 	addi	sp,sp,-24
   4efac:	dfc00515 	stw	ra,20(sp)
   4efb0:	df000415 	stw	fp,16(sp)
   4efb4:	df000404 	addi	fp,sp,16
   4efb8:	e13ffe15 	stw	r4,-8(fp)
   4efbc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   4efc0:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   4efc4:	008000b4 	movhi	r2,2
   4efc8:	10a1a804 	addi	r2,r2,-31072
   4efcc:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   4efd0:	00000d06 	br	4f008 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   4efd4:	e0bffd17 	ldw	r2,-12(fp)
   4efd8:	108002a8 	cmpgeui	r2,r2,10
   4efdc:	1000021e 	bne	r2,zero,4efe8 <alt_avalon_i2c_rx_read+0x40>
   4efe0:	0109c404 	movi	r4,10000
   4efe4:	0050f080 	call	50f08 <alt_busy_sleep>
      if (--timeout == 0)
   4efe8:	e0bffd17 	ldw	r2,-12(fp)
   4efec:	10bfffc4 	addi	r2,r2,-1
   4eff0:	e0bffd15 	stw	r2,-12(fp)
   4eff4:	e0bffd17 	ldw	r2,-12(fp)
   4eff8:	1000031e 	bne	r2,zero,4f008 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   4effc:	00bfff84 	movi	r2,-2
   4f000:	e0bffc15 	stw	r2,-16(fp)
        break;
   4f004:	00000506 	br	4f01c <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   4f008:	e0bffe17 	ldw	r2,-8(fp)
   4f00c:	10800317 	ldw	r2,12(r2)
   4f010:	10800704 	addi	r2,r2,28
   4f014:	10800037 	ldwio	r2,0(r2)
   4f018:	103fee26 	beq	r2,zero,4efd4 <__alt_data_end+0xfffe7ed4>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   4f01c:	e0bffe17 	ldw	r2,-8(fp)
   4f020:	10800317 	ldw	r2,12(r2)
   4f024:	10800104 	addi	r2,r2,4
   4f028:	10800037 	ldwio	r2,0(r2)
   4f02c:	1007883a 	mov	r3,r2
   4f030:	e0bfff17 	ldw	r2,-4(fp)
   4f034:	10c00005 	stb	r3,0(r2)
        
    return status;
   4f038:	e0bffc17 	ldw	r2,-16(fp)
}
   4f03c:	e037883a 	mov	sp,fp
   4f040:	dfc00117 	ldw	ra,4(sp)
   4f044:	df000017 	ldw	fp,0(sp)
   4f048:	dec00204 	addi	sp,sp,8
   4f04c:	f800283a 	ret

0004f050 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   4f050:	defff804 	addi	sp,sp,-32
   4f054:	dfc00715 	stw	ra,28(sp)
   4f058:	df000615 	stw	fp,24(sp)
   4f05c:	df000604 	addi	fp,sp,24
   4f060:	e13ffc15 	stw	r4,-16(fp)
   4f064:	2809883a 	mov	r4,r5
   4f068:	3007883a 	mov	r3,r6
   4f06c:	3805883a 	mov	r2,r7
   4f070:	e13ffd05 	stb	r4,-12(fp)
   4f074:	e0fffe05 	stb	r3,-8(fp)
   4f078:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   4f07c:	0089c404 	movi	r2,10000
   4f080:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   4f084:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   4f088:	00000c06 	br	4f0bc <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   4f08c:	e0bffa17 	ldw	r2,-24(fp)
   4f090:	108002a8 	cmpgeui	r2,r2,10
   4f094:	1000021e 	bne	r2,zero,4f0a0 <alt_avalon_i2c_cmd_write+0x50>
   4f098:	0109c404 	movi	r4,10000
   4f09c:	0050f080 	call	50f08 <alt_busy_sleep>
      if (--timeout == 0)
   4f0a0:	e0bffa17 	ldw	r2,-24(fp)
   4f0a4:	10bfffc4 	addi	r2,r2,-1
   4f0a8:	e0bffa15 	stw	r2,-24(fp)
   4f0ac:	e0bffa17 	ldw	r2,-24(fp)
   4f0b0:	1000021e 	bne	r2,zero,4f0bc <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   4f0b4:	00bfff84 	movi	r2,-2
   4f0b8:	00001906 	br	4f120 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   4f0bc:	e0bffc17 	ldw	r2,-16(fp)
   4f0c0:	10800317 	ldw	r2,12(r2)
   4f0c4:	10800404 	addi	r2,r2,16
   4f0c8:	10800037 	ldwio	r2,0(r2)
   4f0cc:	1080004c 	andi	r2,r2,1
   4f0d0:	103fee26 	beq	r2,zero,4f08c <__alt_data_end+0xfffe7f8c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   4f0d4:	e0bffc17 	ldw	r2,-16(fp)
   4f0d8:	10800317 	ldw	r2,12(r2)
   4f0dc:	e13ffd03 	ldbu	r4,-12(fp)
   4f0e0:	e0fffe03 	ldbu	r3,-8(fp)
   4f0e4:	1806927a 	slli	r3,r3,9
   4f0e8:	20c8b03a 	or	r4,r4,r3
   4f0ec:	e0ffff03 	ldbu	r3,-4(fp)
   4f0f0:	1806923a 	slli	r3,r3,8
   4f0f4:	20c6b03a 	or	r3,r4,r3
   4f0f8:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   4f0fc:	e0bffb04 	addi	r2,fp,-20
   4f100:	100b883a 	mov	r5,r2
   4f104:	e13ffc17 	ldw	r4,-16(fp)
   4f108:	004f2900 	call	4f290 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   4f10c:	e0bffb04 	addi	r2,fp,-20
   4f110:	100b883a 	mov	r5,r2
   4f114:	e13ffc17 	ldw	r4,-16(fp)
   4f118:	004f2dc0 	call	4f2dc <alt_avalon_i2c_check_arblost>
    
    return status;
   4f11c:	e0bffb17 	ldw	r2,-20(fp)
}
   4f120:	e037883a 	mov	sp,fp
   4f124:	dfc00117 	ldw	ra,4(sp)
   4f128:	df000017 	ldw	fp,0(sp)
   4f12c:	dec00204 	addi	sp,sp,8
   4f130:	f800283a 	ret

0004f134 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   4f134:	defffa04 	addi	sp,sp,-24
   4f138:	dfc00515 	stw	ra,20(sp)
   4f13c:	df000415 	stw	fp,16(sp)
   4f140:	df000404 	addi	fp,sp,16
   4f144:	e13ffd15 	stw	r4,-12(fp)
   4f148:	e17ffe15 	stw	r5,-8(fp)
   4f14c:	3005883a 	mov	r2,r6
   4f150:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   4f154:	e0bffd17 	ldw	r2,-12(fp)
   4f158:	10800d17 	ldw	r2,52(r2)
   4f15c:	10800058 	cmpnei	r2,r2,1
   4f160:	10001c1e 	bne	r2,zero,4f1d4 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   4f164:	e0bffd17 	ldw	r2,-12(fp)
   4f168:	10800917 	ldw	r2,36(r2)
   4f16c:	109e0014 	ori	r2,r2,30720
   4f170:	1004d1fa 	srli	r2,r2,7
   4f174:	1007883a 	mov	r3,r2
   4f178:	00bfff84 	movi	r2,-2
   4f17c:	1884703a 	and	r2,r3,r2
   4f180:	1007883a 	mov	r3,r2
   4f184:	e0bffe17 	ldw	r2,-8(fp)
   4f188:	1884b03a 	or	r2,r3,r2
   4f18c:	10803fcc 	andi	r2,r2,255
   4f190:	e0ffff03 	ldbu	r3,-4(fp)
   4f194:	000f883a 	mov	r7,zero
   4f198:	180d883a 	mov	r6,r3
   4f19c:	100b883a 	mov	r5,r2
   4f1a0:	e13ffd17 	ldw	r4,-12(fp)
   4f1a4:	004f0500 	call	4f050 <alt_avalon_i2c_cmd_write>
   4f1a8:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   4f1ac:	e0bffd17 	ldw	r2,-12(fp)
   4f1b0:	10800917 	ldw	r2,36(r2)
   4f1b4:	10803fcc 	andi	r2,r2,255
   4f1b8:	000f883a 	mov	r7,zero
   4f1bc:	000d883a 	mov	r6,zero
   4f1c0:	100b883a 	mov	r5,r2
   4f1c4:	e13ffd17 	ldw	r4,-12(fp)
   4f1c8:	004f0500 	call	4f050 <alt_avalon_i2c_cmd_write>
   4f1cc:	e0bffc15 	stw	r2,-16(fp)
   4f1d0:	00000e06 	br	4f20c <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   4f1d4:	e0bffd17 	ldw	r2,-12(fp)
   4f1d8:	10800917 	ldw	r2,36(r2)
   4f1dc:	1085883a 	add	r2,r2,r2
   4f1e0:	1007883a 	mov	r3,r2
   4f1e4:	e0bffe17 	ldw	r2,-8(fp)
   4f1e8:	1884b03a 	or	r2,r3,r2
   4f1ec:	10803fcc 	andi	r2,r2,255
   4f1f0:	e0ffff03 	ldbu	r3,-4(fp)
   4f1f4:	000f883a 	mov	r7,zero
   4f1f8:	180d883a 	mov	r6,r3
   4f1fc:	100b883a 	mov	r5,r2
   4f200:	e13ffd17 	ldw	r4,-12(fp)
   4f204:	004f0500 	call	4f050 <alt_avalon_i2c_cmd_write>
   4f208:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   4f20c:	e0bffc17 	ldw	r2,-16(fp)
}
   4f210:	e037883a 	mov	sp,fp
   4f214:	dfc00117 	ldw	ra,4(sp)
   4f218:	df000017 	ldw	fp,0(sp)
   4f21c:	dec00204 	addi	sp,sp,8
   4f220:	f800283a 	ret

0004f224 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   4f224:	defffd04 	addi	sp,sp,-12
   4f228:	df000215 	stw	fp,8(sp)
   4f22c:	df000204 	addi	fp,sp,8
   4f230:	e13ffe15 	stw	r4,-8(fp)
   4f234:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   4f238:	e0bffe17 	ldw	r2,-8(fp)
   4f23c:	10c00917 	ldw	r3,36(r2)
   4f240:	e0bfff17 	ldw	r2,-4(fp)
   4f244:	10c00015 	stw	r3,0(r2)
}
   4f248:	0001883a 	nop
   4f24c:	e037883a 	mov	sp,fp
   4f250:	df000017 	ldw	fp,0(sp)
   4f254:	dec00104 	addi	sp,sp,4
   4f258:	f800283a 	ret

0004f25c <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   4f25c:	defffd04 	addi	sp,sp,-12
   4f260:	df000215 	stw	fp,8(sp)
   4f264:	df000204 	addi	fp,sp,8
   4f268:	e13ffe15 	stw	r4,-8(fp)
   4f26c:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   4f270:	e0bffe17 	ldw	r2,-8(fp)
   4f274:	e0ffff17 	ldw	r3,-4(fp)
   4f278:	10c00915 	stw	r3,36(r2)
}
   4f27c:	0001883a 	nop
   4f280:	e037883a 	mov	sp,fp
   4f284:	df000017 	ldw	fp,0(sp)
   4f288:	dec00104 	addi	sp,sp,4
   4f28c:	f800283a 	ret

0004f290 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   4f290:	defffd04 	addi	sp,sp,-12
   4f294:	df000215 	stw	fp,8(sp)
   4f298:	df000204 	addi	fp,sp,8
   4f29c:	e13ffe15 	stw	r4,-8(fp)
   4f2a0:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   4f2a4:	e0bffe17 	ldw	r2,-8(fp)
   4f2a8:	10800317 	ldw	r2,12(r2)
   4f2ac:	10800404 	addi	r2,r2,16
   4f2b0:	10800037 	ldwio	r2,0(r2)
   4f2b4:	1080010c 	andi	r2,r2,4
   4f2b8:	10000326 	beq	r2,zero,4f2c8 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   4f2bc:	e0bfff17 	ldw	r2,-4(fp)
   4f2c0:	00fffec4 	movi	r3,-5
   4f2c4:	10c00015 	stw	r3,0(r2)
    }
}
   4f2c8:	0001883a 	nop
   4f2cc:	e037883a 	mov	sp,fp
   4f2d0:	df000017 	ldw	fp,0(sp)
   4f2d4:	dec00104 	addi	sp,sp,4
   4f2d8:	f800283a 	ret

0004f2dc <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   4f2dc:	defffd04 	addi	sp,sp,-12
   4f2e0:	df000215 	stw	fp,8(sp)
   4f2e4:	df000204 	addi	fp,sp,8
   4f2e8:	e13ffe15 	stw	r4,-8(fp)
   4f2ec:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   4f2f0:	e0bffe17 	ldw	r2,-8(fp)
   4f2f4:	10800317 	ldw	r2,12(r2)
   4f2f8:	10800404 	addi	r2,r2,16
   4f2fc:	10800037 	ldwio	r2,0(r2)
   4f300:	1080020c 	andi	r2,r2,8
   4f304:	10000326 	beq	r2,zero,4f314 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   4f308:	e0bfff17 	ldw	r2,-4(fp)
   4f30c:	00fffe84 	movi	r3,-6
   4f310:	10c00015 	stw	r3,0(r2)
    }
}
   4f314:	0001883a 	nop
   4f318:	e037883a 	mov	sp,fp
   4f31c:	df000017 	ldw	fp,0(sp)
   4f320:	dec00104 	addi	sp,sp,4
   4f324:	f800283a 	ret

0004f328 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   4f328:	defff804 	addi	sp,sp,-32
   4f32c:	dfc00715 	stw	ra,28(sp)
   4f330:	df000615 	stw	fp,24(sp)
   4f334:	df000604 	addi	fp,sp,24
   4f338:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   4f33c:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   4f340:	e0bfff17 	ldw	r2,-4(fp)
   4f344:	10800717 	ldw	r2,28(r2)
   4f348:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   4f34c:	e0bffb17 	ldw	r2,-20(fp)
   4f350:	10800117 	ldw	r2,4(r2)
   4f354:	10800044 	addi	r2,r2,1
   4f358:	1089c424 	muli	r2,r2,10000
   4f35c:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   4f360:	e0bffd04 	addi	r2,fp,-12
   4f364:	100b883a 	mov	r5,r2
   4f368:	e13fff17 	ldw	r4,-4(fp)
   4f36c:	00501a80 	call	501a8 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   4f370:	e0bffd17 	ldw	r2,-12(fp)
   4f374:	100b883a 	mov	r5,r2
   4f378:	e13fff17 	ldw	r4,-4(fp)
   4f37c:	00500dc0 	call	500dc <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   4f380:	e0bffc04 	addi	r2,fp,-16
   4f384:	100b883a 	mov	r5,r2
   4f388:	e13fff17 	ldw	r4,-4(fp)
   4f38c:	004f2900 	call	4f290 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   4f390:	e0bffc17 	ldw	r2,-16(fp)
   4f394:	10002226 	beq	r2,zero,4f420 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
    {
      if (irq_data->irq_busy)
   4f398:	e0bffb17 	ldw	r2,-20(fp)
   4f39c:	10800217 	ldw	r2,8(r2)
   4f3a0:	10001d26 	beq	r2,zero,4f418 <alt_avalon_i2c_interrupt_transaction_status+0xf0>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   4f3a4:	00000d06 	br	4f3dc <alt_avalon_i2c_interrupt_transaction_status+0xb4>
        {
              if (timeout<10) alt_busy_sleep(10000);
   4f3a8:	e0bffa17 	ldw	r2,-24(fp)
   4f3ac:	108002a8 	cmpgeui	r2,r2,10
   4f3b0:	1000021e 	bne	r2,zero,4f3bc <alt_avalon_i2c_interrupt_transaction_status+0x94>
   4f3b4:	0109c404 	movi	r4,10000
   4f3b8:	0050f080 	call	50f08 <alt_busy_sleep>
              if (--timeout == 0)
   4f3bc:	e0bffa17 	ldw	r2,-24(fp)
   4f3c0:	10bfffc4 	addi	r2,r2,-1
   4f3c4:	e0bffa15 	stw	r2,-24(fp)
   4f3c8:	e0bffa17 	ldw	r2,-24(fp)
   4f3cc:	1000031e 	bne	r2,zero,4f3dc <alt_avalon_i2c_interrupt_transaction_status+0xb4>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   4f3d0:	00bfff84 	movi	r2,-2
   4f3d4:	e0bffc15 	stw	r2,-16(fp)
                 break;
   4f3d8:	00000306 	br	4f3e8 <alt_avalon_i2c_interrupt_transaction_status+0xc0>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   4f3dc:	e13fff17 	ldw	r4,-4(fp)
   4f3e0:	004eebc0 	call	4eebc <alt_avalon_i2c_is_busy>
   4f3e4:	103ff01e 	bne	r2,zero,4f3a8 <__alt_data_end+0xfffe82a8>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   4f3e8:	e0bffb17 	ldw	r2,-20(fp)
   4f3ec:	10800017 	ldw	r2,0(r2)
   4f3f0:	e0fffe04 	addi	r3,fp,-8
   4f3f4:	180f883a 	mov	r7,r3
   4f3f8:	000d883a 	mov	r6,zero
   4f3fc:	100b883a 	mov	r5,r2
   4f400:	e13fff17 	ldw	r4,-4(fp)
   4f404:	004ef000 	call	4ef00 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   4f408:	e13fff17 	ldw	r4,-4(fp)
   4f40c:	004eb640 	call	4eb64 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   4f410:	e0bffb17 	ldw	r2,-20(fp)
   4f414:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   4f418:	e0bffc17 	ldw	r2,-16(fp)
   4f41c:	00000a06 	br	4f448 <alt_avalon_i2c_interrupt_transaction_status+0x120>
    }
    
    if (irq_data->irq_busy)
   4f420:	e0bffb17 	ldw	r2,-20(fp)
   4f424:	10800217 	ldw	r2,8(r2)
   4f428:	10000626 	beq	r2,zero,4f444 <alt_avalon_i2c_interrupt_transaction_status+0x11c>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   4f42c:	e0bffd17 	ldw	r2,-12(fp)
   4f430:	100b883a 	mov	r5,r2
   4f434:	e13fff17 	ldw	r4,-4(fp)
   4f438:	00501440 	call	50144 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   4f43c:	00bffe44 	movi	r2,-7
   4f440:	00000106 	br	4f448 <alt_avalon_i2c_interrupt_transaction_status+0x120>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   4f444:	0005883a 	mov	r2,zero
}
   4f448:	e037883a 	mov	sp,fp
   4f44c:	dfc00117 	ldw	ra,4(sp)
   4f450:	df000017 	ldw	fp,0(sp)
   4f454:	dec00204 	addi	sp,sp,8
   4f458:	f800283a 	ret

0004f45c <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   4f45c:	defff704 	addi	sp,sp,-36
   4f460:	dfc00815 	stw	ra,32(sp)
   4f464:	df000715 	stw	fp,28(sp)
   4f468:	df000704 	addi	fp,sp,28
   4f46c:	e13ffc15 	stw	r4,-16(fp)
   4f470:	e17ffd15 	stw	r5,-12(fp)
   4f474:	e1bffe15 	stw	r6,-8(fp)
   4f478:	3805883a 	mov	r2,r7
   4f47c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   4f480:	0089c404 	movi	r2,10000
   4f484:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   4f488:	00002206 	br	4f514 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   4f48c:	e0bffb17 	ldw	r2,-20(fp)
   4f490:	108002a8 	cmpgeui	r2,r2,10
   4f494:	1000021e 	bne	r2,zero,4f4a0 <alt_avalon_i2c_master_tx+0x44>
   4f498:	0109c404 	movi	r4,10000
   4f49c:	0050f080 	call	50f08 <alt_busy_sleep>
      if (use_interrupts)
   4f4a0:	e0bfff03 	ldbu	r2,-4(fp)
   4f4a4:	10000926 	beq	r2,zero,4f4cc <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   4f4a8:	00800044 	movi	r2,1
   4f4ac:	d8800015 	stw	r2,0(sp)
   4f4b0:	000f883a 	mov	r7,zero
   4f4b4:	e1bffe17 	ldw	r6,-8(fp)
   4f4b8:	e17ffd17 	ldw	r5,-12(fp)
   4f4bc:	e13ffc17 	ldw	r4,-16(fp)
   4f4c0:	004fa040 	call	4fa04 <alt_avalon_i2c_master_transmit_using_interrupts>
   4f4c4:	e0bffa15 	stw	r2,-24(fp)
   4f4c8:	00000806 	br	4f4ec <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   4f4cc:	00800044 	movi	r2,1
   4f4d0:	d8800015 	stw	r2,0(sp)
   4f4d4:	000f883a 	mov	r7,zero
   4f4d8:	e1bffe17 	ldw	r6,-8(fp)
   4f4dc:	e17ffd17 	ldw	r5,-12(fp)
   4f4e0:	e13ffc17 	ldw	r4,-16(fp)
   4f4e4:	004f8480 	call	4f848 <alt_avalon_i2c_master_transmit>
   4f4e8:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   4f4ec:	e0bffa17 	ldw	r2,-24(fp)
   4f4f0:	10bffea0 	cmpeqi	r2,r2,-6
   4f4f4:	1000061e 	bne	r2,zero,4f510 <alt_avalon_i2c_master_tx+0xb4>
   4f4f8:	e0bffa17 	ldw	r2,-24(fp)
   4f4fc:	10bffee0 	cmpeqi	r2,r2,-5
   4f500:	1000031e 	bne	r2,zero,4f510 <alt_avalon_i2c_master_tx+0xb4>
   4f504:	e0bffa17 	ldw	r2,-24(fp)
   4f508:	10bffe58 	cmpnei	r2,r2,-7
   4f50c:	1000061e 	bne	r2,zero,4f528 <alt_avalon_i2c_master_tx+0xcc>
   4f510:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   4f514:	e0bffb17 	ldw	r2,-20(fp)
   4f518:	10ffffc4 	addi	r3,r2,-1
   4f51c:	e0fffb15 	stw	r3,-20(fp)
   4f520:	103fda1e 	bne	r2,zero,4f48c <__alt_data_end+0xfffe838c>
   4f524:	00000106 	br	4f52c <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   4f528:	0001883a 	nop
    }

    return status;
   4f52c:	e0bffa17 	ldw	r2,-24(fp)
}        
   4f530:	e037883a 	mov	sp,fp
   4f534:	dfc00117 	ldw	ra,4(sp)
   4f538:	df000017 	ldw	fp,0(sp)
   4f53c:	dec00204 	addi	sp,sp,8
   4f540:	f800283a 	ret

0004f544 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   4f544:	defff704 	addi	sp,sp,-36
   4f548:	dfc00815 	stw	ra,32(sp)
   4f54c:	df000715 	stw	fp,28(sp)
   4f550:	df000704 	addi	fp,sp,28
   4f554:	e13ffc15 	stw	r4,-16(fp)
   4f558:	e17ffd15 	stw	r5,-12(fp)
   4f55c:	e1bffe15 	stw	r6,-8(fp)
   4f560:	3805883a 	mov	r2,r7
   4f564:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   4f568:	0089c404 	movi	r2,10000
   4f56c:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   4f570:	e0bfff03 	ldbu	r2,-4(fp)
   4f574:	10003426 	beq	r2,zero,4f648 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   4f578:	00001706 	br	4f5d8 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   4f57c:	e0bffb17 	ldw	r2,-20(fp)
   4f580:	108002a8 	cmpgeui	r2,r2,10
   4f584:	1000021e 	bne	r2,zero,4f590 <alt_avalon_i2c_master_rx+0x4c>
   4f588:	0109c404 	movi	r4,10000
   4f58c:	0050f080 	call	50f08 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   4f590:	00800044 	movi	r2,1
   4f594:	d8800015 	stw	r2,0(sp)
   4f598:	000f883a 	mov	r7,zero
   4f59c:	e1bffe17 	ldw	r6,-8(fp)
   4f5a0:	e17ffd17 	ldw	r5,-12(fp)
   4f5a4:	e13ffc17 	ldw	r4,-16(fp)
   4f5a8:	004fe180 	call	4fe18 <alt_avalon_i2c_master_receive_using_interrupts>
   4f5ac:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   4f5b0:	e0bffa17 	ldw	r2,-24(fp)
   4f5b4:	10bffea0 	cmpeqi	r2,r2,-6
   4f5b8:	1000061e 	bne	r2,zero,4f5d4 <alt_avalon_i2c_master_rx+0x90>
   4f5bc:	e0bffa17 	ldw	r2,-24(fp)
   4f5c0:	10bffee0 	cmpeqi	r2,r2,-5
   4f5c4:	1000031e 	bne	r2,zero,4f5d4 <alt_avalon_i2c_master_rx+0x90>
   4f5c8:	e0bffa17 	ldw	r2,-24(fp)
   4f5cc:	10bffe58 	cmpnei	r2,r2,-7
   4f5d0:	1000221e 	bne	r2,zero,4f65c <alt_avalon_i2c_master_rx+0x118>
   4f5d4:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   4f5d8:	e0bffb17 	ldw	r2,-20(fp)
   4f5dc:	10ffffc4 	addi	r3,r2,-1
   4f5e0:	e0fffb15 	stw	r3,-20(fp)
   4f5e4:	103fe51e 	bne	r2,zero,4f57c <__alt_data_end+0xfffe847c>
   4f5e8:	00001f06 	br	4f668 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   4f5ec:	e0bffb17 	ldw	r2,-20(fp)
   4f5f0:	108002a8 	cmpgeui	r2,r2,10
   4f5f4:	1000021e 	bne	r2,zero,4f600 <alt_avalon_i2c_master_rx+0xbc>
   4f5f8:	0109c404 	movi	r4,10000
   4f5fc:	0050f080 	call	50f08 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   4f600:	00800044 	movi	r2,1
   4f604:	d8800015 	stw	r2,0(sp)
   4f608:	000f883a 	mov	r7,zero
   4f60c:	e1bffe17 	ldw	r6,-8(fp)
   4f610:	e17ffd17 	ldw	r5,-12(fp)
   4f614:	e13ffc17 	ldw	r4,-16(fp)
   4f618:	004fc0c0 	call	4fc0c <alt_avalon_i2c_master_receive>
   4f61c:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   4f620:	e0bffa17 	ldw	r2,-24(fp)
   4f624:	10bffea0 	cmpeqi	r2,r2,-6
   4f628:	1000061e 	bne	r2,zero,4f644 <alt_avalon_i2c_master_rx+0x100>
   4f62c:	e0bffa17 	ldw	r2,-24(fp)
   4f630:	10bffee0 	cmpeqi	r2,r2,-5
   4f634:	1000031e 	bne	r2,zero,4f644 <alt_avalon_i2c_master_rx+0x100>
   4f638:	e0bffa17 	ldw	r2,-24(fp)
   4f63c:	10bffe58 	cmpnei	r2,r2,-7
   4f640:	1000081e 	bne	r2,zero,4f664 <alt_avalon_i2c_master_rx+0x120>
   4f644:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   4f648:	e0bffb17 	ldw	r2,-20(fp)
   4f64c:	10ffffc4 	addi	r3,r2,-1
   4f650:	e0fffb15 	stw	r3,-20(fp)
   4f654:	103fe51e 	bne	r2,zero,4f5ec <__alt_data_end+0xfffe84ec>
   4f658:	00000306 	br	4f668 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   4f65c:	0001883a 	nop
   4f660:	00000106 	br	4f668 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   4f664:	0001883a 	nop
      }
    }
    
    return status;
   4f668:	e0bffa17 	ldw	r2,-24(fp)
}        
   4f66c:	e037883a 	mov	sp,fp
   4f670:	dfc00117 	ldw	ra,4(sp)
   4f674:	df000017 	ldw	fp,0(sp)
   4f678:	dec00204 	addi	sp,sp,8
   4f67c:	f800283a 	ret

0004f680 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   4f680:	defff604 	addi	sp,sp,-40
   4f684:	dfc00915 	stw	ra,36(sp)
   4f688:	df000815 	stw	fp,32(sp)
   4f68c:	df000804 	addi	fp,sp,32
   4f690:	e13ffb15 	stw	r4,-20(fp)
   4f694:	e17ffc15 	stw	r5,-16(fp)
   4f698:	e1bffd15 	stw	r6,-12(fp)
   4f69c:	e1fffe15 	stw	r7,-8(fp)
   4f6a0:	e0800317 	ldw	r2,12(fp)
   4f6a4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   4f6a8:	0089c404 	movi	r2,10000
   4f6ac:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   4f6b0:	e0bfff03 	ldbu	r2,-4(fp)
   4f6b4:	10005626 	beq	r2,zero,4f810 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   4f6b8:	00002806 	br	4f75c <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   4f6bc:	e0bffa17 	ldw	r2,-24(fp)
   4f6c0:	108002a8 	cmpgeui	r2,r2,10
   4f6c4:	1000021e 	bne	r2,zero,4f6d0 <alt_avalon_i2c_master_tx_rx+0x50>
   4f6c8:	0109c404 	movi	r4,10000
   4f6cc:	0050f080 	call	50f08 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   4f6d0:	d8000015 	stw	zero,0(sp)
   4f6d4:	000f883a 	mov	r7,zero
   4f6d8:	e1bffd17 	ldw	r6,-12(fp)
   4f6dc:	e17ffc17 	ldw	r5,-16(fp)
   4f6e0:	e13ffb17 	ldw	r4,-20(fp)
   4f6e4:	004fa040 	call	4fa04 <alt_avalon_i2c_master_transmit_using_interrupts>
   4f6e8:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   4f6ec:	e0bff917 	ldw	r2,-28(fp)
   4f6f0:	10bffea0 	cmpeqi	r2,r2,-6
   4f6f4:	1000191e 	bne	r2,zero,4f75c <alt_avalon_i2c_master_tx_rx+0xdc>
   4f6f8:	e0bff917 	ldw	r2,-28(fp)
   4f6fc:	10bffee0 	cmpeqi	r2,r2,-5
   4f700:	1000161e 	bne	r2,zero,4f75c <alt_avalon_i2c_master_tx_rx+0xdc>
   4f704:	e0bff917 	ldw	r2,-28(fp)
   4f708:	10bffe58 	cmpnei	r2,r2,-7
   4f70c:	1000011e 	bne	r2,zero,4f714 <alt_avalon_i2c_master_tx_rx+0x94>
   4f710:	00001206 	br	4f75c <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   4f714:	00800044 	movi	r2,1
   4f718:	d8800015 	stw	r2,0(sp)
   4f71c:	01c00044 	movi	r7,1
   4f720:	e1800217 	ldw	r6,8(fp)
   4f724:	e17ffe17 	ldw	r5,-8(fp)
   4f728:	e13ffb17 	ldw	r4,-20(fp)
   4f72c:	004fe180 	call	4fe18 <alt_avalon_i2c_master_receive_using_interrupts>
   4f730:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   4f734:	e0bff917 	ldw	r2,-28(fp)
   4f738:	10bffea0 	cmpeqi	r2,r2,-6
   4f73c:	1000061e 	bne	r2,zero,4f758 <alt_avalon_i2c_master_tx_rx+0xd8>
   4f740:	e0bff917 	ldw	r2,-28(fp)
   4f744:	10bffee0 	cmpeqi	r2,r2,-5
   4f748:	1000031e 	bne	r2,zero,4f758 <alt_avalon_i2c_master_tx_rx+0xd8>
   4f74c:	e0bff917 	ldw	r2,-28(fp)
   4f750:	10bffe58 	cmpnei	r2,r2,-7
   4f754:	1000331e 	bne	r2,zero,4f824 <alt_avalon_i2c_master_tx_rx+0x1a4>
   4f758:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   4f75c:	e0bffa17 	ldw	r2,-24(fp)
   4f760:	10ffffc4 	addi	r3,r2,-1
   4f764:	e0fffa15 	stw	r3,-24(fp)
   4f768:	103fd41e 	bne	r2,zero,4f6bc <__alt_data_end+0xfffe85bc>
   4f76c:	00003006 	br	4f830 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   4f770:	e0bffa17 	ldw	r2,-24(fp)
   4f774:	108002a8 	cmpgeui	r2,r2,10
   4f778:	1000021e 	bne	r2,zero,4f784 <alt_avalon_i2c_master_tx_rx+0x104>
   4f77c:	0109c404 	movi	r4,10000
   4f780:	0050f080 	call	50f08 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   4f784:	d8000015 	stw	zero,0(sp)
   4f788:	000f883a 	mov	r7,zero
   4f78c:	e1bffd17 	ldw	r6,-12(fp)
   4f790:	e17ffc17 	ldw	r5,-16(fp)
   4f794:	e13ffb17 	ldw	r4,-20(fp)
   4f798:	004f8480 	call	4f848 <alt_avalon_i2c_master_transmit>
   4f79c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   4f7a0:	e0bff917 	ldw	r2,-28(fp)
   4f7a4:	10bffea0 	cmpeqi	r2,r2,-6
   4f7a8:	1000191e 	bne	r2,zero,4f810 <alt_avalon_i2c_master_tx_rx+0x190>
   4f7ac:	e0bff917 	ldw	r2,-28(fp)
   4f7b0:	10bffee0 	cmpeqi	r2,r2,-5
   4f7b4:	1000161e 	bne	r2,zero,4f810 <alt_avalon_i2c_master_tx_rx+0x190>
   4f7b8:	e0bff917 	ldw	r2,-28(fp)
   4f7bc:	10bffe58 	cmpnei	r2,r2,-7
   4f7c0:	1000011e 	bne	r2,zero,4f7c8 <alt_avalon_i2c_master_tx_rx+0x148>
   4f7c4:	00001206 	br	4f810 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   4f7c8:	00800044 	movi	r2,1
   4f7cc:	d8800015 	stw	r2,0(sp)
   4f7d0:	01c00044 	movi	r7,1
   4f7d4:	e1800217 	ldw	r6,8(fp)
   4f7d8:	e17ffe17 	ldw	r5,-8(fp)
   4f7dc:	e13ffb17 	ldw	r4,-20(fp)
   4f7e0:	004fc0c0 	call	4fc0c <alt_avalon_i2c_master_receive>
   4f7e4:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   4f7e8:	e0bff917 	ldw	r2,-28(fp)
   4f7ec:	10bffea0 	cmpeqi	r2,r2,-6
   4f7f0:	1000061e 	bne	r2,zero,4f80c <alt_avalon_i2c_master_tx_rx+0x18c>
   4f7f4:	e0bff917 	ldw	r2,-28(fp)
   4f7f8:	10bffee0 	cmpeqi	r2,r2,-5
   4f7fc:	1000031e 	bne	r2,zero,4f80c <alt_avalon_i2c_master_tx_rx+0x18c>
   4f800:	e0bff917 	ldw	r2,-28(fp)
   4f804:	10bffe58 	cmpnei	r2,r2,-7
   4f808:	1000081e 	bne	r2,zero,4f82c <alt_avalon_i2c_master_tx_rx+0x1ac>
   4f80c:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   4f810:	e0bffa17 	ldw	r2,-24(fp)
   4f814:	10ffffc4 	addi	r3,r2,-1
   4f818:	e0fffa15 	stw	r3,-24(fp)
   4f81c:	103fd41e 	bne	r2,zero,4f770 <__alt_data_end+0xfffe8670>
   4f820:	00000306 	br	4f830 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   4f824:	0001883a 	nop
   4f828:	00000106 	br	4f830 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   4f82c:	0001883a 	nop
      }
    }
    
    return status;
   4f830:	e0bff917 	ldw	r2,-28(fp)
}                                       
   4f834:	e037883a 	mov	sp,fp
   4f838:	dfc00117 	ldw	ra,4(sp)
   4f83c:	df000017 	ldw	fp,0(sp)
   4f840:	dec00204 	addi	sp,sp,8
   4f844:	f800283a 	ret

0004f848 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   4f848:	defff704 	addi	sp,sp,-36
   4f84c:	dfc00815 	stw	ra,32(sp)
   4f850:	df000715 	stw	fp,28(sp)
   4f854:	df000704 	addi	fp,sp,28
   4f858:	e13ffb15 	stw	r4,-20(fp)
   4f85c:	e17ffc15 	stw	r5,-16(fp)
   4f860:	e1bffd15 	stw	r6,-12(fp)
   4f864:	3807883a 	mov	r3,r7
   4f868:	e0800217 	ldw	r2,8(fp)
   4f86c:	e0fffe05 	stb	r3,-8(fp)
   4f870:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   4f874:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   4f878:	e0bffd17 	ldw	r2,-12(fp)
   4f87c:	1089c424 	muli	r2,r2,10000
   4f880:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   4f884:	e0bffd17 	ldw	r2,-12(fp)
   4f888:	1000021e 	bne	r2,zero,4f894 <alt_avalon_i2c_master_transmit+0x4c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   4f88c:	0005883a 	mov	r2,zero
   4f890:	00005706 	br	4f9f0 <alt_avalon_i2c_master_transmit+0x1a8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   4f894:	e0bffe03 	ldbu	r2,-8(fp)
   4f898:	10000a1e 	bne	r2,zero,4f8c4 <alt_avalon_i2c_master_transmit+0x7c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   4f89c:	e13ffb17 	ldw	r4,-20(fp)
   4f8a0:	004eacc0 	call	4eacc <alt_avalon_i2c_enable>
   4f8a4:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   4f8a8:	e0bffa17 	ldw	r2,-24(fp)
   4f8ac:	10000226 	beq	r2,zero,4f8b8 <alt_avalon_i2c_master_transmit+0x70>
      {
        return status;
   4f8b0:	e0bffa17 	ldw	r2,-24(fp)
   4f8b4:	00004e06 	br	4f9f0 <alt_avalon_i2c_master_transmit+0x1a8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   4f8b8:	01400704 	movi	r5,28
   4f8bc:	e13ffb17 	ldw	r4,-20(fp)
   4f8c0:	00500a00 	call	500a0 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   4f8c4:	e0bffe03 	ldbu	r2,-8(fp)
   4f8c8:	100d883a 	mov	r6,r2
   4f8cc:	000b883a 	mov	r5,zero
   4f8d0:	e13ffb17 	ldw	r4,-20(fp)
   4f8d4:	004f1340 	call	4f134 <alt_avalon_i2c_send_address>
   4f8d8:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   4f8dc:	e0bffa17 	ldw	r2,-24(fp)
   4f8e0:	1000271e 	bne	r2,zero,4f980 <alt_avalon_i2c_master_transmit+0x138>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   4f8e4:	00000f06 	br	4f924 <alt_avalon_i2c_master_transmit+0xdc>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   4f8e8:	e0bffc17 	ldw	r2,-16(fp)
   4f8ec:	10800003 	ldbu	r2,0(r2)
   4f8f0:	10803fcc 	andi	r2,r2,255
   4f8f4:	000f883a 	mov	r7,zero
   4f8f8:	000d883a 	mov	r6,zero
   4f8fc:	100b883a 	mov	r5,r2
   4f900:	e13ffb17 	ldw	r4,-20(fp)
   4f904:	004f0500 	call	4f050 <alt_avalon_i2c_cmd_write>
   4f908:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   4f90c:	e0bffc17 	ldw	r2,-16(fp)
   4f910:	10800044 	addi	r2,r2,1
   4f914:	e0bffc15 	stw	r2,-16(fp)
            --size;
   4f918:	e0bffd17 	ldw	r2,-12(fp)
   4f91c:	10bfffc4 	addi	r2,r2,-1
   4f920:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   4f924:	e0bffd17 	ldw	r2,-12(fp)
   4f928:	108000b0 	cmpltui	r2,r2,2
   4f92c:	1000021e 	bne	r2,zero,4f938 <alt_avalon_i2c_master_transmit+0xf0>
   4f930:	e0bffa17 	ldw	r2,-24(fp)
   4f934:	103fec26 	beq	r2,zero,4f8e8 <__alt_data_end+0xfffe87e8>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   4f938:	e0bffa17 	ldw	r2,-24(fp)
   4f93c:	1000101e 	bne	r2,zero,4f980 <alt_avalon_i2c_master_transmit+0x138>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   4f940:	e0bffc17 	ldw	r2,-16(fp)
   4f944:	10800003 	ldbu	r2,0(r2)
   4f948:	10803fcc 	andi	r2,r2,255
   4f94c:	e0ffff03 	ldbu	r3,-4(fp)
   4f950:	180f883a 	mov	r7,r3
   4f954:	000d883a 	mov	r6,zero
   4f958:	100b883a 	mov	r5,r2
   4f95c:	e13ffb17 	ldw	r4,-20(fp)
   4f960:	004f0500 	call	4f050 <alt_avalon_i2c_cmd_write>
   4f964:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   4f968:	e0bffc17 	ldw	r2,-16(fp)
   4f96c:	10800044 	addi	r2,r2,1
   4f970:	e0bffc15 	stw	r2,-16(fp)
            --size;
   4f974:	e0bffd17 	ldw	r2,-12(fp)
   4f978:	10bfffc4 	addi	r2,r2,-1
   4f97c:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   4f980:	e0bfff03 	ldbu	r2,-4(fp)
   4f984:	1000101e 	bne	r2,zero,4f9c8 <alt_avalon_i2c_master_transmit+0x180>
   4f988:	e0bffa17 	ldw	r2,-24(fp)
   4f98c:	10001726 	beq	r2,zero,4f9ec <alt_avalon_i2c_master_transmit+0x1a4>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   4f990:	00000d06 	br	4f9c8 <alt_avalon_i2c_master_transmit+0x180>
        {
            if (timeout<10) alt_busy_sleep(10000);
   4f994:	e0bff917 	ldw	r2,-28(fp)
   4f998:	108002a8 	cmpgeui	r2,r2,10
   4f99c:	1000021e 	bne	r2,zero,4f9a8 <alt_avalon_i2c_master_transmit+0x160>
   4f9a0:	0109c404 	movi	r4,10000
   4f9a4:	0050f080 	call	50f08 <alt_busy_sleep>
            if (--timeout == 0)
   4f9a8:	e0bff917 	ldw	r2,-28(fp)
   4f9ac:	10bfffc4 	addi	r2,r2,-1
   4f9b0:	e0bff915 	stw	r2,-28(fp)
   4f9b4:	e0bff917 	ldw	r2,-28(fp)
   4f9b8:	1000031e 	bne	r2,zero,4f9c8 <alt_avalon_i2c_master_transmit+0x180>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   4f9bc:	00bfff84 	movi	r2,-2
   4f9c0:	e0bffa15 	stw	r2,-24(fp)
               break;
   4f9c4:	00000306 	br	4f9d4 <alt_avalon_i2c_master_transmit+0x18c>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   4f9c8:	e13ffb17 	ldw	r4,-20(fp)
   4f9cc:	004eebc0 	call	4eebc <alt_avalon_i2c_is_busy>
   4f9d0:	103ff01e 	bne	r2,zero,4f994 <__alt_data_end+0xfffe8894>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   4f9d4:	e0bffa04 	addi	r2,fp,-24
   4f9d8:	100b883a 	mov	r5,r2
   4f9dc:	e13ffb17 	ldw	r4,-20(fp)
   4f9e0:	004f2900 	call	4f290 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   4f9e4:	e13ffb17 	ldw	r4,-20(fp)
   4f9e8:	004eb640 	call	4eb64 <alt_avalon_i2c_disable>
    }


    return status;
   4f9ec:	e0bffa17 	ldw	r2,-24(fp)
}
   4f9f0:	e037883a 	mov	sp,fp
   4f9f4:	dfc00117 	ldw	ra,4(sp)
   4f9f8:	df000017 	ldw	fp,0(sp)
   4f9fc:	dec00204 	addi	sp,sp,8
   4fa00:	f800283a 	ret

0004fa04 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   4fa04:	defff604 	addi	sp,sp,-40
   4fa08:	dfc00915 	stw	ra,36(sp)
   4fa0c:	df000815 	stw	fp,32(sp)
   4fa10:	df000804 	addi	fp,sp,32
   4fa14:	e13ffb15 	stw	r4,-20(fp)
   4fa18:	e17ffc15 	stw	r5,-16(fp)
   4fa1c:	e1bffd15 	stw	r6,-12(fp)
   4fa20:	3807883a 	mov	r3,r7
   4fa24:	e0800217 	ldw	r2,8(fp)
   4fa28:	e0fffe05 	stb	r3,-8(fp)
   4fa2c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   4fa30:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   4fa34:	e0bffd17 	ldw	r2,-12(fp)
   4fa38:	1089c424 	muli	r2,r2,10000
   4fa3c:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   4fa40:	e0bffb17 	ldw	r2,-20(fp)
   4fa44:	10800717 	ldw	r2,28(r2)
   4fa48:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   4fa4c:	e0bffd17 	ldw	r2,-12(fp)
   4fa50:	1000021e 	bne	r2,zero,4fa5c <alt_avalon_i2c_master_transmit_using_interrupts+0x58>
    {
      return ALT_AVALON_I2C_SUCCESS;
   4fa54:	0005883a 	mov	r2,zero
   4fa58:	00006706 	br	4fbf8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   4fa5c:	e0bffb17 	ldw	r2,-20(fp)
   4fa60:	10c00617 	ldw	r3,24(r2)
   4fa64:	00800174 	movhi	r2,5
   4fa68:	10b9d404 	addi	r2,r2,-6320
   4fa6c:	18800226 	beq	r3,r2,4fa78 <alt_avalon_i2c_master_transmit_using_interrupts+0x74>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   4fa70:	00bfff44 	movi	r2,-3
   4fa74:	00006006 	br	4fbf8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   4fa78:	e0bffe03 	ldbu	r2,-8(fp)
   4fa7c:	10000a1e 	bne	r2,zero,4faa8 <alt_avalon_i2c_master_transmit_using_interrupts+0xa4>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   4fa80:	e13ffb17 	ldw	r4,-20(fp)
   4fa84:	004eacc0 	call	4eacc <alt_avalon_i2c_enable>
   4fa88:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   4fa8c:	e0bff817 	ldw	r2,-32(fp)
   4fa90:	10000226 	beq	r2,zero,4fa9c <alt_avalon_i2c_master_transmit_using_interrupts+0x98>
      {
        return status;
   4fa94:	e0bff817 	ldw	r2,-32(fp)
   4fa98:	00005706 	br	4fbf8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   4fa9c:	01400704 	movi	r5,28
   4faa0:	e13ffb17 	ldw	r4,-20(fp)
   4faa4:	00500a00 	call	500a0 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   4faa8:	e0bffe03 	ldbu	r2,-8(fp)
   4faac:	100d883a 	mov	r6,r2
   4fab0:	000b883a 	mov	r5,zero
   4fab4:	e13ffb17 	ldw	r4,-20(fp)
   4fab8:	004f1340 	call	4f134 <alt_avalon_i2c_send_address>
   4fabc:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   4fac0:	e0bff817 	ldw	r2,-32(fp)
   4fac4:	1000271e 	bne	r2,zero,4fb64 <alt_avalon_i2c_master_transmit_using_interrupts+0x160>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   4fac8:	00000f06 	br	4fb08 <alt_avalon_i2c_master_transmit_using_interrupts+0x104>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   4facc:	e0bffc17 	ldw	r2,-16(fp)
   4fad0:	10800003 	ldbu	r2,0(r2)
   4fad4:	10803fcc 	andi	r2,r2,255
   4fad8:	000f883a 	mov	r7,zero
   4fadc:	000d883a 	mov	r6,zero
   4fae0:	100b883a 	mov	r5,r2
   4fae4:	e13ffb17 	ldw	r4,-20(fp)
   4fae8:	004f0500 	call	4f050 <alt_avalon_i2c_cmd_write>
   4faec:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   4faf0:	e0bffc17 	ldw	r2,-16(fp)
   4faf4:	10800044 	addi	r2,r2,1
   4faf8:	e0bffc15 	stw	r2,-16(fp)
            --size;
   4fafc:	e0bffd17 	ldw	r2,-12(fp)
   4fb00:	10bfffc4 	addi	r2,r2,-1
   4fb04:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   4fb08:	e0bffd17 	ldw	r2,-12(fp)
   4fb0c:	108000b0 	cmpltui	r2,r2,2
   4fb10:	1000021e 	bne	r2,zero,4fb1c <alt_avalon_i2c_master_transmit_using_interrupts+0x118>
   4fb14:	e0bff817 	ldw	r2,-32(fp)
   4fb18:	103fec26 	beq	r2,zero,4facc <__alt_data_end+0xfffe89cc>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   4fb1c:	e0bff817 	ldw	r2,-32(fp)
   4fb20:	1000101e 	bne	r2,zero,4fb64 <alt_avalon_i2c_master_transmit_using_interrupts+0x160>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   4fb24:	e0bffc17 	ldw	r2,-16(fp)
   4fb28:	10800003 	ldbu	r2,0(r2)
   4fb2c:	10803fcc 	andi	r2,r2,255
   4fb30:	e0ffff03 	ldbu	r3,-4(fp)
   4fb34:	180f883a 	mov	r7,r3
   4fb38:	000d883a 	mov	r6,zero
   4fb3c:	100b883a 	mov	r5,r2
   4fb40:	e13ffb17 	ldw	r4,-20(fp)
   4fb44:	004f0500 	call	4f050 <alt_avalon_i2c_cmd_write>
   4fb48:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   4fb4c:	e0bffc17 	ldw	r2,-16(fp)
   4fb50:	10800044 	addi	r2,r2,1
   4fb54:	e0bffc15 	stw	r2,-16(fp)
            --size;
   4fb58:	e0bffd17 	ldw	r2,-12(fp)
   4fb5c:	10bfffc4 	addi	r2,r2,-1
   4fb60:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   4fb64:	e0bff817 	ldw	r2,-32(fp)
   4fb68:	10001426 	beq	r2,zero,4fbbc <alt_avalon_i2c_master_transmit_using_interrupts+0x1b8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   4fb6c:	00000d06 	br	4fba4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   4fb70:	e0bff917 	ldw	r2,-28(fp)
   4fb74:	108002a8 	cmpgeui	r2,r2,10
   4fb78:	1000021e 	bne	r2,zero,4fb84 <alt_avalon_i2c_master_transmit_using_interrupts+0x180>
   4fb7c:	0109c404 	movi	r4,10000
   4fb80:	0050f080 	call	50f08 <alt_busy_sleep>
            if (--timeout == 0)
   4fb84:	e0bff917 	ldw	r2,-28(fp)
   4fb88:	10bfffc4 	addi	r2,r2,-1
   4fb8c:	e0bff915 	stw	r2,-28(fp)
   4fb90:	e0bff917 	ldw	r2,-28(fp)
   4fb94:	1000031e 	bne	r2,zero,4fba4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   4fb98:	00bfff84 	movi	r2,-2
   4fb9c:	e0bff815 	stw	r2,-32(fp)
               break;
   4fba0:	00000306 	br	4fbb0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1ac>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   4fba4:	e13ffb17 	ldw	r4,-20(fp)
   4fba8:	004eebc0 	call	4eebc <alt_avalon_i2c_is_busy>
   4fbac:	103ff01e 	bne	r2,zero,4fb70 <__alt_data_end+0xfffe8a70>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   4fbb0:	e13ffb17 	ldw	r4,-20(fp)
   4fbb4:	004eb640 	call	4eb64 <alt_avalon_i2c_disable>
   4fbb8:	00000e06 	br	4fbf4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f0>
    }
    else
    {
       if (issue_stop)
   4fbbc:	e0bfff03 	ldbu	r2,-4(fp)
   4fbc0:	10000c26 	beq	r2,zero,4fbf4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f0>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   4fbc4:	01400704 	movi	r5,28
   4fbc8:	e13ffb17 	ldw	r4,-20(fp)
   4fbcc:	00500a00 	call	500a0 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   4fbd0:	000b883a 	mov	r5,zero
   4fbd4:	e13ffb17 	ldw	r4,-20(fp)
   4fbd8:	00502e80 	call	502e8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   4fbdc:	e0bffa17 	ldw	r2,-24(fp)
   4fbe0:	00c00044 	movi	r3,1
   4fbe4:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   4fbe8:	01400044 	movi	r5,1
   4fbec:	e13ffb17 	ldw	r4,-20(fp)
   4fbf0:	00501440 	call	50144 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   4fbf4:	e0bff817 	ldw	r2,-32(fp)
}
   4fbf8:	e037883a 	mov	sp,fp
   4fbfc:	dfc00117 	ldw	ra,4(sp)
   4fc00:	df000017 	ldw	fp,0(sp)
   4fc04:	dec00204 	addi	sp,sp,8
   4fc08:	f800283a 	ret

0004fc0c <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   4fc0c:	defff404 	addi	sp,sp,-48
   4fc10:	dfc00b15 	stw	ra,44(sp)
   4fc14:	df000a15 	stw	fp,40(sp)
   4fc18:	df000a04 	addi	fp,sp,40
   4fc1c:	e13ffb15 	stw	r4,-20(fp)
   4fc20:	e17ffc15 	stw	r5,-16(fp)
   4fc24:	e1bffd15 	stw	r6,-12(fp)
   4fc28:	3807883a 	mov	r3,r7
   4fc2c:	e0800217 	ldw	r2,8(fp)
   4fc30:	e0fffe05 	stb	r3,-8(fp)
   4fc34:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   4fc38:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   4fc3c:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   4fc40:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   4fc44:	e0bffd17 	ldw	r2,-12(fp)
   4fc48:	1000021e 	bne	r2,zero,4fc54 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   4fc4c:	0005883a 	mov	r2,zero
   4fc50:	00006c06 	br	4fe04 <alt_avalon_i2c_master_receive+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   4fc54:	e0bffe03 	ldbu	r2,-8(fp)
   4fc58:	10000a1e 	bne	r2,zero,4fc84 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   4fc5c:	e13ffb17 	ldw	r4,-20(fp)
   4fc60:	004eacc0 	call	4eacc <alt_avalon_i2c_enable>
   4fc64:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   4fc68:	e0bff917 	ldw	r2,-28(fp)
   4fc6c:	10000226 	beq	r2,zero,4fc78 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   4fc70:	e0bff917 	ldw	r2,-28(fp)
   4fc74:	00006306 	br	4fe04 <alt_avalon_i2c_master_receive+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   4fc78:	01400704 	movi	r5,28
   4fc7c:	e13ffb17 	ldw	r4,-20(fp)
   4fc80:	00500a00 	call	500a0 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   4fc84:	e0bffe03 	ldbu	r2,-8(fp)
   4fc88:	100d883a 	mov	r6,r2
   4fc8c:	01400044 	movi	r5,1
   4fc90:	e13ffb17 	ldw	r4,-20(fp)
   4fc94:	004f1340 	call	4f134 <alt_avalon_i2c_send_address>
   4fc98:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   4fc9c:	e0bff917 	ldw	r2,-28(fp)
   4fca0:	1000341e 	bne	r2,zero,4fd74 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   4fca4:	00001906 	br	4fd0c <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   4fca8:	000f883a 	mov	r7,zero
   4fcac:	000d883a 	mov	r6,zero
   4fcb0:	000b883a 	mov	r5,zero
   4fcb4:	e13ffb17 	ldw	r4,-20(fp)
   4fcb8:	004f0500 	call	4f050 <alt_avalon_i2c_cmd_write>
   4fcbc:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   4fcc0:	e0bff817 	ldw	r2,-32(fp)
   4fcc4:	10800044 	addi	r2,r2,1
   4fcc8:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   4fccc:	e0bff917 	ldw	r2,-28(fp)
   4fcd0:	10000e1e 	bne	r2,zero,4fd0c <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   4fcd4:	e0bffa04 	addi	r2,fp,-24
   4fcd8:	100f883a 	mov	r7,r2
   4fcdc:	000d883a 	mov	r6,zero
   4fce0:	e17ffc17 	ldw	r5,-16(fp)
   4fce4:	e13ffb17 	ldw	r4,-20(fp)
   4fce8:	004ef000 	call	4ef00 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   4fcec:	e0bffa17 	ldw	r2,-24(fp)
   4fcf0:	e0fffc17 	ldw	r3,-16(fp)
   4fcf4:	1885883a 	add	r2,r3,r2
   4fcf8:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   4fcfc:	e0bffa17 	ldw	r2,-24(fp)
   4fd00:	e0fff717 	ldw	r3,-36(fp)
   4fd04:	1885883a 	add	r2,r3,r2
   4fd08:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   4fd0c:	e0bffd17 	ldw	r2,-12(fp)
   4fd10:	10bfffc4 	addi	r2,r2,-1
   4fd14:	e0fff817 	ldw	r3,-32(fp)
   4fd18:	1880022e 	bgeu	r3,r2,4fd24 <alt_avalon_i2c_master_receive+0x118>
   4fd1c:	e0bff917 	ldw	r2,-28(fp)
   4fd20:	103fe126 	beq	r2,zero,4fca8 <__alt_data_end+0xfffe8ba8>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   4fd24:	e0bff917 	ldw	r2,-28(fp)
   4fd28:	1000121e 	bne	r2,zero,4fd74 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   4fd2c:	e0bfff03 	ldbu	r2,-4(fp)
   4fd30:	100f883a 	mov	r7,r2
   4fd34:	000d883a 	mov	r6,zero
   4fd38:	000b883a 	mov	r5,zero
   4fd3c:	e13ffb17 	ldw	r4,-20(fp)
   4fd40:	004f0500 	call	4f050 <alt_avalon_i2c_cmd_write>
   4fd44:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   4fd48:	00000a06 	br	4fd74 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   4fd4c:	e17ffc17 	ldw	r5,-16(fp)
   4fd50:	e13ffb17 	ldw	r4,-20(fp)
   4fd54:	004efa80 	call	4efa8 <alt_avalon_i2c_rx_read>
   4fd58:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   4fd5c:	e0bffc17 	ldw	r2,-16(fp)
   4fd60:	10800044 	addi	r2,r2,1
   4fd64:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   4fd68:	e0bff717 	ldw	r2,-36(fp)
   4fd6c:	10800044 	addi	r2,r2,1
   4fd70:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   4fd74:	e0fff717 	ldw	r3,-36(fp)
   4fd78:	e0bffd17 	ldw	r2,-12(fp)
   4fd7c:	1880022e 	bgeu	r3,r2,4fd88 <alt_avalon_i2c_master_receive+0x17c>
   4fd80:	e0bff917 	ldw	r2,-28(fp)
   4fd84:	103ff126 	beq	r2,zero,4fd4c <__alt_data_end+0xfffe8c4c>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   4fd88:	e0bfff03 	ldbu	r2,-4(fp)
   4fd8c:	1000021e 	bne	r2,zero,4fd98 <alt_avalon_i2c_master_receive+0x18c>
   4fd90:	e0bff917 	ldw	r2,-28(fp)
   4fd94:	10001a26 	beq	r2,zero,4fe00 <alt_avalon_i2c_master_receive+0x1f4>
    {
        timeout=10000 * size;
   4fd98:	e0bffd17 	ldw	r2,-12(fp)
   4fd9c:	1089c424 	muli	r2,r2,10000
   4fda0:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   4fda4:	00000d06 	br	4fddc <alt_avalon_i2c_master_receive+0x1d0>
        {
            if (timeout<10) alt_busy_sleep(10000);
   4fda8:	e0bff617 	ldw	r2,-40(fp)
   4fdac:	108002a8 	cmpgeui	r2,r2,10
   4fdb0:	1000021e 	bne	r2,zero,4fdbc <alt_avalon_i2c_master_receive+0x1b0>
   4fdb4:	0109c404 	movi	r4,10000
   4fdb8:	0050f080 	call	50f08 <alt_busy_sleep>
            if (--timeout == 0)
   4fdbc:	e0bff617 	ldw	r2,-40(fp)
   4fdc0:	10bfffc4 	addi	r2,r2,-1
   4fdc4:	e0bff615 	stw	r2,-40(fp)
   4fdc8:	e0bff617 	ldw	r2,-40(fp)
   4fdcc:	1000031e 	bne	r2,zero,4fddc <alt_avalon_i2c_master_receive+0x1d0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   4fdd0:	00bfff84 	movi	r2,-2
   4fdd4:	e0bff915 	stw	r2,-28(fp)
               break;
   4fdd8:	00000306 	br	4fde8 <alt_avalon_i2c_master_receive+0x1dc>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   4fddc:	e13ffb17 	ldw	r4,-20(fp)
   4fde0:	004eebc0 	call	4eebc <alt_avalon_i2c_is_busy>
   4fde4:	103ff01e 	bne	r2,zero,4fda8 <__alt_data_end+0xfffe8ca8>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   4fde8:	e0bff904 	addi	r2,fp,-28
   4fdec:	100b883a 	mov	r5,r2
   4fdf0:	e13ffb17 	ldw	r4,-20(fp)
   4fdf4:	004f2900 	call	4f290 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   4fdf8:	e13ffb17 	ldw	r4,-20(fp)
   4fdfc:	004eb640 	call	4eb64 <alt_avalon_i2c_disable>
    }

    return status;
   4fe00:	e0bff917 	ldw	r2,-28(fp)
}
   4fe04:	e037883a 	mov	sp,fp
   4fe08:	dfc00117 	ldw	ra,4(sp)
   4fe0c:	df000017 	ldw	fp,0(sp)
   4fe10:	dec00204 	addi	sp,sp,8
   4fe14:	f800283a 	ret

0004fe18 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   4fe18:	defff504 	addi	sp,sp,-44
   4fe1c:	dfc00a15 	stw	ra,40(sp)
   4fe20:	df000915 	stw	fp,36(sp)
   4fe24:	df000904 	addi	fp,sp,36
   4fe28:	e13ffb15 	stw	r4,-20(fp)
   4fe2c:	e17ffc15 	stw	r5,-16(fp)
   4fe30:	e1bffd15 	stw	r6,-12(fp)
   4fe34:	3807883a 	mov	r3,r7
   4fe38:	e0800217 	ldw	r2,8(fp)
   4fe3c:	e0fffe05 	stb	r3,-8(fp)
   4fe40:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   4fe44:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   4fe48:	e0bffb17 	ldw	r2,-20(fp)
   4fe4c:	10800717 	ldw	r2,28(r2)
   4fe50:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   4fe54:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   4fe58:	e0bffd17 	ldw	r2,-12(fp)
   4fe5c:	1000021e 	bne	r2,zero,4fe68 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   4fe60:	0005883a 	mov	r2,zero
   4fe64:	00006206 	br	4fff0 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   4fe68:	e0bffb17 	ldw	r2,-20(fp)
   4fe6c:	10c00617 	ldw	r3,24(r2)
   4fe70:	00800174 	movhi	r2,5
   4fe74:	10b9d404 	addi	r2,r2,-6320
   4fe78:	18800226 	beq	r3,r2,4fe84 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   4fe7c:	00bfff44 	movi	r2,-3
   4fe80:	00005b06 	br	4fff0 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   4fe84:	e0bffe03 	ldbu	r2,-8(fp)
   4fe88:	10000a1e 	bne	r2,zero,4feb4 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   4fe8c:	e13ffb17 	ldw	r4,-20(fp)
   4fe90:	004eacc0 	call	4eacc <alt_avalon_i2c_enable>
   4fe94:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   4fe98:	e0bff717 	ldw	r2,-36(fp)
   4fe9c:	10000226 	beq	r2,zero,4fea8 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   4fea0:	e0bff717 	ldw	r2,-36(fp)
   4fea4:	00005206 	br	4fff0 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   4fea8:	01400704 	movi	r5,28
   4feac:	e13ffb17 	ldw	r4,-20(fp)
   4feb0:	00500a00 	call	500a0 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   4feb4:	e0bffe03 	ldbu	r2,-8(fp)
   4feb8:	100d883a 	mov	r6,r2
   4febc:	01400044 	movi	r5,1
   4fec0:	e13ffb17 	ldw	r4,-20(fp)
   4fec4:	004f1340 	call	4f134 <alt_avalon_i2c_send_address>
   4fec8:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   4fecc:	e0bff717 	ldw	r2,-36(fp)
   4fed0:	1000191e 	bne	r2,zero,4ff38 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   4fed4:	00000906 	br	4fefc <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   4fed8:	000f883a 	mov	r7,zero
   4fedc:	000d883a 	mov	r6,zero
   4fee0:	000b883a 	mov	r5,zero
   4fee4:	e13ffb17 	ldw	r4,-20(fp)
   4fee8:	004f0500 	call	4f050 <alt_avalon_i2c_cmd_write>
   4feec:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   4fef0:	e0bff917 	ldw	r2,-28(fp)
   4fef4:	10800044 	addi	r2,r2,1
   4fef8:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   4fefc:	e0bffd17 	ldw	r2,-12(fp)
   4ff00:	10bfffc4 	addi	r2,r2,-1
   4ff04:	e0fff917 	ldw	r3,-28(fp)
   4ff08:	1880022e 	bgeu	r3,r2,4ff14 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   4ff0c:	e0bff717 	ldw	r2,-36(fp)
   4ff10:	103ff126 	beq	r2,zero,4fed8 <__alt_data_end+0xfffe8dd8>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   4ff14:	e0bff717 	ldw	r2,-36(fp)
   4ff18:	1000071e 	bne	r2,zero,4ff38 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   4ff1c:	e0bfff03 	ldbu	r2,-4(fp)
   4ff20:	100f883a 	mov	r7,r2
   4ff24:	000d883a 	mov	r6,zero
   4ff28:	000b883a 	mov	r5,zero
   4ff2c:	e13ffb17 	ldw	r4,-20(fp)
   4ff30:	004f0500 	call	4f050 <alt_avalon_i2c_cmd_write>
   4ff34:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   4ff38:	e0bff717 	ldw	r2,-36(fp)
   4ff3c:	10001726 	beq	r2,zero,4ff9c <alt_avalon_i2c_master_receive_using_interrupts+0x184>
    {
        timeout=10000 * size;
   4ff40:	e0bffd17 	ldw	r2,-12(fp)
   4ff44:	1089c424 	muli	r2,r2,10000
   4ff48:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   4ff4c:	00000d06 	br	4ff84 <alt_avalon_i2c_master_receive_using_interrupts+0x16c>
        {
            if (timeout<10) alt_busy_sleep(10000);
   4ff50:	e0bff817 	ldw	r2,-32(fp)
   4ff54:	108002a8 	cmpgeui	r2,r2,10
   4ff58:	1000021e 	bne	r2,zero,4ff64 <alt_avalon_i2c_master_receive_using_interrupts+0x14c>
   4ff5c:	0109c404 	movi	r4,10000
   4ff60:	0050f080 	call	50f08 <alt_busy_sleep>
            if (--timeout == 0)
   4ff64:	e0bff817 	ldw	r2,-32(fp)
   4ff68:	10bfffc4 	addi	r2,r2,-1
   4ff6c:	e0bff815 	stw	r2,-32(fp)
   4ff70:	e0bff817 	ldw	r2,-32(fp)
   4ff74:	1000031e 	bne	r2,zero,4ff84 <alt_avalon_i2c_master_receive_using_interrupts+0x16c>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   4ff78:	00bfff84 	movi	r2,-2
   4ff7c:	e0bff715 	stw	r2,-36(fp)
               break;
   4ff80:	00000306 	br	4ff90 <alt_avalon_i2c_master_receive_using_interrupts+0x178>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   4ff84:	e13ffb17 	ldw	r4,-20(fp)
   4ff88:	004eebc0 	call	4eebc <alt_avalon_i2c_is_busy>
   4ff8c:	103ff01e 	bne	r2,zero,4ff50 <__alt_data_end+0xfffe8e50>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   4ff90:	e13ffb17 	ldw	r4,-20(fp)
   4ff94:	004eb640 	call	4eb64 <alt_avalon_i2c_disable>
   4ff98:	00001406 	br	4ffec <alt_avalon_i2c_master_receive_using_interrupts+0x1d4>
    }
    else
    {
       if (issue_stop)
   4ff9c:	e0bfff03 	ldbu	r2,-4(fp)
   4ffa0:	10001226 	beq	r2,zero,4ffec <alt_avalon_i2c_master_receive_using_interrupts+0x1d4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   4ffa4:	01400704 	movi	r5,28
   4ffa8:	e13ffb17 	ldw	r4,-20(fp)
   4ffac:	00500a00 	call	500a0 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   4ffb0:	000b883a 	mov	r5,zero
   4ffb4:	e13ffb17 	ldw	r4,-20(fp)
   4ffb8:	00502380 	call	50238 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   4ffbc:	e0bffa17 	ldw	r2,-24(fp)
   4ffc0:	00c00084 	movi	r3,2
   4ffc4:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   4ffc8:	e0bffa17 	ldw	r2,-24(fp)
   4ffcc:	e0fffc17 	ldw	r3,-16(fp)
   4ffd0:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   4ffd4:	e0bffa17 	ldw	r2,-24(fp)
   4ffd8:	e0fffd17 	ldw	r3,-12(fp)
   4ffdc:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   4ffe0:	01400084 	movi	r5,2
   4ffe4:	e13ffb17 	ldw	r4,-20(fp)
   4ffe8:	00501440 	call	50144 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   4ffec:	e0bff717 	ldw	r2,-36(fp)
}
   4fff0:	e037883a 	mov	sp,fp
   4fff4:	dfc00117 	ldw	ra,4(sp)
   4fff8:	df000017 	ldw	fp,0(sp)
   4fffc:	dec00204 	addi	sp,sp,8
   50000:	f800283a 	ret

00050004 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   50004:	defffd04 	addi	sp,sp,-12
   50008:	df000215 	stw	fp,8(sp)
   5000c:	df000204 	addi	fp,sp,8
   50010:	e13ffe15 	stw	r4,-8(fp)
   50014:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   50018:	e0bffe17 	ldw	r2,-8(fp)
   5001c:	10800317 	ldw	r2,12(r2)
   50020:	10800404 	addi	r2,r2,16
   50024:	10c00037 	ldwio	r3,0(r2)
   50028:	e0bffe17 	ldw	r2,-8(fp)
   5002c:	10800317 	ldw	r2,12(r2)
   50030:	10800304 	addi	r2,r2,12
   50034:	10800037 	ldwio	r2,0(r2)
   50038:	1884703a 	and	r2,r3,r2
   5003c:	1007883a 	mov	r3,r2
   50040:	e0bfff17 	ldw	r2,-4(fp)
   50044:	10c00015 	stw	r3,0(r2)
}
   50048:	0001883a 	nop
   5004c:	e037883a 	mov	sp,fp
   50050:	df000017 	ldw	fp,0(sp)
   50054:	dec00104 	addi	sp,sp,4
   50058:	f800283a 	ret

0005005c <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   5005c:	defffd04 	addi	sp,sp,-12
   50060:	df000215 	stw	fp,8(sp)
   50064:	df000204 	addi	fp,sp,8
   50068:	e13ffe15 	stw	r4,-8(fp)
   5006c:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   50070:	e0bffe17 	ldw	r2,-8(fp)
   50074:	10800317 	ldw	r2,12(r2)
   50078:	10800404 	addi	r2,r2,16
   5007c:	10800037 	ldwio	r2,0(r2)
   50080:	1007883a 	mov	r3,r2
   50084:	e0bfff17 	ldw	r2,-4(fp)
   50088:	10c00015 	stw	r3,0(r2)
}
   5008c:	0001883a 	nop
   50090:	e037883a 	mov	sp,fp
   50094:	df000017 	ldw	fp,0(sp)
   50098:	dec00104 	addi	sp,sp,4
   5009c:	f800283a 	ret

000500a0 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   500a0:	defffd04 	addi	sp,sp,-12
   500a4:	df000215 	stw	fp,8(sp)
   500a8:	df000204 	addi	fp,sp,8
   500ac:	e13ffe15 	stw	r4,-8(fp)
   500b0:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   500b4:	e0bffe17 	ldw	r2,-8(fp)
   500b8:	10800317 	ldw	r2,12(r2)
   500bc:	10800404 	addi	r2,r2,16
   500c0:	e0ffff17 	ldw	r3,-4(fp)
   500c4:	10c00035 	stwio	r3,0(r2)
}
   500c8:	0001883a 	nop
   500cc:	e037883a 	mov	sp,fp
   500d0:	df000017 	ldw	fp,0(sp)
   500d4:	dec00104 	addi	sp,sp,4
   500d8:	f800283a 	ret

000500dc <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   500dc:	defffb04 	addi	sp,sp,-20
   500e0:	dfc00415 	stw	ra,16(sp)
   500e4:	df000315 	stw	fp,12(sp)
   500e8:	df000304 	addi	fp,sp,12
   500ec:	e13ffe15 	stw	r4,-8(fp)
   500f0:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   500f4:	e17ffd04 	addi	r5,fp,-12
   500f8:	e13ffe17 	ldw	r4,-8(fp)
   500fc:	00501a80 	call	501a8 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   50100:	e0bfff17 	ldw	r2,-4(fp)
   50104:	0086303a 	nor	r3,zero,r2
   50108:	e0bffd17 	ldw	r2,-12(fp)
   5010c:	1884703a 	and	r2,r3,r2
   50110:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   50114:	e0bffe17 	ldw	r2,-8(fp)
   50118:	10800317 	ldw	r2,12(r2)
   5011c:	10800304 	addi	r2,r2,12
   50120:	e0fffd17 	ldw	r3,-12(fp)
   50124:	18c007cc 	andi	r3,r3,31
   50128:	10c00035 	stwio	r3,0(r2)
}
   5012c:	0001883a 	nop
   50130:	e037883a 	mov	sp,fp
   50134:	dfc00117 	ldw	ra,4(sp)
   50138:	df000017 	ldw	fp,0(sp)
   5013c:	dec00204 	addi	sp,sp,8
   50140:	f800283a 	ret

00050144 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   50144:	defffb04 	addi	sp,sp,-20
   50148:	dfc00415 	stw	ra,16(sp)
   5014c:	df000315 	stw	fp,12(sp)
   50150:	df000304 	addi	fp,sp,12
   50154:	e13ffe15 	stw	r4,-8(fp)
   50158:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   5015c:	e17ffd04 	addi	r5,fp,-12
   50160:	e13ffe17 	ldw	r4,-8(fp)
   50164:	00501a80 	call	501a8 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   50168:	e0fffd17 	ldw	r3,-12(fp)
   5016c:	e0bfff17 	ldw	r2,-4(fp)
   50170:	1884b03a 	or	r2,r3,r2
   50174:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   50178:	e0bffe17 	ldw	r2,-8(fp)
   5017c:	10800317 	ldw	r2,12(r2)
   50180:	10800304 	addi	r2,r2,12
   50184:	e0fffd17 	ldw	r3,-12(fp)
   50188:	18c007cc 	andi	r3,r3,31
   5018c:	10c00035 	stwio	r3,0(r2)
}
   50190:	0001883a 	nop
   50194:	e037883a 	mov	sp,fp
   50198:	dfc00117 	ldw	ra,4(sp)
   5019c:	df000017 	ldw	fp,0(sp)
   501a0:	dec00204 	addi	sp,sp,8
   501a4:	f800283a 	ret

000501a8 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   501a8:	defffd04 	addi	sp,sp,-12
   501ac:	df000215 	stw	fp,8(sp)
   501b0:	df000204 	addi	fp,sp,8
   501b4:	e13ffe15 	stw	r4,-8(fp)
   501b8:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   501bc:	e0bffe17 	ldw	r2,-8(fp)
   501c0:	10800317 	ldw	r2,12(r2)
   501c4:	10800304 	addi	r2,r2,12
   501c8:	10800037 	ldwio	r2,0(r2)
   501cc:	10c007cc 	andi	r3,r2,31
   501d0:	e0bfff17 	ldw	r2,-4(fp)
   501d4:	10c00015 	stw	r3,0(r2)
}
   501d8:	0001883a 	nop
   501dc:	e037883a 	mov	sp,fp
   501e0:	df000017 	ldw	fp,0(sp)
   501e4:	dec00104 	addi	sp,sp,4
   501e8:	f800283a 	ret

000501ec <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   501ec:	defffd04 	addi	sp,sp,-12
   501f0:	df000215 	stw	fp,8(sp)
   501f4:	df000204 	addi	fp,sp,8
   501f8:	e13ffe15 	stw	r4,-8(fp)
   501fc:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   50200:	e0bffe17 	ldw	r2,-8(fp)
   50204:	10800317 	ldw	r2,12(r2)
   50208:	10800204 	addi	r2,r2,8
   5020c:	10800037 	ldwio	r2,0(r2)
   50210:	10800c0c 	andi	r2,r2,48
   50214:	1005d13a 	srai	r2,r2,4
   50218:	1007883a 	mov	r3,r2
   5021c:	e0bfff17 	ldw	r2,-4(fp)
   50220:	10c00015 	stw	r3,0(r2)
}
   50224:	0001883a 	nop
   50228:	e037883a 	mov	sp,fp
   5022c:	df000017 	ldw	fp,0(sp)
   50230:	dec00104 	addi	sp,sp,4
   50234:	f800283a 	ret

00050238 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   50238:	defffd04 	addi	sp,sp,-12
   5023c:	df000215 	stw	fp,8(sp)
   50240:	df000204 	addi	fp,sp,8
   50244:	e13ffe15 	stw	r4,-8(fp)
   50248:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   5024c:	e0bffe17 	ldw	r2,-8(fp)
   50250:	10800317 	ldw	r2,12(r2)
   50254:	10800204 	addi	r2,r2,8
   50258:	e0fffe17 	ldw	r3,-8(fp)
   5025c:	18c00317 	ldw	r3,12(r3)
   50260:	18c00204 	addi	r3,r3,8
   50264:	18c00037 	ldwio	r3,0(r3)
   50268:	1809883a 	mov	r4,r3
   5026c:	00fff3c4 	movi	r3,-49
   50270:	20c8703a 	and	r4,r4,r3
   50274:	e0ffff17 	ldw	r3,-4(fp)
   50278:	1806913a 	slli	r3,r3,4
   5027c:	18c00c0c 	andi	r3,r3,48
   50280:	20c6b03a 	or	r3,r4,r3
   50284:	10c00035 	stwio	r3,0(r2)
}
   50288:	0001883a 	nop
   5028c:	e037883a 	mov	sp,fp
   50290:	df000017 	ldw	fp,0(sp)
   50294:	dec00104 	addi	sp,sp,4
   50298:	f800283a 	ret

0005029c <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   5029c:	defffd04 	addi	sp,sp,-12
   502a0:	df000215 	stw	fp,8(sp)
   502a4:	df000204 	addi	fp,sp,8
   502a8:	e13ffe15 	stw	r4,-8(fp)
   502ac:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   502b0:	e0bffe17 	ldw	r2,-8(fp)
   502b4:	10800317 	ldw	r2,12(r2)
   502b8:	10800204 	addi	r2,r2,8
   502bc:	10800037 	ldwio	r2,0(r2)
   502c0:	1080030c 	andi	r2,r2,12
   502c4:	1005d0ba 	srai	r2,r2,2
   502c8:	1007883a 	mov	r3,r2
   502cc:	e0bfff17 	ldw	r2,-4(fp)
   502d0:	10c00015 	stw	r3,0(r2)
}
   502d4:	0001883a 	nop
   502d8:	e037883a 	mov	sp,fp
   502dc:	df000017 	ldw	fp,0(sp)
   502e0:	dec00104 	addi	sp,sp,4
   502e4:	f800283a 	ret

000502e8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   502e8:	defffd04 	addi	sp,sp,-12
   502ec:	df000215 	stw	fp,8(sp)
   502f0:	df000204 	addi	fp,sp,8
   502f4:	e13ffe15 	stw	r4,-8(fp)
   502f8:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   502fc:	e0bffe17 	ldw	r2,-8(fp)
   50300:	10800317 	ldw	r2,12(r2)
   50304:	10c00204 	addi	r3,r2,8
   50308:	e0bffe17 	ldw	r2,-8(fp)
   5030c:	10800317 	ldw	r2,12(r2)
   50310:	10800204 	addi	r2,r2,8
   50314:	10800037 	ldwio	r2,0(r2)
   50318:	1009883a 	mov	r4,r2
   5031c:	00bffcc4 	movi	r2,-13
   50320:	2088703a 	and	r4,r4,r2
   50324:	e0bfff17 	ldw	r2,-4(fp)
   50328:	1085883a 	add	r2,r2,r2
   5032c:	1085883a 	add	r2,r2,r2
   50330:	1080030c 	andi	r2,r2,12
   50334:	2084b03a 	or	r2,r4,r2
   50338:	18800035 	stwio	r2,0(r3)
}
   5033c:	0001883a 	nop
   50340:	e037883a 	mov	sp,fp
   50344:	df000017 	ldw	fp,0(sp)
   50348:	dec00104 	addi	sp,sp,4
   5034c:	f800283a 	ret

00050350 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   50350:	defffa04 	addi	sp,sp,-24
   50354:	dfc00515 	stw	ra,20(sp)
   50358:	df000415 	stw	fp,16(sp)
   5035c:	df000404 	addi	fp,sp,16
   50360:	e13ffd15 	stw	r4,-12(fp)
   50364:	e17ffe15 	stw	r5,-8(fp)
   50368:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   5036c:	e0bffd17 	ldw	r2,-12(fp)
   50370:	10800017 	ldw	r2,0(r2)
   50374:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   50378:	e0bffc17 	ldw	r2,-16(fp)
   5037c:	10c00a04 	addi	r3,r2,40
   50380:	e0bffd17 	ldw	r2,-12(fp)
   50384:	10800217 	ldw	r2,8(r2)
   50388:	100f883a 	mov	r7,r2
   5038c:	e1bfff17 	ldw	r6,-4(fp)
   50390:	e17ffe17 	ldw	r5,-8(fp)
   50394:	1809883a 	mov	r4,r3
   50398:	00509880 	call	50988 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   5039c:	e037883a 	mov	sp,fp
   503a0:	dfc00117 	ldw	ra,4(sp)
   503a4:	df000017 	ldw	fp,0(sp)
   503a8:	dec00204 	addi	sp,sp,8
   503ac:	f800283a 	ret

000503b0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   503b0:	defffa04 	addi	sp,sp,-24
   503b4:	dfc00515 	stw	ra,20(sp)
   503b8:	df000415 	stw	fp,16(sp)
   503bc:	df000404 	addi	fp,sp,16
   503c0:	e13ffd15 	stw	r4,-12(fp)
   503c4:	e17ffe15 	stw	r5,-8(fp)
   503c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   503cc:	e0bffd17 	ldw	r2,-12(fp)
   503d0:	10800017 	ldw	r2,0(r2)
   503d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   503d8:	e0bffc17 	ldw	r2,-16(fp)
   503dc:	10c00a04 	addi	r3,r2,40
   503e0:	e0bffd17 	ldw	r2,-12(fp)
   503e4:	10800217 	ldw	r2,8(r2)
   503e8:	100f883a 	mov	r7,r2
   503ec:	e1bfff17 	ldw	r6,-4(fp)
   503f0:	e17ffe17 	ldw	r5,-8(fp)
   503f4:	1809883a 	mov	r4,r3
   503f8:	0050ba40 	call	50ba4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   503fc:	e037883a 	mov	sp,fp
   50400:	dfc00117 	ldw	ra,4(sp)
   50404:	df000017 	ldw	fp,0(sp)
   50408:	dec00204 	addi	sp,sp,8
   5040c:	f800283a 	ret

00050410 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   50410:	defffc04 	addi	sp,sp,-16
   50414:	dfc00315 	stw	ra,12(sp)
   50418:	df000215 	stw	fp,8(sp)
   5041c:	df000204 	addi	fp,sp,8
   50420:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   50424:	e0bfff17 	ldw	r2,-4(fp)
   50428:	10800017 	ldw	r2,0(r2)
   5042c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   50430:	e0bffe17 	ldw	r2,-8(fp)
   50434:	10c00a04 	addi	r3,r2,40
   50438:	e0bfff17 	ldw	r2,-4(fp)
   5043c:	10800217 	ldw	r2,8(r2)
   50440:	100b883a 	mov	r5,r2
   50444:	1809883a 	mov	r4,r3
   50448:	00508300 	call	50830 <altera_avalon_jtag_uart_close>
}
   5044c:	e037883a 	mov	sp,fp
   50450:	dfc00117 	ldw	ra,4(sp)
   50454:	df000017 	ldw	fp,0(sp)
   50458:	dec00204 	addi	sp,sp,8
   5045c:	f800283a 	ret

00050460 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   50460:	defffa04 	addi	sp,sp,-24
   50464:	dfc00515 	stw	ra,20(sp)
   50468:	df000415 	stw	fp,16(sp)
   5046c:	df000404 	addi	fp,sp,16
   50470:	e13ffd15 	stw	r4,-12(fp)
   50474:	e17ffe15 	stw	r5,-8(fp)
   50478:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   5047c:	e0bffd17 	ldw	r2,-12(fp)
   50480:	10800017 	ldw	r2,0(r2)
   50484:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   50488:	e0bffc17 	ldw	r2,-16(fp)
   5048c:	10800a04 	addi	r2,r2,40
   50490:	e1bfff17 	ldw	r6,-4(fp)
   50494:	e17ffe17 	ldw	r5,-8(fp)
   50498:	1009883a 	mov	r4,r2
   5049c:	00508980 	call	50898 <altera_avalon_jtag_uart_ioctl>
}
   504a0:	e037883a 	mov	sp,fp
   504a4:	dfc00117 	ldw	ra,4(sp)
   504a8:	df000017 	ldw	fp,0(sp)
   504ac:	dec00204 	addi	sp,sp,8
   504b0:	f800283a 	ret

000504b4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   504b4:	defffa04 	addi	sp,sp,-24
   504b8:	dfc00515 	stw	ra,20(sp)
   504bc:	df000415 	stw	fp,16(sp)
   504c0:	df000404 	addi	fp,sp,16
   504c4:	e13ffd15 	stw	r4,-12(fp)
   504c8:	e17ffe15 	stw	r5,-8(fp)
   504cc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   504d0:	e0bffd17 	ldw	r2,-12(fp)
   504d4:	00c00044 	movi	r3,1
   504d8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   504dc:	e0bffd17 	ldw	r2,-12(fp)
   504e0:	10800017 	ldw	r2,0(r2)
   504e4:	10800104 	addi	r2,r2,4
   504e8:	1007883a 	mov	r3,r2
   504ec:	e0bffd17 	ldw	r2,-12(fp)
   504f0:	10800817 	ldw	r2,32(r2)
   504f4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   504f8:	e0bffe17 	ldw	r2,-8(fp)
   504fc:	e0ffff17 	ldw	r3,-4(fp)
   50500:	d8000015 	stw	zero,0(sp)
   50504:	e1fffd17 	ldw	r7,-12(fp)
   50508:	01800174 	movhi	r6,5
   5050c:	31815f04 	addi	r6,r6,1404
   50510:	180b883a 	mov	r5,r3
   50514:	1009883a 	mov	r4,r2
   50518:	00513200 	call	51320 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   5051c:	e0bffd17 	ldw	r2,-12(fp)
   50520:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   50524:	e0bffd17 	ldw	r2,-12(fp)
   50528:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   5052c:	00800174 	movhi	r2,5
   50530:	1097e704 	addi	r2,r2,24476
   50534:	10800017 	ldw	r2,0(r2)
   50538:	e1fffd17 	ldw	r7,-12(fp)
   5053c:	01800174 	movhi	r6,5
   50540:	3181e204 	addi	r6,r6,1928
   50544:	100b883a 	mov	r5,r2
   50548:	1809883a 	mov	r4,r3
   5054c:	0050dc80 	call	50dc8 <alt_alarm_start>
   50550:	1000040e 	bge	r2,zero,50564 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   50554:	e0fffd17 	ldw	r3,-12(fp)
   50558:	00a00034 	movhi	r2,32768
   5055c:	10bfffc4 	addi	r2,r2,-1
   50560:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   50564:	0001883a 	nop
   50568:	e037883a 	mov	sp,fp
   5056c:	dfc00117 	ldw	ra,4(sp)
   50570:	df000017 	ldw	fp,0(sp)
   50574:	dec00204 	addi	sp,sp,8
   50578:	f800283a 	ret

0005057c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   5057c:	defff804 	addi	sp,sp,-32
   50580:	df000715 	stw	fp,28(sp)
   50584:	df000704 	addi	fp,sp,28
   50588:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   5058c:	e0bfff17 	ldw	r2,-4(fp)
   50590:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   50594:	e0bffb17 	ldw	r2,-20(fp)
   50598:	10800017 	ldw	r2,0(r2)
   5059c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   505a0:	e0bffc17 	ldw	r2,-16(fp)
   505a4:	10800104 	addi	r2,r2,4
   505a8:	10800037 	ldwio	r2,0(r2)
   505ac:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   505b0:	e0bffd17 	ldw	r2,-12(fp)
   505b4:	1080c00c 	andi	r2,r2,768
   505b8:	10006d26 	beq	r2,zero,50770 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   505bc:	e0bffd17 	ldw	r2,-12(fp)
   505c0:	1080400c 	andi	r2,r2,256
   505c4:	10003526 	beq	r2,zero,5069c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   505c8:	00800074 	movhi	r2,1
   505cc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   505d0:	e0bffb17 	ldw	r2,-20(fp)
   505d4:	10800a17 	ldw	r2,40(r2)
   505d8:	10800044 	addi	r2,r2,1
   505dc:	1081ffcc 	andi	r2,r2,2047
   505e0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   505e4:	e0bffb17 	ldw	r2,-20(fp)
   505e8:	10c00b17 	ldw	r3,44(r2)
   505ec:	e0bffe17 	ldw	r2,-8(fp)
   505f0:	18801526 	beq	r3,r2,50648 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   505f4:	e0bffc17 	ldw	r2,-16(fp)
   505f8:	10800037 	ldwio	r2,0(r2)
   505fc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   50600:	e0bff917 	ldw	r2,-28(fp)
   50604:	10a0000c 	andi	r2,r2,32768
   50608:	10001126 	beq	r2,zero,50650 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   5060c:	e0bffb17 	ldw	r2,-20(fp)
   50610:	10800a17 	ldw	r2,40(r2)
   50614:	e0fff917 	ldw	r3,-28(fp)
   50618:	1809883a 	mov	r4,r3
   5061c:	e0fffb17 	ldw	r3,-20(fp)
   50620:	1885883a 	add	r2,r3,r2
   50624:	10800e04 	addi	r2,r2,56
   50628:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   5062c:	e0bffb17 	ldw	r2,-20(fp)
   50630:	10800a17 	ldw	r2,40(r2)
   50634:	10800044 	addi	r2,r2,1
   50638:	10c1ffcc 	andi	r3,r2,2047
   5063c:	e0bffb17 	ldw	r2,-20(fp)
   50640:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   50644:	003fe206 	br	505d0 <__alt_data_end+0xfffe94d0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   50648:	0001883a 	nop
   5064c:	00000106 	br	50654 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   50650:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   50654:	e0bff917 	ldw	r2,-28(fp)
   50658:	10bfffec 	andhi	r2,r2,65535
   5065c:	10000f26 	beq	r2,zero,5069c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   50660:	e0bffb17 	ldw	r2,-20(fp)
   50664:	10c00817 	ldw	r3,32(r2)
   50668:	00bfff84 	movi	r2,-2
   5066c:	1886703a 	and	r3,r3,r2
   50670:	e0bffb17 	ldw	r2,-20(fp)
   50674:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   50678:	e0bffc17 	ldw	r2,-16(fp)
   5067c:	10800104 	addi	r2,r2,4
   50680:	1007883a 	mov	r3,r2
   50684:	e0bffb17 	ldw	r2,-20(fp)
   50688:	10800817 	ldw	r2,32(r2)
   5068c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   50690:	e0bffc17 	ldw	r2,-16(fp)
   50694:	10800104 	addi	r2,r2,4
   50698:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   5069c:	e0bffd17 	ldw	r2,-12(fp)
   506a0:	1080800c 	andi	r2,r2,512
   506a4:	103fbe26 	beq	r2,zero,505a0 <__alt_data_end+0xfffe94a0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   506a8:	e0bffd17 	ldw	r2,-12(fp)
   506ac:	1004d43a 	srli	r2,r2,16
   506b0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   506b4:	00001406 	br	50708 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   506b8:	e0bffc17 	ldw	r2,-16(fp)
   506bc:	e0fffb17 	ldw	r3,-20(fp)
   506c0:	18c00d17 	ldw	r3,52(r3)
   506c4:	e13ffb17 	ldw	r4,-20(fp)
   506c8:	20c7883a 	add	r3,r4,r3
   506cc:	18c20e04 	addi	r3,r3,2104
   506d0:	18c00003 	ldbu	r3,0(r3)
   506d4:	18c03fcc 	andi	r3,r3,255
   506d8:	18c0201c 	xori	r3,r3,128
   506dc:	18ffe004 	addi	r3,r3,-128
   506e0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   506e4:	e0bffb17 	ldw	r2,-20(fp)
   506e8:	10800d17 	ldw	r2,52(r2)
   506ec:	10800044 	addi	r2,r2,1
   506f0:	10c1ffcc 	andi	r3,r2,2047
   506f4:	e0bffb17 	ldw	r2,-20(fp)
   506f8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   506fc:	e0bffa17 	ldw	r2,-24(fp)
   50700:	10bfffc4 	addi	r2,r2,-1
   50704:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   50708:	e0bffa17 	ldw	r2,-24(fp)
   5070c:	10000526 	beq	r2,zero,50724 <altera_avalon_jtag_uart_irq+0x1a8>
   50710:	e0bffb17 	ldw	r2,-20(fp)
   50714:	10c00d17 	ldw	r3,52(r2)
   50718:	e0bffb17 	ldw	r2,-20(fp)
   5071c:	10800c17 	ldw	r2,48(r2)
   50720:	18bfe51e 	bne	r3,r2,506b8 <__alt_data_end+0xfffe95b8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   50724:	e0bffa17 	ldw	r2,-24(fp)
   50728:	103f9d26 	beq	r2,zero,505a0 <__alt_data_end+0xfffe94a0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   5072c:	e0bffb17 	ldw	r2,-20(fp)
   50730:	10c00817 	ldw	r3,32(r2)
   50734:	00bfff44 	movi	r2,-3
   50738:	1886703a 	and	r3,r3,r2
   5073c:	e0bffb17 	ldw	r2,-20(fp)
   50740:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   50744:	e0bffb17 	ldw	r2,-20(fp)
   50748:	10800017 	ldw	r2,0(r2)
   5074c:	10800104 	addi	r2,r2,4
   50750:	1007883a 	mov	r3,r2
   50754:	e0bffb17 	ldw	r2,-20(fp)
   50758:	10800817 	ldw	r2,32(r2)
   5075c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   50760:	e0bffc17 	ldw	r2,-16(fp)
   50764:	10800104 	addi	r2,r2,4
   50768:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   5076c:	003f8c06 	br	505a0 <__alt_data_end+0xfffe94a0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   50770:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   50774:	0001883a 	nop
   50778:	e037883a 	mov	sp,fp
   5077c:	df000017 	ldw	fp,0(sp)
   50780:	dec00104 	addi	sp,sp,4
   50784:	f800283a 	ret

00050788 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   50788:	defff804 	addi	sp,sp,-32
   5078c:	df000715 	stw	fp,28(sp)
   50790:	df000704 	addi	fp,sp,28
   50794:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   50798:	e0bffb17 	ldw	r2,-20(fp)
   5079c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   507a0:	e0bff917 	ldw	r2,-28(fp)
   507a4:	10800017 	ldw	r2,0(r2)
   507a8:	10800104 	addi	r2,r2,4
   507ac:	10800037 	ldwio	r2,0(r2)
   507b0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   507b4:	e0bffa17 	ldw	r2,-24(fp)
   507b8:	1081000c 	andi	r2,r2,1024
   507bc:	10000b26 	beq	r2,zero,507ec <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   507c0:	e0bff917 	ldw	r2,-28(fp)
   507c4:	10800017 	ldw	r2,0(r2)
   507c8:	10800104 	addi	r2,r2,4
   507cc:	1007883a 	mov	r3,r2
   507d0:	e0bff917 	ldw	r2,-28(fp)
   507d4:	10800817 	ldw	r2,32(r2)
   507d8:	10810014 	ori	r2,r2,1024
   507dc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   507e0:	e0bff917 	ldw	r2,-28(fp)
   507e4:	10000915 	stw	zero,36(r2)
   507e8:	00000a06 	br	50814 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   507ec:	e0bff917 	ldw	r2,-28(fp)
   507f0:	10c00917 	ldw	r3,36(r2)
   507f4:	00a00034 	movhi	r2,32768
   507f8:	10bfff04 	addi	r2,r2,-4
   507fc:	10c00536 	bltu	r2,r3,50814 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   50800:	e0bff917 	ldw	r2,-28(fp)
   50804:	10800917 	ldw	r2,36(r2)
   50808:	10c00044 	addi	r3,r2,1
   5080c:	e0bff917 	ldw	r2,-28(fp)
   50810:	10c00915 	stw	r3,36(r2)
   50814:	00800174 	movhi	r2,5
   50818:	1097e704 	addi	r2,r2,24476
   5081c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   50820:	e037883a 	mov	sp,fp
   50824:	df000017 	ldw	fp,0(sp)
   50828:	dec00104 	addi	sp,sp,4
   5082c:	f800283a 	ret

00050830 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   50830:	defffd04 	addi	sp,sp,-12
   50834:	df000215 	stw	fp,8(sp)
   50838:	df000204 	addi	fp,sp,8
   5083c:	e13ffe15 	stw	r4,-8(fp)
   50840:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   50844:	00000506 	br	5085c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   50848:	e0bfff17 	ldw	r2,-4(fp)
   5084c:	1090000c 	andi	r2,r2,16384
   50850:	10000226 	beq	r2,zero,5085c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   50854:	00bffd44 	movi	r2,-11
   50858:	00000b06 	br	50888 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   5085c:	e0bffe17 	ldw	r2,-8(fp)
   50860:	10c00d17 	ldw	r3,52(r2)
   50864:	e0bffe17 	ldw	r2,-8(fp)
   50868:	10800c17 	ldw	r2,48(r2)
   5086c:	18800526 	beq	r3,r2,50884 <altera_avalon_jtag_uart_close+0x54>
   50870:	e0bffe17 	ldw	r2,-8(fp)
   50874:	10c00917 	ldw	r3,36(r2)
   50878:	e0bffe17 	ldw	r2,-8(fp)
   5087c:	10800117 	ldw	r2,4(r2)
   50880:	18bff136 	bltu	r3,r2,50848 <__alt_data_end+0xfffe9748>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   50884:	0005883a 	mov	r2,zero
}
   50888:	e037883a 	mov	sp,fp
   5088c:	df000017 	ldw	fp,0(sp)
   50890:	dec00104 	addi	sp,sp,4
   50894:	f800283a 	ret

00050898 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   50898:	defffa04 	addi	sp,sp,-24
   5089c:	df000515 	stw	fp,20(sp)
   508a0:	df000504 	addi	fp,sp,20
   508a4:	e13ffd15 	stw	r4,-12(fp)
   508a8:	e17ffe15 	stw	r5,-8(fp)
   508ac:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   508b0:	00bff9c4 	movi	r2,-25
   508b4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   508b8:	e0bffe17 	ldw	r2,-8(fp)
   508bc:	10da8060 	cmpeqi	r3,r2,27137
   508c0:	1800031e 	bne	r3,zero,508d0 <altera_avalon_jtag_uart_ioctl+0x38>
   508c4:	109a80a0 	cmpeqi	r2,r2,27138
   508c8:	1000181e 	bne	r2,zero,5092c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   508cc:	00002906 	br	50974 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   508d0:	e0bffd17 	ldw	r2,-12(fp)
   508d4:	10c00117 	ldw	r3,4(r2)
   508d8:	00a00034 	movhi	r2,32768
   508dc:	10bfffc4 	addi	r2,r2,-1
   508e0:	18802126 	beq	r3,r2,50968 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   508e4:	e0bfff17 	ldw	r2,-4(fp)
   508e8:	10800017 	ldw	r2,0(r2)
   508ec:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   508f0:	e0bffc17 	ldw	r2,-16(fp)
   508f4:	10800090 	cmplti	r2,r2,2
   508f8:	1000061e 	bne	r2,zero,50914 <altera_avalon_jtag_uart_ioctl+0x7c>
   508fc:	e0fffc17 	ldw	r3,-16(fp)
   50900:	00a00034 	movhi	r2,32768
   50904:	10bfffc4 	addi	r2,r2,-1
   50908:	18800226 	beq	r3,r2,50914 <altera_avalon_jtag_uart_ioctl+0x7c>
   5090c:	e0bffc17 	ldw	r2,-16(fp)
   50910:	00000206 	br	5091c <altera_avalon_jtag_uart_ioctl+0x84>
   50914:	00a00034 	movhi	r2,32768
   50918:	10bfff84 	addi	r2,r2,-2
   5091c:	e0fffd17 	ldw	r3,-12(fp)
   50920:	18800115 	stw	r2,4(r3)
      rc = 0;
   50924:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   50928:	00000f06 	br	50968 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   5092c:	e0bffd17 	ldw	r2,-12(fp)
   50930:	10c00117 	ldw	r3,4(r2)
   50934:	00a00034 	movhi	r2,32768
   50938:	10bfffc4 	addi	r2,r2,-1
   5093c:	18800c26 	beq	r3,r2,50970 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   50940:	e0bffd17 	ldw	r2,-12(fp)
   50944:	10c00917 	ldw	r3,36(r2)
   50948:	e0bffd17 	ldw	r2,-12(fp)
   5094c:	10800117 	ldw	r2,4(r2)
   50950:	1885803a 	cmpltu	r2,r3,r2
   50954:	10c03fcc 	andi	r3,r2,255
   50958:	e0bfff17 	ldw	r2,-4(fp)
   5095c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   50960:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   50964:	00000206 	br	50970 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   50968:	0001883a 	nop
   5096c:	00000106 	br	50974 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   50970:	0001883a 	nop

  default:
    break;
  }

  return rc;
   50974:	e0bffb17 	ldw	r2,-20(fp)
}
   50978:	e037883a 	mov	sp,fp
   5097c:	df000017 	ldw	fp,0(sp)
   50980:	dec00104 	addi	sp,sp,4
   50984:	f800283a 	ret

00050988 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   50988:	defff304 	addi	sp,sp,-52
   5098c:	dfc00c15 	stw	ra,48(sp)
   50990:	df000b15 	stw	fp,44(sp)
   50994:	df000b04 	addi	fp,sp,44
   50998:	e13ffc15 	stw	r4,-16(fp)
   5099c:	e17ffd15 	stw	r5,-12(fp)
   509a0:	e1bffe15 	stw	r6,-8(fp)
   509a4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   509a8:	e0bffd17 	ldw	r2,-12(fp)
   509ac:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   509b0:	00004706 	br	50ad0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   509b4:	e0bffc17 	ldw	r2,-16(fp)
   509b8:	10800a17 	ldw	r2,40(r2)
   509bc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   509c0:	e0bffc17 	ldw	r2,-16(fp)
   509c4:	10800b17 	ldw	r2,44(r2)
   509c8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   509cc:	e0fff717 	ldw	r3,-36(fp)
   509d0:	e0bff817 	ldw	r2,-32(fp)
   509d4:	18800536 	bltu	r3,r2,509ec <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   509d8:	e0fff717 	ldw	r3,-36(fp)
   509dc:	e0bff817 	ldw	r2,-32(fp)
   509e0:	1885c83a 	sub	r2,r3,r2
   509e4:	e0bff615 	stw	r2,-40(fp)
   509e8:	00000406 	br	509fc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   509ec:	00c20004 	movi	r3,2048
   509f0:	e0bff817 	ldw	r2,-32(fp)
   509f4:	1885c83a 	sub	r2,r3,r2
   509f8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   509fc:	e0bff617 	ldw	r2,-40(fp)
   50a00:	10001e26 	beq	r2,zero,50a7c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   50a04:	e0fffe17 	ldw	r3,-8(fp)
   50a08:	e0bff617 	ldw	r2,-40(fp)
   50a0c:	1880022e 	bgeu	r3,r2,50a18 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   50a10:	e0bffe17 	ldw	r2,-8(fp)
   50a14:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   50a18:	e0bffc17 	ldw	r2,-16(fp)
   50a1c:	10c00e04 	addi	r3,r2,56
   50a20:	e0bff817 	ldw	r2,-32(fp)
   50a24:	1885883a 	add	r2,r3,r2
   50a28:	e1bff617 	ldw	r6,-40(fp)
   50a2c:	100b883a 	mov	r5,r2
   50a30:	e13ff517 	ldw	r4,-44(fp)
   50a34:	0046edc0 	call	46edc <memcpy>
      ptr   += n;
   50a38:	e0fff517 	ldw	r3,-44(fp)
   50a3c:	e0bff617 	ldw	r2,-40(fp)
   50a40:	1885883a 	add	r2,r3,r2
   50a44:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   50a48:	e0fffe17 	ldw	r3,-8(fp)
   50a4c:	e0bff617 	ldw	r2,-40(fp)
   50a50:	1885c83a 	sub	r2,r3,r2
   50a54:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   50a58:	e0fff817 	ldw	r3,-32(fp)
   50a5c:	e0bff617 	ldw	r2,-40(fp)
   50a60:	1885883a 	add	r2,r3,r2
   50a64:	10c1ffcc 	andi	r3,r2,2047
   50a68:	e0bffc17 	ldw	r2,-16(fp)
   50a6c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   50a70:	e0bffe17 	ldw	r2,-8(fp)
   50a74:	00bfcf16 	blt	zero,r2,509b4 <__alt_data_end+0xfffe98b4>
   50a78:	00000106 	br	50a80 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   50a7c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   50a80:	e0fff517 	ldw	r3,-44(fp)
   50a84:	e0bffd17 	ldw	r2,-12(fp)
   50a88:	1880141e 	bne	r3,r2,50adc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   50a8c:	e0bfff17 	ldw	r2,-4(fp)
   50a90:	1090000c 	andi	r2,r2,16384
   50a94:	1000131e 	bne	r2,zero,50ae4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   50a98:	0001883a 	nop
   50a9c:	e0bffc17 	ldw	r2,-16(fp)
   50aa0:	10c00a17 	ldw	r3,40(r2)
   50aa4:	e0bff717 	ldw	r2,-36(fp)
   50aa8:	1880051e 	bne	r3,r2,50ac0 <altera_avalon_jtag_uart_read+0x138>
   50aac:	e0bffc17 	ldw	r2,-16(fp)
   50ab0:	10c00917 	ldw	r3,36(r2)
   50ab4:	e0bffc17 	ldw	r2,-16(fp)
   50ab8:	10800117 	ldw	r2,4(r2)
   50abc:	18bff736 	bltu	r3,r2,50a9c <__alt_data_end+0xfffe999c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   50ac0:	e0bffc17 	ldw	r2,-16(fp)
   50ac4:	10c00a17 	ldw	r3,40(r2)
   50ac8:	e0bff717 	ldw	r2,-36(fp)
   50acc:	18800726 	beq	r3,r2,50aec <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   50ad0:	e0bffe17 	ldw	r2,-8(fp)
   50ad4:	00bfb716 	blt	zero,r2,509b4 <__alt_data_end+0xfffe98b4>
   50ad8:	00000506 	br	50af0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   50adc:	0001883a 	nop
   50ae0:	00000306 	br	50af0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   50ae4:	0001883a 	nop
   50ae8:	00000106 	br	50af0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   50aec:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   50af0:	e0fff517 	ldw	r3,-44(fp)
   50af4:	e0bffd17 	ldw	r2,-12(fp)
   50af8:	18801826 	beq	r3,r2,50b5c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50afc:	0005303a 	rdctl	r2,status
   50b00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50b04:	e0fffb17 	ldw	r3,-20(fp)
   50b08:	00bfff84 	movi	r2,-2
   50b0c:	1884703a 	and	r2,r3,r2
   50b10:	1001703a 	wrctl	status,r2
  
  return context;
   50b14:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   50b18:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   50b1c:	e0bffc17 	ldw	r2,-16(fp)
   50b20:	10800817 	ldw	r2,32(r2)
   50b24:	10c00054 	ori	r3,r2,1
   50b28:	e0bffc17 	ldw	r2,-16(fp)
   50b2c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   50b30:	e0bffc17 	ldw	r2,-16(fp)
   50b34:	10800017 	ldw	r2,0(r2)
   50b38:	10800104 	addi	r2,r2,4
   50b3c:	1007883a 	mov	r3,r2
   50b40:	e0bffc17 	ldw	r2,-16(fp)
   50b44:	10800817 	ldw	r2,32(r2)
   50b48:	18800035 	stwio	r2,0(r3)
   50b4c:	e0bffa17 	ldw	r2,-24(fp)
   50b50:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50b54:	e0bff917 	ldw	r2,-28(fp)
   50b58:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   50b5c:	e0fff517 	ldw	r3,-44(fp)
   50b60:	e0bffd17 	ldw	r2,-12(fp)
   50b64:	18800426 	beq	r3,r2,50b78 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   50b68:	e0fff517 	ldw	r3,-44(fp)
   50b6c:	e0bffd17 	ldw	r2,-12(fp)
   50b70:	1885c83a 	sub	r2,r3,r2
   50b74:	00000606 	br	50b90 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   50b78:	e0bfff17 	ldw	r2,-4(fp)
   50b7c:	1090000c 	andi	r2,r2,16384
   50b80:	10000226 	beq	r2,zero,50b8c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   50b84:	00bffd44 	movi	r2,-11
   50b88:	00000106 	br	50b90 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   50b8c:	00bffec4 	movi	r2,-5
}
   50b90:	e037883a 	mov	sp,fp
   50b94:	dfc00117 	ldw	ra,4(sp)
   50b98:	df000017 	ldw	fp,0(sp)
   50b9c:	dec00204 	addi	sp,sp,8
   50ba0:	f800283a 	ret

00050ba4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   50ba4:	defff304 	addi	sp,sp,-52
   50ba8:	dfc00c15 	stw	ra,48(sp)
   50bac:	df000b15 	stw	fp,44(sp)
   50bb0:	df000b04 	addi	fp,sp,44
   50bb4:	e13ffc15 	stw	r4,-16(fp)
   50bb8:	e17ffd15 	stw	r5,-12(fp)
   50bbc:	e1bffe15 	stw	r6,-8(fp)
   50bc0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   50bc4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   50bc8:	e0bffd17 	ldw	r2,-12(fp)
   50bcc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   50bd0:	00003706 	br	50cb0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   50bd4:	e0bffc17 	ldw	r2,-16(fp)
   50bd8:	10800c17 	ldw	r2,48(r2)
   50bdc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   50be0:	e0bffc17 	ldw	r2,-16(fp)
   50be4:	10800d17 	ldw	r2,52(r2)
   50be8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   50bec:	e0fff917 	ldw	r3,-28(fp)
   50bf0:	e0bff517 	ldw	r2,-44(fp)
   50bf4:	1880062e 	bgeu	r3,r2,50c10 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   50bf8:	e0fff517 	ldw	r3,-44(fp)
   50bfc:	e0bff917 	ldw	r2,-28(fp)
   50c00:	1885c83a 	sub	r2,r3,r2
   50c04:	10bfffc4 	addi	r2,r2,-1
   50c08:	e0bff615 	stw	r2,-40(fp)
   50c0c:	00000b06 	br	50c3c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   50c10:	e0bff517 	ldw	r2,-44(fp)
   50c14:	10000526 	beq	r2,zero,50c2c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   50c18:	00c20004 	movi	r3,2048
   50c1c:	e0bff917 	ldw	r2,-28(fp)
   50c20:	1885c83a 	sub	r2,r3,r2
   50c24:	e0bff615 	stw	r2,-40(fp)
   50c28:	00000406 	br	50c3c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   50c2c:	00c1ffc4 	movi	r3,2047
   50c30:	e0bff917 	ldw	r2,-28(fp)
   50c34:	1885c83a 	sub	r2,r3,r2
   50c38:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   50c3c:	e0bff617 	ldw	r2,-40(fp)
   50c40:	10001e26 	beq	r2,zero,50cbc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   50c44:	e0fffe17 	ldw	r3,-8(fp)
   50c48:	e0bff617 	ldw	r2,-40(fp)
   50c4c:	1880022e 	bgeu	r3,r2,50c58 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   50c50:	e0bffe17 	ldw	r2,-8(fp)
   50c54:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   50c58:	e0bffc17 	ldw	r2,-16(fp)
   50c5c:	10c20e04 	addi	r3,r2,2104
   50c60:	e0bff917 	ldw	r2,-28(fp)
   50c64:	1885883a 	add	r2,r3,r2
   50c68:	e1bff617 	ldw	r6,-40(fp)
   50c6c:	e17ffd17 	ldw	r5,-12(fp)
   50c70:	1009883a 	mov	r4,r2
   50c74:	0046edc0 	call	46edc <memcpy>
      ptr   += n;
   50c78:	e0fffd17 	ldw	r3,-12(fp)
   50c7c:	e0bff617 	ldw	r2,-40(fp)
   50c80:	1885883a 	add	r2,r3,r2
   50c84:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   50c88:	e0fffe17 	ldw	r3,-8(fp)
   50c8c:	e0bff617 	ldw	r2,-40(fp)
   50c90:	1885c83a 	sub	r2,r3,r2
   50c94:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   50c98:	e0fff917 	ldw	r3,-28(fp)
   50c9c:	e0bff617 	ldw	r2,-40(fp)
   50ca0:	1885883a 	add	r2,r3,r2
   50ca4:	10c1ffcc 	andi	r3,r2,2047
   50ca8:	e0bffc17 	ldw	r2,-16(fp)
   50cac:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   50cb0:	e0bffe17 	ldw	r2,-8(fp)
   50cb4:	00bfc716 	blt	zero,r2,50bd4 <__alt_data_end+0xfffe9ad4>
   50cb8:	00000106 	br	50cc0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   50cbc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50cc0:	0005303a 	rdctl	r2,status
   50cc4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50cc8:	e0fffb17 	ldw	r3,-20(fp)
   50ccc:	00bfff84 	movi	r2,-2
   50cd0:	1884703a 	and	r2,r3,r2
   50cd4:	1001703a 	wrctl	status,r2
  
  return context;
   50cd8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   50cdc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   50ce0:	e0bffc17 	ldw	r2,-16(fp)
   50ce4:	10800817 	ldw	r2,32(r2)
   50ce8:	10c00094 	ori	r3,r2,2
   50cec:	e0bffc17 	ldw	r2,-16(fp)
   50cf0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   50cf4:	e0bffc17 	ldw	r2,-16(fp)
   50cf8:	10800017 	ldw	r2,0(r2)
   50cfc:	10800104 	addi	r2,r2,4
   50d00:	1007883a 	mov	r3,r2
   50d04:	e0bffc17 	ldw	r2,-16(fp)
   50d08:	10800817 	ldw	r2,32(r2)
   50d0c:	18800035 	stwio	r2,0(r3)
   50d10:	e0bffa17 	ldw	r2,-24(fp)
   50d14:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50d18:	e0bff817 	ldw	r2,-32(fp)
   50d1c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   50d20:	e0bffe17 	ldw	r2,-8(fp)
   50d24:	0080100e 	bge	zero,r2,50d68 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   50d28:	e0bfff17 	ldw	r2,-4(fp)
   50d2c:	1090000c 	andi	r2,r2,16384
   50d30:	1000101e 	bne	r2,zero,50d74 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   50d34:	0001883a 	nop
   50d38:	e0bffc17 	ldw	r2,-16(fp)
   50d3c:	10c00d17 	ldw	r3,52(r2)
   50d40:	e0bff517 	ldw	r2,-44(fp)
   50d44:	1880051e 	bne	r3,r2,50d5c <altera_avalon_jtag_uart_write+0x1b8>
   50d48:	e0bffc17 	ldw	r2,-16(fp)
   50d4c:	10c00917 	ldw	r3,36(r2)
   50d50:	e0bffc17 	ldw	r2,-16(fp)
   50d54:	10800117 	ldw	r2,4(r2)
   50d58:	18bff736 	bltu	r3,r2,50d38 <__alt_data_end+0xfffe9c38>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   50d5c:	e0bffc17 	ldw	r2,-16(fp)
   50d60:	10800917 	ldw	r2,36(r2)
   50d64:	1000051e 	bne	r2,zero,50d7c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   50d68:	e0bffe17 	ldw	r2,-8(fp)
   50d6c:	00bfd016 	blt	zero,r2,50cb0 <__alt_data_end+0xfffe9bb0>
   50d70:	00000306 	br	50d80 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   50d74:	0001883a 	nop
   50d78:	00000106 	br	50d80 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   50d7c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   50d80:	e0fffd17 	ldw	r3,-12(fp)
   50d84:	e0bff717 	ldw	r2,-36(fp)
   50d88:	18800426 	beq	r3,r2,50d9c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   50d8c:	e0fffd17 	ldw	r3,-12(fp)
   50d90:	e0bff717 	ldw	r2,-36(fp)
   50d94:	1885c83a 	sub	r2,r3,r2
   50d98:	00000606 	br	50db4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   50d9c:	e0bfff17 	ldw	r2,-4(fp)
   50da0:	1090000c 	andi	r2,r2,16384
   50da4:	10000226 	beq	r2,zero,50db0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   50da8:	00bffd44 	movi	r2,-11
   50dac:	00000106 	br	50db4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   50db0:	00bffec4 	movi	r2,-5
}
   50db4:	e037883a 	mov	sp,fp
   50db8:	dfc00117 	ldw	ra,4(sp)
   50dbc:	df000017 	ldw	fp,0(sp)
   50dc0:	dec00204 	addi	sp,sp,8
   50dc4:	f800283a 	ret

00050dc8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   50dc8:	defff504 	addi	sp,sp,-44
   50dcc:	df000a15 	stw	fp,40(sp)
   50dd0:	df000a04 	addi	fp,sp,40
   50dd4:	e13ffc15 	stw	r4,-16(fp)
   50dd8:	e17ffd15 	stw	r5,-12(fp)
   50ddc:	e1bffe15 	stw	r6,-8(fp)
   50de0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   50de4:	e03ff615 	stw	zero,-40(fp)
   50de8:	00800174 	movhi	r2,5
   50dec:	1097e704 	addi	r2,r2,24476
   50df0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   50df4:	10003f26 	beq	r2,zero,50ef4 <alt_alarm_start+0x12c>
  {
    if (alarm)
   50df8:	e0bffc17 	ldw	r2,-16(fp)
   50dfc:	10003b26 	beq	r2,zero,50eec <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   50e00:	e0bffc17 	ldw	r2,-16(fp)
   50e04:	e0fffe17 	ldw	r3,-8(fp)
   50e08:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   50e0c:	e0bffc17 	ldw	r2,-16(fp)
   50e10:	e0ffff17 	ldw	r3,-4(fp)
   50e14:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50e18:	0005303a 	rdctl	r2,status
   50e1c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50e20:	e0fff917 	ldw	r3,-28(fp)
   50e24:	00bfff84 	movi	r2,-2
   50e28:	1884703a 	and	r2,r3,r2
   50e2c:	1001703a 	wrctl	status,r2
  
  return context;
   50e30:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   50e34:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   50e38:	00800174 	movhi	r2,5
   50e3c:	1097e804 	addi	r2,r2,24480
   50e40:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   50e44:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   50e48:	e0fffd17 	ldw	r3,-12(fp)
   50e4c:	e0bff617 	ldw	r2,-40(fp)
   50e50:	1885883a 	add	r2,r3,r2
   50e54:	10c00044 	addi	r3,r2,1
   50e58:	e0bffc17 	ldw	r2,-16(fp)
   50e5c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   50e60:	e0bffc17 	ldw	r2,-16(fp)
   50e64:	10c00217 	ldw	r3,8(r2)
   50e68:	e0bff617 	ldw	r2,-40(fp)
   50e6c:	1880042e 	bgeu	r3,r2,50e80 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   50e70:	e0bffc17 	ldw	r2,-16(fp)
   50e74:	00c00044 	movi	r3,1
   50e78:	10c00405 	stb	r3,16(r2)
   50e7c:	00000206 	br	50e88 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   50e80:	e0bffc17 	ldw	r2,-16(fp)
   50e84:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   50e88:	e0fffc17 	ldw	r3,-16(fp)
   50e8c:	00800174 	movhi	r2,5
   50e90:	10910f04 	addi	r2,r2,17468
   50e94:	e0bffa15 	stw	r2,-24(fp)
   50e98:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   50e9c:	e0bffb17 	ldw	r2,-20(fp)
   50ea0:	e0fffa17 	ldw	r3,-24(fp)
   50ea4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   50ea8:	e0bffa17 	ldw	r2,-24(fp)
   50eac:	10c00017 	ldw	r3,0(r2)
   50eb0:	e0bffb17 	ldw	r2,-20(fp)
   50eb4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   50eb8:	e0bffa17 	ldw	r2,-24(fp)
   50ebc:	10800017 	ldw	r2,0(r2)
   50ec0:	e0fffb17 	ldw	r3,-20(fp)
   50ec4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   50ec8:	e0bffa17 	ldw	r2,-24(fp)
   50ecc:	e0fffb17 	ldw	r3,-20(fp)
   50ed0:	10c00015 	stw	r3,0(r2)
   50ed4:	e0bff817 	ldw	r2,-32(fp)
   50ed8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50edc:	e0bff717 	ldw	r2,-36(fp)
   50ee0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   50ee4:	0005883a 	mov	r2,zero
   50ee8:	00000306 	br	50ef8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   50eec:	00bffa84 	movi	r2,-22
   50ef0:	00000106 	br	50ef8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   50ef4:	00bfde84 	movi	r2,-134
  }
}
   50ef8:	e037883a 	mov	sp,fp
   50efc:	df000017 	ldw	fp,0(sp)
   50f00:	dec00104 	addi	sp,sp,4
   50f04:	f800283a 	ret

00050f08 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   50f08:	defffa04 	addi	sp,sp,-24
   50f0c:	dfc00515 	stw	ra,20(sp)
   50f10:	df000415 	stw	fp,16(sp)
   50f14:	df000404 	addi	fp,sp,16
   50f18:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   50f1c:	008000c4 	movi	r2,3
   50f20:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   50f24:	e0fffd17 	ldw	r3,-12(fp)
   50f28:	008003f4 	movhi	r2,15
   50f2c:	10909004 	addi	r2,r2,16960
   50f30:	1885383a 	mul	r2,r3,r2
   50f34:	100b883a 	mov	r5,r2
   50f38:	01017db4 	movhi	r4,1526
   50f3c:	21384004 	addi	r4,r4,-7936
   50f40:	004b60c0 	call	4b60c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   50f44:	100b883a 	mov	r5,r2
   50f48:	01200034 	movhi	r4,32768
   50f4c:	213fffc4 	addi	r4,r4,-1
   50f50:	004b60c0 	call	4b60c <__udivsi3>
   50f54:	100b883a 	mov	r5,r2
   50f58:	e13fff17 	ldw	r4,-4(fp)
   50f5c:	004b60c0 	call	4b60c <__udivsi3>
   50f60:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   50f64:	e0bffe17 	ldw	r2,-8(fp)
   50f68:	10002a26 	beq	r2,zero,51014 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   50f6c:	e03ffc15 	stw	zero,-16(fp)
   50f70:	00001706 	br	50fd0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   50f74:	00a00034 	movhi	r2,32768
   50f78:	10bfffc4 	addi	r2,r2,-1
   50f7c:	10bfffc4 	addi	r2,r2,-1
   50f80:	103ffe1e 	bne	r2,zero,50f7c <__alt_data_end+0xfffe9e7c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   50f84:	e0fffd17 	ldw	r3,-12(fp)
   50f88:	008003f4 	movhi	r2,15
   50f8c:	10909004 	addi	r2,r2,16960
   50f90:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   50f94:	100b883a 	mov	r5,r2
   50f98:	01017db4 	movhi	r4,1526
   50f9c:	21384004 	addi	r4,r4,-7936
   50fa0:	004b60c0 	call	4b60c <__udivsi3>
   50fa4:	100b883a 	mov	r5,r2
   50fa8:	01200034 	movhi	r4,32768
   50fac:	213fffc4 	addi	r4,r4,-1
   50fb0:	004b60c0 	call	4b60c <__udivsi3>
   50fb4:	1007883a 	mov	r3,r2
   50fb8:	e0bfff17 	ldw	r2,-4(fp)
   50fbc:	10c5c83a 	sub	r2,r2,r3
   50fc0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   50fc4:	e0bffc17 	ldw	r2,-16(fp)
   50fc8:	10800044 	addi	r2,r2,1
   50fcc:	e0bffc15 	stw	r2,-16(fp)
   50fd0:	e0fffc17 	ldw	r3,-16(fp)
   50fd4:	e0bffe17 	ldw	r2,-8(fp)
   50fd8:	18bfe616 	blt	r3,r2,50f74 <__alt_data_end+0xfffe9e74>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   50fdc:	e0fffd17 	ldw	r3,-12(fp)
   50fe0:	008003f4 	movhi	r2,15
   50fe4:	10909004 	addi	r2,r2,16960
   50fe8:	1885383a 	mul	r2,r3,r2
   50fec:	100b883a 	mov	r5,r2
   50ff0:	01017db4 	movhi	r4,1526
   50ff4:	21384004 	addi	r4,r4,-7936
   50ff8:	004b60c0 	call	4b60c <__udivsi3>
   50ffc:	1007883a 	mov	r3,r2
   51000:	e0bfff17 	ldw	r2,-4(fp)
   51004:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   51008:	10bfffc4 	addi	r2,r2,-1
   5100c:	103ffe1e 	bne	r2,zero,51008 <__alt_data_end+0xfffe9f08>
   51010:	00000d06 	br	51048 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   51014:	e0fffd17 	ldw	r3,-12(fp)
   51018:	008003f4 	movhi	r2,15
   5101c:	10909004 	addi	r2,r2,16960
   51020:	1885383a 	mul	r2,r3,r2
   51024:	100b883a 	mov	r5,r2
   51028:	01017db4 	movhi	r4,1526
   5102c:	21384004 	addi	r4,r4,-7936
   51030:	004b60c0 	call	4b60c <__udivsi3>
   51034:	1007883a 	mov	r3,r2
   51038:	e0bfff17 	ldw	r2,-4(fp)
   5103c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   51040:	10bfffc4 	addi	r2,r2,-1
   51044:	00bffe16 	blt	zero,r2,51040 <__alt_data_end+0xfffe9f40>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   51048:	0005883a 	mov	r2,zero
}
   5104c:	e037883a 	mov	sp,fp
   51050:	dfc00117 	ldw	ra,4(sp)
   51054:	df000017 	ldw	fp,0(sp)
   51058:	dec00204 	addi	sp,sp,8
   5105c:	f800283a 	ret

00051060 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   51060:	defffe04 	addi	sp,sp,-8
   51064:	df000115 	stw	fp,4(sp)
   51068:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   5106c:	e03fff15 	stw	zero,-4(fp)
   51070:	00000506 	br	51088 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   51074:	e0bfff17 	ldw	r2,-4(fp)
   51078:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   5107c:	e0bfff17 	ldw	r2,-4(fp)
   51080:	10800804 	addi	r2,r2,32
   51084:	e0bfff15 	stw	r2,-4(fp)
   51088:	e0bfff17 	ldw	r2,-4(fp)
   5108c:	10820030 	cmpltui	r2,r2,2048
   51090:	103ff81e 	bne	r2,zero,51074 <__alt_data_end+0xfffe9f74>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   51094:	0001883a 	nop
   51098:	e037883a 	mov	sp,fp
   5109c:	df000017 	ldw	fp,0(sp)
   510a0:	dec00104 	addi	sp,sp,4
   510a4:	f800283a 	ret

000510a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   510a8:	defffe04 	addi	sp,sp,-8
   510ac:	dfc00115 	stw	ra,4(sp)
   510b0:	df000015 	stw	fp,0(sp)
   510b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   510b8:	00800174 	movhi	r2,5
   510bc:	10910a04 	addi	r2,r2,17448
   510c0:	10800017 	ldw	r2,0(r2)
   510c4:	10000526 	beq	r2,zero,510dc <alt_get_errno+0x34>
   510c8:	00800174 	movhi	r2,5
   510cc:	10910a04 	addi	r2,r2,17448
   510d0:	10800017 	ldw	r2,0(r2)
   510d4:	103ee83a 	callr	r2
   510d8:	00000206 	br	510e4 <alt_get_errno+0x3c>
   510dc:	00800174 	movhi	r2,5
   510e0:	1097e204 	addi	r2,r2,24456
}
   510e4:	e037883a 	mov	sp,fp
   510e8:	dfc00117 	ldw	ra,4(sp)
   510ec:	df000017 	ldw	fp,0(sp)
   510f0:	dec00204 	addi	sp,sp,8
   510f4:	f800283a 	ret

000510f8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   510f8:	defffa04 	addi	sp,sp,-24
   510fc:	dfc00515 	stw	ra,20(sp)
   51100:	df000415 	stw	fp,16(sp)
   51104:	df000404 	addi	fp,sp,16
   51108:	e13ffe15 	stw	r4,-8(fp)
   5110c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   51110:	e0bffe17 	ldw	r2,-8(fp)
   51114:	10000326 	beq	r2,zero,51124 <alt_dev_llist_insert+0x2c>
   51118:	e0bffe17 	ldw	r2,-8(fp)
   5111c:	10800217 	ldw	r2,8(r2)
   51120:	1000061e 	bne	r2,zero,5113c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   51124:	00510a80 	call	510a8 <alt_get_errno>
   51128:	1007883a 	mov	r3,r2
   5112c:	00800584 	movi	r2,22
   51130:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   51134:	00bffa84 	movi	r2,-22
   51138:	00001306 	br	51188 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   5113c:	e0bffe17 	ldw	r2,-8(fp)
   51140:	e0ffff17 	ldw	r3,-4(fp)
   51144:	e0fffc15 	stw	r3,-16(fp)
   51148:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   5114c:	e0bffd17 	ldw	r2,-12(fp)
   51150:	e0fffc17 	ldw	r3,-16(fp)
   51154:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   51158:	e0bffc17 	ldw	r2,-16(fp)
   5115c:	10c00017 	ldw	r3,0(r2)
   51160:	e0bffd17 	ldw	r2,-12(fp)
   51164:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   51168:	e0bffc17 	ldw	r2,-16(fp)
   5116c:	10800017 	ldw	r2,0(r2)
   51170:	e0fffd17 	ldw	r3,-12(fp)
   51174:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   51178:	e0bffc17 	ldw	r2,-16(fp)
   5117c:	e0fffd17 	ldw	r3,-12(fp)
   51180:	10c00015 	stw	r3,0(r2)

  return 0;  
   51184:	0005883a 	mov	r2,zero
}
   51188:	e037883a 	mov	sp,fp
   5118c:	dfc00117 	ldw	ra,4(sp)
   51190:	df000017 	ldw	fp,0(sp)
   51194:	dec00204 	addi	sp,sp,8
   51198:	f800283a 	ret

0005119c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   5119c:	defffd04 	addi	sp,sp,-12
   511a0:	dfc00215 	stw	ra,8(sp)
   511a4:	df000115 	stw	fp,4(sp)
   511a8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   511ac:	00800174 	movhi	r2,5
   511b0:	10894b04 	addi	r2,r2,9516
   511b4:	e0bfff15 	stw	r2,-4(fp)
   511b8:	00000606 	br	511d4 <_do_ctors+0x38>
        (*ctor) (); 
   511bc:	e0bfff17 	ldw	r2,-4(fp)
   511c0:	10800017 	ldw	r2,0(r2)
   511c4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   511c8:	e0bfff17 	ldw	r2,-4(fp)
   511cc:	10bfff04 	addi	r2,r2,-4
   511d0:	e0bfff15 	stw	r2,-4(fp)
   511d4:	e0ffff17 	ldw	r3,-4(fp)
   511d8:	00800174 	movhi	r2,5
   511dc:	10894c04 	addi	r2,r2,9520
   511e0:	18bff62e 	bgeu	r3,r2,511bc <__alt_data_end+0xfffea0bc>
        (*ctor) (); 
}
   511e4:	0001883a 	nop
   511e8:	e037883a 	mov	sp,fp
   511ec:	dfc00117 	ldw	ra,4(sp)
   511f0:	df000017 	ldw	fp,0(sp)
   511f4:	dec00204 	addi	sp,sp,8
   511f8:	f800283a 	ret

000511fc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   511fc:	defffd04 	addi	sp,sp,-12
   51200:	dfc00215 	stw	ra,8(sp)
   51204:	df000115 	stw	fp,4(sp)
   51208:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   5120c:	00800174 	movhi	r2,5
   51210:	10894b04 	addi	r2,r2,9516
   51214:	e0bfff15 	stw	r2,-4(fp)
   51218:	00000606 	br	51234 <_do_dtors+0x38>
        (*dtor) (); 
   5121c:	e0bfff17 	ldw	r2,-4(fp)
   51220:	10800017 	ldw	r2,0(r2)
   51224:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   51228:	e0bfff17 	ldw	r2,-4(fp)
   5122c:	10bfff04 	addi	r2,r2,-4
   51230:	e0bfff15 	stw	r2,-4(fp)
   51234:	e0ffff17 	ldw	r3,-4(fp)
   51238:	00800174 	movhi	r2,5
   5123c:	10894c04 	addi	r2,r2,9520
   51240:	18bff62e 	bgeu	r3,r2,5121c <__alt_data_end+0xfffea11c>
        (*dtor) (); 
}
   51244:	0001883a 	nop
   51248:	e037883a 	mov	sp,fp
   5124c:	dfc00117 	ldw	ra,4(sp)
   51250:	df000017 	ldw	fp,0(sp)
   51254:	dec00204 	addi	sp,sp,8
   51258:	f800283a 	ret

0005125c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   5125c:	defffa04 	addi	sp,sp,-24
   51260:	dfc00515 	stw	ra,20(sp)
   51264:	df000415 	stw	fp,16(sp)
   51268:	df000404 	addi	fp,sp,16
   5126c:	e13ffe15 	stw	r4,-8(fp)
   51270:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   51274:	e0bfff17 	ldw	r2,-4(fp)
   51278:	10800017 	ldw	r2,0(r2)
   5127c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   51280:	e13ffe17 	ldw	r4,-8(fp)
   51284:	00415500 	call	41550 <strlen>
   51288:	10800044 	addi	r2,r2,1
   5128c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   51290:	00000d06 	br	512c8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   51294:	e0bffc17 	ldw	r2,-16(fp)
   51298:	10800217 	ldw	r2,8(r2)
   5129c:	e0fffd17 	ldw	r3,-12(fp)
   512a0:	180d883a 	mov	r6,r3
   512a4:	e17ffe17 	ldw	r5,-8(fp)
   512a8:	1009883a 	mov	r4,r2
   512ac:	00520800 	call	52080 <memcmp>
   512b0:	1000021e 	bne	r2,zero,512bc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   512b4:	e0bffc17 	ldw	r2,-16(fp)
   512b8:	00000706 	br	512d8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   512bc:	e0bffc17 	ldw	r2,-16(fp)
   512c0:	10800017 	ldw	r2,0(r2)
   512c4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   512c8:	e0fffc17 	ldw	r3,-16(fp)
   512cc:	e0bfff17 	ldw	r2,-4(fp)
   512d0:	18bff01e 	bne	r3,r2,51294 <__alt_data_end+0xfffea194>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   512d4:	0005883a 	mov	r2,zero
}
   512d8:	e037883a 	mov	sp,fp
   512dc:	dfc00117 	ldw	ra,4(sp)
   512e0:	df000017 	ldw	fp,0(sp)
   512e4:	dec00204 	addi	sp,sp,8
   512e8:	f800283a 	ret

000512ec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   512ec:	defffe04 	addi	sp,sp,-8
   512f0:	dfc00115 	stw	ra,4(sp)
   512f4:	df000015 	stw	fp,0(sp)
   512f8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   512fc:	01440004 	movi	r5,4096
   51300:	0009883a 	mov	r4,zero
   51304:	0051fa40 	call	51fa4 <alt_icache_flush>
#endif
}
   51308:	0001883a 	nop
   5130c:	e037883a 	mov	sp,fp
   51310:	dfc00117 	ldw	ra,4(sp)
   51314:	df000017 	ldw	fp,0(sp)
   51318:	dec00204 	addi	sp,sp,8
   5131c:	f800283a 	ret

00051320 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   51320:	defff904 	addi	sp,sp,-28
   51324:	dfc00615 	stw	ra,24(sp)
   51328:	df000515 	stw	fp,20(sp)
   5132c:	df000504 	addi	fp,sp,20
   51330:	e13ffc15 	stw	r4,-16(fp)
   51334:	e17ffd15 	stw	r5,-12(fp)
   51338:	e1bffe15 	stw	r6,-8(fp)
   5133c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   51340:	e0800217 	ldw	r2,8(fp)
   51344:	d8800015 	stw	r2,0(sp)
   51348:	e1ffff17 	ldw	r7,-4(fp)
   5134c:	e1bffe17 	ldw	r6,-8(fp)
   51350:	e17ffd17 	ldw	r5,-12(fp)
   51354:	e13ffc17 	ldw	r4,-16(fp)
   51358:	00515000 	call	51500 <alt_iic_isr_register>
}  
   5135c:	e037883a 	mov	sp,fp
   51360:	dfc00117 	ldw	ra,4(sp)
   51364:	df000017 	ldw	fp,0(sp)
   51368:	dec00204 	addi	sp,sp,8
   5136c:	f800283a 	ret

00051370 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   51370:	defff904 	addi	sp,sp,-28
   51374:	df000615 	stw	fp,24(sp)
   51378:	df000604 	addi	fp,sp,24
   5137c:	e13ffe15 	stw	r4,-8(fp)
   51380:	e17fff15 	stw	r5,-4(fp)
   51384:	e0bfff17 	ldw	r2,-4(fp)
   51388:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5138c:	0005303a 	rdctl	r2,status
   51390:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51394:	e0fffb17 	ldw	r3,-20(fp)
   51398:	00bfff84 	movi	r2,-2
   5139c:	1884703a 	and	r2,r3,r2
   513a0:	1001703a 	wrctl	status,r2
  
  return context;
   513a4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   513a8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   513ac:	00c00044 	movi	r3,1
   513b0:	e0bffa17 	ldw	r2,-24(fp)
   513b4:	1884983a 	sll	r2,r3,r2
   513b8:	1007883a 	mov	r3,r2
   513bc:	00800174 	movhi	r2,5
   513c0:	1097e604 	addi	r2,r2,24472
   513c4:	10800017 	ldw	r2,0(r2)
   513c8:	1886b03a 	or	r3,r3,r2
   513cc:	00800174 	movhi	r2,5
   513d0:	1097e604 	addi	r2,r2,24472
   513d4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   513d8:	00800174 	movhi	r2,5
   513dc:	1097e604 	addi	r2,r2,24472
   513e0:	10800017 	ldw	r2,0(r2)
   513e4:	100170fa 	wrctl	ienable,r2
   513e8:	e0bffc17 	ldw	r2,-16(fp)
   513ec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   513f0:	e0bffd17 	ldw	r2,-12(fp)
   513f4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   513f8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   513fc:	0001883a 	nop
}
   51400:	e037883a 	mov	sp,fp
   51404:	df000017 	ldw	fp,0(sp)
   51408:	dec00104 	addi	sp,sp,4
   5140c:	f800283a 	ret

00051410 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   51410:	defff904 	addi	sp,sp,-28
   51414:	df000615 	stw	fp,24(sp)
   51418:	df000604 	addi	fp,sp,24
   5141c:	e13ffe15 	stw	r4,-8(fp)
   51420:	e17fff15 	stw	r5,-4(fp)
   51424:	e0bfff17 	ldw	r2,-4(fp)
   51428:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5142c:	0005303a 	rdctl	r2,status
   51430:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51434:	e0fffb17 	ldw	r3,-20(fp)
   51438:	00bfff84 	movi	r2,-2
   5143c:	1884703a 	and	r2,r3,r2
   51440:	1001703a 	wrctl	status,r2
  
  return context;
   51444:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   51448:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   5144c:	00c00044 	movi	r3,1
   51450:	e0bffa17 	ldw	r2,-24(fp)
   51454:	1884983a 	sll	r2,r3,r2
   51458:	0084303a 	nor	r2,zero,r2
   5145c:	1007883a 	mov	r3,r2
   51460:	00800174 	movhi	r2,5
   51464:	1097e604 	addi	r2,r2,24472
   51468:	10800017 	ldw	r2,0(r2)
   5146c:	1886703a 	and	r3,r3,r2
   51470:	00800174 	movhi	r2,5
   51474:	1097e604 	addi	r2,r2,24472
   51478:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   5147c:	00800174 	movhi	r2,5
   51480:	1097e604 	addi	r2,r2,24472
   51484:	10800017 	ldw	r2,0(r2)
   51488:	100170fa 	wrctl	ienable,r2
   5148c:	e0bffc17 	ldw	r2,-16(fp)
   51490:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51494:	e0bffd17 	ldw	r2,-12(fp)
   51498:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   5149c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   514a0:	0001883a 	nop
}
   514a4:	e037883a 	mov	sp,fp
   514a8:	df000017 	ldw	fp,0(sp)
   514ac:	dec00104 	addi	sp,sp,4
   514b0:	f800283a 	ret

000514b4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   514b4:	defffc04 	addi	sp,sp,-16
   514b8:	df000315 	stw	fp,12(sp)
   514bc:	df000304 	addi	fp,sp,12
   514c0:	e13ffe15 	stw	r4,-8(fp)
   514c4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   514c8:	000530fa 	rdctl	r2,ienable
   514cc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   514d0:	00c00044 	movi	r3,1
   514d4:	e0bfff17 	ldw	r2,-4(fp)
   514d8:	1884983a 	sll	r2,r3,r2
   514dc:	1007883a 	mov	r3,r2
   514e0:	e0bffd17 	ldw	r2,-12(fp)
   514e4:	1884703a 	and	r2,r3,r2
   514e8:	1004c03a 	cmpne	r2,r2,zero
   514ec:	10803fcc 	andi	r2,r2,255
}
   514f0:	e037883a 	mov	sp,fp
   514f4:	df000017 	ldw	fp,0(sp)
   514f8:	dec00104 	addi	sp,sp,4
   514fc:	f800283a 	ret

00051500 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   51500:	defff504 	addi	sp,sp,-44
   51504:	dfc00a15 	stw	ra,40(sp)
   51508:	df000915 	stw	fp,36(sp)
   5150c:	df000904 	addi	fp,sp,36
   51510:	e13ffc15 	stw	r4,-16(fp)
   51514:	e17ffd15 	stw	r5,-12(fp)
   51518:	e1bffe15 	stw	r6,-8(fp)
   5151c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   51520:	00bffa84 	movi	r2,-22
   51524:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   51528:	e0bffd17 	ldw	r2,-12(fp)
   5152c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   51530:	e0bff817 	ldw	r2,-32(fp)
   51534:	10800808 	cmpgei	r2,r2,32
   51538:	1000271e 	bne	r2,zero,515d8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5153c:	0005303a 	rdctl	r2,status
   51540:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51544:	e0fffb17 	ldw	r3,-20(fp)
   51548:	00bfff84 	movi	r2,-2
   5154c:	1884703a 	and	r2,r3,r2
   51550:	1001703a 	wrctl	status,r2
  
  return context;
   51554:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   51558:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   5155c:	00800174 	movhi	r2,5
   51560:	1097f304 	addi	r2,r2,24524
   51564:	e0fff817 	ldw	r3,-32(fp)
   51568:	180690fa 	slli	r3,r3,3
   5156c:	10c5883a 	add	r2,r2,r3
   51570:	e0fffe17 	ldw	r3,-8(fp)
   51574:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   51578:	00800174 	movhi	r2,5
   5157c:	1097f304 	addi	r2,r2,24524
   51580:	e0fff817 	ldw	r3,-32(fp)
   51584:	180690fa 	slli	r3,r3,3
   51588:	10c5883a 	add	r2,r2,r3
   5158c:	10800104 	addi	r2,r2,4
   51590:	e0ffff17 	ldw	r3,-4(fp)
   51594:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   51598:	e0bffe17 	ldw	r2,-8(fp)
   5159c:	10000526 	beq	r2,zero,515b4 <alt_iic_isr_register+0xb4>
   515a0:	e0bff817 	ldw	r2,-32(fp)
   515a4:	100b883a 	mov	r5,r2
   515a8:	e13ffc17 	ldw	r4,-16(fp)
   515ac:	00513700 	call	51370 <alt_ic_irq_enable>
   515b0:	00000406 	br	515c4 <alt_iic_isr_register+0xc4>
   515b4:	e0bff817 	ldw	r2,-32(fp)
   515b8:	100b883a 	mov	r5,r2
   515bc:	e13ffc17 	ldw	r4,-16(fp)
   515c0:	00514100 	call	51410 <alt_ic_irq_disable>
   515c4:	e0bff715 	stw	r2,-36(fp)
   515c8:	e0bffa17 	ldw	r2,-24(fp)
   515cc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   515d0:	e0bff917 	ldw	r2,-28(fp)
   515d4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   515d8:	e0bff717 	ldw	r2,-36(fp)
}
   515dc:	e037883a 	mov	sp,fp
   515e0:	dfc00117 	ldw	ra,4(sp)
   515e4:	df000017 	ldw	fp,0(sp)
   515e8:	dec00204 	addi	sp,sp,8
   515ec:	f800283a 	ret

000515f0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   515f0:	defff904 	addi	sp,sp,-28
   515f4:	dfc00615 	stw	ra,24(sp)
   515f8:	df000515 	stw	fp,20(sp)
   515fc:	df000504 	addi	fp,sp,20
   51600:	e13ffc15 	stw	r4,-16(fp)
   51604:	e17ffd15 	stw	r5,-12(fp)
   51608:	e1bffe15 	stw	r6,-8(fp)
   5160c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   51610:	e1bfff17 	ldw	r6,-4(fp)
   51614:	e17ffe17 	ldw	r5,-8(fp)
   51618:	e13ffd17 	ldw	r4,-12(fp)
   5161c:	005184c0 	call	5184c <open>
   51620:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   51624:	e0bffb17 	ldw	r2,-20(fp)
   51628:	10001c16 	blt	r2,zero,5169c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   5162c:	00800174 	movhi	r2,5
   51630:	108c7904 	addi	r2,r2,12772
   51634:	e0fffb17 	ldw	r3,-20(fp)
   51638:	18c00324 	muli	r3,r3,12
   5163c:	10c5883a 	add	r2,r2,r3
   51640:	10c00017 	ldw	r3,0(r2)
   51644:	e0bffc17 	ldw	r2,-16(fp)
   51648:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   5164c:	00800174 	movhi	r2,5
   51650:	108c7904 	addi	r2,r2,12772
   51654:	e0fffb17 	ldw	r3,-20(fp)
   51658:	18c00324 	muli	r3,r3,12
   5165c:	10c5883a 	add	r2,r2,r3
   51660:	10800104 	addi	r2,r2,4
   51664:	10c00017 	ldw	r3,0(r2)
   51668:	e0bffc17 	ldw	r2,-16(fp)
   5166c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   51670:	00800174 	movhi	r2,5
   51674:	108c7904 	addi	r2,r2,12772
   51678:	e0fffb17 	ldw	r3,-20(fp)
   5167c:	18c00324 	muli	r3,r3,12
   51680:	10c5883a 	add	r2,r2,r3
   51684:	10800204 	addi	r2,r2,8
   51688:	10c00017 	ldw	r3,0(r2)
   5168c:	e0bffc17 	ldw	r2,-16(fp)
   51690:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   51694:	e13ffb17 	ldw	r4,-20(fp)
   51698:	004e42c0 	call	4e42c <alt_release_fd>
  }
} 
   5169c:	0001883a 	nop
   516a0:	e037883a 	mov	sp,fp
   516a4:	dfc00117 	ldw	ra,4(sp)
   516a8:	df000017 	ldw	fp,0(sp)
   516ac:	dec00204 	addi	sp,sp,8
   516b0:	f800283a 	ret

000516b4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   516b4:	defffb04 	addi	sp,sp,-20
   516b8:	dfc00415 	stw	ra,16(sp)
   516bc:	df000315 	stw	fp,12(sp)
   516c0:	df000304 	addi	fp,sp,12
   516c4:	e13ffd15 	stw	r4,-12(fp)
   516c8:	e17ffe15 	stw	r5,-8(fp)
   516cc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   516d0:	01c07fc4 	movi	r7,511
   516d4:	01800044 	movi	r6,1
   516d8:	e17ffd17 	ldw	r5,-12(fp)
   516dc:	01000174 	movhi	r4,5
   516e0:	210c7c04 	addi	r4,r4,12784
   516e4:	00515f00 	call	515f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   516e8:	01c07fc4 	movi	r7,511
   516ec:	000d883a 	mov	r6,zero
   516f0:	e17ffe17 	ldw	r5,-8(fp)
   516f4:	01000174 	movhi	r4,5
   516f8:	210c7904 	addi	r4,r4,12772
   516fc:	00515f00 	call	515f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   51700:	01c07fc4 	movi	r7,511
   51704:	01800044 	movi	r6,1
   51708:	e17fff17 	ldw	r5,-4(fp)
   5170c:	01000174 	movhi	r4,5
   51710:	210c7f04 	addi	r4,r4,12796
   51714:	00515f00 	call	515f0 <alt_open_fd>
}  
   51718:	0001883a 	nop
   5171c:	e037883a 	mov	sp,fp
   51720:	dfc00117 	ldw	ra,4(sp)
   51724:	df000017 	ldw	fp,0(sp)
   51728:	dec00204 	addi	sp,sp,8
   5172c:	f800283a 	ret

00051730 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   51730:	defffe04 	addi	sp,sp,-8
   51734:	dfc00115 	stw	ra,4(sp)
   51738:	df000015 	stw	fp,0(sp)
   5173c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   51740:	00800174 	movhi	r2,5
   51744:	10910a04 	addi	r2,r2,17448
   51748:	10800017 	ldw	r2,0(r2)
   5174c:	10000526 	beq	r2,zero,51764 <alt_get_errno+0x34>
   51750:	00800174 	movhi	r2,5
   51754:	10910a04 	addi	r2,r2,17448
   51758:	10800017 	ldw	r2,0(r2)
   5175c:	103ee83a 	callr	r2
   51760:	00000206 	br	5176c <alt_get_errno+0x3c>
   51764:	00800174 	movhi	r2,5
   51768:	1097e204 	addi	r2,r2,24456
}
   5176c:	e037883a 	mov	sp,fp
   51770:	dfc00117 	ldw	ra,4(sp)
   51774:	df000017 	ldw	fp,0(sp)
   51778:	dec00204 	addi	sp,sp,8
   5177c:	f800283a 	ret

00051780 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   51780:	defffd04 	addi	sp,sp,-12
   51784:	df000215 	stw	fp,8(sp)
   51788:	df000204 	addi	fp,sp,8
   5178c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   51790:	e0bfff17 	ldw	r2,-4(fp)
   51794:	10800217 	ldw	r2,8(r2)
   51798:	10d00034 	orhi	r3,r2,16384
   5179c:	e0bfff17 	ldw	r2,-4(fp)
   517a0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   517a4:	e03ffe15 	stw	zero,-8(fp)
   517a8:	00001d06 	br	51820 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   517ac:	00800174 	movhi	r2,5
   517b0:	108c7904 	addi	r2,r2,12772
   517b4:	e0fffe17 	ldw	r3,-8(fp)
   517b8:	18c00324 	muli	r3,r3,12
   517bc:	10c5883a 	add	r2,r2,r3
   517c0:	10c00017 	ldw	r3,0(r2)
   517c4:	e0bfff17 	ldw	r2,-4(fp)
   517c8:	10800017 	ldw	r2,0(r2)
   517cc:	1880111e 	bne	r3,r2,51814 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   517d0:	00800174 	movhi	r2,5
   517d4:	108c7904 	addi	r2,r2,12772
   517d8:	e0fffe17 	ldw	r3,-8(fp)
   517dc:	18c00324 	muli	r3,r3,12
   517e0:	10c5883a 	add	r2,r2,r3
   517e4:	10800204 	addi	r2,r2,8
   517e8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   517ec:	1000090e 	bge	r2,zero,51814 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   517f0:	e0bffe17 	ldw	r2,-8(fp)
   517f4:	10c00324 	muli	r3,r2,12
   517f8:	00800174 	movhi	r2,5
   517fc:	108c7904 	addi	r2,r2,12772
   51800:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   51804:	e0bfff17 	ldw	r2,-4(fp)
   51808:	18800226 	beq	r3,r2,51814 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   5180c:	00bffcc4 	movi	r2,-13
   51810:	00000a06 	br	5183c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   51814:	e0bffe17 	ldw	r2,-8(fp)
   51818:	10800044 	addi	r2,r2,1
   5181c:	e0bffe15 	stw	r2,-8(fp)
   51820:	00800174 	movhi	r2,5
   51824:	10910904 	addi	r2,r2,17444
   51828:	10800017 	ldw	r2,0(r2)
   5182c:	1007883a 	mov	r3,r2
   51830:	e0bffe17 	ldw	r2,-8(fp)
   51834:	18bfdd2e 	bgeu	r3,r2,517ac <__alt_data_end+0xfffea6ac>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   51838:	0005883a 	mov	r2,zero
}
   5183c:	e037883a 	mov	sp,fp
   51840:	df000017 	ldw	fp,0(sp)
   51844:	dec00104 	addi	sp,sp,4
   51848:	f800283a 	ret

0005184c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   5184c:	defff604 	addi	sp,sp,-40
   51850:	dfc00915 	stw	ra,36(sp)
   51854:	df000815 	stw	fp,32(sp)
   51858:	df000804 	addi	fp,sp,32
   5185c:	e13ffd15 	stw	r4,-12(fp)
   51860:	e17ffe15 	stw	r5,-8(fp)
   51864:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   51868:	00bfffc4 	movi	r2,-1
   5186c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   51870:	00bffb44 	movi	r2,-19
   51874:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   51878:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   5187c:	01400174 	movhi	r5,5
   51880:	29510704 	addi	r5,r5,17436
   51884:	e13ffd17 	ldw	r4,-12(fp)
   51888:	005125c0 	call	5125c <alt_find_dev>
   5188c:	e0bff815 	stw	r2,-32(fp)
   51890:	e0bff817 	ldw	r2,-32(fp)
   51894:	1000051e 	bne	r2,zero,518ac <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   51898:	e13ffd17 	ldw	r4,-12(fp)
   5189c:	0051ddc0 	call	51ddc <alt_find_file>
   518a0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   518a4:	00800044 	movi	r2,1
   518a8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   518ac:	e0bff817 	ldw	r2,-32(fp)
   518b0:	10002926 	beq	r2,zero,51958 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   518b4:	e13ff817 	ldw	r4,-32(fp)
   518b8:	0051ef00 	call	51ef0 <alt_get_fd>
   518bc:	e0bff915 	stw	r2,-28(fp)
   518c0:	e0bff917 	ldw	r2,-28(fp)
   518c4:	1000030e 	bge	r2,zero,518d4 <open+0x88>
    {
      status = index;
   518c8:	e0bff917 	ldw	r2,-28(fp)
   518cc:	e0bffa15 	stw	r2,-24(fp)
   518d0:	00002306 	br	51960 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   518d4:	e0bff917 	ldw	r2,-28(fp)
   518d8:	10c00324 	muli	r3,r2,12
   518dc:	00800174 	movhi	r2,5
   518e0:	108c7904 	addi	r2,r2,12772
   518e4:	1885883a 	add	r2,r3,r2
   518e8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   518ec:	e0fffe17 	ldw	r3,-8(fp)
   518f0:	00900034 	movhi	r2,16384
   518f4:	10bfffc4 	addi	r2,r2,-1
   518f8:	1886703a 	and	r3,r3,r2
   518fc:	e0bffc17 	ldw	r2,-16(fp)
   51900:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   51904:	e0bffb17 	ldw	r2,-20(fp)
   51908:	1000051e 	bne	r2,zero,51920 <open+0xd4>
   5190c:	e13ffc17 	ldw	r4,-16(fp)
   51910:	00517800 	call	51780 <alt_file_locked>
   51914:	e0bffa15 	stw	r2,-24(fp)
   51918:	e0bffa17 	ldw	r2,-24(fp)
   5191c:	10001016 	blt	r2,zero,51960 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   51920:	e0bff817 	ldw	r2,-32(fp)
   51924:	10800317 	ldw	r2,12(r2)
   51928:	10000826 	beq	r2,zero,5194c <open+0x100>
   5192c:	e0bff817 	ldw	r2,-32(fp)
   51930:	10800317 	ldw	r2,12(r2)
   51934:	e1ffff17 	ldw	r7,-4(fp)
   51938:	e1bffe17 	ldw	r6,-8(fp)
   5193c:	e17ffd17 	ldw	r5,-12(fp)
   51940:	e13ffc17 	ldw	r4,-16(fp)
   51944:	103ee83a 	callr	r2
   51948:	00000106 	br	51950 <open+0x104>
   5194c:	0005883a 	mov	r2,zero
   51950:	e0bffa15 	stw	r2,-24(fp)
   51954:	00000206 	br	51960 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   51958:	00bffb44 	movi	r2,-19
   5195c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   51960:	e0bffa17 	ldw	r2,-24(fp)
   51964:	1000090e 	bge	r2,zero,5198c <open+0x140>
  {
    alt_release_fd (index);  
   51968:	e13ff917 	ldw	r4,-28(fp)
   5196c:	004e42c0 	call	4e42c <alt_release_fd>
    ALT_ERRNO = -status;
   51970:	00517300 	call	51730 <alt_get_errno>
   51974:	1007883a 	mov	r3,r2
   51978:	e0bffa17 	ldw	r2,-24(fp)
   5197c:	0085c83a 	sub	r2,zero,r2
   51980:	18800015 	stw	r2,0(r3)
    return -1;
   51984:	00bfffc4 	movi	r2,-1
   51988:	00000106 	br	51990 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   5198c:	e0bff917 	ldw	r2,-28(fp)
}
   51990:	e037883a 	mov	sp,fp
   51994:	dfc00117 	ldw	ra,4(sp)
   51998:	df000017 	ldw	fp,0(sp)
   5199c:	dec00204 	addi	sp,sp,8
   519a0:	f800283a 	ret

000519a4 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   519a4:	defff204 	addi	sp,sp,-56
   519a8:	dfc00a15 	stw	ra,40(sp)
   519ac:	df000915 	stw	fp,36(sp)
   519b0:	df000904 	addi	fp,sp,36
   519b4:	e13fff15 	stw	r4,-4(fp)
   519b8:	e1400215 	stw	r5,8(fp)
   519bc:	e1800315 	stw	r6,12(fp)
   519c0:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   519c4:	e0800204 	addi	r2,fp,8
   519c8:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   519cc:	e0bfff17 	ldw	r2,-4(fp)
   519d0:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   519d4:	00006f06 	br	51b94 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   519d8:	e0bff807 	ldb	r2,-32(fp)
   519dc:	10800960 	cmpeqi	r2,r2,37
   519e0:	1000041e 	bne	r2,zero,519f4 <alt_printf+0x50>
        {
            alt_putchar(c);
   519e4:	e0bff807 	ldb	r2,-32(fp)
   519e8:	1009883a 	mov	r4,r2
   519ec:	0051bd00 	call	51bd0 <alt_putchar>
   519f0:	00006806 	br	51b94 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   519f4:	e0bff717 	ldw	r2,-36(fp)
   519f8:	10c00044 	addi	r3,r2,1
   519fc:	e0fff715 	stw	r3,-36(fp)
   51a00:	10800003 	ldbu	r2,0(r2)
   51a04:	e0bff805 	stb	r2,-32(fp)
   51a08:	e0bff807 	ldb	r2,-32(fp)
   51a0c:	10006926 	beq	r2,zero,51bb4 <alt_printf+0x210>
            {
                if (c == '%')
   51a10:	e0bff807 	ldb	r2,-32(fp)
   51a14:	10800958 	cmpnei	r2,r2,37
   51a18:	1000041e 	bne	r2,zero,51a2c <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   51a1c:	e0bff807 	ldb	r2,-32(fp)
   51a20:	1009883a 	mov	r4,r2
   51a24:	0051bd00 	call	51bd0 <alt_putchar>
   51a28:	00005a06 	br	51b94 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   51a2c:	e0bff807 	ldb	r2,-32(fp)
   51a30:	108018d8 	cmpnei	r2,r2,99
   51a34:	1000081e 	bne	r2,zero,51a58 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   51a38:	e0bffe17 	ldw	r2,-8(fp)
   51a3c:	10c00104 	addi	r3,r2,4
   51a40:	e0fffe15 	stw	r3,-8(fp)
   51a44:	10800017 	ldw	r2,0(r2)
   51a48:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   51a4c:	e13ffd17 	ldw	r4,-12(fp)
   51a50:	0051bd00 	call	51bd0 <alt_putchar>
   51a54:	00004f06 	br	51b94 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   51a58:	e0bff807 	ldb	r2,-32(fp)
   51a5c:	10801e18 	cmpnei	r2,r2,120
   51a60:	1000341e 	bne	r2,zero,51b34 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   51a64:	e0bffe17 	ldw	r2,-8(fp)
   51a68:	10c00104 	addi	r3,r2,4
   51a6c:	e0fffe15 	stw	r3,-8(fp)
   51a70:	10800017 	ldw	r2,0(r2)
   51a74:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   51a78:	e0bffb17 	ldw	r2,-20(fp)
   51a7c:	1000031e 	bne	r2,zero,51a8c <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   51a80:	01000c04 	movi	r4,48
   51a84:	0051bd00 	call	51bd0 <alt_putchar>
                        continue;
   51a88:	00004206 	br	51b94 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   51a8c:	00800704 	movi	r2,28
   51a90:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   51a94:	00000306 	br	51aa4 <alt_printf+0x100>
                        digit_shift -= 4;
   51a98:	e0bff917 	ldw	r2,-28(fp)
   51a9c:	10bfff04 	addi	r2,r2,-4
   51aa0:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   51aa4:	00c003c4 	movi	r3,15
   51aa8:	e0bff917 	ldw	r2,-28(fp)
   51aac:	1884983a 	sll	r2,r3,r2
   51ab0:	1007883a 	mov	r3,r2
   51ab4:	e0bffb17 	ldw	r2,-20(fp)
   51ab8:	1884703a 	and	r2,r3,r2
   51abc:	103ff626 	beq	r2,zero,51a98 <__alt_data_end+0xfffea998>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   51ac0:	00001906 	br	51b28 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   51ac4:	00c003c4 	movi	r3,15
   51ac8:	e0bff917 	ldw	r2,-28(fp)
   51acc:	1884983a 	sll	r2,r3,r2
   51ad0:	1007883a 	mov	r3,r2
   51ad4:	e0bffb17 	ldw	r2,-20(fp)
   51ad8:	1886703a 	and	r3,r3,r2
   51adc:	e0bff917 	ldw	r2,-28(fp)
   51ae0:	1884d83a 	srl	r2,r3,r2
   51ae4:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   51ae8:	e0bffc17 	ldw	r2,-16(fp)
   51aec:	108002a8 	cmpgeui	r2,r2,10
   51af0:	1000041e 	bne	r2,zero,51b04 <alt_printf+0x160>
                            c = '0' + digit;
   51af4:	e0bffc17 	ldw	r2,-16(fp)
   51af8:	10800c04 	addi	r2,r2,48
   51afc:	e0bff805 	stb	r2,-32(fp)
   51b00:	00000306 	br	51b10 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   51b04:	e0bffc17 	ldw	r2,-16(fp)
   51b08:	108015c4 	addi	r2,r2,87
   51b0c:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   51b10:	e0bff807 	ldb	r2,-32(fp)
   51b14:	1009883a 	mov	r4,r2
   51b18:	0051bd00 	call	51bd0 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   51b1c:	e0bff917 	ldw	r2,-28(fp)
   51b20:	10bfff04 	addi	r2,r2,-4
   51b24:	e0bff915 	stw	r2,-28(fp)
   51b28:	e0bff917 	ldw	r2,-28(fp)
   51b2c:	103fe50e 	bge	r2,zero,51ac4 <__alt_data_end+0xfffea9c4>
   51b30:	00001806 	br	51b94 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   51b34:	e0bff807 	ldb	r2,-32(fp)
   51b38:	10801cd8 	cmpnei	r2,r2,115
   51b3c:	1000151e 	bne	r2,zero,51b94 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   51b40:	e0bffe17 	ldw	r2,-8(fp)
   51b44:	10c00104 	addi	r3,r2,4
   51b48:	e0fffe15 	stw	r3,-8(fp)
   51b4c:	10800017 	ldw	r2,0(r2)
   51b50:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   51b54:	00000906 	br	51b7c <alt_printf+0x1d8>
                      alt_putchar(*s++);
   51b58:	e0bffa17 	ldw	r2,-24(fp)
   51b5c:	10c00044 	addi	r3,r2,1
   51b60:	e0fffa15 	stw	r3,-24(fp)
   51b64:	10800003 	ldbu	r2,0(r2)
   51b68:	10803fcc 	andi	r2,r2,255
   51b6c:	1080201c 	xori	r2,r2,128
   51b70:	10bfe004 	addi	r2,r2,-128
   51b74:	1009883a 	mov	r4,r2
   51b78:	0051bd00 	call	51bd0 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   51b7c:	e0bffa17 	ldw	r2,-24(fp)
   51b80:	10800003 	ldbu	r2,0(r2)
   51b84:	10803fcc 	andi	r2,r2,255
   51b88:	1080201c 	xori	r2,r2,128
   51b8c:	10bfe004 	addi	r2,r2,-128
   51b90:	103ff11e 	bne	r2,zero,51b58 <__alt_data_end+0xfffeaa58>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   51b94:	e0bff717 	ldw	r2,-36(fp)
   51b98:	10c00044 	addi	r3,r2,1
   51b9c:	e0fff715 	stw	r3,-36(fp)
   51ba0:	10800003 	ldbu	r2,0(r2)
   51ba4:	e0bff805 	stb	r2,-32(fp)
   51ba8:	e0bff807 	ldb	r2,-32(fp)
   51bac:	103f8a1e 	bne	r2,zero,519d8 <__alt_data_end+0xfffea8d8>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   51bb0:	00000106 	br	51bb8 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   51bb4:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   51bb8:	0001883a 	nop
   51bbc:	e037883a 	mov	sp,fp
   51bc0:	dfc00117 	ldw	ra,4(sp)
   51bc4:	df000017 	ldw	fp,0(sp)
   51bc8:	dec00504 	addi	sp,sp,20
   51bcc:	f800283a 	ret

00051bd0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   51bd0:	defffd04 	addi	sp,sp,-12
   51bd4:	dfc00215 	stw	ra,8(sp)
   51bd8:	df000115 	stw	fp,4(sp)
   51bdc:	df000104 	addi	fp,sp,4
   51be0:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   51be4:	00800174 	movhi	r2,5
   51be8:	10910004 	addi	r2,r2,17408
   51bec:	10800017 	ldw	r2,0(r2)
   51bf0:	10800217 	ldw	r2,8(r2)
   51bf4:	100b883a 	mov	r5,r2
   51bf8:	e13fff17 	ldw	r4,-4(fp)
   51bfc:	005219c0 	call	5219c <putc>
#endif
#endif
}
   51c00:	e037883a 	mov	sp,fp
   51c04:	dfc00117 	ldw	ra,4(sp)
   51c08:	df000017 	ldw	fp,0(sp)
   51c0c:	dec00204 	addi	sp,sp,8
   51c10:	f800283a 	ret

00051c14 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   51c14:	defffa04 	addi	sp,sp,-24
   51c18:	df000515 	stw	fp,20(sp)
   51c1c:	df000504 	addi	fp,sp,20
   51c20:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51c24:	0005303a 	rdctl	r2,status
   51c28:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51c2c:	e0fffc17 	ldw	r3,-16(fp)
   51c30:	00bfff84 	movi	r2,-2
   51c34:	1884703a 	and	r2,r3,r2
   51c38:	1001703a 	wrctl	status,r2
  
  return context;
   51c3c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   51c40:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   51c44:	e0bfff17 	ldw	r2,-4(fp)
   51c48:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   51c4c:	e0bffd17 	ldw	r2,-12(fp)
   51c50:	10800017 	ldw	r2,0(r2)
   51c54:	e0fffd17 	ldw	r3,-12(fp)
   51c58:	18c00117 	ldw	r3,4(r3)
   51c5c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   51c60:	e0bffd17 	ldw	r2,-12(fp)
   51c64:	10800117 	ldw	r2,4(r2)
   51c68:	e0fffd17 	ldw	r3,-12(fp)
   51c6c:	18c00017 	ldw	r3,0(r3)
   51c70:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   51c74:	e0bffd17 	ldw	r2,-12(fp)
   51c78:	e0fffd17 	ldw	r3,-12(fp)
   51c7c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   51c80:	e0bffd17 	ldw	r2,-12(fp)
   51c84:	e0fffd17 	ldw	r3,-12(fp)
   51c88:	10c00015 	stw	r3,0(r2)
   51c8c:	e0bffb17 	ldw	r2,-20(fp)
   51c90:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51c94:	e0bffe17 	ldw	r2,-8(fp)
   51c98:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   51c9c:	0001883a 	nop
   51ca0:	e037883a 	mov	sp,fp
   51ca4:	df000017 	ldw	fp,0(sp)
   51ca8:	dec00104 	addi	sp,sp,4
   51cac:	f800283a 	ret

00051cb0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   51cb0:	defffb04 	addi	sp,sp,-20
   51cb4:	dfc00415 	stw	ra,16(sp)
   51cb8:	df000315 	stw	fp,12(sp)
   51cbc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   51cc0:	d0a01017 	ldw	r2,-32704(gp)
   51cc4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   51cc8:	d0a6e917 	ldw	r2,-25692(gp)
   51ccc:	10800044 	addi	r2,r2,1
   51cd0:	d0a6e915 	stw	r2,-25692(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   51cd4:	00002e06 	br	51d90 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   51cd8:	e0bffd17 	ldw	r2,-12(fp)
   51cdc:	10800017 	ldw	r2,0(r2)
   51ce0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   51ce4:	e0bffd17 	ldw	r2,-12(fp)
   51ce8:	10800403 	ldbu	r2,16(r2)
   51cec:	10803fcc 	andi	r2,r2,255
   51cf0:	10000426 	beq	r2,zero,51d04 <alt_tick+0x54>
   51cf4:	d0a6e917 	ldw	r2,-25692(gp)
   51cf8:	1000021e 	bne	r2,zero,51d04 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   51cfc:	e0bffd17 	ldw	r2,-12(fp)
   51d00:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   51d04:	e0bffd17 	ldw	r2,-12(fp)
   51d08:	10800217 	ldw	r2,8(r2)
   51d0c:	d0e6e917 	ldw	r3,-25692(gp)
   51d10:	18801d36 	bltu	r3,r2,51d88 <alt_tick+0xd8>
   51d14:	e0bffd17 	ldw	r2,-12(fp)
   51d18:	10800403 	ldbu	r2,16(r2)
   51d1c:	10803fcc 	andi	r2,r2,255
   51d20:	1000191e 	bne	r2,zero,51d88 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   51d24:	e0bffd17 	ldw	r2,-12(fp)
   51d28:	10800317 	ldw	r2,12(r2)
   51d2c:	e0fffd17 	ldw	r3,-12(fp)
   51d30:	18c00517 	ldw	r3,20(r3)
   51d34:	1809883a 	mov	r4,r3
   51d38:	103ee83a 	callr	r2
   51d3c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   51d40:	e0bfff17 	ldw	r2,-4(fp)
   51d44:	1000031e 	bne	r2,zero,51d54 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   51d48:	e13ffd17 	ldw	r4,-12(fp)
   51d4c:	0051c140 	call	51c14 <alt_alarm_stop>
   51d50:	00000d06 	br	51d88 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   51d54:	e0bffd17 	ldw	r2,-12(fp)
   51d58:	10c00217 	ldw	r3,8(r2)
   51d5c:	e0bfff17 	ldw	r2,-4(fp)
   51d60:	1887883a 	add	r3,r3,r2
   51d64:	e0bffd17 	ldw	r2,-12(fp)
   51d68:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   51d6c:	e0bffd17 	ldw	r2,-12(fp)
   51d70:	10c00217 	ldw	r3,8(r2)
   51d74:	d0a6e917 	ldw	r2,-25692(gp)
   51d78:	1880032e 	bgeu	r3,r2,51d88 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   51d7c:	e0bffd17 	ldw	r2,-12(fp)
   51d80:	00c00044 	movi	r3,1
   51d84:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   51d88:	e0bffe17 	ldw	r2,-8(fp)
   51d8c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   51d90:	e0fffd17 	ldw	r3,-12(fp)
   51d94:	d0a01004 	addi	r2,gp,-32704
   51d98:	18bfcf1e 	bne	r3,r2,51cd8 <__alt_data_end+0xfffeabd8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   51d9c:	0001883a 	nop
}
   51da0:	0001883a 	nop
   51da4:	e037883a 	mov	sp,fp
   51da8:	dfc00117 	ldw	ra,4(sp)
   51dac:	df000017 	ldw	fp,0(sp)
   51db0:	dec00204 	addi	sp,sp,8
   51db4:	f800283a 	ret

00051db8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   51db8:	deffff04 	addi	sp,sp,-4
   51dbc:	df000015 	stw	fp,0(sp)
   51dc0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   51dc4:	000170fa 	wrctl	ienable,zero
}
   51dc8:	0001883a 	nop
   51dcc:	e037883a 	mov	sp,fp
   51dd0:	df000017 	ldw	fp,0(sp)
   51dd4:	dec00104 	addi	sp,sp,4
   51dd8:	f800283a 	ret

00051ddc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   51ddc:	defffb04 	addi	sp,sp,-20
   51de0:	dfc00415 	stw	ra,16(sp)
   51de4:	df000315 	stw	fp,12(sp)
   51de8:	df000304 	addi	fp,sp,12
   51dec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   51df0:	00800174 	movhi	r2,5
   51df4:	10910504 	addi	r2,r2,17428
   51df8:	10800017 	ldw	r2,0(r2)
   51dfc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   51e00:	00003106 	br	51ec8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   51e04:	e0bffd17 	ldw	r2,-12(fp)
   51e08:	10800217 	ldw	r2,8(r2)
   51e0c:	1009883a 	mov	r4,r2
   51e10:	00415500 	call	41550 <strlen>
   51e14:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   51e18:	e0bffd17 	ldw	r2,-12(fp)
   51e1c:	10c00217 	ldw	r3,8(r2)
   51e20:	e0bffe17 	ldw	r2,-8(fp)
   51e24:	10bfffc4 	addi	r2,r2,-1
   51e28:	1885883a 	add	r2,r3,r2
   51e2c:	10800003 	ldbu	r2,0(r2)
   51e30:	10803fcc 	andi	r2,r2,255
   51e34:	1080201c 	xori	r2,r2,128
   51e38:	10bfe004 	addi	r2,r2,-128
   51e3c:	10800bd8 	cmpnei	r2,r2,47
   51e40:	1000031e 	bne	r2,zero,51e50 <alt_find_file+0x74>
    {
      len -= 1;
   51e44:	e0bffe17 	ldw	r2,-8(fp)
   51e48:	10bfffc4 	addi	r2,r2,-1
   51e4c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   51e50:	e0bffe17 	ldw	r2,-8(fp)
   51e54:	e0ffff17 	ldw	r3,-4(fp)
   51e58:	1885883a 	add	r2,r3,r2
   51e5c:	10800003 	ldbu	r2,0(r2)
   51e60:	10803fcc 	andi	r2,r2,255
   51e64:	1080201c 	xori	r2,r2,128
   51e68:	10bfe004 	addi	r2,r2,-128
   51e6c:	10800be0 	cmpeqi	r2,r2,47
   51e70:	1000081e 	bne	r2,zero,51e94 <alt_find_file+0xb8>
   51e74:	e0bffe17 	ldw	r2,-8(fp)
   51e78:	e0ffff17 	ldw	r3,-4(fp)
   51e7c:	1885883a 	add	r2,r3,r2
   51e80:	10800003 	ldbu	r2,0(r2)
   51e84:	10803fcc 	andi	r2,r2,255
   51e88:	1080201c 	xori	r2,r2,128
   51e8c:	10bfe004 	addi	r2,r2,-128
   51e90:	10000a1e 	bne	r2,zero,51ebc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   51e94:	e0bffd17 	ldw	r2,-12(fp)
   51e98:	10800217 	ldw	r2,8(r2)
   51e9c:	e0fffe17 	ldw	r3,-8(fp)
   51ea0:	180d883a 	mov	r6,r3
   51ea4:	e17fff17 	ldw	r5,-4(fp)
   51ea8:	1009883a 	mov	r4,r2
   51eac:	00520800 	call	52080 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   51eb0:	1000021e 	bne	r2,zero,51ebc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   51eb4:	e0bffd17 	ldw	r2,-12(fp)
   51eb8:	00000806 	br	51edc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   51ebc:	e0bffd17 	ldw	r2,-12(fp)
   51ec0:	10800017 	ldw	r2,0(r2)
   51ec4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   51ec8:	e0fffd17 	ldw	r3,-12(fp)
   51ecc:	00800174 	movhi	r2,5
   51ed0:	10910504 	addi	r2,r2,17428
   51ed4:	18bfcb1e 	bne	r3,r2,51e04 <__alt_data_end+0xfffead04>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   51ed8:	0005883a 	mov	r2,zero
}
   51edc:	e037883a 	mov	sp,fp
   51ee0:	dfc00117 	ldw	ra,4(sp)
   51ee4:	df000017 	ldw	fp,0(sp)
   51ee8:	dec00204 	addi	sp,sp,8
   51eec:	f800283a 	ret

00051ef0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   51ef0:	defffc04 	addi	sp,sp,-16
   51ef4:	df000315 	stw	fp,12(sp)
   51ef8:	df000304 	addi	fp,sp,12
   51efc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   51f00:	00bffa04 	movi	r2,-24
   51f04:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   51f08:	e03ffd15 	stw	zero,-12(fp)
   51f0c:	00001d06 	br	51f84 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   51f10:	00800174 	movhi	r2,5
   51f14:	108c7904 	addi	r2,r2,12772
   51f18:	e0fffd17 	ldw	r3,-12(fp)
   51f1c:	18c00324 	muli	r3,r3,12
   51f20:	10c5883a 	add	r2,r2,r3
   51f24:	10800017 	ldw	r2,0(r2)
   51f28:	1000131e 	bne	r2,zero,51f78 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   51f2c:	00800174 	movhi	r2,5
   51f30:	108c7904 	addi	r2,r2,12772
   51f34:	e0fffd17 	ldw	r3,-12(fp)
   51f38:	18c00324 	muli	r3,r3,12
   51f3c:	10c5883a 	add	r2,r2,r3
   51f40:	e0ffff17 	ldw	r3,-4(fp)
   51f44:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   51f48:	00800174 	movhi	r2,5
   51f4c:	10910904 	addi	r2,r2,17444
   51f50:	10c00017 	ldw	r3,0(r2)
   51f54:	e0bffd17 	ldw	r2,-12(fp)
   51f58:	1880040e 	bge	r3,r2,51f6c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   51f5c:	00800174 	movhi	r2,5
   51f60:	10910904 	addi	r2,r2,17444
   51f64:	e0fffd17 	ldw	r3,-12(fp)
   51f68:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   51f6c:	e0bffd17 	ldw	r2,-12(fp)
   51f70:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   51f74:	00000606 	br	51f90 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   51f78:	e0bffd17 	ldw	r2,-12(fp)
   51f7c:	10800044 	addi	r2,r2,1
   51f80:	e0bffd15 	stw	r2,-12(fp)
   51f84:	e0bffd17 	ldw	r2,-12(fp)
   51f88:	10800810 	cmplti	r2,r2,32
   51f8c:	103fe01e 	bne	r2,zero,51f10 <__alt_data_end+0xfffeae10>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   51f90:	e0bffe17 	ldw	r2,-8(fp)
}
   51f94:	e037883a 	mov	sp,fp
   51f98:	df000017 	ldw	fp,0(sp)
   51f9c:	dec00104 	addi	sp,sp,4
   51fa0:	f800283a 	ret

00051fa4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   51fa4:	defffb04 	addi	sp,sp,-20
   51fa8:	df000415 	stw	fp,16(sp)
   51fac:	df000404 	addi	fp,sp,16
   51fb0:	e13ffe15 	stw	r4,-8(fp)
   51fb4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   51fb8:	e0bfff17 	ldw	r2,-4(fp)
   51fbc:	10840070 	cmpltui	r2,r2,4097
   51fc0:	1000021e 	bne	r2,zero,51fcc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   51fc4:	00840004 	movi	r2,4096
   51fc8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   51fcc:	e0fffe17 	ldw	r3,-8(fp)
   51fd0:	e0bfff17 	ldw	r2,-4(fp)
   51fd4:	1885883a 	add	r2,r3,r2
   51fd8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   51fdc:	e0bffe17 	ldw	r2,-8(fp)
   51fe0:	e0bffc15 	stw	r2,-16(fp)
   51fe4:	00000506 	br	51ffc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   51fe8:	e0bffc17 	ldw	r2,-16(fp)
   51fec:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   51ff0:	e0bffc17 	ldw	r2,-16(fp)
   51ff4:	10800804 	addi	r2,r2,32
   51ff8:	e0bffc15 	stw	r2,-16(fp)
   51ffc:	e0fffc17 	ldw	r3,-16(fp)
   52000:	e0bffd17 	ldw	r2,-12(fp)
   52004:	18bff836 	bltu	r3,r2,51fe8 <__alt_data_end+0xfffeaee8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   52008:	e0bffe17 	ldw	r2,-8(fp)
   5200c:	108007cc 	andi	r2,r2,31
   52010:	10000226 	beq	r2,zero,5201c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   52014:	e0bffc17 	ldw	r2,-16(fp)
   52018:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   5201c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   52020:	0001883a 	nop
   52024:	e037883a 	mov	sp,fp
   52028:	df000017 	ldw	fp,0(sp)
   5202c:	dec00104 	addi	sp,sp,4
   52030:	f800283a 	ret

00052034 <atexit>:
   52034:	200b883a 	mov	r5,r4
   52038:	000f883a 	mov	r7,zero
   5203c:	000d883a 	mov	r6,zero
   52040:	0009883a 	mov	r4,zero
   52044:	00522641 	jmpi	52264 <__register_exitproc>

00052048 <exit>:
   52048:	defffe04 	addi	sp,sp,-8
   5204c:	000b883a 	mov	r5,zero
   52050:	dc000015 	stw	r16,0(sp)
   52054:	dfc00115 	stw	ra,4(sp)
   52058:	2021883a 	mov	r16,r4
   5205c:	005237c0 	call	5237c <__call_exitprocs>
   52060:	00800174 	movhi	r2,5
   52064:	1090ff04 	addi	r2,r2,17404
   52068:	11000017 	ldw	r4,0(r2)
   5206c:	20800f17 	ldw	r2,60(r4)
   52070:	10000126 	beq	r2,zero,52078 <exit+0x30>
   52074:	103ee83a 	callr	r2
   52078:	8009883a 	mov	r4,r16
   5207c:	00524fc0 	call	524fc <_exit>

00052080 <memcmp>:
   52080:	01c000c4 	movi	r7,3
   52084:	3980192e 	bgeu	r7,r6,520ec <memcmp+0x6c>
   52088:	2144b03a 	or	r2,r4,r5
   5208c:	11c4703a 	and	r2,r2,r7
   52090:	10000f26 	beq	r2,zero,520d0 <memcmp+0x50>
   52094:	20800003 	ldbu	r2,0(r4)
   52098:	28c00003 	ldbu	r3,0(r5)
   5209c:	10c0151e 	bne	r2,r3,520f4 <memcmp+0x74>
   520a0:	31bfff84 	addi	r6,r6,-2
   520a4:	01ffffc4 	movi	r7,-1
   520a8:	00000406 	br	520bc <memcmp+0x3c>
   520ac:	20800003 	ldbu	r2,0(r4)
   520b0:	28c00003 	ldbu	r3,0(r5)
   520b4:	31bfffc4 	addi	r6,r6,-1
   520b8:	10c00e1e 	bne	r2,r3,520f4 <memcmp+0x74>
   520bc:	21000044 	addi	r4,r4,1
   520c0:	29400044 	addi	r5,r5,1
   520c4:	31fff91e 	bne	r6,r7,520ac <__alt_data_end+0xfffeafac>
   520c8:	0005883a 	mov	r2,zero
   520cc:	f800283a 	ret
   520d0:	20c00017 	ldw	r3,0(r4)
   520d4:	28800017 	ldw	r2,0(r5)
   520d8:	18bfee1e 	bne	r3,r2,52094 <__alt_data_end+0xfffeaf94>
   520dc:	31bfff04 	addi	r6,r6,-4
   520e0:	21000104 	addi	r4,r4,4
   520e4:	29400104 	addi	r5,r5,4
   520e8:	39bff936 	bltu	r7,r6,520d0 <__alt_data_end+0xfffeafd0>
   520ec:	303fe91e 	bne	r6,zero,52094 <__alt_data_end+0xfffeaf94>
   520f0:	003ff506 	br	520c8 <__alt_data_end+0xfffeafc8>
   520f4:	10c5c83a 	sub	r2,r2,r3
   520f8:	f800283a 	ret

000520fc <_putc_r>:
   520fc:	defffc04 	addi	sp,sp,-16
   52100:	dc000215 	stw	r16,8(sp)
   52104:	dfc00315 	stw	ra,12(sp)
   52108:	2021883a 	mov	r16,r4
   5210c:	20000226 	beq	r4,zero,52118 <_putc_r+0x1c>
   52110:	20800e17 	ldw	r2,56(r4)
   52114:	10001b26 	beq	r2,zero,52184 <_putc_r+0x88>
   52118:	30800217 	ldw	r2,8(r6)
   5211c:	10bfffc4 	addi	r2,r2,-1
   52120:	30800215 	stw	r2,8(r6)
   52124:	10000a16 	blt	r2,zero,52150 <_putc_r+0x54>
   52128:	30800017 	ldw	r2,0(r6)
   5212c:	11400005 	stb	r5,0(r2)
   52130:	30800017 	ldw	r2,0(r6)
   52134:	10c00044 	addi	r3,r2,1
   52138:	30c00015 	stw	r3,0(r6)
   5213c:	10800003 	ldbu	r2,0(r2)
   52140:	dfc00317 	ldw	ra,12(sp)
   52144:	dc000217 	ldw	r16,8(sp)
   52148:	dec00404 	addi	sp,sp,16
   5214c:	f800283a 	ret
   52150:	30c00617 	ldw	r3,24(r6)
   52154:	10c00616 	blt	r2,r3,52170 <_putc_r+0x74>
   52158:	30800017 	ldw	r2,0(r6)
   5215c:	00c00284 	movi	r3,10
   52160:	11400005 	stb	r5,0(r2)
   52164:	30800017 	ldw	r2,0(r6)
   52168:	11400003 	ldbu	r5,0(r2)
   5216c:	28fff11e 	bne	r5,r3,52134 <__alt_data_end+0xfffeb034>
   52170:	8009883a 	mov	r4,r16
   52174:	dfc00317 	ldw	ra,12(sp)
   52178:	dc000217 	ldw	r16,8(sp)
   5217c:	dec00404 	addi	sp,sp,16
   52180:	004a7241 	jmpi	4a724 <__swbuf_r>
   52184:	d9400015 	stw	r5,0(sp)
   52188:	d9800115 	stw	r6,4(sp)
   5218c:	004588c0 	call	4588c <__sinit>
   52190:	d9800117 	ldw	r6,4(sp)
   52194:	d9400017 	ldw	r5,0(sp)
   52198:	003fdf06 	br	52118 <__alt_data_end+0xfffeb018>

0005219c <putc>:
   5219c:	00800174 	movhi	r2,5
   521a0:	defffc04 	addi	sp,sp,-16
   521a4:	10910004 	addi	r2,r2,17408
   521a8:	dc000115 	stw	r16,4(sp)
   521ac:	14000017 	ldw	r16,0(r2)
   521b0:	dc400215 	stw	r17,8(sp)
   521b4:	dfc00315 	stw	ra,12(sp)
   521b8:	2023883a 	mov	r17,r4
   521bc:	80000226 	beq	r16,zero,521c8 <putc+0x2c>
   521c0:	80800e17 	ldw	r2,56(r16)
   521c4:	10001a26 	beq	r2,zero,52230 <putc+0x94>
   521c8:	28800217 	ldw	r2,8(r5)
   521cc:	10bfffc4 	addi	r2,r2,-1
   521d0:	28800215 	stw	r2,8(r5)
   521d4:	10000b16 	blt	r2,zero,52204 <putc+0x68>
   521d8:	28800017 	ldw	r2,0(r5)
   521dc:	14400005 	stb	r17,0(r2)
   521e0:	28800017 	ldw	r2,0(r5)
   521e4:	10c00044 	addi	r3,r2,1
   521e8:	28c00015 	stw	r3,0(r5)
   521ec:	10800003 	ldbu	r2,0(r2)
   521f0:	dfc00317 	ldw	ra,12(sp)
   521f4:	dc400217 	ldw	r17,8(sp)
   521f8:	dc000117 	ldw	r16,4(sp)
   521fc:	dec00404 	addi	sp,sp,16
   52200:	f800283a 	ret
   52204:	28c00617 	ldw	r3,24(r5)
   52208:	10c00e16 	blt	r2,r3,52244 <putc+0xa8>
   5220c:	28800017 	ldw	r2,0(r5)
   52210:	01000284 	movi	r4,10
   52214:	14400005 	stb	r17,0(r2)
   52218:	28800017 	ldw	r2,0(r5)
   5221c:	10c00003 	ldbu	r3,0(r2)
   52220:	193ff01e 	bne	r3,r4,521e4 <__alt_data_end+0xfffeb0e4>
   52224:	280d883a 	mov	r6,r5
   52228:	180b883a 	mov	r5,r3
   5222c:	00000706 	br	5224c <putc+0xb0>
   52230:	8009883a 	mov	r4,r16
   52234:	d9400015 	stw	r5,0(sp)
   52238:	004588c0 	call	4588c <__sinit>
   5223c:	d9400017 	ldw	r5,0(sp)
   52240:	003fe106 	br	521c8 <__alt_data_end+0xfffeb0c8>
   52244:	280d883a 	mov	r6,r5
   52248:	880b883a 	mov	r5,r17
   5224c:	8009883a 	mov	r4,r16
   52250:	dfc00317 	ldw	ra,12(sp)
   52254:	dc400217 	ldw	r17,8(sp)
   52258:	dc000117 	ldw	r16,4(sp)
   5225c:	dec00404 	addi	sp,sp,16
   52260:	004a7241 	jmpi	4a724 <__swbuf_r>

00052264 <__register_exitproc>:
   52264:	defffa04 	addi	sp,sp,-24
   52268:	dc000315 	stw	r16,12(sp)
   5226c:	04000174 	movhi	r16,5
   52270:	8410ff04 	addi	r16,r16,17404
   52274:	80c00017 	ldw	r3,0(r16)
   52278:	dc400415 	stw	r17,16(sp)
   5227c:	dfc00515 	stw	ra,20(sp)
   52280:	18805217 	ldw	r2,328(r3)
   52284:	2023883a 	mov	r17,r4
   52288:	10003726 	beq	r2,zero,52368 <__register_exitproc+0x104>
   5228c:	10c00117 	ldw	r3,4(r2)
   52290:	010007c4 	movi	r4,31
   52294:	20c00e16 	blt	r4,r3,522d0 <__register_exitproc+0x6c>
   52298:	1a000044 	addi	r8,r3,1
   5229c:	8800221e 	bne	r17,zero,52328 <__register_exitproc+0xc4>
   522a0:	18c00084 	addi	r3,r3,2
   522a4:	18c7883a 	add	r3,r3,r3
   522a8:	18c7883a 	add	r3,r3,r3
   522ac:	12000115 	stw	r8,4(r2)
   522b0:	10c7883a 	add	r3,r2,r3
   522b4:	19400015 	stw	r5,0(r3)
   522b8:	0005883a 	mov	r2,zero
   522bc:	dfc00517 	ldw	ra,20(sp)
   522c0:	dc400417 	ldw	r17,16(sp)
   522c4:	dc000317 	ldw	r16,12(sp)
   522c8:	dec00604 	addi	sp,sp,24
   522cc:	f800283a 	ret
   522d0:	00800034 	movhi	r2,0
   522d4:	10800004 	addi	r2,r2,0
   522d8:	10002626 	beq	r2,zero,52374 <__register_exitproc+0x110>
   522dc:	01006404 	movi	r4,400
   522e0:	d9400015 	stw	r5,0(sp)
   522e4:	d9800115 	stw	r6,4(sp)
   522e8:	d9c00215 	stw	r7,8(sp)
   522ec:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>
   522f0:	d9400017 	ldw	r5,0(sp)
   522f4:	d9800117 	ldw	r6,4(sp)
   522f8:	d9c00217 	ldw	r7,8(sp)
   522fc:	10001d26 	beq	r2,zero,52374 <__register_exitproc+0x110>
   52300:	81000017 	ldw	r4,0(r16)
   52304:	10000115 	stw	zero,4(r2)
   52308:	02000044 	movi	r8,1
   5230c:	22405217 	ldw	r9,328(r4)
   52310:	0007883a 	mov	r3,zero
   52314:	12400015 	stw	r9,0(r2)
   52318:	20805215 	stw	r2,328(r4)
   5231c:	10006215 	stw	zero,392(r2)
   52320:	10006315 	stw	zero,396(r2)
   52324:	883fde26 	beq	r17,zero,522a0 <__alt_data_end+0xfffeb1a0>
   52328:	18c9883a 	add	r4,r3,r3
   5232c:	2109883a 	add	r4,r4,r4
   52330:	1109883a 	add	r4,r2,r4
   52334:	21802215 	stw	r6,136(r4)
   52338:	01800044 	movi	r6,1
   5233c:	12406217 	ldw	r9,392(r2)
   52340:	30cc983a 	sll	r6,r6,r3
   52344:	4992b03a 	or	r9,r9,r6
   52348:	12406215 	stw	r9,392(r2)
   5234c:	21c04215 	stw	r7,264(r4)
   52350:	01000084 	movi	r4,2
   52354:	893fd21e 	bne	r17,r4,522a0 <__alt_data_end+0xfffeb1a0>
   52358:	11006317 	ldw	r4,396(r2)
   5235c:	218cb03a 	or	r6,r4,r6
   52360:	11806315 	stw	r6,396(r2)
   52364:	003fce06 	br	522a0 <__alt_data_end+0xfffeb1a0>
   52368:	18805304 	addi	r2,r3,332
   5236c:	18805215 	stw	r2,328(r3)
   52370:	003fc606 	br	5228c <__alt_data_end+0xfffeb18c>
   52374:	00bfffc4 	movi	r2,-1
   52378:	003fd006 	br	522bc <__alt_data_end+0xfffeb1bc>

0005237c <__call_exitprocs>:
   5237c:	defff504 	addi	sp,sp,-44
   52380:	df000915 	stw	fp,36(sp)
   52384:	dd400615 	stw	r21,24(sp)
   52388:	dc800315 	stw	r18,12(sp)
   5238c:	dfc00a15 	stw	ra,40(sp)
   52390:	ddc00815 	stw	r23,32(sp)
   52394:	dd800715 	stw	r22,28(sp)
   52398:	dd000515 	stw	r20,20(sp)
   5239c:	dcc00415 	stw	r19,16(sp)
   523a0:	dc400215 	stw	r17,8(sp)
   523a4:	dc000115 	stw	r16,4(sp)
   523a8:	d9000015 	stw	r4,0(sp)
   523ac:	2839883a 	mov	fp,r5
   523b0:	04800044 	movi	r18,1
   523b4:	057fffc4 	movi	r21,-1
   523b8:	00800174 	movhi	r2,5
   523bc:	1090ff04 	addi	r2,r2,17404
   523c0:	12000017 	ldw	r8,0(r2)
   523c4:	45005217 	ldw	r20,328(r8)
   523c8:	44c05204 	addi	r19,r8,328
   523cc:	a0001c26 	beq	r20,zero,52440 <__call_exitprocs+0xc4>
   523d0:	a0800117 	ldw	r2,4(r20)
   523d4:	15ffffc4 	addi	r23,r2,-1
   523d8:	b8000d16 	blt	r23,zero,52410 <__call_exitprocs+0x94>
   523dc:	14000044 	addi	r16,r2,1
   523e0:	8421883a 	add	r16,r16,r16
   523e4:	8421883a 	add	r16,r16,r16
   523e8:	84402004 	addi	r17,r16,128
   523ec:	a463883a 	add	r17,r20,r17
   523f0:	a421883a 	add	r16,r20,r16
   523f4:	e0001e26 	beq	fp,zero,52470 <__call_exitprocs+0xf4>
   523f8:	80804017 	ldw	r2,256(r16)
   523fc:	e0801c26 	beq	fp,r2,52470 <__call_exitprocs+0xf4>
   52400:	bdffffc4 	addi	r23,r23,-1
   52404:	843fff04 	addi	r16,r16,-4
   52408:	8c7fff04 	addi	r17,r17,-4
   5240c:	bd7ff91e 	bne	r23,r21,523f4 <__alt_data_end+0xfffeb2f4>
   52410:	00800034 	movhi	r2,0
   52414:	10800004 	addi	r2,r2,0
   52418:	10000926 	beq	r2,zero,52440 <__call_exitprocs+0xc4>
   5241c:	a0800117 	ldw	r2,4(r20)
   52420:	1000301e 	bne	r2,zero,524e4 <__call_exitprocs+0x168>
   52424:	a0800017 	ldw	r2,0(r20)
   52428:	10003226 	beq	r2,zero,524f4 <__call_exitprocs+0x178>
   5242c:	a009883a 	mov	r4,r20
   52430:	98800015 	stw	r2,0(r19)
   52434:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>
   52438:	9d000017 	ldw	r20,0(r19)
   5243c:	a03fe41e 	bne	r20,zero,523d0 <__alt_data_end+0xfffeb2d0>
   52440:	dfc00a17 	ldw	ra,40(sp)
   52444:	df000917 	ldw	fp,36(sp)
   52448:	ddc00817 	ldw	r23,32(sp)
   5244c:	dd800717 	ldw	r22,28(sp)
   52450:	dd400617 	ldw	r21,24(sp)
   52454:	dd000517 	ldw	r20,20(sp)
   52458:	dcc00417 	ldw	r19,16(sp)
   5245c:	dc800317 	ldw	r18,12(sp)
   52460:	dc400217 	ldw	r17,8(sp)
   52464:	dc000117 	ldw	r16,4(sp)
   52468:	dec00b04 	addi	sp,sp,44
   5246c:	f800283a 	ret
   52470:	a0800117 	ldw	r2,4(r20)
   52474:	80c00017 	ldw	r3,0(r16)
   52478:	10bfffc4 	addi	r2,r2,-1
   5247c:	15c01426 	beq	r2,r23,524d0 <__call_exitprocs+0x154>
   52480:	80000015 	stw	zero,0(r16)
   52484:	183fde26 	beq	r3,zero,52400 <__alt_data_end+0xfffeb300>
   52488:	95c8983a 	sll	r4,r18,r23
   5248c:	a0806217 	ldw	r2,392(r20)
   52490:	a5800117 	ldw	r22,4(r20)
   52494:	2084703a 	and	r2,r4,r2
   52498:	10000b26 	beq	r2,zero,524c8 <__call_exitprocs+0x14c>
   5249c:	a0806317 	ldw	r2,396(r20)
   524a0:	2088703a 	and	r4,r4,r2
   524a4:	20000c1e 	bne	r4,zero,524d8 <__call_exitprocs+0x15c>
   524a8:	89400017 	ldw	r5,0(r17)
   524ac:	d9000017 	ldw	r4,0(sp)
   524b0:	183ee83a 	callr	r3
   524b4:	a0800117 	ldw	r2,4(r20)
   524b8:	15bfbf1e 	bne	r2,r22,523b8 <__alt_data_end+0xfffeb2b8>
   524bc:	98800017 	ldw	r2,0(r19)
   524c0:	153fcf26 	beq	r2,r20,52400 <__alt_data_end+0xfffeb300>
   524c4:	003fbc06 	br	523b8 <__alt_data_end+0xfffeb2b8>
   524c8:	183ee83a 	callr	r3
   524cc:	003ff906 	br	524b4 <__alt_data_end+0xfffeb3b4>
   524d0:	a5c00115 	stw	r23,4(r20)
   524d4:	003feb06 	br	52484 <__alt_data_end+0xfffeb384>
   524d8:	89000017 	ldw	r4,0(r17)
   524dc:	183ee83a 	callr	r3
   524e0:	003ff406 	br	524b4 <__alt_data_end+0xfffeb3b4>
   524e4:	a0800017 	ldw	r2,0(r20)
   524e8:	a027883a 	mov	r19,r20
   524ec:	1029883a 	mov	r20,r2
   524f0:	003fb606 	br	523cc <__alt_data_end+0xfffeb2cc>
   524f4:	0005883a 	mov	r2,zero
   524f8:	003ffb06 	br	524e8 <__alt_data_end+0xfffeb3e8>

000524fc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   524fc:	defffd04 	addi	sp,sp,-12
   52500:	df000215 	stw	fp,8(sp)
   52504:	df000204 	addi	fp,sp,8
   52508:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   5250c:	0001883a 	nop
   52510:	e0bfff17 	ldw	r2,-4(fp)
   52514:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   52518:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   5251c:	10000226 	beq	r2,zero,52528 <_exit+0x2c>
    ALT_SIM_FAIL();
   52520:	002af070 	cmpltui	zero,zero,43969
   52524:	00000106 	br	5252c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   52528:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   5252c:	003fff06 	br	5252c <__alt_data_end+0xfffeb42c>
