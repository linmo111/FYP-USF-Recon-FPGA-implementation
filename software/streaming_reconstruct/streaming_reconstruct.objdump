
streaming_reconstruct.elf:     file format elf32-littlenios2
streaming_reconstruct.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040244

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00016b60 memsz 0x00016b60 flags r-x
    LOAD off    0x00017b80 vaddr 0x00056b80 paddr 0x0005872c align 2**12
         filesz 0x00001bac memsz 0x00001bac flags rw-
    LOAD off    0x0001a2d8 vaddr 0x0005a2d8 paddr 0x0005a2d8 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00016518  00040244  00040244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000424  0005675c  0005675c  0001775c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bac  00056b80  0005872c  00017b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  0005a2d8  0005a2d8  0001a2d8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  0005a43c  0005a43c  0001972c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001972c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001340  00000000  00000000  00019750  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002f12a  00000000  00000000  0001aa90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000c187  00000000  00000000  00049bba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000f037  00000000  00000000  00055d41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000031bc  00000000  00000000  00064d78  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004ff7  00000000  00000000  00067f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001c920  00000000  00000000  0006cf2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0008984c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002080  00000000  00000000  000898b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0008fca2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0008fca5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0008fcaf  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0008fcb0  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0008fcb1  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0008fcb5  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0008fcb9  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0008fcbd  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0008fcc6  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0008fccf  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000e  00000000  00000000  0008fcd8  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000010  00000000  00000000  0008fce6  2**0
                  CONTENTS, READONLY
 29 .jdi          00005b59  00000000  00000000  0008fcf6  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006730d  00000000  00000000  0009584f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040244 l    d  .text	00000000 .text
0005675c l    d  .rodata	00000000 .rodata
00056b80 l    d  .rwdata	00000000 .rwdata
0005a2d8 l    d  .bss	00000000 .bss
0005a43c l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../streaming_reconstruct_bsp//obj/HAL/src/crt0.o
0004028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 s_ceil.c
00000000 l    df *ABS*	00000000 s_round.c
00000000 l    df *ABS*	00000000 sf_round.c
00000000 l    df *ABS*	00000000 w_fmod.c
00000000 l    df *ABS*	00000000 w_log.c
00000000 l    df *ABS*	00000000 e_fmod.c
0005683c l     O .rodata	00000010 Zero
00000000 l    df *ABS*	00000000 e_log.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 impure.c
00056b80 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00048238 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00056996 l     O .rodata	00000010 zeroes.4404
0004a864 l     F .text	000000bc __sbprintf
000569a6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
0004ab28 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0004c658 l     F .text	00000008 __fp_unlock
0004c66c l     F .text	0000019c __sinit.part.1
0004c808 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
000573cc l     O .rwdata	00000020 lc_ctype_charset
000573ac l     O .rwdata	00000020 lc_message_charset
000573ec l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
000569d4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0004f0d0 l     F .text	000000fc __sprint_r.part.0
00056b08 l     O .rodata	00000010 blanks.4348
00056af8 l     O .rodata	00000010 zeroes.4349
0005065c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
00051a74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00051b80 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00051bac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00051c98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00051d78 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00051e64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00052038 l     F .text	0000003c alt_get_errno
00052074 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0005228c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000586cc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000524d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0005260c l     F .text	00000034 alt_dev_reg
000575cc l     O .rwdata	00000038 i2c_dac
00057604 l     O .rwdata	00001060 jtag_uart
00058664 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
000526dc l     F .text	00000110 optional_irq_callback
0005283c l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00054500 l     F .text	0000020c altera_avalon_jtag_uart_irq
0005470c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
000586d8 l     O .rwdata	00000009 hcinfo.2538
000586e4 l     O .rwdata	0000000a hcinfo.2551
000586f0 l     O .rwdata	00000009 hcinfo.2560
000586fc l     O .rwdata	0000000a hcinfo.2573
00058708 l     O .rwdata	0000000a hcinfo.2586
00058714 l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00055494 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00055bc4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0005a310 g     O .bss	00000004 alt_instruction_exception_handler
0004e8b8 g     F .text	00000074 _mprec_log10
0004e9a4 g     F .text	0000008c __any_on
0004d51c g     F .text	00000054 _isatty_r
000569e0 g     O .rodata	00000028 __mprec_tinytens
00051f74 g     F .text	0000007c alt_main
000418a4 g     F .text	0000009c convert_adc_to_signal
00048164 g     F .text	000000c0 _puts_r
00041a04 g     F .text	00000080 send_to_PCF
0005a33c g     O .bss	00000100 alt_irq
0004d64c g     F .text	00000060 _lseek_r
0004244c g     F .text	0000019c log
0005872c g       *ABS*	00000000 __flash_rwdata_start
0004c9f8 g     F .text	000000ac __sflags
00045974 g     F .text	00000088 .hidden __eqdf2
0005a43c g       *ABS*	00000000 __alt_heap_start
00048128 g     F .text	0000003c printf
00050c40 g     F .text	0000009c _wcrtomb_r
00048554 g     F .text	0000005c __sseek
0004c9a8 g     F .text	00000010 __sinit
00050ae8 g     F .text	00000140 __swbuf_r
0004d570 g     F .text	0000007c _setlocale_r
0004c810 g     F .text	00000068 __sfmoreglue
00052f34 g     F .text	000000a8 alt_avalon_i2c_rx_read
00052014 g     F .text	00000024 __malloc_unlock
00042170 g     F .text	00000100 round
00054d44 g     F .text	0000011c alt_hostfs_open
000437a8 g     F .text	00000440 .hidden __divsf3
00054134 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
00052cb8 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00041330 g     F .text	00000234 calc_order
00041564 g     F .text	000000f4 modulo
0004d8d8 g     F .text	0000015c memmove
0004c990 g     F .text	00000018 _cleanup
00053990 g     F .text	00000208 alt_avalon_i2c_master_transmit_using_interrupts
0004da34 g     F .text	000000a8 _Balloc
0004464c g     F .text	00000070 .hidden __fixsfsi
000459fc g     F .text	000000dc .hidden __gtdf2
00056110 g     F .text	00000024 altera_nios2_gen2_irq_init
00046f64 g     F .text	00000010 __errno
00040000 g     F .entry	0000001c __reset
00040e24 g     F .text	00000328 anti_diff_2nd
00041f90 g     F .text	000001e0 ceil
00040020 g       *ABS*	00000000 __flash_exceptions_start
0004754c g     F .text	0000005c _fstat_r
000425e8 g     F .text	00000340 __ieee754_fmod
0005a2dc g     O .bss	00000004 errno
000484d0 g     F .text	00000008 __seofread
0005a2fc g     O .bss	00000004 alt_argv
0006068c g       *ABS*	00000000 _gp
00054178 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
00044168 g     F .text	000004e4 .hidden __subsf3
00058690 g     O .rwdata	00000004 fs
00052e48 g     F .text	00000044 alt_avalon_i2c_is_busy
0005744c g     O .rwdata	00000180 alt_fd_list
00054f7c g     F .text	00000068 alt_hostfs_seek
00052bec g     F .text	000000cc alt_avalon_i2c_master_config_set
00055634 g     F .text	00000090 alt_find_dev
0004d790 g     F .text	00000148 memcpy
0004c660 g     F .text	0000000c _cleanup_r
00046b6c g     F .text	000000dc .hidden __floatsidf
000557cc g     F .text	00000080 alt_fs_reg
00055c88 g     F .text	0000007c alt_io_redirect
000518d8 g     F .text	000000f4 .hidden __ltdf2
0005675c g       *ABS*	00000000 __DTOR_END__
00041a84 g     F .text	000001a0 process_lowpass
000537d4 g     F .text	000001bc alt_avalon_i2c_master_transmit
00048224 g     F .text	00000014 puts
000561c4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00040304 g     F .text	00000130 updateMovingAverage
00043044 g     F .text	00000074 __fpclassifyd
0004e814 g     F .text	000000a4 __ratio
00050640 g     F .text	0000001c __vfiprintf_internal
00054904 g     F .text	0000021c altera_avalon_jtag_uart_read
000480f8 g     F .text	00000030 _printf_r
00043224 g     F .text	00000064 .hidden __udivsi3
00042270 g     F .text	00000084 roundf
00051cd4 g     F .text	000000a4 isatty
00056a30 g     O .rodata	000000c8 __mprec_tens
0004d5ec g     F .text	0000000c __locale_charset
00043ca4 g     F .text	000000c8 .hidden __lesf2
00056134 g     F .text	00000090 alt_icache_flush
00052a58 g     F .text	00000098 alt_avalon_i2c_enable
0005a2e8 g     O .bss	00000004 __malloc_top_pad
00054068 g     F .text	00000068 alt_avalon_i2c_int_disable
000586ac g     O .rwdata	00000004 __mb_cur_max
0004d61c g     F .text	0000000c _localeconv_r
0004de40 g     F .text	0000003c __i2b
0004ced8 g     F .text	000004bc __sfvwrite_r
00048428 g     F .text	00000054 _sbrk_r
00054ea4 g     F .text	0000006c alt_hostfs_read
0004ea30 g     F .text	00000060 _read_r
000586c4 g     O .rwdata	00000004 alt_max_fd
000507dc g     F .text	000000f0 _fclose_r
0004114c g     F .text	000001e4 anti_diff_1st
0004c628 g     F .text	00000030 fflush
0005a2e4 g     O .bss	00000004 __malloc_max_sbrked_mem
00053b98 g     F .text	0000020c alt_avalon_i2c_master_receive
00046c48 g     F .text	00000110 .hidden __extendsfdf2
000447e0 g     F .text	000008ac .hidden __adddf3
0004e5bc g     F .text	0000010c __b2d
000513a0 g     F .text	00000538 .hidden __umoddi3
00051ea0 g     F .text	000000d4 lseek
00058698 g     O .rwdata	00000004 __fdlib_version
000540d0 g     F .text	00000064 alt_avalon_i2c_int_enable
0005869c g     O .rwdata	00000004 _global_impure_ptr
0004ea90 g     F .text	00000564 _realloc_r
0005a43c g       *ABS*	00000000 __bss_end
00055ad4 g     F .text	000000f0 alt_iic_isr_register
00056008 g     F .text	00000108 alt_tick
00050e28 g     F .text	00000578 .hidden __udivdi3
00053f90 g     F .text	00000058 alt_avalon_i2c_int_status_get
00050a44 g     F .text	00000024 _fputwc_r
00056a08 g     O .rodata	00000028 __mprec_bigtens
0004dc24 g     F .text	00000104 __s2b
000519cc g     F .text	000000a8 .hidden __floatunsidf
0004e2fc g     F .text	00000060 __mcmp
0004c9c8 g     F .text	00000018 __fp_lock_all
00055a88 g     F .text	0000004c alt_ic_irq_enabled
00055f6c g     F .text	0000009c alt_alarm_stop
000528d8 g     F .text	00000054 alt_avalon_i2c_register_callback
0005a304 g     O .bss	00000004 alt_irq_active
0005292c g     F .text	000000ec alt_avalon_i2c_init
000470ec g     F .text	00000444 _fseeko_r
00054e60 g     F .text	00000044 alt_hostfs_close
000400fc g     F .exceptions	000000d4 alt_irq_handler
00057424 g     O .rwdata	00000028 alt_dev_null
00041c24 g     F .text	000000cc top
0005544c g     F .text	00000048 alt_dcache_flush_all
0004dd28 g     F .text	00000068 __hi0bits
00046aec g     F .text	00000080 .hidden __fixdfsi
0005a2d8 g     O .bss	00000004 y_prev
0005872c g       *ABS*	00000000 __ram_rwdata_end
000586bc g     O .rwdata	00000008 alt_dev_list
00052514 g     F .text	000000f8 write
00056328 g     F .text	000000a0 _putc_r
00053268 g     F .text	0000004c alt_avalon_i2c_check_arblost
00043be8 g     F .text	000000bc .hidden __gtsf2
0005402c g     F .text	0000003c alt_avalon_i2c_int_clear
00056b80 g       *ABS*	00000000 __ram_rodata_end
00051be8 g     F .text	000000b0 fstat
000470a8 g     F .text	00000024 fprintf
000518d8 g     F .text	000000f4 .hidden __ledf2
000586d0 g     O .rwdata	00000008 alt_avalon_i2c_list
0004e074 g     F .text	00000140 __pow5mult
0004f1e4 g     F .text	0000145c ___vfiprintf_internal_r
0005a2f4 g     O .bss	00000004 __nlocale_changed
00043288 g     F .text	00000058 .hidden __umodsi3
0005a43c g       *ABS*	00000000 end
000409b8 g     F .text	0000046c anti_diff_3rd
00047530 g     F .text	0000001c fseeko
000470d0 g     F .text	0000001c fseek
00054440 g     F .text	000000c0 altera_avalon_jtag_uart_init
000401d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00052a18 g     F .text	00000040 alt_avalon_i2c_open
0005675c g       *ABS*	00000000 __CTOR_LIST__
00067100 g       *ABS*	00000000 __alt_stack_pointer
000533e8 g     F .text	000000e8 alt_avalon_i2c_master_tx
00046f00 g     F .text	00000064 .hidden __clzsi2
000422f4 g     F .text	00000158 fmod
00054b20 g     F .text	00000224 altera_avalon_jtag_uart_write
0004c9b8 g     F .text	00000004 __sfp_lock_acquire
0004d6ac g     F .text	000000e4 memchr
00048650 g     F .text	000021f8 ___vfprintf_internal_r
0004cbc8 g     F .text	00000310 _free_r
00055d04 g     F .text	0000022c alt_printf
0004d5f8 g     F .text	00000010 __locale_mb_cur_max
000565a8 g     F .text	00000180 __call_exitprocs
0005a2f0 g     O .bss	00000004 __mlocale_changed
000527ec g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
000586a4 g     O .rwdata	00000004 __malloc_sbrk_base
00040244 g     F .text	0000004c _start
0005a308 g     O .bss	00000004 _alt_tick_rate
00040788 g     F .text	00000230 anti_diff_nth
00053da4 g     F .text	000001ec alt_avalon_i2c_master_receive_using_interrupts
000541c4 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
0004e1b4 g     F .text	00000148 __lshift
0005a30c g     O .bss	00000004 _alt_nticks
000522c8 g     F .text	000000fc read
00052678 g     F .text	00000064 alt_sys_init
000446bc g     F .text	00000124 .hidden __floatsisf
00048098 g     F .text	00000060 _open_r
00056490 g     F .text	00000118 __register_exitproc
0005360c g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
0004de7c g     F .text	000001f8 __multiply
000547ac g     F .text	00000068 altera_avalon_jtag_uart_close
00056b80 g       *ABS*	00000000 __ram_rwdata_start
0005675c g       *ABS*	00000000 __ram_rodata_start
0005a314 g     O .bss	00000028 __malloc_current_mallinfo
0004e6c8 g     F .text	0000014c __d2b
00041cf0 g     F .text	00000064 stream_adc_out
000542dc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0005584c g     F .text	000000a4 alt_get_fd
000552f4 g     F .text	00000158 alt_busy_sleep
0004aad4 g     F .text	00000054 _close_r
000562ac g     F .text	0000007c memcmp
00052e8c g     F .text	000000a8 alt_avalon_i2c_rx_read_available
0005439c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0005a43c g       *ABS*	00000000 __alt_stack_base
000543ec g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0004a980 g     F .text	00000154 __swsetup_r
0004508c g     F .text	000008e8 .hidden __divdf3
0004c878 g     F .text	00000118 __sfp
0004e92c g     F .text	00000078 __copybits
00056fa4 g     O .rwdata	00000408 __malloc_av_
0004c9c4 g     F .text	00000004 __sinit_lock_release
00045ad8 g     F .text	00000718 .hidden __muldf3
0004847c g     F .text	00000054 __sread
000556c4 g     F .text	00000108 alt_find_file
000554d0 g     F .text	000000a4 alt_dev_llist_insert
00051ff0 g     F .text	00000024 __malloc_lock
00047080 g     F .text	00000028 _fprintf_r
00052428 g     F .text	000000b0 sbrk
000532b4 g     F .text	00000134 alt_avalon_i2c_interrupt_transaction_status
0005321c g     F .text	0000004c alt_avalon_i2c_check_nack
0004c5cc g     F .text	0000005c _fflush_r
00050718 g     F .text	000000c4 _calloc_r
00047068 g     F .text	00000018 fopen
0005a2d8 g       *ABS*	00000000 __bss_start
00047f70 g     F .text	00000128 memset
00041d54 g     F .text	0000023c main
000531e8 g     F .text	00000034 alt_avalon_i2c_master_target_set
0005a300 g     O .bss	00000004 alt_envp
0005a2e0 g     O .bss	00000004 __malloc_max_total_mem
0005433c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00050c28 g     F .text	00000018 __swbuf
00053fe8 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
00043ca4 g     F .text	000000c8 .hidden __ltsf2
0005868c g     O .rwdata	00000004 fc
000485b0 g     F .text	00000008 __sclose
000430b8 g     F .text	00000008 matherr
00067100 g       *ABS*	00000000 __alt_heap_limit
000508cc g     F .text	00000014 fclose
00046d58 g     F .text	000001a8 .hidden __truncdfsf2
0004ad28 g     F .text	00001688 _dtoa_r
00047764 g     F .text	0000080c _malloc_r
00040290 g     F .text	00000074 initMovingAverage
00050d9c g     F .text	00000030 __ascii_wctomb
000586c8 g     O .rwdata	00000004 alt_errno
0004d394 g     F .text	000000c4 _fwalk
000563c8 g     F .text	000000c8 putc
0004312c g     F .text	00000084 .hidden __divsi3
00040434 g     F .text	00000228 initReconstructor
0004caa4 g     F .text	00000124 _malloc_trim_r
0005675c g       *ABS*	00000000 __CTOR_END__
00043d6c g     F .text	000003fc .hidden __mulsf3
0004eff4 g     F .text	000000dc strcmp
0005675c g       *ABS*	00000000 __flash_rodata_start
0005675c g       *ABS*	00000000 __DTOR_LIST__
00041940 g     F .text	000000c4 float_to_dac
00045974 g     F .text	00000088 .hidden __nedf2
00052640 g     F .text	00000038 alt_irq_init
000523c4 g     F .text	00000064 alt_release_fd
0005684c g     O .rodata	00000100 .hidden __clz_tab
0005a2ec g     O .bss	00000004 _PathLocale
00056260 g     F .text	00000014 atexit
00043be8 g     F .text	000000bc .hidden __gesf2
0004a920 g     F .text	00000060 _write_r
00041658 g     F .text	0000009c center_to_2lam
0004d628 g     F .text	00000018 setlocale
000586a0 g     O .rwdata	00000004 _impure_ptr
0005a2f8 g     O .bss	00000004 alt_argc
0004c3b0 g     F .text	0000021c __sflush_r
000555d4 g     F .text	00000060 _do_dtors
0004d614 g     F .text	00000008 __locale_cjk_lang
00042928 g     F .text	0000071c __ieee754_log
000531b0 g     F .text	00000038 alt_avalon_i2c_master_target_get
000470cc g     F .text	00000004 _fseek_r
000530c0 g     F .text	000000f0 alt_avalon_i2c_send_address
00048254 g     F .text	000001d4 __srefill_r
00040020 g       .exceptions	00000000 alt_irq_entry
0004e558 g     F .text	00000064 __ulp
0004c9e0 g     F .text	00000018 __fp_unlock_all
000586b4 g     O .rwdata	00000008 alt_fs_list
00054f10 g     F .text	0000006c alt_hostfs_write
000430c0 g     F .text	0000000c nan
00040020 g       *ABS*	00000000 __ram_exceptions_start
0004d640 g     F .text	0000000c localeconv
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00054274 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
00055924 g     F .text	00000050 alt_ic_isr_register
00052af0 g     F .text	0000004c alt_avalon_i2c_disable
0005872c g       *ABS*	00000000 _edata
0005a43c g       *ABS*	00000000 _end
000508e0 g     F .text	00000164 __fputwc
00040244 g       *ABS*	00000000 __ram_exceptions_end
00054814 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00052b3c g     F .text	000000b0 alt_avalon_i2c_master_config_get
000559fc g     F .text	0000008c alt_ic_irq_disable
000484d8 g     F .text	0000007c __swrite
000586a8 g     O .rwdata	00000004 __malloc_trim_threshold
0004d608 g     F .text	0000000c __locale_msgcharset
00056274 g     F .text	00000038 exit
00058694 g     O .rwdata	00000004 a
0004d458 g     F .text	000000c4 _fwalk_reent
0004e35c g     F .text	000001fc __mdiff
000431b0 g     F .text	00000074 .hidden __modsi3
00067100 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
0004c9bc g     F .text	00000004 __sfp_lock_release
00052d4c g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
000416f4 g     F .text	000001b0 update
00052fdc g     F .text	000000e4 alt_avalon_i2c_cmd_write
000430cc g     F .text	00000060 .hidden __fixunssfsi
00046f74 g     F .text	000000f4 _fopen_r
00056728 g     F .text	00000034 _exit
000551c8 g     F .text	0000012c alt_alarm_start
000475a8 g     F .text	000001bc __smakebuf_r
000485b8 g     F .text	00000098 strlen
00052138 g     F .text	00000154 open
000459fc g     F .text	000000dc .hidden __gedf2
00055f30 g     F .text	0000003c alt_putchar
000586b0 g     O .rwdata	00000004 __wctomb
0004f1cc g     F .text	00000018 __sprint_r
000558f0 g     F .text	00000034 alt_icache_flush_all
0004065c g     F .text	0000012c nth_order_difference
00058720 g     O .rwdata	00000004 alt_priority_mask
00055974 g     F .text	00000088 alt_ic_irq_enable
0004a848 g     F .text	0000001c __vfprintf_internal
00050dcc g     F .text	0000005c _wctomb_r
000461f0 g     F .text	000008fc .hidden __subdf3
0004dd90 g     F .text	000000b0 __lo0bits
00058724 g     O .rwdata	00000008 alt_alarm_list
00055574 g     F .text	00000060 _do_ctors
00050cdc g     F .text	000000c0 wcrtomb
00051ab0 g     F .text	000000d0 close
000432e0 g     F .text	000004c8 .hidden __addsf3
00054228 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
00051de0 g     F .text	00000084 alt_load
000534d0 g     F .text	0000013c alt_avalon_i2c_master_rx
00050a68 g     F .text	00000080 fputwc
0004c9c0 g     F .text	00000004 __sinit_lock_acquire
0004db04 g     F .text	00000120 __multadd
0004dadc g     F .text	00000028 _Bfree
00054fe4 g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffd8f04>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08409114 	ori	at,at,580
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	008001b4 	movhi	r2,6
   40140:	10a8cf04 	addi	r2,r2,-23748
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	008001b4 	movhi	r2,6
   40158:	10a8cf04 	addi	r2,r2,-23748
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffd902c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffd9020>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   401e4:	000531fa 	rdctl	r2,exception
   401e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   401ec:	e0bffd17 	ldw	r2,-12(fp)
   401f0:	10801f0c 	andi	r2,r2,124
   401f4:	1004d0ba 	srli	r2,r2,2
   401f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   401fc:	0005333a 	rdctl	r2,badaddr
   40200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   40204:	d0a72117 	ldw	r2,-25468(gp)
   40208:	10000726 	beq	r2,zero,40228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   4020c:	d0a72117 	ldw	r2,-25468(gp)
   40210:	e0fffd17 	ldw	r3,-12(fp)
   40214:	e1bffe17 	ldw	r6,-8(fp)
   40218:	e17fff17 	ldw	r5,-4(fp)
   4021c:	1809883a 	mov	r4,r3
   40220:	103ee83a 	callr	r2
   40224:	00000206 	br	40230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   4022c:	0005883a 	mov	r2,zero
}
   40230:	e037883a 	mov	sp,fp
   40234:	dfc00117 	ldw	ra,4(sp)
   40238:	df000017 	ldw	fp,0(sp)
   4023c:	dec00204 	addi	sp,sp,8
   40240:	f800283a 	ret

Disassembly of section .text:

00040244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   40244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   40248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   4024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   40250:	00bffd16 	blt	zero,r2,40248 <__alt_data_end+0xfffd9148>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40254:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   40258:	dedc4014 	ori	sp,sp,28928
    movhi gp, %hi(_gp)
   4025c:	068001b4 	movhi	gp,6
    ori gp, gp, %lo(_gp)
   40260:	d681a314 	ori	gp,gp,1676
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40264:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   40268:	10a8b614 	ori	r2,r2,41688

    movhi r3, %hi(__bss_end)
   4026c:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   40270:	18e90f14 	ori	r3,r3,42044

    beq r2, r3, 1f
   40274:	10c00326 	beq	r2,r3,40284 <_start+0x40>

0:
    stw zero, (r2)
   40278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   4027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40280:	10fffd36 	bltu	r2,r3,40278 <__alt_data_end+0xfffd9178>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40284:	0051de00 	call	51de0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40288:	0051f740 	call	51f74 <alt_main>

0004028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   4028c:	003fff06 	br	4028c <__alt_data_end+0xfffd918c>

00040290 <initMovingAverage>:
    int index;
    int count;
    float sum;
} MovingAverage;

void initMovingAverage(MovingAverage *ma) {
   40290:	defffd04 	addi	sp,sp,-12
   40294:	df000215 	stw	fp,8(sp)
   40298:	df000204 	addi	fp,sp,8
   4029c:	e13fff15 	stw	r4,-4(fp)
    ma->index = 0;
   402a0:	e0bfff17 	ldw	r2,-4(fp)
   402a4:	10006415 	stw	zero,400(r2)
    ma->count = 0;
   402a8:	e0bfff17 	ldw	r2,-4(fp)
   402ac:	10006515 	stw	zero,404(r2)
    ma->sum = 0.0;
   402b0:	e0bfff17 	ldw	r2,-4(fp)
   402b4:	10006615 	stw	zero,408(r2)

    for (int i = 0; i < MA_WINDOW_SIZE; i++) {
   402b8:	e03ffe15 	stw	zero,-8(fp)
   402bc:	00000906 	br	402e4 <initMovingAverage+0x54>
        ma->buffer[i] = 0.0;
   402c0:	e0ffff17 	ldw	r3,-4(fp)
   402c4:	e0bffe17 	ldw	r2,-8(fp)
   402c8:	1085883a 	add	r2,r2,r2
   402cc:	1085883a 	add	r2,r2,r2
   402d0:	1885883a 	add	r2,r3,r2
   402d4:	10000015 	stw	zero,0(r2)
void initMovingAverage(MovingAverage *ma) {
    ma->index = 0;
    ma->count = 0;
    ma->sum = 0.0;

    for (int i = 0; i < MA_WINDOW_SIZE; i++) {
   402d8:	e0bffe17 	ldw	r2,-8(fp)
   402dc:	10800044 	addi	r2,r2,1
   402e0:	e0bffe15 	stw	r2,-8(fp)
   402e4:	e0bffe17 	ldw	r2,-8(fp)
   402e8:	10801910 	cmplti	r2,r2,100
   402ec:	103ff41e 	bne	r2,zero,402c0 <__alt_data_end+0xfffd91c0>
        ma->buffer[i] = 0.0;
    }
}
   402f0:	0001883a 	nop
   402f4:	e037883a 	mov	sp,fp
   402f8:	df000017 	ldw	fp,0(sp)
   402fc:	dec00104 	addi	sp,sp,4
   40300:	f800283a 	ret

00040304 <updateMovingAverage>:

//}
float updateMovingAverage(MovingAverage *ma, float new_sample) {
   40304:	defffb04 	addi	sp,sp,-20
   40308:	dfc00415 	stw	ra,16(sp)
   4030c:	df000315 	stw	fp,12(sp)
   40310:	dc000215 	stw	r16,8(sp)
   40314:	df000304 	addi	fp,sp,12
   40318:	e13ffd15 	stw	r4,-12(fp)
   4031c:	e17ffe15 	stw	r5,-8(fp)
    // Remove the oldest sample from the sum
    ma->sum -= ma->buffer[ma->index];
   40320:	e0bffd17 	ldw	r2,-12(fp)
   40324:	11006617 	ldw	r4,408(r2)
   40328:	e0bffd17 	ldw	r2,-12(fp)
   4032c:	10806417 	ldw	r2,400(r2)
   40330:	e0fffd17 	ldw	r3,-12(fp)
   40334:	1085883a 	add	r2,r2,r2
   40338:	1085883a 	add	r2,r2,r2
   4033c:	1885883a 	add	r2,r3,r2
   40340:	10c00017 	ldw	r3,0(r2)
   40344:	180b883a 	mov	r5,r3
   40348:	00441680 	call	44168 <__subsf3>
   4034c:	1009883a 	mov	r4,r2
   40350:	2007883a 	mov	r3,r4
   40354:	e0bffd17 	ldw	r2,-12(fp)
   40358:	10c06615 	stw	r3,408(r2)

    // Add the new sample to the buffer and sum
    ma->buffer[ma->index] = new_sample;
   4035c:	e0bffd17 	ldw	r2,-12(fp)
   40360:	10806417 	ldw	r2,400(r2)
   40364:	e0fffd17 	ldw	r3,-12(fp)
   40368:	1085883a 	add	r2,r2,r2
   4036c:	1085883a 	add	r2,r2,r2
   40370:	1885883a 	add	r2,r3,r2
   40374:	e0fffe17 	ldw	r3,-8(fp)
   40378:	10c00015 	stw	r3,0(r2)
    ma->sum += new_sample;
   4037c:	e0bffd17 	ldw	r2,-12(fp)
   40380:	10c06617 	ldw	r3,408(r2)
   40384:	e17ffe17 	ldw	r5,-8(fp)
   40388:	1809883a 	mov	r4,r3
   4038c:	00432e00 	call	432e0 <__addsf3>
   40390:	1009883a 	mov	r4,r2
   40394:	2007883a 	mov	r3,r4
   40398:	e0bffd17 	ldw	r2,-12(fp)
   4039c:	10c06615 	stw	r3,408(r2)

    // Update the index (circular buffer)
    ma->index = (ma->index + 1) % MA_WINDOW_SIZE;
   403a0:	e0bffd17 	ldw	r2,-12(fp)
   403a4:	10806417 	ldw	r2,400(r2)
   403a8:	10800044 	addi	r2,r2,1
   403ac:	01401904 	movi	r5,100
   403b0:	1009883a 	mov	r4,r2
   403b4:	00431b00 	call	431b0 <__modsi3>
   403b8:	1007883a 	mov	r3,r2
   403bc:	e0bffd17 	ldw	r2,-12(fp)
   403c0:	10c06415 	stw	r3,400(r2)

    // Update the count (if less than window size)
    if (ma->count < MA_WINDOW_SIZE) {
   403c4:	e0bffd17 	ldw	r2,-12(fp)
   403c8:	10806517 	ldw	r2,404(r2)
   403cc:	10801908 	cmpgei	r2,r2,100
   403d0:	1000051e 	bne	r2,zero,403e8 <updateMovingAverage+0xe4>
        ma->count++;
   403d4:	e0bffd17 	ldw	r2,-12(fp)
   403d8:	10806517 	ldw	r2,404(r2)
   403dc:	10c00044 	addi	r3,r2,1
   403e0:	e0bffd17 	ldw	r2,-12(fp)
   403e4:	10c06515 	stw	r3,404(r2)
    }

    // Compute the moving average
    return ma->sum / ma->count;
   403e8:	e0bffd17 	ldw	r2,-12(fp)
   403ec:	14006617 	ldw	r16,408(r2)
   403f0:	e0bffd17 	ldw	r2,-12(fp)
   403f4:	10806517 	ldw	r2,404(r2)
   403f8:	1009883a 	mov	r4,r2
   403fc:	00446bc0 	call	446bc <__floatsisf>
   40400:	1007883a 	mov	r3,r2
   40404:	180b883a 	mov	r5,r3
   40408:	8009883a 	mov	r4,r16
   4040c:	00437a80 	call	437a8 <__divsf3>
   40410:	1009883a 	mov	r4,r2
   40414:	2007883a 	mov	r3,r4
   40418:	1805883a 	mov	r2,r3
}
   4041c:	e6ffff04 	addi	sp,fp,-4
   40420:	dfc00217 	ldw	ra,8(sp)
   40424:	df000117 	ldw	fp,4(sp)
   40428:	dc000017 	ldw	r16,0(sp)
   4042c:	dec00304 	addi	sp,sp,12
   40430:	f800283a 	ret

00040434 <initReconstructor>:


} UnlimitedSamplerReconstructor;

/* Initialize the reconstructor */
void initReconstructor(UnlimitedSamplerReconstructor *recon, float lam) {
   40434:	defff904 	addi	sp,sp,-28
   40438:	df000615 	stw	fp,24(sp)
   4043c:	df000604 	addi	fp,sp,24
   40440:	e13ffe15 	stw	r4,-8(fp)
   40444:	e17fff15 	stw	r5,-4(fp)
    recon->lam = lam;
   40448:	e0bffe17 	ldw	r2,-8(fp)
   4044c:	e0ffff17 	ldw	r3,-4(fp)
   40450:	10c00015 	stw	r3,0(r2)
    recon->prev_y = 0.0;
   40454:	e0bffe17 	ldw	r2,-8(fp)
   40458:	10000115 	stw	zero,4(r2)
    recon->prev_eps = 0.0;
   4045c:	e0bffe17 	ldw	r2,-8(fp)
   40460:	10000215 	stw	zero,8(r2)
    recon->initialized = 0;
   40464:	e0bffe17 	ldw	r2,-8(fp)
   40468:	10000315 	stw	zero,12(r2)
    recon->max_in=0.001;
   4046c:	e0fffe17 	ldw	r3,-8(fp)
   40470:	008ea0f4 	movhi	r2,14979
   40474:	10849bc4 	addi	r2,r2,4719
   40478:	18800415 	stw	r2,16(r3)
    recon->sampling_interval=0.000001;
   4047c:	e0fffe17 	ldw	r3,-8(fp)
   40480:	008d61b4 	movhi	r2,13702
   40484:	108def44 	addi	r2,r2,14269
   40488:	1880d215 	stw	r2,840(r3)
    recon->diff_reset=0;
   4048c:	e0bffe17 	ldw	r2,-8(fp)
   40490:	10000615 	stw	zero,24(r2)
    recon-> anti_diff_reset=0;
   40494:	e0bffe17 	ldw	r2,-8(fp)
   40498:	10000715 	stw	zero,28(r2)
//    recon->max_order=10;
    recon->order=1;
   4049c:	e0bffe17 	ldw	r2,-8(fp)
   404a0:	00c00044 	movi	r3,1
   404a4:	10c00515 	stw	r3,20(r2)
//    recon->J=MAX_J;

    for (int i = 0; i < MAX_ORDER+1; i++) {
   404a8:	e03ffa15 	stw	zero,-24(fp)
   404ac:	00001106 	br	404f4 <initReconstructor+0xc0>
        recon->diff_buffer[i] = 0.0;
   404b0:	e0fffe17 	ldw	r3,-8(fp)
   404b4:	e0bffa17 	ldw	r2,-24(fp)
   404b8:	10800204 	addi	r2,r2,8
   404bc:	1085883a 	add	r2,r2,r2
   404c0:	1085883a 	add	r2,r2,r2
   404c4:	1885883a 	add	r2,r3,r2
   404c8:	10000015 	stw	zero,0(r2)
        recon->anti_diff_buffer[i] = 0.0;
   404cc:	e0fffe17 	ldw	r3,-8(fp)
   404d0:	e0bffa17 	ldw	r2,-24(fp)
   404d4:	10801b44 	addi	r2,r2,109
   404d8:	1085883a 	add	r2,r2,r2
   404dc:	1085883a 	add	r2,r2,r2
   404e0:	1885883a 	add	r2,r3,r2
   404e4:	10000015 	stw	zero,0(r2)
    recon-> anti_diff_reset=0;
//    recon->max_order=10;
    recon->order=1;
//    recon->J=MAX_J;

    for (int i = 0; i < MAX_ORDER+1; i++) {
   404e8:	e0bffa17 	ldw	r2,-24(fp)
   404ec:	10800044 	addi	r2,r2,1
   404f0:	e0bffa15 	stw	r2,-24(fp)
   404f4:	e0bffa17 	ldw	r2,-24(fp)
   404f8:	10801950 	cmplti	r2,r2,101
   404fc:	103fec1e 	bne	r2,zero,404b0 <__alt_data_end+0xfffd93b0>
        recon->diff_buffer[i] = 0.0;
        recon->anti_diff_buffer[i] = 0.0;
    }
    for (int i = 0; i < MAX_ORDER; ++i) {
   40500:	e03ffb15 	stw	zero,-20(fp)
   40504:	00003e06 	br	40600 <initReconstructor+0x1cc>
        recon->s1[i] = 0.0f;
   40508:	e0fffe17 	ldw	r3,-8(fp)
   4050c:	e0bffb17 	ldw	r2,-20(fp)
   40510:	10803504 	addi	r2,r2,212
   40514:	1085883a 	add	r2,r2,r2
   40518:	1085883a 	add	r2,r2,r2
   4051c:	1885883a 	add	r2,r3,r2
   40520:	10000015 	stw	zero,0(r2)
        recon->s2[i] = 0.0f;
   40524:	e0fffe17 	ldw	r3,-8(fp)
   40528:	e0bffb17 	ldw	r2,-20(fp)
   4052c:	10804e04 	addi	r2,r2,312
   40530:	1085883a 	add	r2,r2,r2
   40534:	1085883a 	add	r2,r2,r2
   40538:	1885883a 	add	r2,r3,r2
   4053c:	10000015 	stw	zero,0(r2)
        recon->res_index[i] = 0;
   40540:	e0fffe17 	ldw	r3,-8(fp)
   40544:	e0bffb17 	ldw	r2,-20(fp)
   40548:	1081de04 	addi	r2,r2,1912
   4054c:	1085883a 	add	r2,r2,r2
   40550:	1085883a 	add	r2,r2,r2
   40554:	1885883a 	add	r2,r3,r2
   40558:	10000015 	stw	zero,0(r2)
        for (int j = 0; j < MAX_J; ++j){
   4055c:	e03ffc15 	stw	zero,-16(fp)
   40560:	00002106 	br	405e8 <initReconstructor+0x1b4>
        	recon->s1_hist[i][j] = 0.0f;
   40564:	e0fffe17 	ldw	r3,-8(fp)
   40568:	e0bffb17 	ldw	r2,-20(fp)
   4056c:	11000164 	muli	r4,r2,5
   40570:	e0bffc17 	ldw	r2,-16(fp)
   40574:	2085883a 	add	r2,r4,r2
   40578:	10806704 	addi	r2,r2,412
   4057c:	1085883a 	add	r2,r2,r2
   40580:	1085883a 	add	r2,r2,r2
   40584:	1885883a 	add	r2,r3,r2
   40588:	10000015 	stw	zero,0(r2)
            recon->s2_hist[i][j] = 0.0f;
   4058c:	e0fffe17 	ldw	r3,-8(fp)
   40590:	e0bffb17 	ldw	r2,-20(fp)
   40594:	11000164 	muli	r4,r2,5
   40598:	e0bffc17 	ldw	r2,-16(fp)
   4059c:	2085883a 	add	r2,r4,r2
   405a0:	1080e404 	addi	r2,r2,912
   405a4:	1085883a 	add	r2,r2,r2
   405a8:	1085883a 	add	r2,r2,r2
   405ac:	1885883a 	add	r2,r3,r2
   405b0:	10000015 	stw	zero,0(r2)
        	recon->in_hist[i][j] = 0.0f;
   405b4:	e0fffe17 	ldw	r3,-8(fp)
   405b8:	e0bffb17 	ldw	r2,-20(fp)
   405bc:	11000164 	muli	r4,r2,5
   405c0:	e0bffc17 	ldw	r2,-16(fp)
   405c4:	2085883a 	add	r2,r4,r2
   405c8:	10816104 	addi	r2,r2,1412
   405cc:	1085883a 	add	r2,r2,r2
   405d0:	1085883a 	add	r2,r2,r2
   405d4:	1885883a 	add	r2,r3,r2
   405d8:	10000015 	stw	zero,0(r2)
    }
    for (int i = 0; i < MAX_ORDER; ++i) {
        recon->s1[i] = 0.0f;
        recon->s2[i] = 0.0f;
        recon->res_index[i] = 0;
        for (int j = 0; j < MAX_J; ++j){
   405dc:	e0bffc17 	ldw	r2,-16(fp)
   405e0:	10800044 	addi	r2,r2,1
   405e4:	e0bffc15 	stw	r2,-16(fp)
   405e8:	e0bffc17 	ldw	r2,-16(fp)
   405ec:	10800150 	cmplti	r2,r2,5
   405f0:	103fdc1e 	bne	r2,zero,40564 <__alt_data_end+0xfffd9464>

    for (int i = 0; i < MAX_ORDER+1; i++) {
        recon->diff_buffer[i] = 0.0;
        recon->anti_diff_buffer[i] = 0.0;
    }
    for (int i = 0; i < MAX_ORDER; ++i) {
   405f4:	e0bffb17 	ldw	r2,-20(fp)
   405f8:	10800044 	addi	r2,r2,1
   405fc:	e0bffb15 	stw	r2,-20(fp)
   40600:	e0bffb17 	ldw	r2,-20(fp)
   40604:	10801910 	cmplti	r2,r2,100
   40608:	103fbf1e 	bne	r2,zero,40508 <__alt_data_end+0xfffd9408>
        	recon->s1_hist[i][j] = 0.0f;
            recon->s2_hist[i][j] = 0.0f;
        	recon->in_hist[i][j] = 0.0f;
    }
    }
    for (int i = 0; i <= MAX_ORDER; ++i)
   4060c:	e03ffd15 	stw	zero,-12(fp)
   40610:	00000a06 	br	4063c <initReconstructor+0x208>
        recon->anti_diff_buffer[i] = 0.0f;
   40614:	e0fffe17 	ldw	r3,-8(fp)
   40618:	e0bffd17 	ldw	r2,-12(fp)
   4061c:	10801b44 	addi	r2,r2,109
   40620:	1085883a 	add	r2,r2,r2
   40624:	1085883a 	add	r2,r2,r2
   40628:	1885883a 	add	r2,r3,r2
   4062c:	10000015 	stw	zero,0(r2)
        	recon->s1_hist[i][j] = 0.0f;
            recon->s2_hist[i][j] = 0.0f;
        	recon->in_hist[i][j] = 0.0f;
    }
    }
    for (int i = 0; i <= MAX_ORDER; ++i)
   40630:	e0bffd17 	ldw	r2,-12(fp)
   40634:	10800044 	addi	r2,r2,1
   40638:	e0bffd15 	stw	r2,-12(fp)
   4063c:	e0bffd17 	ldw	r2,-12(fp)
   40640:	10801950 	cmplti	r2,r2,101
   40644:	103ff31e 	bne	r2,zero,40614 <__alt_data_end+0xfffd9514>
        recon->anti_diff_buffer[i] = 0.0f;


}
   40648:	0001883a 	nop
   4064c:	e037883a 	mov	sp,fp
   40650:	df000017 	ldw	fp,0(sp)
   40654:	dec00104 	addi	sp,sp,4
   40658:	f800283a 	ret

0004065c <nth_order_difference>:
float nth_order_difference(float new_sample,UnlimitedSamplerReconstructor *recon) {
   4065c:	defff804 	addi	sp,sp,-32
   40660:	dfc00715 	stw	ra,28(sp)
   40664:	df000615 	stw	fp,24(sp)
   40668:	df000604 	addi	fp,sp,24
   4066c:	e13ffe15 	stw	r4,-8(fp)
   40670:	e17fff15 	stw	r5,-4(fp)
	float x = new_sample;
   40674:	e0bffe17 	ldw	r2,-8(fp)
   40678:	e0bffa15 	stw	r2,-24(fp)
	if (recon->diff_reset >0){
   4067c:	e0bfff17 	ldw	r2,-4(fp)
   40680:	10800617 	ldw	r2,24(r2)
   40684:	0080130e 	bge	zero,r2,406d4 <nth_order_difference+0x78>
		for (int i = 0; i <= recon->order; ++i){
   40688:	e03ffb15 	stw	zero,-20(fp)
   4068c:	00000a06 	br	406b8 <nth_order_difference+0x5c>
		recon->diff_buffer[i]=0;
   40690:	e0ffff17 	ldw	r3,-4(fp)
   40694:	e0bffb17 	ldw	r2,-20(fp)
   40698:	10800204 	addi	r2,r2,8
   4069c:	1085883a 	add	r2,r2,r2
   406a0:	1085883a 	add	r2,r2,r2
   406a4:	1885883a 	add	r2,r3,r2
   406a8:	10000015 	stw	zero,0(r2)

}
float nth_order_difference(float new_sample,UnlimitedSamplerReconstructor *recon) {
	float x = new_sample;
	if (recon->diff_reset >0){
		for (int i = 0; i <= recon->order; ++i){
   406ac:	e0bffb17 	ldw	r2,-20(fp)
   406b0:	10800044 	addi	r2,r2,1
   406b4:	e0bffb15 	stw	r2,-20(fp)
   406b8:	e0bfff17 	ldw	r2,-4(fp)
   406bc:	10c00517 	ldw	r3,20(r2)
   406c0:	e0bffb17 	ldw	r2,-20(fp)
   406c4:	18bff20e 	bge	r3,r2,40690 <__alt_data_end+0xfffd9590>
		recon->diff_buffer[i]=0;

		}
		recon->diff_reset=0;
   406c8:	e0bfff17 	ldw	r2,-4(fp)
   406cc:	10000615 	stw	zero,24(r2)
   406d0:	00001f06 	br	40750 <nth_order_difference+0xf4>
	}else
	{
		for (int i = 0; i <= recon->order; ++i) {
   406d4:	e03ffc15 	stw	zero,-16(fp)
   406d8:	00001906 	br	40740 <nth_order_difference+0xe4>
	//        if (!init_done[i]) {
	//            diff_buffers[i] = x;
	//            init_done[i] = 1;
	//            return 0.0;  // NaN to signal not ready
	//        } else {
			float delta = x - recon->diff_buffer[i];
   406dc:	e0ffff17 	ldw	r3,-4(fp)
   406e0:	e0bffc17 	ldw	r2,-16(fp)
   406e4:	10800204 	addi	r2,r2,8
   406e8:	1085883a 	add	r2,r2,r2
   406ec:	1085883a 	add	r2,r2,r2
   406f0:	1885883a 	add	r2,r3,r2
   406f4:	10c00017 	ldw	r3,0(r2)
   406f8:	180b883a 	mov	r5,r3
   406fc:	e13ffa17 	ldw	r4,-24(fp)
   40700:	00441680 	call	44168 <__subsf3>
   40704:	1007883a 	mov	r3,r2
   40708:	e0fffd15 	stw	r3,-12(fp)
			recon->diff_buffer[i] = x;
   4070c:	e0ffff17 	ldw	r3,-4(fp)
   40710:	e0bffc17 	ldw	r2,-16(fp)
   40714:	10800204 	addi	r2,r2,8
   40718:	1085883a 	add	r2,r2,r2
   4071c:	1085883a 	add	r2,r2,r2
   40720:	1885883a 	add	r2,r3,r2
   40724:	e0fffa17 	ldw	r3,-24(fp)
   40728:	10c00015 	stw	r3,0(r2)
			x = delta;
   4072c:	e0bffd17 	ldw	r2,-12(fp)
   40730:	e0bffa15 	stw	r2,-24(fp)

		}
		recon->diff_reset=0;
	}else
	{
		for (int i = 0; i <= recon->order; ++i) {
   40734:	e0bffc17 	ldw	r2,-16(fp)
   40738:	10800044 	addi	r2,r2,1
   4073c:	e0bffc15 	stw	r2,-16(fp)
   40740:	e0bfff17 	ldw	r2,-4(fp)
   40744:	10c00517 	ldw	r3,20(r2)
   40748:	e0bffc17 	ldw	r2,-16(fp)
   4074c:	18bfe30e 	bge	r3,r2,406dc <__alt_data_end+0xfffd95dc>
			recon->diff_buffer[i] = x;
			x = delta;
	//        }
		}
	}
    return recon->diff_buffer[recon->order];
   40750:	e0bfff17 	ldw	r2,-4(fp)
   40754:	10800517 	ldw	r2,20(r2)
   40758:	e0ffff17 	ldw	r3,-4(fp)
   4075c:	10800204 	addi	r2,r2,8
   40760:	1085883a 	add	r2,r2,r2
   40764:	1085883a 	add	r2,r2,r2
   40768:	1885883a 	add	r2,r3,r2
   4076c:	10c00017 	ldw	r3,0(r2)
   40770:	1805883a 	mov	r2,r3
}
   40774:	e037883a 	mov	sp,fp
   40778:	dfc00117 	ldw	ra,4(sp)
   4077c:	df000017 	ldw	fp,0(sp)
   40780:	dec00204 	addi	sp,sp,8
   40784:	f800283a 	ret

00040788 <anti_diff_nth>:

float anti_diff_nth(float diffN,UnlimitedSamplerReconstructor *recon) {
   40788:	defff604 	addi	sp,sp,-40
   4078c:	dfc00915 	stw	ra,36(sp)
   40790:	df000815 	stw	fp,32(sp)
   40794:	dcc00715 	stw	r19,28(sp)
   40798:	dc800615 	stw	r18,24(sp)
   4079c:	dc400515 	stw	r17,20(sp)
   407a0:	dc000415 	stw	r16,16(sp)
   407a4:	df000804 	addi	fp,sp,32
   407a8:	e13ffa15 	stw	r4,-24(fp)
   407ac:	e17ffb15 	stw	r5,-20(fp)
	float x = diffN;  // the N-th difference input (Δⁿε[k])
   407b0:	e0bffa17 	ldw	r2,-24(fp)
   407b4:	e0bff815 	stw	r2,-32(fp)

	for (int i = 0; i < recon->order-1; ++i) {
   407b8:	e03ff915 	stw	zero,-28(fp)
   407bc:	00005506 	br	40914 <anti_diff_nth+0x18c>
//		int idx = recon->res_index[i] % recon->J;
	    // 1. Integrate current level
	    x = recon->anti_diff_buffer[i] + x;
   407c0:	e0fffb17 	ldw	r3,-20(fp)
   407c4:	e0bff917 	ldw	r2,-28(fp)
   407c8:	10801b44 	addi	r2,r2,109
   407cc:	1085883a 	add	r2,r2,r2
   407d0:	1085883a 	add	r2,r2,r2
   407d4:	1885883a 	add	r2,r3,r2
   407d8:	10c00017 	ldw	r3,0(r2)
   407dc:	180b883a 	mov	r5,r3
   407e0:	e13ff817 	ldw	r4,-32(fp)
   407e4:	00432e00 	call	432e0 <__addsf3>
   407e8:	1007883a 	mov	r3,r2
   407ec:	e0fff815 	stw	r3,-32(fp)
	    x=2.0 * recon->lam * round(x / (2.0 * recon->lam));
   407f0:	e0bffb17 	ldw	r2,-20(fp)
   407f4:	10c00017 	ldw	r3,0(r2)
   407f8:	1809883a 	mov	r4,r3
   407fc:	0046c480 	call	46c48 <__extendsfdf2>
   40800:	1011883a 	mov	r8,r2
   40804:	1813883a 	mov	r9,r3
   40808:	400d883a 	mov	r6,r8
   4080c:	480f883a 	mov	r7,r9
   40810:	4009883a 	mov	r4,r8
   40814:	480b883a 	mov	r5,r9
   40818:	00447e00 	call	447e0 <__adddf3>
   4081c:	1009883a 	mov	r4,r2
   40820:	180b883a 	mov	r5,r3
   40824:	2021883a 	mov	r16,r4
   40828:	2823883a 	mov	r17,r5
   4082c:	e13ff817 	ldw	r4,-32(fp)
   40830:	0046c480 	call	46c48 <__extendsfdf2>
   40834:	1025883a 	mov	r18,r2
   40838:	1827883a 	mov	r19,r3
   4083c:	e0bffb17 	ldw	r2,-20(fp)
   40840:	10c00017 	ldw	r3,0(r2)
   40844:	1809883a 	mov	r4,r3
   40848:	0046c480 	call	46c48 <__extendsfdf2>
   4084c:	1011883a 	mov	r8,r2
   40850:	1813883a 	mov	r9,r3
   40854:	400d883a 	mov	r6,r8
   40858:	480f883a 	mov	r7,r9
   4085c:	4009883a 	mov	r4,r8
   40860:	480b883a 	mov	r5,r9
   40864:	00447e00 	call	447e0 <__adddf3>
   40868:	1009883a 	mov	r4,r2
   4086c:	180b883a 	mov	r5,r3
   40870:	2005883a 	mov	r2,r4
   40874:	2807883a 	mov	r3,r5
   40878:	100d883a 	mov	r6,r2
   4087c:	180f883a 	mov	r7,r3
   40880:	9009883a 	mov	r4,r18
   40884:	980b883a 	mov	r5,r19
   40888:	004508c0 	call	4508c <__divdf3>
   4088c:	1009883a 	mov	r4,r2
   40890:	180b883a 	mov	r5,r3
   40894:	2005883a 	mov	r2,r4
   40898:	2807883a 	mov	r3,r5
   4089c:	1009883a 	mov	r4,r2
   408a0:	180b883a 	mov	r5,r3
   408a4:	00421700 	call	42170 <round>
   408a8:	1009883a 	mov	r4,r2
   408ac:	180b883a 	mov	r5,r3
   408b0:	200d883a 	mov	r6,r4
   408b4:	280f883a 	mov	r7,r5
   408b8:	8009883a 	mov	r4,r16
   408bc:	880b883a 	mov	r5,r17
   408c0:	0045ad80 	call	45ad8 <__muldf3>
   408c4:	1009883a 	mov	r4,r2
   408c8:	180b883a 	mov	r5,r3
   408cc:	2005883a 	mov	r2,r4
   408d0:	2807883a 	mov	r3,r5
   408d4:	1009883a 	mov	r4,r2
   408d8:	180b883a 	mov	r5,r3
   408dc:	0046d580 	call	46d58 <__truncdfsf2>
   408e0:	1007883a 	mov	r3,r2
   408e4:	e0fff815 	stw	r3,-32(fp)
//	    x+=2*recon->lam*(6*recon->max_in/recon->lam+1);
	    recon->anti_diff_buffer[i] = x;
   408e8:	e0fffb17 	ldw	r3,-20(fp)
   408ec:	e0bff917 	ldw	r2,-28(fp)
   408f0:	10801b44 	addi	r2,r2,109
   408f4:	1085883a 	add	r2,r2,r2
   408f8:	1085883a 	add	r2,r2,r2
   408fc:	1885883a 	add	r2,r3,r2
   40900:	e0fff817 	ldw	r3,-32(fp)
   40904:	10c00015 	stw	r3,0(r2)
}

float anti_diff_nth(float diffN,UnlimitedSamplerReconstructor *recon) {
	float x = diffN;  // the N-th difference input (Δⁿε[k])

	for (int i = 0; i < recon->order-1; ++i) {
   40908:	e0bff917 	ldw	r2,-28(fp)
   4090c:	10800044 	addi	r2,r2,1
   40910:	e0bff915 	stw	r2,-28(fp)
   40914:	e0bffb17 	ldw	r2,-20(fp)
   40918:	10800517 	ldw	r2,20(r2)
   4091c:	10bfffc4 	addi	r2,r2,-1
   40920:	e0fff917 	ldw	r3,-28(fp)
   40924:	18bfa616 	blt	r3,r2,407c0 <__alt_data_end+0xfffd96c0>
//	    printf("anti_diff_buffer at layer %d= %f.\n", i,recon->anti_diff_buffer[i] );

	}

	// Final integration
	x = recon->anti_diff_buffer[recon->order-1] + x;
   40928:	e0bffb17 	ldw	r2,-20(fp)
   4092c:	10800517 	ldw	r2,20(r2)
   40930:	10bfffc4 	addi	r2,r2,-1
   40934:	e0fffb17 	ldw	r3,-20(fp)
   40938:	10801b44 	addi	r2,r2,109
   4093c:	1085883a 	add	r2,r2,r2
   40940:	1085883a 	add	r2,r2,r2
   40944:	1885883a 	add	r2,r3,r2
   40948:	10c00017 	ldw	r3,0(r2)
   4094c:	180b883a 	mov	r5,r3
   40950:	e13ff817 	ldw	r4,-32(fp)
   40954:	00432e00 	call	432e0 <__addsf3>
   40958:	1007883a 	mov	r3,r2
   4095c:	e0fff815 	stw	r3,-32(fp)
	recon->anti_diff_buffer[recon->order-1] = x;
   40960:	e0bffb17 	ldw	r2,-20(fp)
   40964:	10800517 	ldw	r2,20(r2)
   40968:	10bfffc4 	addi	r2,r2,-1
   4096c:	e0fffb17 	ldw	r3,-20(fp)
   40970:	10801b44 	addi	r2,r2,109
   40974:	1085883a 	add	r2,r2,r2
   40978:	1085883a 	add	r2,r2,r2
   4097c:	1885883a 	add	r2,r3,r2
   40980:	e0fff817 	ldw	r3,-32(fp)
   40984:	10c00015 	stw	r3,0(r2)

	return x;  // final reconstructed sample g[k]
   40988:	e0bff817 	ldw	r2,-32(fp)
   4098c:	1007883a 	mov	r3,r2
}
   40990:	1805883a 	mov	r2,r3
   40994:	e6fffc04 	addi	sp,fp,-16
   40998:	dfc00517 	ldw	ra,20(sp)
   4099c:	df000417 	ldw	fp,16(sp)
   409a0:	dcc00317 	ldw	r19,12(sp)
   409a4:	dc800217 	ldw	r18,8(sp)
   409a8:	dc400117 	ldw	r17,4(sp)
   409ac:	dc000017 	ldw	r16,0(sp)
   409b0:	dec00604 	addi	sp,sp,24
   409b4:	f800283a 	ret

000409b8 <anti_diff_3rd>:

float anti_diff_3rd(float diffN,UnlimitedSamplerReconstructor *recon, MovingAverage *ma1,MovingAverage *ma2, MovingAverage *ma3) {
   409b8:	defff204 	addi	sp,sp,-56
   409bc:	dfc00d15 	stw	ra,52(sp)
   409c0:	df000c15 	stw	fp,48(sp)
   409c4:	dcc00b15 	stw	r19,44(sp)
   409c8:	dc800a15 	stw	r18,40(sp)
   409cc:	dc400915 	stw	r17,36(sp)
   409d0:	dc000815 	stw	r16,32(sp)
   409d4:	df000c04 	addi	fp,sp,48
   409d8:	e13ff815 	stw	r4,-32(fp)
   409dc:	e17ff915 	stw	r5,-28(fp)
   409e0:	e1bffa15 	stw	r6,-24(fp)
   409e4:	e1fffb15 	stw	r7,-20(fp)
	float x = diffN;  // the N-th difference input (Δⁿε[k])
   409e8:	e0bff817 	ldw	r2,-32(fp)
   409ec:	e0bff415 	stw	r2,-48(fp)

	x = recon->anti_diff_buffer[0] + x;
   409f0:	e0bff917 	ldw	r2,-28(fp)
   409f4:	10c06d17 	ldw	r3,436(r2)
   409f8:	180b883a 	mov	r5,r3
   409fc:	e13ff417 	ldw	r4,-48(fp)
   40a00:	00432e00 	call	432e0 <__addsf3>
   40a04:	1007883a 	mov	r3,r2
   40a08:	e0fff415 	stw	r3,-48(fp)
	x=2.0 * recon->lam * round(x / (2.0 * recon->lam));
   40a0c:	e0bff917 	ldw	r2,-28(fp)
   40a10:	10c00017 	ldw	r3,0(r2)
   40a14:	1809883a 	mov	r4,r3
   40a18:	0046c480 	call	46c48 <__extendsfdf2>
   40a1c:	1011883a 	mov	r8,r2
   40a20:	1813883a 	mov	r9,r3
   40a24:	400d883a 	mov	r6,r8
   40a28:	480f883a 	mov	r7,r9
   40a2c:	4009883a 	mov	r4,r8
   40a30:	480b883a 	mov	r5,r9
   40a34:	00447e00 	call	447e0 <__adddf3>
   40a38:	1009883a 	mov	r4,r2
   40a3c:	180b883a 	mov	r5,r3
   40a40:	2021883a 	mov	r16,r4
   40a44:	2823883a 	mov	r17,r5
   40a48:	e13ff417 	ldw	r4,-48(fp)
   40a4c:	0046c480 	call	46c48 <__extendsfdf2>
   40a50:	1025883a 	mov	r18,r2
   40a54:	1827883a 	mov	r19,r3
   40a58:	e0bff917 	ldw	r2,-28(fp)
   40a5c:	10c00017 	ldw	r3,0(r2)
   40a60:	1809883a 	mov	r4,r3
   40a64:	0046c480 	call	46c48 <__extendsfdf2>
   40a68:	1011883a 	mov	r8,r2
   40a6c:	1813883a 	mov	r9,r3
   40a70:	400d883a 	mov	r6,r8
   40a74:	480f883a 	mov	r7,r9
   40a78:	4009883a 	mov	r4,r8
   40a7c:	480b883a 	mov	r5,r9
   40a80:	00447e00 	call	447e0 <__adddf3>
   40a84:	1009883a 	mov	r4,r2
   40a88:	180b883a 	mov	r5,r3
   40a8c:	2005883a 	mov	r2,r4
   40a90:	2807883a 	mov	r3,r5
   40a94:	100d883a 	mov	r6,r2
   40a98:	180f883a 	mov	r7,r3
   40a9c:	9009883a 	mov	r4,r18
   40aa0:	980b883a 	mov	r5,r19
   40aa4:	004508c0 	call	4508c <__divdf3>
   40aa8:	1009883a 	mov	r4,r2
   40aac:	180b883a 	mov	r5,r3
   40ab0:	2005883a 	mov	r2,r4
   40ab4:	2807883a 	mov	r3,r5
   40ab8:	1009883a 	mov	r4,r2
   40abc:	180b883a 	mov	r5,r3
   40ac0:	00421700 	call	42170 <round>
   40ac4:	1009883a 	mov	r4,r2
   40ac8:	180b883a 	mov	r5,r3
   40acc:	200d883a 	mov	r6,r4
   40ad0:	280f883a 	mov	r7,r5
   40ad4:	8009883a 	mov	r4,r16
   40ad8:	880b883a 	mov	r5,r17
   40adc:	0045ad80 	call	45ad8 <__muldf3>
   40ae0:	1009883a 	mov	r4,r2
   40ae4:	180b883a 	mov	r5,r3
   40ae8:	2005883a 	mov	r2,r4
   40aec:	2807883a 	mov	r3,r5
   40af0:	1009883a 	mov	r4,r2
   40af4:	180b883a 	mov	r5,r3
   40af8:	0046d580 	call	46d58 <__truncdfsf2>
   40afc:	1007883a 	mov	r3,r2
   40b00:	e0fff415 	stw	r3,-48(fp)
	float avg1 = updateMovingAverage(ma1, x);
   40b04:	e17ff417 	ldw	r5,-48(fp)
   40b08:	e13ffa17 	ldw	r4,-24(fp)
   40b0c:	00403040 	call	40304 <updateMovingAverage>
   40b10:	e0bff515 	stw	r2,-44(fp)

	recon->anti_diff_buffer[0] = x;
   40b14:	e0bff917 	ldw	r2,-28(fp)
   40b18:	e0fff417 	ldw	r3,-48(fp)
   40b1c:	10c06d15 	stw	r3,436(r2)

	x=x-avg1;
   40b20:	e17ff517 	ldw	r5,-44(fp)
   40b24:	e13ff417 	ldw	r4,-48(fp)
   40b28:	00441680 	call	44168 <__subsf3>
   40b2c:	1007883a 	mov	r3,r2
   40b30:	e0fff415 	stw	r3,-48(fp)

	x = recon->anti_diff_buffer[1] + x;
   40b34:	e0bff917 	ldw	r2,-28(fp)
   40b38:	10c06e17 	ldw	r3,440(r2)
   40b3c:	180b883a 	mov	r5,r3
   40b40:	e13ff417 	ldw	r4,-48(fp)
   40b44:	00432e00 	call	432e0 <__addsf3>
   40b48:	1007883a 	mov	r3,r2
   40b4c:	e0fff415 	stw	r3,-48(fp)
	x=2.0 * recon->lam * round(x / (2.0 * recon->lam));
   40b50:	e0bff917 	ldw	r2,-28(fp)
   40b54:	10c00017 	ldw	r3,0(r2)
   40b58:	1809883a 	mov	r4,r3
   40b5c:	0046c480 	call	46c48 <__extendsfdf2>
   40b60:	1011883a 	mov	r8,r2
   40b64:	1813883a 	mov	r9,r3
   40b68:	400d883a 	mov	r6,r8
   40b6c:	480f883a 	mov	r7,r9
   40b70:	4009883a 	mov	r4,r8
   40b74:	480b883a 	mov	r5,r9
   40b78:	00447e00 	call	447e0 <__adddf3>
   40b7c:	1009883a 	mov	r4,r2
   40b80:	180b883a 	mov	r5,r3
   40b84:	2021883a 	mov	r16,r4
   40b88:	2823883a 	mov	r17,r5
   40b8c:	e13ff417 	ldw	r4,-48(fp)
   40b90:	0046c480 	call	46c48 <__extendsfdf2>
   40b94:	1025883a 	mov	r18,r2
   40b98:	1827883a 	mov	r19,r3
   40b9c:	e0bff917 	ldw	r2,-28(fp)
   40ba0:	10c00017 	ldw	r3,0(r2)
   40ba4:	1809883a 	mov	r4,r3
   40ba8:	0046c480 	call	46c48 <__extendsfdf2>
   40bac:	1011883a 	mov	r8,r2
   40bb0:	1813883a 	mov	r9,r3
   40bb4:	400d883a 	mov	r6,r8
   40bb8:	480f883a 	mov	r7,r9
   40bbc:	4009883a 	mov	r4,r8
   40bc0:	480b883a 	mov	r5,r9
   40bc4:	00447e00 	call	447e0 <__adddf3>
   40bc8:	1009883a 	mov	r4,r2
   40bcc:	180b883a 	mov	r5,r3
   40bd0:	2005883a 	mov	r2,r4
   40bd4:	2807883a 	mov	r3,r5
   40bd8:	100d883a 	mov	r6,r2
   40bdc:	180f883a 	mov	r7,r3
   40be0:	9009883a 	mov	r4,r18
   40be4:	980b883a 	mov	r5,r19
   40be8:	004508c0 	call	4508c <__divdf3>
   40bec:	1009883a 	mov	r4,r2
   40bf0:	180b883a 	mov	r5,r3
   40bf4:	2005883a 	mov	r2,r4
   40bf8:	2807883a 	mov	r3,r5
   40bfc:	1009883a 	mov	r4,r2
   40c00:	180b883a 	mov	r5,r3
   40c04:	00421700 	call	42170 <round>
   40c08:	1009883a 	mov	r4,r2
   40c0c:	180b883a 	mov	r5,r3
   40c10:	200d883a 	mov	r6,r4
   40c14:	280f883a 	mov	r7,r5
   40c18:	8009883a 	mov	r4,r16
   40c1c:	880b883a 	mov	r5,r17
   40c20:	0045ad80 	call	45ad8 <__muldf3>
   40c24:	1009883a 	mov	r4,r2
   40c28:	180b883a 	mov	r5,r3
   40c2c:	2005883a 	mov	r2,r4
   40c30:	2807883a 	mov	r3,r5
   40c34:	1009883a 	mov	r4,r2
   40c38:	180b883a 	mov	r5,r3
   40c3c:	0046d580 	call	46d58 <__truncdfsf2>
   40c40:	1007883a 	mov	r3,r2
   40c44:	e0fff415 	stw	r3,-48(fp)
	float avg2 = updateMovingAverage(ma2, x);
   40c48:	e17ff417 	ldw	r5,-48(fp)
   40c4c:	e13ffb17 	ldw	r4,-20(fp)
   40c50:	00403040 	call	40304 <updateMovingAverage>
   40c54:	e0bff615 	stw	r2,-40(fp)

	recon->anti_diff_buffer[1] = x;
   40c58:	e0bff917 	ldw	r2,-28(fp)
   40c5c:	e0fff417 	ldw	r3,-48(fp)
   40c60:	10c06e15 	stw	r3,440(r2)
	x=x-avg2;
   40c64:	e17ff617 	ldw	r5,-40(fp)
   40c68:	e13ff417 	ldw	r4,-48(fp)
   40c6c:	00441680 	call	44168 <__subsf3>
   40c70:	1007883a 	mov	r3,r2
   40c74:	e0fff415 	stw	r3,-48(fp)


	// Final integration
	x = recon->anti_diff_buffer[recon->order-1] + x;
   40c78:	e0bff917 	ldw	r2,-28(fp)
   40c7c:	10800517 	ldw	r2,20(r2)
   40c80:	10bfffc4 	addi	r2,r2,-1
   40c84:	e0fff917 	ldw	r3,-28(fp)
   40c88:	10801b44 	addi	r2,r2,109
   40c8c:	1085883a 	add	r2,r2,r2
   40c90:	1085883a 	add	r2,r2,r2
   40c94:	1885883a 	add	r2,r3,r2
   40c98:	10c00017 	ldw	r3,0(r2)
   40c9c:	180b883a 	mov	r5,r3
   40ca0:	e13ff417 	ldw	r4,-48(fp)
   40ca4:	00432e00 	call	432e0 <__addsf3>
   40ca8:	1007883a 	mov	r3,r2
   40cac:	e0fff415 	stw	r3,-48(fp)
	x=2.0 * recon->lam * round(x / (2.0 * recon->lam));
   40cb0:	e0bff917 	ldw	r2,-28(fp)
   40cb4:	10c00017 	ldw	r3,0(r2)
   40cb8:	1809883a 	mov	r4,r3
   40cbc:	0046c480 	call	46c48 <__extendsfdf2>
   40cc0:	1011883a 	mov	r8,r2
   40cc4:	1813883a 	mov	r9,r3
   40cc8:	400d883a 	mov	r6,r8
   40ccc:	480f883a 	mov	r7,r9
   40cd0:	4009883a 	mov	r4,r8
   40cd4:	480b883a 	mov	r5,r9
   40cd8:	00447e00 	call	447e0 <__adddf3>
   40cdc:	1009883a 	mov	r4,r2
   40ce0:	180b883a 	mov	r5,r3
   40ce4:	2021883a 	mov	r16,r4
   40ce8:	2823883a 	mov	r17,r5
   40cec:	e13ff417 	ldw	r4,-48(fp)
   40cf0:	0046c480 	call	46c48 <__extendsfdf2>
   40cf4:	1025883a 	mov	r18,r2
   40cf8:	1827883a 	mov	r19,r3
   40cfc:	e0bff917 	ldw	r2,-28(fp)
   40d00:	10c00017 	ldw	r3,0(r2)
   40d04:	1809883a 	mov	r4,r3
   40d08:	0046c480 	call	46c48 <__extendsfdf2>
   40d0c:	1011883a 	mov	r8,r2
   40d10:	1813883a 	mov	r9,r3
   40d14:	400d883a 	mov	r6,r8
   40d18:	480f883a 	mov	r7,r9
   40d1c:	4009883a 	mov	r4,r8
   40d20:	480b883a 	mov	r5,r9
   40d24:	00447e00 	call	447e0 <__adddf3>
   40d28:	1009883a 	mov	r4,r2
   40d2c:	180b883a 	mov	r5,r3
   40d30:	2005883a 	mov	r2,r4
   40d34:	2807883a 	mov	r3,r5
   40d38:	100d883a 	mov	r6,r2
   40d3c:	180f883a 	mov	r7,r3
   40d40:	9009883a 	mov	r4,r18
   40d44:	980b883a 	mov	r5,r19
   40d48:	004508c0 	call	4508c <__divdf3>
   40d4c:	1009883a 	mov	r4,r2
   40d50:	180b883a 	mov	r5,r3
   40d54:	2005883a 	mov	r2,r4
   40d58:	2807883a 	mov	r3,r5
   40d5c:	1009883a 	mov	r4,r2
   40d60:	180b883a 	mov	r5,r3
   40d64:	00421700 	call	42170 <round>
   40d68:	1009883a 	mov	r4,r2
   40d6c:	180b883a 	mov	r5,r3
   40d70:	200d883a 	mov	r6,r4
   40d74:	280f883a 	mov	r7,r5
   40d78:	8009883a 	mov	r4,r16
   40d7c:	880b883a 	mov	r5,r17
   40d80:	0045ad80 	call	45ad8 <__muldf3>
   40d84:	1009883a 	mov	r4,r2
   40d88:	180b883a 	mov	r5,r3
   40d8c:	2005883a 	mov	r2,r4
   40d90:	2807883a 	mov	r3,r5
   40d94:	1009883a 	mov	r4,r2
   40d98:	180b883a 	mov	r5,r3
   40d9c:	0046d580 	call	46d58 <__truncdfsf2>
   40da0:	1007883a 	mov	r3,r2
   40da4:	e0fff415 	stw	r3,-48(fp)

	recon->anti_diff_buffer[recon->order-1] = x;
   40da8:	e0bff917 	ldw	r2,-28(fp)
   40dac:	10800517 	ldw	r2,20(r2)
   40db0:	10bfffc4 	addi	r2,r2,-1
   40db4:	e0fff917 	ldw	r3,-28(fp)
   40db8:	10801b44 	addi	r2,r2,109
   40dbc:	1085883a 	add	r2,r2,r2
   40dc0:	1085883a 	add	r2,r2,r2
   40dc4:	1885883a 	add	r2,r3,r2
   40dc8:	e0fff417 	ldw	r3,-48(fp)
   40dcc:	10c00015 	stw	r3,0(r2)
	float avg3 = updateMovingAverage(ma3, x);
   40dd0:	e17ff417 	ldw	r5,-48(fp)
   40dd4:	e1000217 	ldw	r4,8(fp)
   40dd8:	00403040 	call	40304 <updateMovingAverage>
   40ddc:	e0bff715 	stw	r2,-36(fp)
//	x = hpf_update(hpf, x);
	x=x-avg3;
   40de0:	e17ff717 	ldw	r5,-36(fp)
   40de4:	e13ff417 	ldw	r4,-48(fp)
   40de8:	00441680 	call	44168 <__subsf3>
   40dec:	1007883a 	mov	r3,r2
   40df0:	e0fff415 	stw	r3,-48(fp)

	return x;  // final reconstructed sample g[k]
   40df4:	e0bff417 	ldw	r2,-48(fp)
   40df8:	1007883a 	mov	r3,r2
}
   40dfc:	1805883a 	mov	r2,r3
   40e00:	e6fffc04 	addi	sp,fp,-16
   40e04:	dfc00517 	ldw	ra,20(sp)
   40e08:	df000417 	ldw	fp,16(sp)
   40e0c:	dcc00317 	ldw	r19,12(sp)
   40e10:	dc800217 	ldw	r18,8(sp)
   40e14:	dc400117 	ldw	r17,4(sp)
   40e18:	dc000017 	ldw	r16,0(sp)
   40e1c:	dec00604 	addi	sp,sp,24
   40e20:	f800283a 	ret

00040e24 <anti_diff_2nd>:
float anti_diff_2nd(float diffN,UnlimitedSamplerReconstructor *recon, MovingAverage *ma1,MovingAverage *ma2, MovingAverage *ma3) {
   40e24:	defff304 	addi	sp,sp,-52
   40e28:	dfc00c15 	stw	ra,48(sp)
   40e2c:	df000b15 	stw	fp,44(sp)
   40e30:	dcc00a15 	stw	r19,40(sp)
   40e34:	dc800915 	stw	r18,36(sp)
   40e38:	dc400815 	stw	r17,32(sp)
   40e3c:	dc000715 	stw	r16,28(sp)
   40e40:	df000b04 	addi	fp,sp,44
   40e44:	e13ff815 	stw	r4,-32(fp)
   40e48:	e17ff915 	stw	r5,-28(fp)
   40e4c:	e1bffa15 	stw	r6,-24(fp)
   40e50:	e1fffb15 	stw	r7,-20(fp)
	float x = diffN;  // the N-th difference input (Δⁿε[k])
   40e54:	e0bff817 	ldw	r2,-32(fp)
   40e58:	e0bff515 	stw	r2,-44(fp)

	x = recon->anti_diff_buffer[0] + x;
   40e5c:	e0bff917 	ldw	r2,-28(fp)
   40e60:	10c06d17 	ldw	r3,436(r2)
   40e64:	180b883a 	mov	r5,r3
   40e68:	e13ff517 	ldw	r4,-44(fp)
   40e6c:	00432e00 	call	432e0 <__addsf3>
   40e70:	1007883a 	mov	r3,r2
   40e74:	e0fff515 	stw	r3,-44(fp)
	x=2.0 * recon->lam * round(x / (2.0 * recon->lam));
   40e78:	e0bff917 	ldw	r2,-28(fp)
   40e7c:	10c00017 	ldw	r3,0(r2)
   40e80:	1809883a 	mov	r4,r3
   40e84:	0046c480 	call	46c48 <__extendsfdf2>
   40e88:	1011883a 	mov	r8,r2
   40e8c:	1813883a 	mov	r9,r3
   40e90:	400d883a 	mov	r6,r8
   40e94:	480f883a 	mov	r7,r9
   40e98:	4009883a 	mov	r4,r8
   40e9c:	480b883a 	mov	r5,r9
   40ea0:	00447e00 	call	447e0 <__adddf3>
   40ea4:	1009883a 	mov	r4,r2
   40ea8:	180b883a 	mov	r5,r3
   40eac:	2021883a 	mov	r16,r4
   40eb0:	2823883a 	mov	r17,r5
   40eb4:	e13ff517 	ldw	r4,-44(fp)
   40eb8:	0046c480 	call	46c48 <__extendsfdf2>
   40ebc:	1025883a 	mov	r18,r2
   40ec0:	1827883a 	mov	r19,r3
   40ec4:	e0bff917 	ldw	r2,-28(fp)
   40ec8:	10c00017 	ldw	r3,0(r2)
   40ecc:	1809883a 	mov	r4,r3
   40ed0:	0046c480 	call	46c48 <__extendsfdf2>
   40ed4:	1011883a 	mov	r8,r2
   40ed8:	1813883a 	mov	r9,r3
   40edc:	400d883a 	mov	r6,r8
   40ee0:	480f883a 	mov	r7,r9
   40ee4:	4009883a 	mov	r4,r8
   40ee8:	480b883a 	mov	r5,r9
   40eec:	00447e00 	call	447e0 <__adddf3>
   40ef0:	1009883a 	mov	r4,r2
   40ef4:	180b883a 	mov	r5,r3
   40ef8:	2005883a 	mov	r2,r4
   40efc:	2807883a 	mov	r3,r5
   40f00:	100d883a 	mov	r6,r2
   40f04:	180f883a 	mov	r7,r3
   40f08:	9009883a 	mov	r4,r18
   40f0c:	980b883a 	mov	r5,r19
   40f10:	004508c0 	call	4508c <__divdf3>
   40f14:	1009883a 	mov	r4,r2
   40f18:	180b883a 	mov	r5,r3
   40f1c:	2005883a 	mov	r2,r4
   40f20:	2807883a 	mov	r3,r5
   40f24:	1009883a 	mov	r4,r2
   40f28:	180b883a 	mov	r5,r3
   40f2c:	00421700 	call	42170 <round>
   40f30:	1009883a 	mov	r4,r2
   40f34:	180b883a 	mov	r5,r3
   40f38:	200d883a 	mov	r6,r4
   40f3c:	280f883a 	mov	r7,r5
   40f40:	8009883a 	mov	r4,r16
   40f44:	880b883a 	mov	r5,r17
   40f48:	0045ad80 	call	45ad8 <__muldf3>
   40f4c:	1009883a 	mov	r4,r2
   40f50:	180b883a 	mov	r5,r3
   40f54:	2005883a 	mov	r2,r4
   40f58:	2807883a 	mov	r3,r5
   40f5c:	1009883a 	mov	r4,r2
   40f60:	180b883a 	mov	r5,r3
   40f64:	0046d580 	call	46d58 <__truncdfsf2>
   40f68:	1007883a 	mov	r3,r2
   40f6c:	e0fff515 	stw	r3,-44(fp)
	float avg1 = updateMovingAverage(ma1, x);
   40f70:	e17ff517 	ldw	r5,-44(fp)
   40f74:	e13ffa17 	ldw	r4,-24(fp)
   40f78:	00403040 	call	40304 <updateMovingAverage>
   40f7c:	e0bff615 	stw	r2,-40(fp)

	recon->anti_diff_buffer[0] = x;
   40f80:	e0bff917 	ldw	r2,-28(fp)
   40f84:	e0fff517 	ldw	r3,-44(fp)
   40f88:	10c06d15 	stw	r3,436(r2)
	x=x-avg1;
   40f8c:	e17ff617 	ldw	r5,-40(fp)
   40f90:	e13ff517 	ldw	r4,-44(fp)
   40f94:	00441680 	call	44168 <__subsf3>
   40f98:	1007883a 	mov	r3,r2
   40f9c:	e0fff515 	stw	r3,-44(fp)



	// Final integration
	x = recon->anti_diff_buffer[recon->order-1] + x;
   40fa0:	e0bff917 	ldw	r2,-28(fp)
   40fa4:	10800517 	ldw	r2,20(r2)
   40fa8:	10bfffc4 	addi	r2,r2,-1
   40fac:	e0fff917 	ldw	r3,-28(fp)
   40fb0:	10801b44 	addi	r2,r2,109
   40fb4:	1085883a 	add	r2,r2,r2
   40fb8:	1085883a 	add	r2,r2,r2
   40fbc:	1885883a 	add	r2,r3,r2
   40fc0:	10c00017 	ldw	r3,0(r2)
   40fc4:	180b883a 	mov	r5,r3
   40fc8:	e13ff517 	ldw	r4,-44(fp)
   40fcc:	00432e00 	call	432e0 <__addsf3>
   40fd0:	1007883a 	mov	r3,r2
   40fd4:	e0fff515 	stw	r3,-44(fp)
	x=2.0 * recon->lam * round(x / (2.0 * recon->lam));
   40fd8:	e0bff917 	ldw	r2,-28(fp)
   40fdc:	10c00017 	ldw	r3,0(r2)
   40fe0:	1809883a 	mov	r4,r3
   40fe4:	0046c480 	call	46c48 <__extendsfdf2>
   40fe8:	1011883a 	mov	r8,r2
   40fec:	1813883a 	mov	r9,r3
   40ff0:	400d883a 	mov	r6,r8
   40ff4:	480f883a 	mov	r7,r9
   40ff8:	4009883a 	mov	r4,r8
   40ffc:	480b883a 	mov	r5,r9
   41000:	00447e00 	call	447e0 <__adddf3>
   41004:	1009883a 	mov	r4,r2
   41008:	180b883a 	mov	r5,r3
   4100c:	2021883a 	mov	r16,r4
   41010:	2823883a 	mov	r17,r5
   41014:	e13ff517 	ldw	r4,-44(fp)
   41018:	0046c480 	call	46c48 <__extendsfdf2>
   4101c:	1025883a 	mov	r18,r2
   41020:	1827883a 	mov	r19,r3
   41024:	e0bff917 	ldw	r2,-28(fp)
   41028:	10c00017 	ldw	r3,0(r2)
   4102c:	1809883a 	mov	r4,r3
   41030:	0046c480 	call	46c48 <__extendsfdf2>
   41034:	1011883a 	mov	r8,r2
   41038:	1813883a 	mov	r9,r3
   4103c:	400d883a 	mov	r6,r8
   41040:	480f883a 	mov	r7,r9
   41044:	4009883a 	mov	r4,r8
   41048:	480b883a 	mov	r5,r9
   4104c:	00447e00 	call	447e0 <__adddf3>
   41050:	1009883a 	mov	r4,r2
   41054:	180b883a 	mov	r5,r3
   41058:	2005883a 	mov	r2,r4
   4105c:	2807883a 	mov	r3,r5
   41060:	100d883a 	mov	r6,r2
   41064:	180f883a 	mov	r7,r3
   41068:	9009883a 	mov	r4,r18
   4106c:	980b883a 	mov	r5,r19
   41070:	004508c0 	call	4508c <__divdf3>
   41074:	1009883a 	mov	r4,r2
   41078:	180b883a 	mov	r5,r3
   4107c:	2005883a 	mov	r2,r4
   41080:	2807883a 	mov	r3,r5
   41084:	1009883a 	mov	r4,r2
   41088:	180b883a 	mov	r5,r3
   4108c:	00421700 	call	42170 <round>
   41090:	1009883a 	mov	r4,r2
   41094:	180b883a 	mov	r5,r3
   41098:	200d883a 	mov	r6,r4
   4109c:	280f883a 	mov	r7,r5
   410a0:	8009883a 	mov	r4,r16
   410a4:	880b883a 	mov	r5,r17
   410a8:	0045ad80 	call	45ad8 <__muldf3>
   410ac:	1009883a 	mov	r4,r2
   410b0:	180b883a 	mov	r5,r3
   410b4:	2005883a 	mov	r2,r4
   410b8:	2807883a 	mov	r3,r5
   410bc:	1009883a 	mov	r4,r2
   410c0:	180b883a 	mov	r5,r3
   410c4:	0046d580 	call	46d58 <__truncdfsf2>
   410c8:	1007883a 	mov	r3,r2
   410cc:	e0fff515 	stw	r3,-44(fp)

	recon->anti_diff_buffer[recon->order-1] = x;
   410d0:	e0bff917 	ldw	r2,-28(fp)
   410d4:	10800517 	ldw	r2,20(r2)
   410d8:	10bfffc4 	addi	r2,r2,-1
   410dc:	e0fff917 	ldw	r3,-28(fp)
   410e0:	10801b44 	addi	r2,r2,109
   410e4:	1085883a 	add	r2,r2,r2
   410e8:	1085883a 	add	r2,r2,r2
   410ec:	1885883a 	add	r2,r3,r2
   410f0:	e0fff517 	ldw	r3,-44(fp)
   410f4:	10c00015 	stw	r3,0(r2)
	float avg2 = updateMovingAverage(ma2, x);
   410f8:	e17ff517 	ldw	r5,-44(fp)
   410fc:	e13ffb17 	ldw	r4,-20(fp)
   41100:	00403040 	call	40304 <updateMovingAverage>
   41104:	e0bff715 	stw	r2,-36(fp)
//	x = hpf_update(hpf, x);
	x=x-avg2;
   41108:	e17ff717 	ldw	r5,-36(fp)
   4110c:	e13ff517 	ldw	r4,-44(fp)
   41110:	00441680 	call	44168 <__subsf3>
   41114:	1007883a 	mov	r3,r2
   41118:	e0fff515 	stw	r3,-44(fp)


	return x;  // final reconstructed sample g[k]
   4111c:	e0bff517 	ldw	r2,-44(fp)
   41120:	1007883a 	mov	r3,r2
}
   41124:	1805883a 	mov	r2,r3
   41128:	e6fffc04 	addi	sp,fp,-16
   4112c:	dfc00517 	ldw	ra,20(sp)
   41130:	df000417 	ldw	fp,16(sp)
   41134:	dcc00317 	ldw	r19,12(sp)
   41138:	dc800217 	ldw	r18,8(sp)
   4113c:	dc400117 	ldw	r17,4(sp)
   41140:	dc000017 	ldw	r16,0(sp)
   41144:	dec00604 	addi	sp,sp,24
   41148:	f800283a 	ret

0004114c <anti_diff_1st>:
float anti_diff_1st(float diffN,UnlimitedSamplerReconstructor *recon, MovingAverage *ma1,MovingAverage *ma2, MovingAverage *ma3) {
   4114c:	defff404 	addi	sp,sp,-48
   41150:	dfc00b15 	stw	ra,44(sp)
   41154:	df000a15 	stw	fp,40(sp)
   41158:	dcc00915 	stw	r19,36(sp)
   4115c:	dc800815 	stw	r18,32(sp)
   41160:	dc400715 	stw	r17,28(sp)
   41164:	dc000615 	stw	r16,24(sp)
   41168:	df000a04 	addi	fp,sp,40
   4116c:	e13ff815 	stw	r4,-32(fp)
   41170:	e17ff915 	stw	r5,-28(fp)
   41174:	e1bffa15 	stw	r6,-24(fp)
   41178:	e1fffb15 	stw	r7,-20(fp)
	float x = diffN;  // the N-th difference input (Δⁿε[k])
   4117c:	e0bff817 	ldw	r2,-32(fp)
   41180:	e0bff615 	stw	r2,-40(fp)

	// Final integration
	x = recon->anti_diff_buffer[recon->order-1] + x;
   41184:	e0bff917 	ldw	r2,-28(fp)
   41188:	10800517 	ldw	r2,20(r2)
   4118c:	10bfffc4 	addi	r2,r2,-1
   41190:	e0fff917 	ldw	r3,-28(fp)
   41194:	10801b44 	addi	r2,r2,109
   41198:	1085883a 	add	r2,r2,r2
   4119c:	1085883a 	add	r2,r2,r2
   411a0:	1885883a 	add	r2,r3,r2
   411a4:	10c00017 	ldw	r3,0(r2)
   411a8:	180b883a 	mov	r5,r3
   411ac:	e13ff617 	ldw	r4,-40(fp)
   411b0:	00432e00 	call	432e0 <__addsf3>
   411b4:	1007883a 	mov	r3,r2
   411b8:	e0fff615 	stw	r3,-40(fp)
	x=2.0 * recon->lam * round(x / (2.0 * recon->lam));
   411bc:	e0bff917 	ldw	r2,-28(fp)
   411c0:	10c00017 	ldw	r3,0(r2)
   411c4:	1809883a 	mov	r4,r3
   411c8:	0046c480 	call	46c48 <__extendsfdf2>
   411cc:	1011883a 	mov	r8,r2
   411d0:	1813883a 	mov	r9,r3
   411d4:	400d883a 	mov	r6,r8
   411d8:	480f883a 	mov	r7,r9
   411dc:	4009883a 	mov	r4,r8
   411e0:	480b883a 	mov	r5,r9
   411e4:	00447e00 	call	447e0 <__adddf3>
   411e8:	1009883a 	mov	r4,r2
   411ec:	180b883a 	mov	r5,r3
   411f0:	2021883a 	mov	r16,r4
   411f4:	2823883a 	mov	r17,r5
   411f8:	e13ff617 	ldw	r4,-40(fp)
   411fc:	0046c480 	call	46c48 <__extendsfdf2>
   41200:	1025883a 	mov	r18,r2
   41204:	1827883a 	mov	r19,r3
   41208:	e0bff917 	ldw	r2,-28(fp)
   4120c:	10c00017 	ldw	r3,0(r2)
   41210:	1809883a 	mov	r4,r3
   41214:	0046c480 	call	46c48 <__extendsfdf2>
   41218:	1011883a 	mov	r8,r2
   4121c:	1813883a 	mov	r9,r3
   41220:	400d883a 	mov	r6,r8
   41224:	480f883a 	mov	r7,r9
   41228:	4009883a 	mov	r4,r8
   4122c:	480b883a 	mov	r5,r9
   41230:	00447e00 	call	447e0 <__adddf3>
   41234:	1009883a 	mov	r4,r2
   41238:	180b883a 	mov	r5,r3
   4123c:	2005883a 	mov	r2,r4
   41240:	2807883a 	mov	r3,r5
   41244:	100d883a 	mov	r6,r2
   41248:	180f883a 	mov	r7,r3
   4124c:	9009883a 	mov	r4,r18
   41250:	980b883a 	mov	r5,r19
   41254:	004508c0 	call	4508c <__divdf3>
   41258:	1009883a 	mov	r4,r2
   4125c:	180b883a 	mov	r5,r3
   41260:	2005883a 	mov	r2,r4
   41264:	2807883a 	mov	r3,r5
   41268:	1009883a 	mov	r4,r2
   4126c:	180b883a 	mov	r5,r3
   41270:	00421700 	call	42170 <round>
   41274:	1009883a 	mov	r4,r2
   41278:	180b883a 	mov	r5,r3
   4127c:	200d883a 	mov	r6,r4
   41280:	280f883a 	mov	r7,r5
   41284:	8009883a 	mov	r4,r16
   41288:	880b883a 	mov	r5,r17
   4128c:	0045ad80 	call	45ad8 <__muldf3>
   41290:	1009883a 	mov	r4,r2
   41294:	180b883a 	mov	r5,r3
   41298:	2005883a 	mov	r2,r4
   4129c:	2807883a 	mov	r3,r5
   412a0:	1009883a 	mov	r4,r2
   412a4:	180b883a 	mov	r5,r3
   412a8:	0046d580 	call	46d58 <__truncdfsf2>
   412ac:	1007883a 	mov	r3,r2
   412b0:	e0fff615 	stw	r3,-40(fp)

	recon->anti_diff_buffer[recon->order-1] = x;
   412b4:	e0bff917 	ldw	r2,-28(fp)
   412b8:	10800517 	ldw	r2,20(r2)
   412bc:	10bfffc4 	addi	r2,r2,-1
   412c0:	e0fff917 	ldw	r3,-28(fp)
   412c4:	10801b44 	addi	r2,r2,109
   412c8:	1085883a 	add	r2,r2,r2
   412cc:	1085883a 	add	r2,r2,r2
   412d0:	1885883a 	add	r2,r3,r2
   412d4:	e0fff617 	ldw	r3,-40(fp)
   412d8:	10c00015 	stw	r3,0(r2)
	float avg2 = updateMovingAverage(ma2, x);
   412dc:	e17ff617 	ldw	r5,-40(fp)
   412e0:	e13ffb17 	ldw	r4,-20(fp)
   412e4:	00403040 	call	40304 <updateMovingAverage>
   412e8:	e0bff715 	stw	r2,-36(fp)
//	x = hpf_update(hpf, x);
	x=x-avg2;
   412ec:	e17ff717 	ldw	r5,-36(fp)
   412f0:	e13ff617 	ldw	r4,-40(fp)
   412f4:	00441680 	call	44168 <__subsf3>
   412f8:	1007883a 	mov	r3,r2
   412fc:	e0fff615 	stw	r3,-40(fp)


	return x;  // final reconstructed sample g[k]
   41300:	e0bff617 	ldw	r2,-40(fp)
   41304:	1007883a 	mov	r3,r2
}
   41308:	1805883a 	mov	r2,r3
   4130c:	e6fffc04 	addi	sp,fp,-16
   41310:	dfc00517 	ldw	ra,20(sp)
   41314:	df000417 	ldw	fp,16(sp)
   41318:	dcc00317 	ldw	r19,12(sp)
   4131c:	dc800217 	ldw	r18,8(sp)
   41320:	dc400117 	ldw	r17,4(sp)
   41324:	dc000017 	ldw	r16,0(sp)
   41328:	dec00604 	addi	sp,sp,24
   4132c:	f800283a 	ret

00041330 <calc_order>:

int calc_order(UnlimitedSamplerReconstructor *recon) {
   41330:	defff704 	addi	sp,sp,-36
   41334:	dfc00815 	stw	ra,32(sp)
   41338:	df000715 	stw	fp,28(sp)
   4133c:	dc400615 	stw	r17,24(sp)
   41340:	dc000515 	stw	r16,20(sp)
   41344:	df000704 	addi	fp,sp,28
   41348:	e13ffd15 	stw	r4,-12(fp)
	float denominator = recon->sampling_interval * M_PI * M_E;
   4134c:	e0bffd17 	ldw	r2,-12(fp)
   41350:	10c0d217 	ldw	r3,840(r2)
   41354:	1809883a 	mov	r4,r3
   41358:	0046c480 	call	46c48 <__extendsfdf2>
   4135c:	1011883a 	mov	r8,r2
   41360:	1813883a 	mov	r9,r3
   41364:	01951134 	movhi	r6,21572
   41368:	318b4604 	addi	r6,r6,11544
   4136c:	01d00274 	movhi	r7,16393
   41370:	39c87ec4 	addi	r7,r7,8699
   41374:	4009883a 	mov	r4,r8
   41378:	480b883a 	mov	r5,r9
   4137c:	0045ad80 	call	45ad8 <__muldf3>
   41380:	1009883a 	mov	r4,r2
   41384:	180b883a 	mov	r5,r3
   41388:	2005883a 	mov	r2,r4
   4138c:	2807883a 	mov	r3,r5
   41390:	01a2c534 	movhi	r6,35604
   41394:	3195da44 	addi	r6,r6,22377
   41398:	01d001b4 	movhi	r7,16390
   4139c:	39efc284 	addi	r7,r7,-16630
   413a0:	1009883a 	mov	r4,r2
   413a4:	180b883a 	mov	r5,r3
   413a8:	0045ad80 	call	45ad8 <__muldf3>
   413ac:	1009883a 	mov	r4,r2
   413b0:	180b883a 	mov	r5,r3
   413b4:	2005883a 	mov	r2,r4
   413b8:	2807883a 	mov	r3,r5
   413bc:	1009883a 	mov	r4,r2
   413c0:	180b883a 	mov	r5,r3
   413c4:	0046d580 	call	46d58 <__truncdfsf2>
   413c8:	1007883a 	mov	r3,r2
   413cc:	e0fffa15 	stw	r3,-24(fp)

    if (recon->lam <= 0 || recon->max_in <= 0 || denominator <= 0) {
   413d0:	e0bffd17 	ldw	r2,-12(fp)
   413d4:	10c00017 	ldw	r3,0(r2)
   413d8:	000b883a 	mov	r5,zero
   413dc:	1809883a 	mov	r4,r3
   413e0:	0043ca40 	call	43ca4 <__lesf2>
   413e4:	00800a0e 	bge	zero,r2,41410 <calc_order+0xe0>
   413e8:	e0bffd17 	ldw	r2,-12(fp)
   413ec:	10c00417 	ldw	r3,16(r2)
   413f0:	000b883a 	mov	r5,zero
   413f4:	1809883a 	mov	r4,r3
   413f8:	0043ca40 	call	43ca4 <__lesf2>
   413fc:	0080040e 	bge	zero,r2,41410 <calc_order+0xe0>
   41400:	000b883a 	mov	r5,zero
   41404:	e13ffa17 	ldw	r4,-24(fp)
   41408:	0043ca40 	call	43ca4 <__lesf2>
   4140c:	00800216 	blt	zero,r2,41418 <calc_order+0xe8>
        // Handle invalid input
        return 1;  // or any other error signal
   41410:	00800044 	movi	r2,1
   41414:	00004c06 	br	41548 <calc_order+0x218>
    }

    float ratio = log(recon->lam) - log(recon->max_in);
   41418:	e0bffd17 	ldw	r2,-12(fp)
   4141c:	10c00017 	ldw	r3,0(r2)
   41420:	1809883a 	mov	r4,r3
   41424:	0046c480 	call	46c48 <__extendsfdf2>
   41428:	100b883a 	mov	r5,r2
   4142c:	180d883a 	mov	r6,r3
   41430:	2809883a 	mov	r4,r5
   41434:	300b883a 	mov	r5,r6
   41438:	004244c0 	call	4244c <log>
   4143c:	1021883a 	mov	r16,r2
   41440:	1823883a 	mov	r17,r3
   41444:	e0bffd17 	ldw	r2,-12(fp)
   41448:	10c00417 	ldw	r3,16(r2)
   4144c:	1809883a 	mov	r4,r3
   41450:	0046c480 	call	46c48 <__extendsfdf2>
   41454:	100b883a 	mov	r5,r2
   41458:	180d883a 	mov	r6,r3
   4145c:	2809883a 	mov	r4,r5
   41460:	300b883a 	mov	r5,r6
   41464:	004244c0 	call	4244c <log>
   41468:	1009883a 	mov	r4,r2
   4146c:	180b883a 	mov	r5,r3
   41470:	200d883a 	mov	r6,r4
   41474:	280f883a 	mov	r7,r5
   41478:	8009883a 	mov	r4,r16
   4147c:	880b883a 	mov	r5,r17
   41480:	00461f00 	call	461f0 <__subdf3>
   41484:	1009883a 	mov	r4,r2
   41488:	180b883a 	mov	r5,r3
   4148c:	2005883a 	mov	r2,r4
   41490:	2807883a 	mov	r3,r5
   41494:	1009883a 	mov	r4,r2
   41498:	180b883a 	mov	r5,r3
   4149c:	0046d580 	call	46d58 <__truncdfsf2>
   414a0:	1007883a 	mov	r3,r2
   414a4:	e0fffb15 	stw	r3,-20(fp)
    float denom_log = log(denominator);
   414a8:	e13ffa17 	ldw	r4,-24(fp)
   414ac:	0046c480 	call	46c48 <__extendsfdf2>
   414b0:	100b883a 	mov	r5,r2
   414b4:	180d883a 	mov	r6,r3
   414b8:	2809883a 	mov	r4,r5
   414bc:	300b883a 	mov	r5,r6
   414c0:	004244c0 	call	4244c <log>
   414c4:	100b883a 	mov	r5,r2
   414c8:	180d883a 	mov	r6,r3
   414cc:	2809883a 	mov	r4,r5
   414d0:	300b883a 	mov	r5,r6
   414d4:	0046d580 	call	46d58 <__truncdfsf2>
   414d8:	1007883a 	mov	r3,r2
   414dc:	e0fffc15 	stw	r3,-16(fp)
    int N = (int)ceil(ratio / denom_log);
   414e0:	e17ffc17 	ldw	r5,-16(fp)
   414e4:	e13ffb17 	ldw	r4,-20(fp)
   414e8:	00437a80 	call	437a8 <__divsf3>
   414ec:	1007883a 	mov	r3,r2
   414f0:	1805883a 	mov	r2,r3
   414f4:	1009883a 	mov	r4,r2
   414f8:	0046c480 	call	46c48 <__extendsfdf2>
   414fc:	100b883a 	mov	r5,r2
   41500:	180d883a 	mov	r6,r3
   41504:	2809883a 	mov	r4,r5
   41508:	300b883a 	mov	r5,r6
   4150c:	0041f900 	call	41f90 <ceil>
   41510:	100b883a 	mov	r5,r2
   41514:	180d883a 	mov	r6,r3
   41518:	2809883a 	mov	r4,r5
   4151c:	300b883a 	mov	r5,r6
   41520:	0046aec0 	call	46aec <__fixdfsi>
   41524:	e0bff915 	stw	r2,-28(fp)
//    return N;
    if (N> MAX_ORDER){
   41528:	e0bff917 	ldw	r2,-28(fp)
   4152c:	10801950 	cmplti	r2,r2,101
   41530:	1000021e 	bne	r2,zero,4153c <calc_order+0x20c>
    	N=MAX_ORDER;
   41534:	00801904 	movi	r2,100
   41538:	e0bff915 	stw	r2,-28(fp)
    }
    return N > 1 ? N : 1;
   4153c:	e0bff917 	ldw	r2,-28(fp)
   41540:	00800116 	blt	zero,r2,41548 <calc_order+0x218>
   41544:	00800044 	movi	r2,1
}
   41548:	e6fffe04 	addi	sp,fp,-8
   4154c:	dfc00317 	ldw	ra,12(sp)
   41550:	df000217 	ldw	fp,8(sp)
   41554:	dc400117 	ldw	r17,4(sp)
   41558:	dc000017 	ldw	r16,0(sp)
   4155c:	dec00404 	addi	sp,sp,16
   41560:	f800283a 	ret

00041564 <modulo>:
/* Centered modulo function into [-λ, λ) */
float modulo(float x, float lam) {
   41564:	defff804 	addi	sp,sp,-32
   41568:	dfc00715 	stw	ra,28(sp)
   4156c:	df000615 	stw	fp,24(sp)
   41570:	dc400515 	stw	r17,20(sp)
   41574:	dc000415 	stw	r16,16(sp)
   41578:	df000604 	addi	fp,sp,24
   4157c:	e13ffc15 	stw	r4,-16(fp)
   41580:	e17ffd15 	stw	r5,-12(fp)
    float two_lam = 2.0 * lam;
   41584:	e0bffd17 	ldw	r2,-12(fp)
   41588:	100b883a 	mov	r5,r2
   4158c:	1009883a 	mov	r4,r2
   41590:	00432e00 	call	432e0 <__addsf3>
   41594:	1007883a 	mov	r3,r2
   41598:	e0fffb15 	stw	r3,-20(fp)
    float mod = fmod(x + lam, two_lam);
   4159c:	e17ffd17 	ldw	r5,-12(fp)
   415a0:	e13ffc17 	ldw	r4,-16(fp)
   415a4:	00432e00 	call	432e0 <__addsf3>
   415a8:	1007883a 	mov	r3,r2
   415ac:	1805883a 	mov	r2,r3
   415b0:	1009883a 	mov	r4,r2
   415b4:	0046c480 	call	46c48 <__extendsfdf2>
   415b8:	1021883a 	mov	r16,r2
   415bc:	1823883a 	mov	r17,r3
   415c0:	e13ffb17 	ldw	r4,-20(fp)
   415c4:	0046c480 	call	46c48 <__extendsfdf2>
   415c8:	1009883a 	mov	r4,r2
   415cc:	180b883a 	mov	r5,r3
   415d0:	200d883a 	mov	r6,r4
   415d4:	280f883a 	mov	r7,r5
   415d8:	8009883a 	mov	r4,r16
   415dc:	880b883a 	mov	r5,r17
   415e0:	00422f40 	call	422f4 <fmod>
   415e4:	100b883a 	mov	r5,r2
   415e8:	180d883a 	mov	r6,r3
   415ec:	2809883a 	mov	r4,r5
   415f0:	300b883a 	mov	r5,r6
   415f4:	0046d580 	call	46d58 <__truncdfsf2>
   415f8:	1007883a 	mov	r3,r2
   415fc:	e0fffa15 	stw	r3,-24(fp)
    if (mod < 0) mod += two_lam;
   41600:	000b883a 	mov	r5,zero
   41604:	e13ffa17 	ldw	r4,-24(fp)
   41608:	0043ca40 	call	43ca4 <__lesf2>
   4160c:	1000050e 	bge	r2,zero,41624 <modulo+0xc0>
   41610:	e17ffb17 	ldw	r5,-20(fp)
   41614:	e13ffa17 	ldw	r4,-24(fp)
   41618:	00432e00 	call	432e0 <__addsf3>
   4161c:	1007883a 	mov	r3,r2
   41620:	e0fffa15 	stw	r3,-24(fp)
    return mod - lam;
   41624:	e17ffd17 	ldw	r5,-12(fp)
   41628:	e13ffa17 	ldw	r4,-24(fp)
   4162c:	00441680 	call	44168 <__subsf3>
   41630:	1009883a 	mov	r4,r2
   41634:	2007883a 	mov	r3,r4
   41638:	1805883a 	mov	r2,r3
}
   4163c:	e6fffe04 	addi	sp,fp,-8
   41640:	dfc00317 	ldw	ra,12(sp)
   41644:	df000217 	ldw	fp,8(sp)
   41648:	dc400117 	ldw	r17,4(sp)
   4164c:	dc000017 	ldw	r16,0(sp)
   41650:	dec00404 	addi	sp,sp,16
   41654:	f800283a 	ret

00041658 <center_to_2lam>:
float center_to_2lam(float x, float lam) {
   41658:	defffb04 	addi	sp,sp,-20
   4165c:	dfc00415 	stw	ra,16(sp)
   41660:	df000315 	stw	fp,12(sp)
   41664:	dc000215 	stw	r16,8(sp)
   41668:	df000304 	addi	fp,sp,12
   4166c:	e13ffd15 	stw	r4,-12(fp)
   41670:	e17ffe15 	stw	r5,-8(fp)
    return 2.0f * lam * roundf(x / (2.0f * lam));
   41674:	e0bffe17 	ldw	r2,-8(fp)
   41678:	100b883a 	mov	r5,r2
   4167c:	1009883a 	mov	r4,r2
   41680:	00432e00 	call	432e0 <__addsf3>
   41684:	1007883a 	mov	r3,r2
   41688:	1821883a 	mov	r16,r3
   4168c:	e0bffe17 	ldw	r2,-8(fp)
   41690:	100b883a 	mov	r5,r2
   41694:	1009883a 	mov	r4,r2
   41698:	00432e00 	call	432e0 <__addsf3>
   4169c:	1007883a 	mov	r3,r2
   416a0:	1805883a 	mov	r2,r3
   416a4:	100b883a 	mov	r5,r2
   416a8:	e13ffd17 	ldw	r4,-12(fp)
   416ac:	00437a80 	call	437a8 <__divsf3>
   416b0:	1007883a 	mov	r3,r2
   416b4:	1805883a 	mov	r2,r3
   416b8:	1009883a 	mov	r4,r2
   416bc:	00422700 	call	42270 <roundf>
   416c0:	1007883a 	mov	r3,r2
   416c4:	180b883a 	mov	r5,r3
   416c8:	8009883a 	mov	r4,r16
   416cc:	0043d6c0 	call	43d6c <__mulsf3>
   416d0:	1009883a 	mov	r4,r2
   416d4:	2007883a 	mov	r3,r4
   416d8:	1805883a 	mov	r2,r3
}
   416dc:	e6ffff04 	addi	sp,fp,-4
   416e0:	dfc00217 	ldw	ra,8(sp)
   416e4:	df000117 	ldw	fp,4(sp)
   416e8:	dc000017 	ldw	r16,0(sp)
   416ec:	dec00304 	addi	sp,sp,12
   416f0:	f800283a 	ret

000416f4 <update>:
//#define EPS_HISTORY_SIZE 10  // Like `J` in Python
//
//double eps_history[EPS_HISTORY_SIZE];
//int eps_index = 0;
/* Update function: process one sample */
float update(UnlimitedSamplerReconstructor *recon, float yk,MovingAverage *ma1,MovingAverage *ma2,MovingAverage *ma3) {
   416f4:	defff304 	addi	sp,sp,-52
   416f8:	dfc00c15 	stw	ra,48(sp)
   416fc:	df000b15 	stw	fp,44(sp)
   41700:	dc400a15 	stw	r17,40(sp)
   41704:	dc000915 	stw	r16,36(sp)
   41708:	df000b04 	addi	fp,sp,44
   4170c:	e13ffa15 	stw	r4,-24(fp)
   41710:	e17ffb15 	stw	r5,-20(fp)
   41714:	e1bffc15 	stw	r6,-16(fp)
   41718:	e1fffd15 	stw	r7,-12(fp)
	if (yk> recon->max_in){
   4171c:	e0bffa17 	ldw	r2,-24(fp)
   41720:	10c00417 	ldw	r3,16(r2)
   41724:	e17ffb17 	ldw	r5,-20(fp)
   41728:	1809883a 	mov	r4,r3
   4172c:	0043ca40 	call	43ca4 <__lesf2>
   41730:	10002f0e 	bge	r2,zero,417f0 <update+0xfc>
		recon->max_in=(2*recon->lam)*round(yk/(2*recon->lam));
   41734:	e0fffa17 	ldw	r3,-24(fp)
   41738:	18800017 	ldw	r2,0(r3)
   4173c:	100b883a 	mov	r5,r2
   41740:	1009883a 	mov	r4,r2
   41744:	00432e00 	call	432e0 <__addsf3>
   41748:	1007883a 	mov	r3,r2
   4174c:	1805883a 	mov	r2,r3
   41750:	1009883a 	mov	r4,r2
   41754:	0046c480 	call	46c48 <__extendsfdf2>
   41758:	1021883a 	mov	r16,r2
   4175c:	1823883a 	mov	r17,r3
   41760:	e0fffa17 	ldw	r3,-24(fp)
   41764:	18800017 	ldw	r2,0(r3)
   41768:	100b883a 	mov	r5,r2
   4176c:	1009883a 	mov	r4,r2
   41770:	00432e00 	call	432e0 <__addsf3>
   41774:	1007883a 	mov	r3,r2
   41778:	1805883a 	mov	r2,r3
   4177c:	100b883a 	mov	r5,r2
   41780:	e13ffb17 	ldw	r4,-20(fp)
   41784:	00437a80 	call	437a8 <__divsf3>
   41788:	1007883a 	mov	r3,r2
   4178c:	1805883a 	mov	r2,r3
   41790:	1009883a 	mov	r4,r2
   41794:	0046c480 	call	46c48 <__extendsfdf2>
   41798:	100b883a 	mov	r5,r2
   4179c:	180d883a 	mov	r6,r3
   417a0:	2809883a 	mov	r4,r5
   417a4:	300b883a 	mov	r5,r6
   417a8:	00421700 	call	42170 <round>
   417ac:	1009883a 	mov	r4,r2
   417b0:	180b883a 	mov	r5,r3
   417b4:	200d883a 	mov	r6,r4
   417b8:	280f883a 	mov	r7,r5
   417bc:	8009883a 	mov	r4,r16
   417c0:	880b883a 	mov	r5,r17
   417c4:	0045ad80 	call	45ad8 <__muldf3>
   417c8:	1009883a 	mov	r4,r2
   417cc:	180b883a 	mov	r5,r3
   417d0:	2005883a 	mov	r2,r4
   417d4:	2807883a 	mov	r3,r5
   417d8:	1009883a 	mov	r4,r2
   417dc:	180b883a 	mov	r5,r3
   417e0:	0046d580 	call	46d58 <__truncdfsf2>
   417e4:	1007883a 	mov	r3,r2
   417e8:	e0bffa17 	ldw	r2,-24(fp)
   417ec:	10c00415 	stw	r3,16(r2)
//		printf("new largest= %f \n",recon->max_in);
//		recon->order = calc_order(recon);
//		printf("new order= %d \n",recon->order);

	}
	recon->order =1;
   417f0:	e0bffa17 	ldw	r2,-24(fp)
   417f4:	00c00044 	movi	r3,1
   417f8:	10c00515 	stw	r3,20(r2)
//    }

    // Step 1: Compute Δy[k]
//    float dy = yk - recon->prev_y;

    float dy= nth_order_difference(yk,recon);
   417fc:	e17ffa17 	ldw	r5,-24(fp)
   41800:	e13ffb17 	ldw	r4,-20(fp)
   41804:	004065c0 	call	4065c <nth_order_difference>
   41808:	e0bff515 	stw	r2,-44(fp)

    // Step 2: Apply modulo to Δy[k]
    float mod_dy = modulo(dy, recon->lam);
   4180c:	e0bffa17 	ldw	r2,-24(fp)
   41810:	10c00017 	ldw	r3,0(r2)
   41814:	180b883a 	mov	r5,r3
   41818:	e13ff517 	ldw	r4,-44(fp)
   4181c:	00415640 	call	41564 <modulo>
   41820:	e0bff615 	stw	r2,-40(fp)

    // Step 3: Compute Δε[k]
    float delta_eps = mod_dy - dy;
   41824:	e17ff517 	ldw	r5,-44(fp)
   41828:	e13ff617 	ldw	r4,-40(fp)
   4182c:	00441680 	call	44168 <__subsf3>
   41830:	1007883a 	mov	r3,r2
   41834:	e0fff715 	stw	r3,-36(fp)
    // Step 4: Update ε[k], round to nearest 2λ
//    recon->prev_eps += delta_eps;

//    delta_eps=delta_eps-avg;

    recon->prev_eps =anti_diff_nth(delta_eps,recon);
   41838:	e17ffa17 	ldw	r5,-24(fp)
   4183c:	e13ff717 	ldw	r4,-36(fp)
   41840:	00407880 	call	40788 <anti_diff_nth>
   41844:	1007883a 	mov	r3,r2
   41848:	e0bffa17 	ldw	r2,-24(fp)
   4184c:	10c00215 	stw	r3,8(r2)
//   printf("calculated kn_VAL %d.\n", kn);
//  printf("calculated prev_eps_VAL %f.\n", recon->prev_eps);
//    recon->prev_eps += 2.0 * kn ;
//    printf("calculated prev_eps_VAL %f.\n", recon->prev_eps);
//    float eps_k = 2.0 * recon->lam * round(recon->prev_eps / (2.0 * recon->lam));
    float eps_k=recon->prev_eps;
   41850:	e0bffa17 	ldw	r2,-24(fp)
   41854:	10800217 	ldw	r2,8(r2)
   41858:	e0bff815 	stw	r2,-32(fp)

    // Step 5: Recover g[k]
    float gk = yk + eps_k;
   4185c:	e17ff817 	ldw	r5,-32(fp)
   41860:	e13ffb17 	ldw	r4,-20(fp)
   41864:	00432e00 	call	432e0 <__addsf3>
   41868:	1007883a 	mov	r3,r2
   4186c:	e0fff915 	stw	r3,-28(fp)
//    printf("reconstructed val%f.\n", gk);

    // Update state
    recon->prev_y = yk;
   41870:	e0bffa17 	ldw	r2,-24(fp)
   41874:	e0fffb17 	ldw	r3,-20(fp)
   41878:	10c00115 	stw	r3,4(r2)


//    return eps_k;
    return gk;
   4187c:	e0bff917 	ldw	r2,-28(fp)
   41880:	1007883a 	mov	r3,r2

}
   41884:	1805883a 	mov	r2,r3
   41888:	e6fffe04 	addi	sp,fp,-8
   4188c:	dfc00317 	ldw	ra,12(sp)
   41890:	df000217 	ldw	fp,8(sp)
   41894:	dc400117 	ldw	r17,4(sp)
   41898:	dc000017 	ldw	r16,0(sp)
   4189c:	dec00404 	addi	sp,sp,16
   418a0:	f800283a 	ret

000418a4 <convert_adc_to_signal>:
/* Initialize the moving average filter */

/* Update the moving average with a new sample */


float convert_adc_to_signal(int adc_value, int ADC_MAX_VALUE, float V_REF, float OFFSET_VOLTAGE) {
   418a4:	defff704 	addi	sp,sp,-36
   418a8:	dfc00815 	stw	ra,32(sp)
   418ac:	df000715 	stw	fp,28(sp)
   418b0:	dc000615 	stw	r16,24(sp)
   418b4:	df000704 	addi	fp,sp,28
   418b8:	e13ffb15 	stw	r4,-20(fp)
   418bc:	e17ffc15 	stw	r5,-16(fp)
   418c0:	e1bffd15 	stw	r6,-12(fp)
   418c4:	e1fffe15 	stw	r7,-8(fp)
    // Calculate the input voltage
    float input_voltage = (adc_value / (float)ADC_MAX_VALUE) * V_REF;
   418c8:	e13ffb17 	ldw	r4,-20(fp)
   418cc:	00446bc0 	call	446bc <__floatsisf>
   418d0:	1021883a 	mov	r16,r2
   418d4:	e13ffc17 	ldw	r4,-16(fp)
   418d8:	00446bc0 	call	446bc <__floatsisf>
   418dc:	1007883a 	mov	r3,r2
   418e0:	180b883a 	mov	r5,r3
   418e4:	8009883a 	mov	r4,r16
   418e8:	00437a80 	call	437a8 <__divsf3>
   418ec:	1007883a 	mov	r3,r2
   418f0:	1805883a 	mov	r2,r3
   418f4:	e17ffd17 	ldw	r5,-12(fp)
   418f8:	1009883a 	mov	r4,r2
   418fc:	0043d6c0 	call	43d6c <__mulsf3>
   41900:	1007883a 	mov	r3,r2
   41904:	e0fff915 	stw	r3,-28(fp)

    // Subtract the offset to get the original signal value
    float signal_value = input_voltage - OFFSET_VOLTAGE;
   41908:	e17ffe17 	ldw	r5,-8(fp)
   4190c:	e13ff917 	ldw	r4,-28(fp)
   41910:	00441680 	call	44168 <__subsf3>
   41914:	1007883a 	mov	r3,r2
   41918:	e0fffa15 	stw	r3,-24(fp)

    return signal_value;
   4191c:	e0bffa17 	ldw	r2,-24(fp)
   41920:	1007883a 	mov	r3,r2
}
   41924:	1805883a 	mov	r2,r3
   41928:	e6ffff04 	addi	sp,fp,-4
   4192c:	dfc00217 	ldw	ra,8(sp)
   41930:	df000117 	ldw	fp,4(sp)
   41934:	dc000017 	ldw	r16,0(sp)
   41938:	dec00304 	addi	sp,sp,12
   4193c:	f800283a 	ret

00041940 <float_to_dac>:


uint8_t float_to_dac(float signal_value, int DAC_MAX_VALUE, float V_REF, float OFFSET) {
   41940:	defff704 	addi	sp,sp,-36
   41944:	dfc00815 	stw	ra,32(sp)
   41948:	df000715 	stw	fp,28(sp)
   4194c:	dc000615 	stw	r16,24(sp)
   41950:	df000704 	addi	fp,sp,28
   41954:	e13ffb15 	stw	r4,-20(fp)
   41958:	e17ffc15 	stw	r5,-16(fp)
   4195c:	e1bffd15 	stw	r6,-12(fp)
   41960:	e1fffe15 	stw	r7,-8(fp)
    float dac_voltage;
    uint8_t dac_value;

    // Apply offset
    dac_voltage = signal_value + OFFSET;
   41964:	e17ffe17 	ldw	r5,-8(fp)
   41968:	e13ffb17 	ldw	r4,-20(fp)
   4196c:	00432e00 	call	432e0 <__addsf3>
   41970:	1007883a 	mov	r3,r2
   41974:	e0fff915 	stw	r3,-28(fp)

    // Clamp to DAC range (0V to 5V)
    if (dac_voltage < 0.0f) {
   41978:	000b883a 	mov	r5,zero
   4197c:	e13ff917 	ldw	r4,-28(fp)
   41980:	0043ca40 	call	43ca4 <__lesf2>
   41984:	1000020e 	bge	r2,zero,41990 <float_to_dac+0x50>
        dac_voltage = 0.0f;
   41988:	e03ff915 	stw	zero,-28(fp)
   4198c:	00000606 	br	419a8 <float_to_dac+0x68>
    } else if (dac_voltage > V_REF) {
   41990:	e17ffd17 	ldw	r5,-12(fp)
   41994:	e13ff917 	ldw	r4,-28(fp)
   41998:	0043be80 	call	43be8 <__gesf2>
   4199c:	0080020e 	bge	zero,r2,419a8 <float_to_dac+0x68>
        dac_voltage = V_REF;
   419a0:	e0bffd17 	ldw	r2,-12(fp)
   419a4:	e0bff915 	stw	r2,-28(fp)
    }

    // Convert to DAC value
    dac_value = (uint8_t)((dac_voltage / V_REF) * DAC_MAX_VALUE);
   419a8:	e17ffd17 	ldw	r5,-12(fp)
   419ac:	e13ff917 	ldw	r4,-28(fp)
   419b0:	00437a80 	call	437a8 <__divsf3>
   419b4:	1007883a 	mov	r3,r2
   419b8:	1821883a 	mov	r16,r3
   419bc:	e13ffc17 	ldw	r4,-16(fp)
   419c0:	00446bc0 	call	446bc <__floatsisf>
   419c4:	1007883a 	mov	r3,r2
   419c8:	180b883a 	mov	r5,r3
   419cc:	8009883a 	mov	r4,r16
   419d0:	0043d6c0 	call	43d6c <__mulsf3>
   419d4:	1007883a 	mov	r3,r2
   419d8:	1805883a 	mov	r2,r3
   419dc:	1009883a 	mov	r4,r2
   419e0:	00430cc0 	call	430cc <__fixunssfsi>
   419e4:	e0bffa05 	stb	r2,-24(fp)

    return dac_value;
   419e8:	e0bffa03 	ldbu	r2,-24(fp)
}
   419ec:	e6ffff04 	addi	sp,fp,-4
   419f0:	dfc00217 	ldw	ra,8(sp)
   419f4:	df000117 	ldw	fp,4(sp)
   419f8:	dc000017 	ldw	r16,0(sp)
   419fc:	dec00304 	addi	sp,sp,12
   41a00:	f800283a 	ret

00041a04 <send_to_PCF>:





int send_to_PCF(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 dac_value) {
   41a04:	defffa04 	addi	sp,sp,-24
   41a08:	dfc00515 	stw	ra,20(sp)
   41a0c:	df000415 	stw	fp,16(sp)
   41a10:	df000404 	addi	fp,sp,16
   41a14:	e13ffe15 	stw	r4,-8(fp)
   41a18:	2805883a 	mov	r2,r5
   41a1c:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 txbuffer[2];  // Buffer to hold data to send
    ALT_AVALON_I2C_STATUS_CODE status;

    // Prepare the control byte and DAC data
    txbuffer[0] = 0x40;     // Control byte: Enable DAC
   41a20:	00801004 	movi	r2,64
   41a24:	e0bffd05 	stb	r2,-12(fp)
    txbuffer[1] = dac_value; // Data byte: Value to set DAC output
   41a28:	e0bfff03 	ldbu	r2,-4(fp)
   41a2c:	e0bffd45 	stb	r2,-11(fp)

    // Write the data to the DAC
    status = alt_avalon_i2c_master_tx(i2c_dev, txbuffer, 2, ALT_AVALON_I2C_NO_INTERRUPTS);
   41a30:	e0bffd04 	addi	r2,fp,-12
   41a34:	000f883a 	mov	r7,zero
   41a38:	01800084 	movi	r6,2
   41a3c:	100b883a 	mov	r5,r2
   41a40:	e13ffe17 	ldw	r4,-8(fp)
   41a44:	00533e80 	call	533e8 <alt_avalon_i2c_master_tx>
   41a48:	e0bffc15 	stw	r2,-16(fp)
    if (status != ALT_AVALON_I2C_SUCCESS) {
   41a4c:	e0bffc17 	ldw	r2,-16(fp)
   41a50:	10000626 	beq	r2,zero,41a6c <send_to_PCF+0x68>
        printf("Error: I2C write to DAC failed with status code: %d\n", status);
   41a54:	e17ffc17 	ldw	r5,-16(fp)
   41a58:	01000174 	movhi	r4,5
   41a5c:	2119d704 	addi	r4,r4,26460
   41a60:	00481280 	call	48128 <printf>
        return -1; // Return error
   41a64:	00bfffc4 	movi	r2,-1
   41a68:	00000106 	br	41a70 <send_to_PCF+0x6c>
    }
   // printf("inhere");
    return 0; // Success
   41a6c:	0005883a 	mov	r2,zero
}
   41a70:	e037883a 	mov	sp,fp
   41a74:	dfc00117 	ldw	ra,4(sp)
   41a78:	df000017 	ldw	fp,0(sp)
   41a7c:	dec00204 	addi	sp,sp,8
   41a80:	f800283a 	ret

00041a84 <process_lowpass>:
//float alpha = 0.1f;  // Adjust based on desired cutoff
float fc = 5000.0f;
float fs = 10000.0f;


float process_lowpass(float x) {
   41a84:	defff704 	addi	sp,sp,-36
   41a88:	dfc00815 	stw	ra,32(sp)
   41a8c:	df000715 	stw	fp,28(sp)
   41a90:	dcc00615 	stw	r19,24(sp)
   41a94:	dc800515 	stw	r18,20(sp)
   41a98:	dc400415 	stw	r17,16(sp)
   41a9c:	dc000315 	stw	r16,12(sp)
   41aa0:	df000704 	addi	fp,sp,28
   41aa4:	e13ffb15 	stw	r4,-20(fp)
	float alpha = (2.0f * M_PI * fc) / (fs + 2.0f * M_PI * fc);
   41aa8:	d0a00017 	ldw	r2,-32768(gp)
   41aac:	1009883a 	mov	r4,r2
   41ab0:	0046c480 	call	46c48 <__extendsfdf2>
   41ab4:	1011883a 	mov	r8,r2
   41ab8:	1813883a 	mov	r9,r3
   41abc:	01951134 	movhi	r6,21572
   41ac0:	318b4604 	addi	r6,r6,11544
   41ac4:	01d00674 	movhi	r7,16409
   41ac8:	39c87ec4 	addi	r7,r7,8699
   41acc:	4009883a 	mov	r4,r8
   41ad0:	480b883a 	mov	r5,r9
   41ad4:	0045ad80 	call	45ad8 <__muldf3>
   41ad8:	1009883a 	mov	r4,r2
   41adc:	180b883a 	mov	r5,r3
   41ae0:	2021883a 	mov	r16,r4
   41ae4:	2823883a 	mov	r17,r5
   41ae8:	d0a00117 	ldw	r2,-32764(gp)
   41aec:	1009883a 	mov	r4,r2
   41af0:	0046c480 	call	46c48 <__extendsfdf2>
   41af4:	1025883a 	mov	r18,r2
   41af8:	1827883a 	mov	r19,r3
   41afc:	d0a00017 	ldw	r2,-32768(gp)
   41b00:	1009883a 	mov	r4,r2
   41b04:	0046c480 	call	46c48 <__extendsfdf2>
   41b08:	1011883a 	mov	r8,r2
   41b0c:	1813883a 	mov	r9,r3
   41b10:	01951134 	movhi	r6,21572
   41b14:	318b4604 	addi	r6,r6,11544
   41b18:	01d00674 	movhi	r7,16409
   41b1c:	39c87ec4 	addi	r7,r7,8699
   41b20:	4009883a 	mov	r4,r8
   41b24:	480b883a 	mov	r5,r9
   41b28:	0045ad80 	call	45ad8 <__muldf3>
   41b2c:	1009883a 	mov	r4,r2
   41b30:	180b883a 	mov	r5,r3
   41b34:	2005883a 	mov	r2,r4
   41b38:	2807883a 	mov	r3,r5
   41b3c:	100d883a 	mov	r6,r2
   41b40:	180f883a 	mov	r7,r3
   41b44:	9009883a 	mov	r4,r18
   41b48:	980b883a 	mov	r5,r19
   41b4c:	00447e00 	call	447e0 <__adddf3>
   41b50:	1009883a 	mov	r4,r2
   41b54:	180b883a 	mov	r5,r3
   41b58:	2005883a 	mov	r2,r4
   41b5c:	2807883a 	mov	r3,r5
   41b60:	100d883a 	mov	r6,r2
   41b64:	180f883a 	mov	r7,r3
   41b68:	8009883a 	mov	r4,r16
   41b6c:	880b883a 	mov	r5,r17
   41b70:	004508c0 	call	4508c <__divdf3>
   41b74:	1009883a 	mov	r4,r2
   41b78:	180b883a 	mov	r5,r3
   41b7c:	2005883a 	mov	r2,r4
   41b80:	2807883a 	mov	r3,r5
   41b84:	1009883a 	mov	r4,r2
   41b88:	180b883a 	mov	r5,r3
   41b8c:	0046d580 	call	46d58 <__truncdfsf2>
   41b90:	1007883a 	mov	r3,r2
   41b94:	e0fff915 	stw	r3,-28(fp)
    float y = alpha * x + (1.0f - alpha) * y_prev;
   41b98:	e17ffb17 	ldw	r5,-20(fp)
   41b9c:	e13ff917 	ldw	r4,-28(fp)
   41ba0:	0043d6c0 	call	43d6c <__mulsf3>
   41ba4:	1007883a 	mov	r3,r2
   41ba8:	1821883a 	mov	r16,r3
   41bac:	e17ff917 	ldw	r5,-28(fp)
   41bb0:	010fe034 	movhi	r4,16256
   41bb4:	00441680 	call	44168 <__subsf3>
   41bb8:	1009883a 	mov	r4,r2
   41bbc:	2007883a 	mov	r3,r4
   41bc0:	d0a71317 	ldw	r2,-25524(gp)
   41bc4:	100b883a 	mov	r5,r2
   41bc8:	1809883a 	mov	r4,r3
   41bcc:	0043d6c0 	call	43d6c <__mulsf3>
   41bd0:	1007883a 	mov	r3,r2
   41bd4:	1805883a 	mov	r2,r3
   41bd8:	100b883a 	mov	r5,r2
   41bdc:	8009883a 	mov	r4,r16
   41be0:	00432e00 	call	432e0 <__addsf3>
   41be4:	1007883a 	mov	r3,r2
   41be8:	e0fffa15 	stw	r3,-24(fp)
    y_prev = y;
   41bec:	e0bffa17 	ldw	r2,-24(fp)
   41bf0:	d0a71315 	stw	r2,-25524(gp)
    return y;
   41bf4:	e0bffa17 	ldw	r2,-24(fp)
   41bf8:	1007883a 	mov	r3,r2
}
   41bfc:	1805883a 	mov	r2,r3
   41c00:	e6fffc04 	addi	sp,fp,-16
   41c04:	dfc00517 	ldw	ra,20(sp)
   41c08:	df000417 	ldw	fp,16(sp)
   41c0c:	dcc00317 	ldw	r19,12(sp)
   41c10:	dc800217 	ldw	r18,8(sp)
   41c14:	dc400117 	ldw	r17,4(sp)
   41c18:	dc000017 	ldw	r16,0(sp)
   41c1c:	dec00604 	addi	sp,sp,24
   41c20:	f800283a 	ret

00041c24 <top>:
float a=0.1;

int top(int adc_value,UnlimitedSamplerReconstructor *recon, MovingAverage *ma1,MovingAverage *ma2,MovingAverage *ma3  ){
   41c24:	defff504 	addi	sp,sp,-44
   41c28:	dfc00a15 	stw	ra,40(sp)
   41c2c:	df000915 	stw	fp,36(sp)
   41c30:	df000904 	addi	fp,sp,36
   41c34:	e13ffc15 	stw	r4,-16(fp)
   41c38:	e17ffd15 	stw	r5,-12(fp)
   41c3c:	e1bffe15 	stw	r6,-8(fp)
   41c40:	e1ffff15 	stw	r7,-4(fp)

	float signal_in=convert_adc_to_signal(adc_value,4095,4.096,0);
   41c44:	000f883a 	mov	r7,zero
   41c48:	019020f4 	movhi	r6,16515
   41c4c:	31849bc4 	addi	r6,r6,4719
   41c50:	0143ffc4 	movi	r5,4095
   41c54:	e13ffc17 	ldw	r4,-16(fp)
   41c58:	00418a40 	call	418a4 <convert_adc_to_signal>
   41c5c:	e0bff815 	stw	r2,-32(fp)
	float reconstructed_val=update(recon, signal_in,ma1,ma2,ma3)*a;
   41c60:	e0800217 	ldw	r2,8(fp)
   41c64:	d8800015 	stw	r2,0(sp)
   41c68:	e1ffff17 	ldw	r7,-4(fp)
   41c6c:	e1bffe17 	ldw	r6,-8(fp)
   41c70:	e17ff817 	ldw	r5,-32(fp)
   41c74:	e13ffd17 	ldw	r4,-12(fp)
   41c78:	00416f40 	call	416f4 <update>
   41c7c:	1007883a 	mov	r3,r2
   41c80:	d0a00217 	ldw	r2,-32760(gp)
   41c84:	100b883a 	mov	r5,r2
   41c88:	1809883a 	mov	r4,r3
   41c8c:	0043d6c0 	call	43d6c <__mulsf3>
   41c90:	1007883a 	mov	r3,r2
   41c94:	e0fff915 	stw	r3,-28(fp)

//	printf("reconstructed val = %f \n", reconstructed_val);
	float avg = updateMovingAverage(ma1, reconstructed_val);
   41c98:	e17ff917 	ldw	r5,-28(fp)
   41c9c:	e13ffe17 	ldw	r4,-8(fp)
   41ca0:	00403040 	call	40304 <updateMovingAverage>
   41ca4:	e0bffa15 	stw	r2,-24(fp)
	reconstructed_val=reconstructed_val-avg;
   41ca8:	e17ffa17 	ldw	r5,-24(fp)
   41cac:	e13ff917 	ldw	r4,-28(fp)
   41cb0:	00441680 	call	44168 <__subsf3>
   41cb4:	1007883a 	mov	r3,r2
   41cb8:	e0fff915 	stw	r3,-28(fp)
//	reconstructed_val=process_lowpass(reconstructed_val);
//	avg = updateMovingAverage(ma2, reconstructed_val);
//	int dac_out=float_to_dac(reconstructed_val-avg,255,5,1.5);
//	float hpf_filtered = hpf_update(hpf, subtracted_avg);
//	float hpf2_filtered = second_order_hpf_update(hpf2, subtracted_avg);
	int dac_out=float_to_dac(reconstructed_val,255,5,1.5);
   41cbc:	01cff034 	movhi	r7,16320
   41cc0:	01902834 	movhi	r6,16544
   41cc4:	01403fc4 	movi	r5,255
   41cc8:	e13ff917 	ldw	r4,-28(fp)
   41ccc:	00419400 	call	41940 <float_to_dac>
   41cd0:	10803fcc 	andi	r2,r2,255
   41cd4:	e0bffb15 	stw	r2,-20(fp)

	//int dac_out=float_to_dac(signal_in,255,5,1.5);

	return dac_out;
   41cd8:	e0bffb17 	ldw	r2,-20(fp)
}
   41cdc:	e037883a 	mov	sp,fp
   41ce0:	dfc00117 	ldw	ra,4(sp)
   41ce4:	df000017 	ldw	fp,0(sp)
   41ce8:	dec00204 	addi	sp,sp,8
   41cec:	f800283a 	ret

00041cf0 <stream_adc_out>:
int stream_adc_out(int adc_value ){
   41cf0:	defffb04 	addi	sp,sp,-20
   41cf4:	dfc00415 	stw	ra,16(sp)
   41cf8:	df000315 	stw	fp,12(sp)
   41cfc:	df000304 	addi	fp,sp,12
   41d00:	e13fff15 	stw	r4,-4(fp)

	float signal_in=convert_adc_to_signal(adc_value,4095,4.096,0);
   41d04:	000f883a 	mov	r7,zero
   41d08:	019020f4 	movhi	r6,16515
   41d0c:	31849bc4 	addi	r6,r6,4719
   41d10:	0143ffc4 	movi	r5,4095
   41d14:	e13fff17 	ldw	r4,-4(fp)
   41d18:	00418a40 	call	418a4 <convert_adc_to_signal>
   41d1c:	e0bffd15 	stw	r2,-12(fp)


	int dac_out=float_to_dac(signal_in,255,5,0);
   41d20:	000f883a 	mov	r7,zero
   41d24:	01902834 	movhi	r6,16544
   41d28:	01403fc4 	movi	r5,255
   41d2c:	e13ffd17 	ldw	r4,-12(fp)
   41d30:	00419400 	call	41940 <float_to_dac>
   41d34:	10803fcc 	andi	r2,r2,255
   41d38:	e0bffe15 	stw	r2,-8(fp)

	return dac_out;
   41d3c:	e0bffe17 	ldw	r2,-8(fp)
}
   41d40:	e037883a 	mov	sp,fp
   41d44:	dfc00117 	ldw	ra,4(sp)
   41d48:	df000017 	ldw	fp,0(sp)
   41d4c:	dec00204 	addi	sp,sp,8
   41d50:	f800283a 	ret

00041d54 <main>:



void main(void){
   41d54:	def6da04 	addi	sp,sp,-9368
   41d58:	dfc92515 	stw	ra,9364(sp)
   41d5c:	df092415 	stw	fp,9360(sp)
   41d60:	df092404 	addi	fp,sp,9360
//	printf("running \n");
	int sample_max=10000;
   41d64:	0089c404 	movi	r2,10000
   41d68:	e0b6df15 	stw	r2,-9348(fp)
	int sample_written=0;
   41d6c:	e036dc15 	stw	zero,-9360(fp)
    FILE *fp = fopen("/mnt/host/adc_readings.txt", "w");
   41d70:	01400174 	movhi	r5,5
   41d74:	2959e504 	addi	r5,r5,26516
   41d78:	01000174 	movhi	r4,5
   41d7c:	2119e604 	addi	r4,r4,26520
   41d80:	00470680 	call	47068 <fopen>
   41d84:	e0b6e015 	stw	r2,-9344(fp)
//    printf("opened file \n");
    if (!fp) {
   41d88:	e0b6e017 	ldw	r2,-9344(fp)
   41d8c:	1000031e 	bne	r2,zero,41d9c <main+0x48>
        printf("Failed to open file on host\n");
   41d90:	01000174 	movhi	r4,5
   41d94:	2119ed04 	addi	r4,r4,26548
   41d98:	00482240 	call	48224 <puts>
//
//    fclose(fp);



	int ch = 0;
   41d9c:	e036e115 	stw	zero,-9340(fp)
	const int nReadNum = 1; // max 1024
   41da0:	00800044 	movi	r2,1
   41da4:	e0b6e215 	stw	r2,-9336(fp)
	int i, ADC_value, nIndex=0;
   41da8:	e036e315 	stw	zero,-9332(fp)
	uint16_t DAC_val=0;
   41dac:	e036e40d 	sth	zero,-9328(fp)
	float signal_val, reconstructed_val=0;
   41db0:	e036e515 	stw	zero,-9324(fp)
//	printf("ADC Demo\r\n");
    ALT_AVALON_I2C_DEV_t *i2c_dev;  // Pointer to I2C instance structure
   // int adc_value = 0;             // Example ADC value to send
    int result;
    float lam = 1;
   41db4:	008fe034 	movhi	r2,16256
   41db8:	e0b6e615 	stw	r2,-9320(fp)
	int downsample_ratio=1;
   41dbc:	00800044 	movi	r2,1
   41dc0:	e0b6e715 	stw	r2,-9316(fp)
	int count=1;
   41dc4:	00800044 	movi	r2,1
   41dc8:	e0b6de15 	stw	r2,-9352(fp)
    UnlimitedSamplerReconstructor recon;
    initReconstructor(&recon, lam);
   41dcc:	e0b6eb04 	addi	r2,fp,-9300
   41dd0:	e176e617 	ldw	r5,-9320(fp)
   41dd4:	1009883a 	mov	r4,r2
   41dd8:	00404340 	call	40434 <initReconstructor>

    MovingAverage ma;
    initMovingAverage(&ma);
   41ddc:	e0bec704 	addi	r2,fp,-1252
   41de0:	1009883a 	mov	r4,r2
   41de4:	00402900 	call	40290 <initMovingAverage>
    MovingAverage ma2;
    initMovingAverage(&ma2);
   41de8:	e0bf2e04 	addi	r2,fp,-840
   41dec:	1009883a 	mov	r4,r2
   41df0:	00402900 	call	40290 <initMovingAverage>
    MovingAverage ma3;
    initMovingAverage(&ma3);
   41df4:	e0bf9504 	addi	r2,fp,-428
   41df8:	1009883a 	mov	r4,r2
   41dfc:	00402900 	call	40290 <initMovingAverage>
//    second_order_hpf_init(&hpf2);
//    MovingAverage_inner ma_residual;
//    initMovingAverage_in(&ma_residual);

    // Open the I2C device instance
    i2c_dev = alt_avalon_i2c_open("/dev/i2c_dac");
   41e00:	01000174 	movhi	r4,5
   41e04:	2119f404 	addi	r4,r4,26576
   41e08:	0052a180 	call	52a18 <alt_avalon_i2c_open>
   41e0c:	e0b6e815 	stw	r2,-9312(fp)
    if (NULL == i2c_dev) {
   41e10:	e0b6e817 	ldw	r2,-9312(fp)
   41e14:	1000041e 	bne	r2,zero,41e28 <main+0xd4>
        printf("Error: Cannot find /dev/i2c_dac\n");
   41e18:	01000174 	movhi	r4,5
   41e1c:	2119f804 	addi	r4,r4,26592
   41e20:	00482240 	call	48224 <puts>
        return ;
   41e24:	00005506 	br	41f7c <main+0x228>
    }
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;


    // Set the target device address (PCF8591T address is typically 0x48)
    alt_avalon_i2c_master_target_set(i2c_dev, 0x48);
   41e28:	01401204 	movi	r5,72
   41e2c:	e136e817 	ldw	r4,-9312(fp)
   41e30:	00531e80 	call	531e8 <alt_avalon_i2c_master_target_set>
//    alt_avalon_i2c_master_config_set(i2c_dev, &cfg);
//     alt_avalon_i2c_master_target_set(i2c_dev, 0x72);
     if (i2c_dev) {
   41e34:	e0b6e817 	ldw	r2,-9312(fp)
   41e38:	10000d26 	beq	r2,zero,41e70 <main+0x11c>
    	 printf("DAC CONNECTED\n");
   41e3c:	01000174 	movhi	r4,5
   41e40:	211a0004 	addi	r4,r4,26624
   41e44:	00482240 	call	48224 <puts>
         alt_avalon_i2c_master_config_speed_set(i2c_dev,&cfg, 400000); // Set 400 kHz
   41e48:	e0bffc04 	addi	r2,fp,-16
   41e4c:	018001b4 	movhi	r6,6
   41e50:	3186a004 	addi	r6,r6,6784
   41e54:	100b883a 	mov	r5,r2
   41e58:	e136e817 	ldw	r4,-9312(fp)
   41e5c:	0052d4c0 	call	52d4c <alt_avalon_i2c_master_config_speed_set>
         alt_avalon_i2c_master_config_set(i2c_dev, &cfg);
   41e60:	e0bffc04 	addi	r2,fp,-16
   41e64:	100b883a 	mov	r5,r2
   41e68:	e136e817 	ldw	r4,-9312(fp)
   41e6c:	0052bec0 	call	52bec <alt_avalon_i2c_master_config_set>
     }



    IOWR(ADC_LTC2308_BASE, 0x01, nReadNum);
   41e70:	00800234 	movhi	r2,8
   41e74:	10841d04 	addi	r2,r2,4212
   41e78:	e0f6e217 	ldw	r3,-9336(fp)
   41e7c:	10c00035 	stwio	r3,0(r2)

	while(1){

		// start measure
		IOWR(ADC_LTC2308_BASE, 0x00, (ch << 1) | 0x00);
   41e80:	e0b6e117 	ldw	r2,-9340(fp)
   41e84:	1085883a 	add	r2,r2,r2
   41e88:	1007883a 	mov	r3,r2
   41e8c:	00800234 	movhi	r2,8
   41e90:	10841c04 	addi	r2,r2,4208
   41e94:	10c00035 	stwio	r3,0(r2)
		IOWR(ADC_LTC2308_BASE, 0x00, (ch << 1) | 0x01);
   41e98:	e0b6e117 	ldw	r2,-9340(fp)
   41e9c:	1085883a 	add	r2,r2,r2
   41ea0:	10c00054 	ori	r3,r2,1
   41ea4:	00800234 	movhi	r2,8
   41ea8:	10841c04 	addi	r2,r2,4208
   41eac:	10c00035 	stwio	r3,0(r2)
		// wait measure done
//		while ((IORD(ADC_LTC2308_BASE,0x00) & 0x01) == 0x00);

		// read adc value

		for(i=0;i<nReadNum;i+=1){
   41eb0:	e036dd15 	stw	zero,-9356(fp)
   41eb4:	00002d06 	br	41f6c <main+0x218>
			if (count<downsample_ratio){
   41eb8:	e0f6de17 	ldw	r3,-9352(fp)
   41ebc:	e0b6e717 	ldw	r2,-9316(fp)
   41ec0:	1880070e 	bge	r3,r2,41ee0 <main+0x18c>
				count+=1;
   41ec4:	e0b6de17 	ldw	r2,-9352(fp)
   41ec8:	10800044 	addi	r2,r2,1
   41ecc:	e0b6de15 	stw	r2,-9352(fp)
				IORD(ADC_LTC2308_BASE, 0x01);
   41ed0:	00800234 	movhi	r2,8
   41ed4:	10841d04 	addi	r2,r2,4212
   41ed8:	10800037 	ldwio	r2,0(r2)
   41edc:	00002006 	br	41f60 <main+0x20c>

			}
			else{
				count=1;
   41ee0:	00800044 	movi	r2,1
   41ee4:	e0b6de15 	stw	r2,-9352(fp)
				ADC_value = IORD(ADC_LTC2308_BASE, 0x01);
   41ee8:	00800234 	movhi	r2,8
   41eec:	10841d04 	addi	r2,r2,4212
   41ef0:	10800037 	ldwio	r2,0(r2)
   41ef4:	e0b6e915 	stw	r2,-9308(fp)
				if(sample_written<sample_max){
   41ef8:	e0f6dc17 	ldw	r3,-9360(fp)
   41efc:	e0b6df17 	ldw	r2,-9348(fp)
   41f00:	1880080e 	bge	r3,r2,41f24 <main+0x1d0>
					sample_written+=1;
   41f04:	e0b6dc17 	ldw	r2,-9360(fp)
   41f08:	10800044 	addi	r2,r2,1
   41f0c:	e0b6dc15 	stw	r2,-9360(fp)
					        fprintf(fp, "%d\n", ADC_value);
   41f10:	e1b6e917 	ldw	r6,-9308(fp)
   41f14:	01400174 	movhi	r5,5
   41f18:	295a0404 	addi	r5,r5,26640
   41f1c:	e136e017 	ldw	r4,-9344(fp)
   41f20:	00470a80 	call	470a8 <fprintf>

//			    printf("calculated adc_VAL %d.\n", ADC_value);

//				DAC_val=ALT_CI_RECON_TOP_PIPELINE_0(ADC_value);
//				DAC_val=top(ADC_value,&recon,&ma, &ma2, &ma3);
				DAC_val=stream_adc_out(ADC_value);
   41f24:	e136e917 	ldw	r4,-9308(fp)
   41f28:	0041cf00 	call	41cf0 <stream_adc_out>
   41f2c:	e0b6e40d 	sth	r2,-9328(fp)
//				DAC_val=ALT_CI_RECON_PIPE_N_0(ADC_value,2);
//				DAC_val=ADC_value;
//				printf("calculated dac_VAL %d.\n", DAC_val);


				result = send_to_PCF(i2c_dev, DAC_val);
   41f30:	e0b6e40b 	ldhu	r2,-9328(fp)
   41f34:	10803fcc 	andi	r2,r2,255
   41f38:	100b883a 	mov	r5,r2
   41f3c:	e136e817 	ldw	r4,-9312(fp)
   41f40:	0041a040 	call	41a04 <send_to_PCF>
   41f44:	e0b6ea15 	stw	r2,-9304(fp)
				//	        result = send_to_PCF(i2c_dev, (8)Value);
				////			result = send_to_LTC2607(i2c_dev,0, (alt_u16)Value);
				if (result != 0) {
   41f48:	e0b6ea17 	ldw	r2,-9304(fp)
   41f4c:	10000426 	beq	r2,zero,41f60 <main+0x20c>
					printf("Failed to send data to DAC.\n");
   41f50:	01000174 	movhi	r4,5
   41f54:	211a0504 	addi	r4,r4,26644
   41f58:	00482240 	call	48224 <puts>
					break;
   41f5c:	00000606 	br	41f78 <main+0x224>
		// wait measure done
//		while ((IORD(ADC_LTC2308_BASE,0x00) & 0x01) == 0x00);

		// read adc value

		for(i=0;i<nReadNum;i+=1){
   41f60:	e0b6dd17 	ldw	r2,-9356(fp)
   41f64:	10800044 	addi	r2,r2,1
   41f68:	e0b6dd15 	stw	r2,-9356(fp)
   41f6c:	e0f6dd17 	ldw	r3,-9356(fp)
   41f70:	e0b6e217 	ldw	r2,-9336(fp)
   41f74:	18bfd016 	blt	r3,r2,41eb8 <__alt_data_end+0xfffdadb8>
//	        }

		}

//		usleep(200);
	}
   41f78:	003fc106 	br	41e80 <__alt_data_end+0xfffdad80>
}
   41f7c:	e037883a 	mov	sp,fp
   41f80:	dfc00117 	ldw	ra,4(sp)
   41f84:	df000017 	ldw	fp,0(sp)
   41f88:	dec00204 	addi	sp,sp,8
   41f8c:	f800283a 	ret

00041f90 <ceil>:
   41f90:	2811d53a 	srai	r8,r5,20
   41f94:	defffa04 	addi	sp,sp,-24
   41f98:	dcc00315 	stw	r19,12(sp)
   41f9c:	4201ffcc 	andi	r8,r8,2047
   41fa0:	dc800215 	stw	r18,8(sp)
   41fa4:	dc400115 	stw	r17,4(sp)
   41fa8:	dc000015 	stw	r16,0(sp)
   41fac:	dfc00515 	stw	ra,20(sp)
   41fb0:	dd000415 	stw	r20,16(sp)
   41fb4:	44bf0044 	addi	r18,r8,-1023
   41fb8:	018004c4 	movi	r6,19
   41fbc:	2821883a 	mov	r16,r5
   41fc0:	2005883a 	mov	r2,r4
   41fc4:	280f883a 	mov	r7,r5
   41fc8:	2827883a 	mov	r19,r5
   41fcc:	2023883a 	mov	r17,r4
   41fd0:	34801c16 	blt	r6,r18,42044 <ceil+0xb4>
   41fd4:	90004916 	blt	r18,zero,420fc <ceil+0x16c>
   41fd8:	05000434 	movhi	r20,16
   41fdc:	a53fffc4 	addi	r20,r20,-1
   41fe0:	a4a9d83a 	sra	r20,r20,r18
   41fe4:	2d0c703a 	and	r6,r5,r20
   41fe8:	310cb03a 	or	r6,r6,r4
   41fec:	30001926 	beq	r6,zero,42054 <ceil+0xc4>
   41ff0:	01a20034 	movhi	r6,34816
   41ff4:	01df8e34 	movhi	r7,32312
   41ff8:	319d6704 	addi	r6,r6,30108
   41ffc:	39f90f04 	addi	r7,r7,-7108
   42000:	00447e00 	call	447e0 <__adddf3>
   42004:	000d883a 	mov	r6,zero
   42008:	000f883a 	mov	r7,zero
   4200c:	1009883a 	mov	r4,r2
   42010:	180b883a 	mov	r5,r3
   42014:	00459fc0 	call	459fc <__gedf2>
   42018:	0080070e 	bge	zero,r2,42038 <ceil+0xa8>
   4201c:	0400030e 	bge	zero,r16,4202c <ceil+0x9c>
   42020:	00800434 	movhi	r2,16
   42024:	14a5d83a 	sra	r18,r2,r18
   42028:	84a7883a 	add	r19,r16,r18
   4202c:	0520303a 	nor	r16,zero,r20
   42030:	84e0703a 	and	r16,r16,r19
   42034:	0023883a 	mov	r17,zero
   42038:	8805883a 	mov	r2,r17
   4203c:	8007883a 	mov	r3,r16
   42040:	00000506 	br	42058 <ceil+0xc8>
   42044:	01800cc4 	movi	r6,51
   42048:	34800b0e 	bge	r6,r18,42078 <ceil+0xe8>
   4204c:	01810004 	movi	r6,1024
   42050:	91803b26 	beq	r18,r6,42140 <ceil+0x1b0>
   42054:	3807883a 	mov	r3,r7
   42058:	dfc00517 	ldw	ra,20(sp)
   4205c:	dd000417 	ldw	r20,16(sp)
   42060:	dcc00317 	ldw	r19,12(sp)
   42064:	dc800217 	ldw	r18,8(sp)
   42068:	dc400117 	ldw	r17,4(sp)
   4206c:	dc000017 	ldw	r16,0(sp)
   42070:	dec00604 	addi	sp,sp,24
   42074:	f800283a 	ret
   42078:	423efb44 	addi	r8,r8,-1043
   4207c:	053fffc4 	movi	r20,-1
   42080:	a228d83a 	srl	r20,r20,r8
   42084:	250c703a 	and	r6,r4,r20
   42088:	303ff226 	beq	r6,zero,42054 <__alt_data_end+0xfffdaf54>
   4208c:	01a20034 	movhi	r6,34816
   42090:	01df8e34 	movhi	r7,32312
   42094:	319d6704 	addi	r6,r6,30108
   42098:	39f90f04 	addi	r7,r7,-7108
   4209c:	00447e00 	call	447e0 <__adddf3>
   420a0:	000d883a 	mov	r6,zero
   420a4:	000f883a 	mov	r7,zero
   420a8:	1009883a 	mov	r4,r2
   420ac:	180b883a 	mov	r5,r3
   420b0:	00459fc0 	call	459fc <__gedf2>
   420b4:	00bfe00e 	bge	zero,r2,42038 <__alt_data_end+0xfffdaf38>
   420b8:	04000a0e 	bge	zero,r16,420e4 <ceil+0x154>
   420bc:	00800504 	movi	r2,20
   420c0:	90802926 	beq	r18,r2,42168 <ceil+0x1d8>
   420c4:	00800d04 	movi	r2,52
   420c8:	14a5c83a 	sub	r18,r2,r18
   420cc:	00800044 	movi	r2,1
   420d0:	1484983a 	sll	r2,r2,r18
   420d4:	1445883a 	add	r2,r2,r17
   420d8:	14401e2e 	bgeu	r2,r17,42154 <ceil+0x1c4>
   420dc:	84c00044 	addi	r19,r16,1
   420e0:	1023883a 	mov	r17,r2
   420e4:	0510303a 	nor	r8,zero,r20
   420e8:	9821883a 	mov	r16,r19
   420ec:	8a22703a 	and	r17,r17,r8
   420f0:	8805883a 	mov	r2,r17
   420f4:	8007883a 	mov	r3,r16
   420f8:	003fd706 	br	42058 <__alt_data_end+0xfffdaf58>
   420fc:	01a20034 	movhi	r6,34816
   42100:	01df8e34 	movhi	r7,32312
   42104:	319d6704 	addi	r6,r6,30108
   42108:	39f90f04 	addi	r7,r7,-7108
   4210c:	00447e00 	call	447e0 <__adddf3>
   42110:	000d883a 	mov	r6,zero
   42114:	000f883a 	mov	r7,zero
   42118:	1009883a 	mov	r4,r2
   4211c:	180b883a 	mov	r5,r3
   42120:	00459fc0 	call	459fc <__gedf2>
   42124:	00bfc40e 	bge	zero,r2,42038 <__alt_data_end+0xfffdaf38>
   42128:	80000c16 	blt	r16,zero,4215c <ceil+0x1cc>
   4212c:	8460b03a 	or	r16,r16,r17
   42130:	0023883a 	mov	r17,zero
   42134:	80000526 	beq	r16,zero,4214c <ceil+0x1bc>
   42138:	040ffc34 	movhi	r16,16368
   4213c:	003fbe06 	br	42038 <__alt_data_end+0xfffdaf38>
   42140:	200d883a 	mov	r6,r4
   42144:	00447e00 	call	447e0 <__adddf3>
   42148:	003fc306 	br	42058 <__alt_data_end+0xfffdaf58>
   4214c:	0021883a 	mov	r16,zero
   42150:	003fb906 	br	42038 <__alt_data_end+0xfffdaf38>
   42154:	1023883a 	mov	r17,r2
   42158:	003fe206 	br	420e4 <__alt_data_end+0xfffdafe4>
   4215c:	0023883a 	mov	r17,zero
   42160:	04200034 	movhi	r16,32768
   42164:	003fb406 	br	42038 <__alt_data_end+0xfffdaf38>
   42168:	84c00044 	addi	r19,r16,1
   4216c:	003fdd06 	br	420e4 <__alt_data_end+0xfffdafe4>

00042170 <round>:
   42170:	289ffc2c 	andhi	r2,r5,32752
   42174:	1005d53a 	srai	r2,r2,20
   42178:	024004c4 	movi	r9,19
   4217c:	2807883a 	mov	r3,r5
   42180:	123f0044 	addi	r8,r2,-1023
   42184:	200d883a 	mov	r6,r4
   42188:	280f883a 	mov	r7,r5
   4218c:	4a000916 	blt	r9,r8,421b4 <round+0x44>
   42190:	40002516 	blt	r8,zero,42228 <round+0xb8>
   42194:	00800434 	movhi	r2,16
   42198:	10bfffc4 	addi	r2,r2,-1
   4219c:	1205d83a 	sra	r2,r2,r8
   421a0:	2888703a 	and	r4,r5,r2
   421a4:	2000181e 	bne	r4,zero,42208 <round+0x98>
   421a8:	3000171e 	bne	r6,zero,42208 <round+0x98>
   421ac:	0005883a 	mov	r2,zero
   421b0:	f800283a 	ret
   421b4:	02400cc4 	movi	r9,51
   421b8:	4a00040e 	bge	r9,r8,421cc <round+0x5c>
   421bc:	00810004 	movi	r2,1024
   421c0:	40802126 	beq	r8,r2,42248 <round+0xd8>
   421c4:	3005883a 	mov	r2,r6
   421c8:	f800283a 	ret
   421cc:	013fffc4 	movi	r4,-1
   421d0:	10befb44 	addi	r2,r2,-1043
   421d4:	2084d83a 	srl	r2,r4,r2
   421d8:	3088703a 	and	r4,r6,r2
   421dc:	20001726 	beq	r4,zero,4223c <round+0xcc>
   421e0:	4a11c83a 	sub	r8,r9,r8
   421e4:	02400044 	movi	r9,1
   421e8:	4a10983a 	sll	r8,r9,r8
   421ec:	4191883a 	add	r8,r8,r6
   421f0:	4180012e 	bgeu	r8,r6,421f8 <round+0x88>
   421f4:	2a47883a 	add	r3,r5,r9
   421f8:	0084303a 	nor	r2,zero,r2
   421fc:	120c703a 	and	r6,r2,r8
   42200:	3005883a 	mov	r2,r6
   42204:	f800283a 	ret
   42208:	00c00234 	movhi	r3,8
   4220c:	1a07d83a 	sra	r3,r3,r8
   42210:	0084303a 	nor	r2,zero,r2
   42214:	000d883a 	mov	r6,zero
   42218:	19c7883a 	add	r3,r3,r7
   4221c:	1886703a 	and	r3,r3,r2
   42220:	3005883a 	mov	r2,r6
   42224:	f800283a 	ret
   42228:	00bfffc4 	movi	r2,-1
   4222c:	28e0002c 	andhi	r3,r5,32768
   42230:	40800c26 	beq	r8,r2,42264 <round+0xf4>
   42234:	000d883a 	mov	r6,zero
   42238:	003fe206 	br	421c4 <__alt_data_end+0xfffdb0c4>
   4223c:	3005883a 	mov	r2,r6
   42240:	2807883a 	mov	r3,r5
   42244:	f800283a 	ret
   42248:	deffff04 	addi	sp,sp,-4
   4224c:	280f883a 	mov	r7,r5
   42250:	dfc00015 	stw	ra,0(sp)
   42254:	00447e00 	call	447e0 <__adddf3>
   42258:	dfc00017 	ldw	ra,0(sp)
   4225c:	dec00104 	addi	sp,sp,4
   42260:	f800283a 	ret
   42264:	18cffc34 	orhi	r3,r3,16368
   42268:	000d883a 	mov	r6,zero
   4226c:	003fd506 	br	421c4 <__alt_data_end+0xfffdb0c4>

00042270 <roundf>:
   42270:	20dfe02c 	andhi	r3,r4,32640
   42274:	1806d5fa 	srli	r3,r3,23
   42278:	01400584 	movi	r5,22
   4227c:	2005883a 	mov	r2,r4
   42280:	18ffe044 	addi	r3,r3,-127
   42284:	28c00c16 	blt	r5,r3,422b8 <roundf+0x48>
   42288:	18001516 	blt	r3,zero,422e0 <roundf+0x70>
   4228c:	01002034 	movhi	r4,128
   42290:	213fffc4 	addi	r4,r4,-1
   42294:	20c9d83a 	sra	r4,r4,r3
   42298:	208a703a 	and	r5,r4,r2
   4229c:	28000826 	beq	r5,zero,422c0 <roundf+0x50>
   422a0:	01401034 	movhi	r5,64
   422a4:	28c7d83a 	sra	r3,r5,r3
   422a8:	0108303a 	nor	r4,zero,r4
   422ac:	1885883a 	add	r2,r3,r2
   422b0:	2084703a 	and	r2,r4,r2
   422b4:	f800283a 	ret
   422b8:	01402004 	movi	r5,128
   422bc:	19400126 	beq	r3,r5,422c4 <roundf+0x54>
   422c0:	f800283a 	ret
   422c4:	deffff04 	addi	sp,sp,-4
   422c8:	200b883a 	mov	r5,r4
   422cc:	dfc00015 	stw	ra,0(sp)
   422d0:	00432e00 	call	432e0 <__addsf3>
   422d4:	dfc00017 	ldw	ra,0(sp)
   422d8:	dec00104 	addi	sp,sp,4
   422dc:	f800283a 	ret
   422e0:	20a0002c 	andhi	r2,r4,32768
   422e4:	013fffc4 	movi	r4,-1
   422e8:	193ff51e 	bne	r3,r4,422c0 <__alt_data_end+0xfffdb1c0>
   422ec:	108fe034 	orhi	r2,r2,16256
   422f0:	f800283a 	ret

000422f4 <fmod>:
   422f4:	deffef04 	addi	sp,sp,-68
   422f8:	dc400a15 	stw	r17,40(sp)
   422fc:	044001b4 	movhi	r17,6
   42300:	dd800f15 	stw	r22,60(sp)
   42304:	dd400e15 	stw	r21,56(sp)
   42308:	dd000d15 	stw	r20,52(sp)
   4230c:	dcc00c15 	stw	r19,48(sp)
   42310:	dc800b15 	stw	r18,44(sp)
   42314:	dc000915 	stw	r16,36(sp)
   42318:	202b883a 	mov	r21,r4
   4231c:	dfc01015 	stw	ra,64(sp)
   42320:	8c61a604 	addi	r17,r17,-31080
   42324:	2829883a 	mov	r20,r5
   42328:	3027883a 	mov	r19,r6
   4232c:	3825883a 	mov	r18,r7
   42330:	00425e80 	call	425e8 <__ieee754_fmod>
   42334:	89000017 	ldw	r4,0(r17)
   42338:	1021883a 	mov	r16,r2
   4233c:	00bfffc4 	movi	r2,-1
   42340:	182d883a 	mov	r22,r3
   42344:	20800426 	beq	r4,r2,42358 <fmod+0x64>
   42348:	9809883a 	mov	r4,r19
   4234c:	900b883a 	mov	r5,r18
   42350:	00430440 	call	43044 <__fpclassifyd>
   42354:	10000c1e 	bne	r2,zero,42388 <fmod+0x94>
   42358:	8005883a 	mov	r2,r16
   4235c:	b007883a 	mov	r3,r22
   42360:	dfc01017 	ldw	ra,64(sp)
   42364:	dd800f17 	ldw	r22,60(sp)
   42368:	dd400e17 	ldw	r21,56(sp)
   4236c:	dd000d17 	ldw	r20,52(sp)
   42370:	dcc00c17 	ldw	r19,48(sp)
   42374:	dc800b17 	ldw	r18,44(sp)
   42378:	dc400a17 	ldw	r17,40(sp)
   4237c:	dc000917 	ldw	r16,36(sp)
   42380:	dec01104 	addi	sp,sp,68
   42384:	f800283a 	ret
   42388:	a809883a 	mov	r4,r21
   4238c:	a00b883a 	mov	r5,r20
   42390:	00430440 	call	43044 <__fpclassifyd>
   42394:	103ff026 	beq	r2,zero,42358 <__alt_data_end+0xfffdb258>
   42398:	000d883a 	mov	r6,zero
   4239c:	000f883a 	mov	r7,zero
   423a0:	9809883a 	mov	r4,r19
   423a4:	900b883a 	mov	r5,r18
   423a8:	00459740 	call	45974 <__eqdf2>
   423ac:	103fea1e 	bne	r2,zero,42358 <__alt_data_end+0xfffdb258>
   423b0:	00800044 	movi	r2,1
   423b4:	d8800015 	stw	r2,0(sp)
   423b8:	8c000017 	ldw	r16,0(r17)
   423bc:	00800174 	movhi	r2,5
   423c0:	109a0c04 	addi	r2,r2,26672
   423c4:	d8800115 	stw	r2,4(sp)
   423c8:	dd400215 	stw	r21,8(sp)
   423cc:	dd000315 	stw	r20,12(sp)
   423d0:	dcc00415 	stw	r19,16(sp)
   423d4:	dc800515 	stw	r18,20(sp)
   423d8:	d8000815 	stw	zero,32(sp)
   423dc:	80001126 	beq	r16,zero,42424 <fmod+0x130>
   423e0:	000d883a 	mov	r6,zero
   423e4:	000f883a 	mov	r7,zero
   423e8:	0009883a 	mov	r4,zero
   423ec:	000b883a 	mov	r5,zero
   423f0:	004508c0 	call	4508c <__divdf3>
   423f4:	d8800615 	stw	r2,24(sp)
   423f8:	d8c00715 	stw	r3,28(sp)
   423fc:	00800084 	movi	r2,2
   42400:	80800a1e 	bne	r16,r2,4242c <fmod+0x138>
   42404:	0046f640 	call	46f64 <__errno>
   42408:	00c00844 	movi	r3,33
   4240c:	10c00015 	stw	r3,0(r2)
   42410:	d8800817 	ldw	r2,32(sp)
   42414:	1000091e 	bne	r2,zero,4243c <fmod+0x148>
   42418:	d8800617 	ldw	r2,24(sp)
   4241c:	d8c00717 	ldw	r3,28(sp)
   42420:	003fcf06 	br	42360 <__alt_data_end+0xfffdb260>
   42424:	dd400615 	stw	r21,24(sp)
   42428:	dd000715 	stw	r20,28(sp)
   4242c:	d809883a 	mov	r4,sp
   42430:	00430b80 	call	430b8 <matherr>
   42434:	103ff61e 	bne	r2,zero,42410 <__alt_data_end+0xfffdb310>
   42438:	003ff206 	br	42404 <__alt_data_end+0xfffdb304>
   4243c:	0046f640 	call	46f64 <__errno>
   42440:	d8c00817 	ldw	r3,32(sp)
   42444:	10c00015 	stw	r3,0(r2)
   42448:	003ff306 	br	42418 <__alt_data_end+0xfffdb318>

0004244c <log>:
   4244c:	defff104 	addi	sp,sp,-60
   42450:	dd000d15 	stw	r20,52(sp)
   42454:	050001b4 	movhi	r20,6
   42458:	dcc00c15 	stw	r19,48(sp)
   4245c:	dc800b15 	stw	r18,44(sp)
   42460:	dc400a15 	stw	r17,40(sp)
   42464:	dc000915 	stw	r16,36(sp)
   42468:	dfc00e15 	stw	ra,56(sp)
   4246c:	a521a604 	addi	r20,r20,-31080
   42470:	2027883a 	mov	r19,r4
   42474:	2825883a 	mov	r18,r5
   42478:	00429280 	call	42928 <__ieee754_log>
   4247c:	1821883a 	mov	r16,r3
   42480:	a0c00017 	ldw	r3,0(r20)
   42484:	1023883a 	mov	r17,r2
   42488:	00bfffc4 	movi	r2,-1
   4248c:	18800a26 	beq	r3,r2,424b8 <log+0x6c>
   42490:	9809883a 	mov	r4,r19
   42494:	900b883a 	mov	r5,r18
   42498:	00430440 	call	43044 <__fpclassifyd>
   4249c:	10000626 	beq	r2,zero,424b8 <log+0x6c>
   424a0:	000d883a 	mov	r6,zero
   424a4:	000f883a 	mov	r7,zero
   424a8:	9809883a 	mov	r4,r19
   424ac:	900b883a 	mov	r5,r18
   424b0:	00459fc0 	call	459fc <__gedf2>
   424b4:	00800a0e 	bge	zero,r2,424e0 <log+0x94>
   424b8:	8805883a 	mov	r2,r17
   424bc:	8007883a 	mov	r3,r16
   424c0:	dfc00e17 	ldw	ra,56(sp)
   424c4:	dd000d17 	ldw	r20,52(sp)
   424c8:	dcc00c17 	ldw	r19,48(sp)
   424cc:	dc800b17 	ldw	r18,44(sp)
   424d0:	dc400a17 	ldw	r17,40(sp)
   424d4:	dc000917 	ldw	r16,36(sp)
   424d8:	dec00f04 	addi	sp,sp,60
   424dc:	f800283a 	ret
   424e0:	00800174 	movhi	r2,5
   424e4:	a4000017 	ldw	r16,0(r20)
   424e8:	109a0e04 	addi	r2,r2,26680
   424ec:	d8000815 	stw	zero,32(sp)
   424f0:	d8800115 	stw	r2,4(sp)
   424f4:	dcc00215 	stw	r19,8(sp)
   424f8:	dc800315 	stw	r18,12(sp)
   424fc:	dcc00415 	stw	r19,16(sp)
   42500:	dc800515 	stw	r18,20(sp)
   42504:	000d883a 	mov	r6,zero
   42508:	000f883a 	mov	r7,zero
   4250c:	9809883a 	mov	r4,r19
   42510:	900b883a 	mov	r5,r18
   42514:	8000101e 	bne	r16,zero,42558 <log+0x10c>
   42518:	00b80034 	movhi	r2,57344
   4251c:	d8800615 	stw	r2,24(sp)
   42520:	00b1fc34 	movhi	r2,51184
   42524:	10bfffc4 	addi	r2,r2,-1
   42528:	d8800715 	stw	r2,28(sp)
   4252c:	00459740 	call	45974 <__eqdf2>
   42530:	10001f1e 	bne	r2,zero,425b0 <log+0x164>
   42534:	00800084 	movi	r2,2
   42538:	d8800015 	stw	r2,0(sp)
   4253c:	d809883a 	mov	r4,sp
   42540:	00430b80 	call	430b8 <matherr>
   42544:	1000151e 	bne	r2,zero,4259c <log+0x150>
   42548:	0046f640 	call	46f64 <__errno>
   4254c:	00c00884 	movi	r3,34
   42550:	10c00015 	stw	r3,0(r2)
   42554:	00001106 	br	4259c <log+0x150>
   42558:	00bffc34 	movhi	r2,65520
   4255c:	d8000615 	stw	zero,24(sp)
   42560:	d8800715 	stw	r2,28(sp)
   42564:	00459740 	call	45974 <__eqdf2>
   42568:	10001726 	beq	r2,zero,425c8 <log+0x17c>
   4256c:	00800044 	movi	r2,1
   42570:	d8800015 	stw	r2,0(sp)
   42574:	00800084 	movi	r2,2
   42578:	80800f1e 	bne	r16,r2,425b8 <log+0x16c>
   4257c:	0046f640 	call	46f64 <__errno>
   42580:	00c00844 	movi	r3,33
   42584:	10c00015 	stw	r3,0(r2)
   42588:	01000174 	movhi	r4,5
   4258c:	211a5d04 	addi	r4,r4,26996
   42590:	00430c00 	call	430c0 <nan>
   42594:	d8800615 	stw	r2,24(sp)
   42598:	d8c00715 	stw	r3,28(sp)
   4259c:	d8800817 	ldw	r2,32(sp)
   425a0:	10000d1e 	bne	r2,zero,425d8 <log+0x18c>
   425a4:	d8800617 	ldw	r2,24(sp)
   425a8:	d8c00717 	ldw	r3,28(sp)
   425ac:	003fc406 	br	424c0 <__alt_data_end+0xfffdb3c0>
   425b0:	00800044 	movi	r2,1
   425b4:	d8800015 	stw	r2,0(sp)
   425b8:	d809883a 	mov	r4,sp
   425bc:	00430b80 	call	430b8 <matherr>
   425c0:	103ff11e 	bne	r2,zero,42588 <__alt_data_end+0xfffdb488>
   425c4:	003fed06 	br	4257c <__alt_data_end+0xfffdb47c>
   425c8:	00800084 	movi	r2,2
   425cc:	d8800015 	stw	r2,0(sp)
   425d0:	80bfdd26 	beq	r16,r2,42548 <__alt_data_end+0xfffdb448>
   425d4:	003fd906 	br	4253c <__alt_data_end+0xfffdb43c>
   425d8:	0046f640 	call	46f64 <__errno>
   425dc:	d8c00817 	ldw	r3,32(sp)
   425e0:	10c00015 	stw	r3,0(r2)
   425e4:	003fef06 	br	425a4 <__alt_data_end+0xfffdb4a4>

000425e8 <__ieee754_fmod>:
   425e8:	00a00034 	movhi	r2,32768
   425ec:	10bfffc4 	addi	r2,r2,-1
   425f0:	deffff04 	addi	sp,sp,-4
   425f4:	3896703a 	and	r11,r7,r2
   425f8:	dfc00015 	stw	ra,0(sp)
   425fc:	32c4b03a 	or	r2,r6,r11
   42600:	10001926 	beq	r2,zero,42668 <__ieee754_fmod+0x80>
   42604:	28e0002c 	andhi	r3,r5,32768
   42608:	025ffc34 	movhi	r9,32752
   4260c:	28d8f03a 	xor	r12,r5,r3
   42610:	4a7fffc4 	addi	r9,r9,-1
   42614:	4b001416 	blt	r9,r12,42668 <__ieee754_fmod+0x80>
   42618:	0185c83a 	sub	r2,zero,r6
   4261c:	1184b03a 	or	r2,r2,r6
   42620:	1004d7fa 	srli	r2,r2,31
   42624:	025ffc34 	movhi	r9,32752
   42628:	12c4b03a 	or	r2,r2,r11
   4262c:	48800e36 	bltu	r9,r2,42668 <__ieee754_fmod+0x80>
   42630:	2011883a 	mov	r8,r4
   42634:	301d883a 	mov	r14,r6
   42638:	5b001416 	blt	r11,r12,4268c <__ieee754_fmod+0xa4>
   4263c:	62c01e16 	blt	r12,r11,426b8 <__ieee754_fmod+0xd0>
   42640:	21801d36 	bltu	r4,r6,426b8 <__ieee754_fmod+0xd0>
   42644:	2180111e 	bne	r4,r6,4268c <__ieee754_fmod+0xa4>
   42648:	1806d7fa 	srli	r3,r3,31
   4264c:	180490fa 	slli	r2,r3,3
   42650:	00c00174 	movhi	r3,5
   42654:	18da0f04 	addi	r3,r3,26684
   42658:	1887883a 	add	r3,r3,r2
   4265c:	18800017 	ldw	r2,0(r3)
   42660:	18c00117 	ldw	r3,4(r3)
   42664:	00000606 	br	42680 <__ieee754_fmod+0x98>
   42668:	0045ad80 	call	45ad8 <__muldf3>
   4266c:	100d883a 	mov	r6,r2
   42670:	180f883a 	mov	r7,r3
   42674:	1009883a 	mov	r4,r2
   42678:	180b883a 	mov	r5,r3
   4267c:	004508c0 	call	4508c <__divdf3>
   42680:	dfc00017 	ldw	ra,0(sp)
   42684:	dec00104 	addi	sp,sp,4
   42688:	f800283a 	ret
   4268c:	00800434 	movhi	r2,16
   42690:	10bfffc4 	addi	r2,r2,-1
   42694:	13000b16 	blt	r2,r12,426c4 <__ieee754_fmod+0xdc>
   42698:	6000741e 	bne	r12,zero,4286c <__ieee754_fmod+0x284>
   4269c:	2013883a 	mov	r9,r4
   426a0:	02befb44 	movi	r10,-1043
   426a4:	0100090e 	bge	zero,r4,426cc <__ieee754_fmod+0xe4>
   426a8:	4a53883a 	add	r9,r9,r9
   426ac:	52bfffc4 	addi	r10,r10,-1
   426b0:	027ffd16 	blt	zero,r9,426a8 <__alt_data_end+0xfffdb5a8>
   426b4:	00000506 	br	426cc <__ieee754_fmod+0xe4>
   426b8:	2005883a 	mov	r2,r4
   426bc:	2807883a 	mov	r3,r5
   426c0:	003fef06 	br	42680 <__alt_data_end+0xfffdb580>
   426c4:	6015d53a 	srai	r10,r12,20
   426c8:	52bf0044 	addi	r10,r10,-1023
   426cc:	00800434 	movhi	r2,16
   426d0:	10bfffc4 	addi	r2,r2,-1
   426d4:	12c00816 	blt	r2,r11,426f8 <__ieee754_fmod+0x110>
   426d8:	58006b1e 	bne	r11,zero,42888 <__ieee754_fmod+0x2a0>
   426dc:	3013883a 	mov	r9,r6
   426e0:	03fefb44 	movi	r15,-1043
   426e4:	0180060e 	bge	zero,r6,42700 <__ieee754_fmod+0x118>
   426e8:	4a53883a 	add	r9,r9,r9
   426ec:	7bffffc4 	addi	r15,r15,-1
   426f0:	027ffd16 	blt	zero,r9,426e8 <__alt_data_end+0xfffdb5e8>
   426f4:	00000206 	br	42700 <__ieee754_fmod+0x118>
   426f8:	581fd53a 	srai	r15,r11,20
   426fc:	7bff0044 	addi	r15,r15,-1023
   42700:	00bf0084 	movi	r2,-1022
   42704:	50804d16 	blt	r10,r2,4283c <__ieee754_fmod+0x254>
   42708:	00800434 	movhi	r2,16
   4270c:	10bfffc4 	addi	r2,r2,-1
   42710:	6088703a 	and	r4,r12,r2
   42714:	21000434 	orhi	r4,r4,16
   42718:	00bf0084 	movi	r2,-1022
   4271c:	78803d16 	blt	r15,r2,42814 <__ieee754_fmod+0x22c>
   42720:	02400434 	movhi	r9,16
   42724:	4a7fffc4 	addi	r9,r9,-1
   42728:	3a4e703a 	and	r7,r7,r9
   4272c:	39800434 	orhi	r6,r7,16
   42730:	53d5c83a 	sub	r10,r10,r15
   42734:	00000406 	br	42748 <__ieee754_fmod+0x160>
   42738:	60001126 	beq	r12,zero,42780 <__ieee754_fmod+0x198>
   4273c:	4a51883a 	add	r8,r9,r9
   42740:	6ac9883a 	add	r4,r13,r11
   42744:	52bfffc4 	addi	r10,r10,-1
   42748:	4393c83a 	sub	r9,r8,r14
   4274c:	4816d7fa 	srli	r11,r9,31
   42750:	50001326 	beq	r10,zero,427a0 <__ieee754_fmod+0x1b8>
   42754:	218fc83a 	sub	r7,r4,r6
   42758:	4380012e 	bgeu	r8,r14,42760 <__ieee754_fmod+0x178>
   4275c:	39ffffc4 	addi	r7,r7,-1
   42760:	3a58b03a 	or	r12,r7,r9
   42764:	39db883a 	add	r13,r7,r7
   42768:	383ff30e 	bge	r7,zero,42738 <__alt_data_end+0xfffdb638>
   4276c:	4004d7fa 	srli	r2,r8,31
   42770:	2109883a 	add	r4,r4,r4
   42774:	4211883a 	add	r8,r8,r8
   42778:	2089883a 	add	r4,r4,r2
   4277c:	003ff106 	br	42744 <__alt_data_end+0xfffdb644>
   42780:	1806d7fa 	srli	r3,r3,31
   42784:	00800174 	movhi	r2,5
   42788:	109a0f04 	addi	r2,r2,26684
   4278c:	180690fa 	slli	r3,r3,3
   42790:	10c7883a 	add	r3,r2,r3
   42794:	18800017 	ldw	r2,0(r3)
   42798:	18c00117 	ldw	r3,4(r3)
   4279c:	003fb806 	br	42680 <__alt_data_end+0xfffdb580>
   427a0:	218dc83a 	sub	r6,r4,r6
   427a4:	43802f36 	bltu	r8,r14,42864 <__ieee754_fmod+0x27c>
   427a8:	30004f16 	blt	r6,zero,428e8 <__ieee754_fmod+0x300>
   427ac:	4391c83a 	sub	r8,r8,r14
   427b0:	3204b03a 	or	r2,r6,r8
   427b4:	103ff226 	beq	r2,zero,42780 <__alt_data_end+0xfffdb680>
   427b8:	01000434 	movhi	r4,16
   427bc:	213fffc4 	addi	r4,r4,-1
   427c0:	21800616 	blt	r4,r6,427dc <__ieee754_fmod+0x1f4>
   427c4:	4004d7fa 	srli	r2,r8,31
   427c8:	318d883a 	add	r6,r6,r6
   427cc:	4211883a 	add	r8,r8,r8
   427d0:	308d883a 	add	r6,r6,r2
   427d4:	7bffffc4 	addi	r15,r15,-1
   427d8:	21bffa0e 	bge	r4,r6,427c4 <__alt_data_end+0xfffdb6c4>
   427dc:	01ff0084 	movi	r7,-1022
   427e0:	79c0390e 	bge	r15,r7,428c8 <__ieee754_fmod+0x2e0>
   427e4:	3bcfc83a 	sub	r7,r7,r15
   427e8:	00800504 	movi	r2,20
   427ec:	11c04016 	blt	r2,r7,428f0 <__ieee754_fmod+0x308>
   427f0:	00800804 	movi	r2,32
   427f4:	11c5c83a 	sub	r2,r2,r7
   427f8:	41d0d83a 	srl	r8,r8,r7
   427fc:	3084983a 	sll	r2,r6,r2
   42800:	31cfd83a 	sra	r7,r6,r7
   42804:	1208b03a 	or	r4,r2,r8
   42808:	2005883a 	mov	r2,r4
   4280c:	38c6b03a 	or	r3,r7,r3
   42810:	003f9b06 	br	42680 <__alt_data_end+0xfffdb580>
   42814:	13c5c83a 	sub	r2,r2,r15
   42818:	014007c4 	movi	r5,31
   4281c:	28802516 	blt	r5,r2,428b4 <__ieee754_fmod+0x2cc>
   42820:	01400804 	movi	r5,32
   42824:	288bc83a 	sub	r5,r5,r2
   42828:	314ad83a 	srl	r5,r6,r5
   4282c:	588e983a 	sll	r7,r11,r2
   42830:	309c983a 	sll	r14,r6,r2
   42834:	29ccb03a 	or	r6,r5,r7
   42838:	003fbd06 	br	42730 <__alt_data_end+0xfffdb630>
   4283c:	1285c83a 	sub	r2,r2,r10
   42840:	014007c4 	movi	r5,31
   42844:	28801616 	blt	r5,r2,428a0 <__ieee754_fmod+0x2b8>
   42848:	02400804 	movi	r9,32
   4284c:	4893c83a 	sub	r9,r9,r2
   42850:	2252d83a 	srl	r9,r4,r9
   42854:	608a983a 	sll	r5,r12,r2
   42858:	2090983a 	sll	r8,r4,r2
   4285c:	4948b03a 	or	r4,r9,r5
   42860:	003fad06 	br	42718 <__alt_data_end+0xfffdb618>
   42864:	31bfffc4 	addi	r6,r6,-1
   42868:	003fcf06 	br	427a8 <__alt_data_end+0xfffdb6a8>
   4286c:	601292fa 	slli	r9,r12,11
   42870:	02bf0084 	movi	r10,-1022
   42874:	027f950e 	bge	zero,r9,426cc <__alt_data_end+0xfffdb5cc>
   42878:	4a53883a 	add	r9,r9,r9
   4287c:	52bfffc4 	addi	r10,r10,-1
   42880:	027ffd16 	blt	zero,r9,42878 <__alt_data_end+0xfffdb778>
   42884:	003f9106 	br	426cc <__alt_data_end+0xfffdb5cc>
   42888:	581292fa 	slli	r9,r11,11
   4288c:	03ff0084 	movi	r15,-1022
   42890:	4a53883a 	add	r9,r9,r9
   42894:	7bffffc4 	addi	r15,r15,-1
   42898:	027ffd16 	blt	zero,r9,42890 <__alt_data_end+0xfffdb790>
   4289c:	003f9806 	br	42700 <__alt_data_end+0xfffdb600>
   428a0:	017ef884 	movi	r5,-1054
   428a4:	2a8bc83a 	sub	r5,r5,r10
   428a8:	2148983a 	sll	r4,r4,r5
   428ac:	0011883a 	mov	r8,zero
   428b0:	003f9906 	br	42718 <__alt_data_end+0xfffdb618>
   428b4:	00bef884 	movi	r2,-1054
   428b8:	13c5c83a 	sub	r2,r2,r15
   428bc:	308c983a 	sll	r6,r6,r2
   428c0:	001d883a 	mov	r14,zero
   428c4:	003f9a06 	br	42730 <__alt_data_end+0xfffdb630>
   428c8:	7900ffc4 	addi	r4,r15,1023
   428cc:	00bffc34 	movhi	r2,65520
   428d0:	2008953a 	slli	r4,r4,20
   428d4:	308d883a 	add	r6,r6,r2
   428d8:	30c6b03a 	or	r3,r6,r3
   428dc:	4005883a 	mov	r2,r8
   428e0:	1906b03a 	or	r3,r3,r4
   428e4:	003f6606 	br	42680 <__alt_data_end+0xfffdb580>
   428e8:	200d883a 	mov	r6,r4
   428ec:	003fb006 	br	427b0 <__alt_data_end+0xfffdb6b0>
   428f0:	008007c4 	movi	r2,31
   428f4:	11c00716 	blt	r2,r7,42914 <__ieee754_fmod+0x32c>
   428f8:	01000804 	movi	r4,32
   428fc:	21c9c83a 	sub	r4,r4,r7
   42900:	41d0d83a 	srl	r8,r8,r7
   42904:	310c983a 	sll	r6,r6,r4
   42908:	180f883a 	mov	r7,r3
   4290c:	3208b03a 	or	r4,r6,r8
   42910:	003fbd06 	br	42808 <__alt_data_end+0xfffdb708>
   42914:	013ef884 	movi	r4,-1054
   42918:	23c9c83a 	sub	r4,r4,r15
   4291c:	3109d83a 	sra	r4,r6,r4
   42920:	180f883a 	mov	r7,r3
   42924:	003fb806 	br	42808 <__alt_data_end+0xfffdb708>

00042928 <__ieee754_log>:
   42928:	defff204 	addi	sp,sp,-56
   4292c:	01800434 	movhi	r6,16
   42930:	dfc00d15 	stw	ra,52(sp)
   42934:	df000c15 	stw	fp,48(sp)
   42938:	ddc00b15 	stw	r23,44(sp)
   4293c:	dd800a15 	stw	r22,40(sp)
   42940:	dd400915 	stw	r21,36(sp)
   42944:	dd000815 	stw	r20,32(sp)
   42948:	dcc00715 	stw	r19,28(sp)
   4294c:	dc800615 	stw	r18,24(sp)
   42950:	dc400515 	stw	r17,20(sp)
   42954:	dc000415 	stw	r16,16(sp)
   42958:	31bfffc4 	addi	r6,r6,-1
   4295c:	280f883a 	mov	r7,r5
   42960:	2005883a 	mov	r2,r4
   42964:	31404616 	blt	r6,r5,42a80 <__ieee754_log+0x158>
   42968:	00e00034 	movhi	r3,32768
   4296c:	18ffffc4 	addi	r3,r3,-1
   42970:	28c6703a 	and	r3,r5,r3
   42974:	1906b03a 	or	r3,r3,r4
   42978:	1800f426 	beq	r3,zero,42d4c <__ieee754_log+0x424>
   4297c:	28017816 	blt	r5,zero,42f60 <__ieee754_log+0x638>
   42980:	01d0d434 	movhi	r7,17232
   42984:	000d883a 	mov	r6,zero
   42988:	0045ad80 	call	45ad8 <__muldf3>
   4298c:	015ffc34 	movhi	r5,32752
   42990:	297fffc4 	addi	r5,r5,-1
   42994:	180f883a 	mov	r7,r3
   42998:	013ff284 	movi	r4,-54
   4299c:	28c03d16 	blt	r5,r3,42a94 <__ieee754_log+0x16c>
   429a0:	04c00434 	movhi	r19,16
   429a4:	9cffffc4 	addi	r19,r19,-1
   429a8:	01400274 	movhi	r5,9
   429ac:	1cf8703a 	and	fp,r3,r19
   429b0:	2957d904 	addi	r5,r5,24420
   429b4:	1821d53a 	srai	r16,r3,20
   429b8:	e14b883a 	add	r5,fp,r5
   429bc:	2940042c 	andhi	r5,r5,16
   429c0:	2807d53a 	srai	r3,r5,20
   429c4:	843f0044 	addi	r16,r16,-1023
   429c8:	294ffc3c 	xorhi	r5,r5,16368
   429cc:	8121883a 	add	r16,r16,r4
   429d0:	000d883a 	mov	r6,zero
   429d4:	01cffc34 	movhi	r7,16368
   429d8:	1009883a 	mov	r4,r2
   429dc:	2f0ab03a 	or	r5,r5,fp
   429e0:	1c21883a 	add	r16,r3,r16
   429e4:	00461f00 	call	461f0 <__subdf3>
   429e8:	1025883a 	mov	r18,r2
   429ec:	e0800084 	addi	r2,fp,2
   429f0:	14e6703a 	and	r19,r2,r19
   429f4:	00800084 	movi	r2,2
   429f8:	1823883a 	mov	r17,r3
   429fc:	000d883a 	mov	r6,zero
   42a00:	14c03416 	blt	r2,r19,42ad4 <__ieee754_log+0x1ac>
   42a04:	000f883a 	mov	r7,zero
   42a08:	9009883a 	mov	r4,r18
   42a0c:	180b883a 	mov	r5,r3
   42a10:	00459740 	call	45974 <__eqdf2>
   42a14:	1000d31e 	bne	r2,zero,42d64 <__ieee754_log+0x43c>
   42a18:	80015926 	beq	r16,zero,42f80 <__ieee754_log+0x658>
   42a1c:	8009883a 	mov	r4,r16
   42a20:	0046b6c0 	call	46b6c <__floatsidf>
   42a24:	01cff9b4 	movhi	r7,16358
   42a28:	39cb9084 	addi	r7,r7,11842
   42a2c:	01bfb834 	movhi	r6,65248
   42a30:	1009883a 	mov	r4,r2
   42a34:	180b883a 	mov	r5,r3
   42a38:	1023883a 	mov	r17,r2
   42a3c:	1821883a 	mov	r16,r3
   42a40:	0045ad80 	call	45ad8 <__muldf3>
   42a44:	018d5e74 	movhi	r6,13689
   42a48:	01cf7ab4 	movhi	r7,15850
   42a4c:	8809883a 	mov	r4,r17
   42a50:	800b883a 	mov	r5,r16
   42a54:	318f1d84 	addi	r6,r6,15478
   42a58:	39ce7bc4 	addi	r7,r7,14831
   42a5c:	1027883a 	mov	r19,r2
   42a60:	1825883a 	mov	r18,r3
   42a64:	0045ad80 	call	45ad8 <__muldf3>
   42a68:	100d883a 	mov	r6,r2
   42a6c:	180f883a 	mov	r7,r3
   42a70:	9809883a 	mov	r4,r19
   42a74:	900b883a 	mov	r5,r18
   42a78:	00447e00 	call	447e0 <__adddf3>
   42a7c:	00000906 	br	42aa4 <__ieee754_log+0x17c>
   42a80:	2807883a 	mov	r3,r5
   42a84:	015ffc34 	movhi	r5,32752
   42a88:	297fffc4 	addi	r5,r5,-1
   42a8c:	0009883a 	mov	r4,zero
   42a90:	28ffc30e 	bge	r5,r3,429a0 <__alt_data_end+0xfffdb8a0>
   42a94:	100d883a 	mov	r6,r2
   42a98:	1009883a 	mov	r4,r2
   42a9c:	380b883a 	mov	r5,r7
   42aa0:	00447e00 	call	447e0 <__adddf3>
   42aa4:	dfc00d17 	ldw	ra,52(sp)
   42aa8:	df000c17 	ldw	fp,48(sp)
   42aac:	ddc00b17 	ldw	r23,44(sp)
   42ab0:	dd800a17 	ldw	r22,40(sp)
   42ab4:	dd400917 	ldw	r21,36(sp)
   42ab8:	dd000817 	ldw	r20,32(sp)
   42abc:	dcc00717 	ldw	r19,28(sp)
   42ac0:	dc800617 	ldw	r18,24(sp)
   42ac4:	dc400517 	ldw	r17,20(sp)
   42ac8:	dc000417 	ldw	r16,16(sp)
   42acc:	dec00e04 	addi	sp,sp,56
   42ad0:	f800283a 	ret
   42ad4:	01d00034 	movhi	r7,16384
   42ad8:	9009883a 	mov	r4,r18
   42adc:	180b883a 	mov	r5,r3
   42ae0:	00447e00 	call	447e0 <__adddf3>
   42ae4:	100d883a 	mov	r6,r2
   42ae8:	180f883a 	mov	r7,r3
   42aec:	880b883a 	mov	r5,r17
   42af0:	9009883a 	mov	r4,r18
   42af4:	004508c0 	call	4508c <__divdf3>
   42af8:	8009883a 	mov	r4,r16
   42afc:	102d883a 	mov	r22,r2
   42b00:	182b883a 	mov	r21,r3
   42b04:	0046b6c0 	call	46b6c <__floatsidf>
   42b08:	b00d883a 	mov	r6,r22
   42b0c:	a80f883a 	mov	r7,r21
   42b10:	b009883a 	mov	r4,r22
   42b14:	a80b883a 	mov	r5,r21
   42b18:	d8800015 	stw	r2,0(sp)
   42b1c:	d8c00115 	stw	r3,4(sp)
   42b20:	0045ad80 	call	45ad8 <__muldf3>
   42b24:	027ffeb4 	movhi	r9,65530
   42b28:	4a7ae184 	addi	r9,r9,-5242
   42b2c:	100d883a 	mov	r6,r2
   42b30:	180f883a 	mov	r7,r3
   42b34:	1009883a 	mov	r4,r2
   42b38:	180b883a 	mov	r5,r3
   42b3c:	e26f883a 	add	r23,fp,r9
   42b40:	d8c00315 	stw	r3,12(sp)
   42b44:	d8800215 	stw	r2,8(sp)
   42b48:	0045ad80 	call	45ad8 <__muldf3>
   42b4c:	01b7cfb4 	movhi	r6,57150
   42b50:	01cff0f4 	movhi	r7,16323
   42b54:	31949104 	addi	r6,r6,21060
   42b58:	39fc4484 	addi	r7,r7,-3822
   42b5c:	1009883a 	mov	r4,r2
   42b60:	180b883a 	mov	r5,r3
   42b64:	1029883a 	mov	r20,r2
   42b68:	1827883a 	mov	r19,r3
   42b6c:	0045ad80 	call	45ad8 <__muldf3>
   42b70:	01a5b2f4 	movhi	r6,38603
   42b74:	01cff1f4 	movhi	r7,16327
   42b78:	3180f784 	addi	r6,r6,990
   42b7c:	39d19904 	addi	r7,r7,18020
   42b80:	1009883a 	mov	r4,r2
   42b84:	180b883a 	mov	r5,r3
   42b88:	00447e00 	call	447e0 <__adddf3>
   42b8c:	a00d883a 	mov	r6,r20
   42b90:	980f883a 	mov	r7,r19
   42b94:	1009883a 	mov	r4,r2
   42b98:	180b883a 	mov	r5,r3
   42b9c:	0045ad80 	call	45ad8 <__muldf3>
   42ba0:	01a508f4 	movhi	r6,37923
   42ba4:	01cff4b4 	movhi	r7,16338
   42ba8:	31a4d644 	addi	r6,r6,-27815
   42bac:	39d24904 	addi	r7,r7,18724
   42bb0:	1009883a 	mov	r4,r2
   42bb4:	180b883a 	mov	r5,r3
   42bb8:	00447e00 	call	447e0 <__adddf3>
   42bbc:	a00d883a 	mov	r6,r20
   42bc0:	980f883a 	mov	r7,r19
   42bc4:	1009883a 	mov	r4,r2
   42bc8:	180b883a 	mov	r5,r3
   42bcc:	0045ad80 	call	45ad8 <__muldf3>
   42bd0:	01955574 	movhi	r6,21845
   42bd4:	01cff974 	movhi	r7,16357
   42bd8:	319564c4 	addi	r6,r6,21907
   42bdc:	39d55544 	addi	r7,r7,21845
   42be0:	1009883a 	mov	r4,r2
   42be4:	180b883a 	mov	r5,r3
   42be8:	00447e00 	call	447e0 <__adddf3>
   42bec:	dac00217 	ldw	r11,8(sp)
   42bf0:	da800317 	ldw	r10,12(sp)
   42bf4:	1009883a 	mov	r4,r2
   42bf8:	580d883a 	mov	r6,r11
   42bfc:	500f883a 	mov	r7,r10
   42c00:	180b883a 	mov	r5,r3
   42c04:	0045ad80 	call	45ad8 <__muldf3>
   42c08:	01b41e74 	movhi	r6,53369
   42c0c:	01cff134 	movhi	r7,16324
   42c10:	a009883a 	mov	r4,r20
   42c14:	980b883a 	mov	r5,r19
   42c18:	31b1a7c4 	addi	r6,r6,-14689
   42c1c:	39e68244 	addi	r7,r7,-26103
   42c20:	d8c00315 	stw	r3,12(sp)
   42c24:	d8800215 	stw	r2,8(sp)
   42c28:	0045ad80 	call	45ad8 <__muldf3>
   42c2c:	018763b4 	movhi	r6,7566
   42c30:	01cff334 	movhi	r7,16332
   42c34:	319e2bc4 	addi	r6,r6,30895
   42c38:	39dc7144 	addi	r7,r7,29125
   42c3c:	1009883a 	mov	r4,r2
   42c40:	180b883a 	mov	r5,r3
   42c44:	00447e00 	call	447e0 <__adddf3>
   42c48:	a00d883a 	mov	r6,r20
   42c4c:	980f883a 	mov	r7,r19
   42c50:	1009883a 	mov	r4,r2
   42c54:	180b883a 	mov	r5,r3
   42c58:	0045ad80 	call	45ad8 <__muldf3>
   42c5c:	01a66634 	movhi	r6,39320
   42c60:	01cff6b4 	movhi	r7,16346
   42c64:	31be8104 	addi	r6,r6,-1532
   42c68:	39e66644 	addi	r7,r7,-26215
   42c6c:	1009883a 	mov	r4,r2
   42c70:	180b883a 	mov	r5,r3
   42c74:	00447e00 	call	447e0 <__adddf3>
   42c78:	a00d883a 	mov	r6,r20
   42c7c:	980f883a 	mov	r7,r19
   42c80:	1009883a 	mov	r4,r2
   42c84:	180b883a 	mov	r5,r3
   42c88:	0045ad80 	call	45ad8 <__muldf3>
   42c8c:	dac00217 	ldw	r11,8(sp)
   42c90:	da800317 	ldw	r10,12(sp)
   42c94:	100d883a 	mov	r6,r2
   42c98:	180f883a 	mov	r7,r3
   42c9c:	5809883a 	mov	r4,r11
   42ca0:	500b883a 	mov	r5,r10
   42ca4:	00447e00 	call	447e0 <__adddf3>
   42ca8:	1827883a 	mov	r19,r3
   42cac:	00c001f4 	movhi	r3,7
   42cb0:	18ee1444 	addi	r3,r3,-18351
   42cb4:	1f07c83a 	sub	r3,r3,fp
   42cb8:	1dd2b03a 	or	r9,r3,r23
   42cbc:	1029883a 	mov	r20,r2
   42cc0:	0240490e 	bge	zero,r9,42de8 <__ieee754_log+0x4c0>
   42cc4:	000d883a 	mov	r6,zero
   42cc8:	01cff834 	movhi	r7,16352
   42ccc:	9009883a 	mov	r4,r18
   42cd0:	880b883a 	mov	r5,r17
   42cd4:	0045ad80 	call	45ad8 <__muldf3>
   42cd8:	900d883a 	mov	r6,r18
   42cdc:	880f883a 	mov	r7,r17
   42ce0:	1009883a 	mov	r4,r2
   42ce4:	180b883a 	mov	r5,r3
   42ce8:	0045ad80 	call	45ad8 <__muldf3>
   42cec:	1039883a 	mov	fp,r2
   42cf0:	182f883a 	mov	r23,r3
   42cf4:	8000691e 	bne	r16,zero,42e9c <__ieee754_log+0x574>
   42cf8:	100d883a 	mov	r6,r2
   42cfc:	180f883a 	mov	r7,r3
   42d00:	a009883a 	mov	r4,r20
   42d04:	980b883a 	mov	r5,r19
   42d08:	00447e00 	call	447e0 <__adddf3>
   42d0c:	b00d883a 	mov	r6,r22
   42d10:	a80f883a 	mov	r7,r21
   42d14:	1009883a 	mov	r4,r2
   42d18:	180b883a 	mov	r5,r3
   42d1c:	0045ad80 	call	45ad8 <__muldf3>
   42d20:	100d883a 	mov	r6,r2
   42d24:	180f883a 	mov	r7,r3
   42d28:	e009883a 	mov	r4,fp
   42d2c:	b80b883a 	mov	r5,r23
   42d30:	00461f00 	call	461f0 <__subdf3>
   42d34:	100d883a 	mov	r6,r2
   42d38:	180f883a 	mov	r7,r3
   42d3c:	9009883a 	mov	r4,r18
   42d40:	880b883a 	mov	r5,r17
   42d44:	00461f00 	call	461f0 <__subdf3>
   42d48:	003f5606 	br	42aa4 <__alt_data_end+0xfffdb9a4>
   42d4c:	000d883a 	mov	r6,zero
   42d50:	000f883a 	mov	r7,zero
   42d54:	0009883a 	mov	r4,zero
   42d58:	0170d434 	movhi	r5,50000
   42d5c:	004508c0 	call	4508c <__divdf3>
   42d60:	003f5006 	br	42aa4 <__alt_data_end+0xfffdb9a4>
   42d64:	01955574 	movhi	r6,21845
   42d68:	01cff574 	movhi	r7,16341
   42d6c:	31955544 	addi	r6,r6,21845
   42d70:	39d55544 	addi	r7,r7,21845
   42d74:	9009883a 	mov	r4,r18
   42d78:	880b883a 	mov	r5,r17
   42d7c:	0045ad80 	call	45ad8 <__muldf3>
   42d80:	100d883a 	mov	r6,r2
   42d84:	180f883a 	mov	r7,r3
   42d88:	0009883a 	mov	r4,zero
   42d8c:	014ff834 	movhi	r5,16352
   42d90:	00461f00 	call	461f0 <__subdf3>
   42d94:	900d883a 	mov	r6,r18
   42d98:	880f883a 	mov	r7,r17
   42d9c:	9009883a 	mov	r4,r18
   42da0:	880b883a 	mov	r5,r17
   42da4:	1029883a 	mov	r20,r2
   42da8:	1827883a 	mov	r19,r3
   42dac:	0045ad80 	call	45ad8 <__muldf3>
   42db0:	a009883a 	mov	r4,r20
   42db4:	980b883a 	mov	r5,r19
   42db8:	100d883a 	mov	r6,r2
   42dbc:	180f883a 	mov	r7,r3
   42dc0:	0045ad80 	call	45ad8 <__muldf3>
   42dc4:	1029883a 	mov	r20,r2
   42dc8:	1827883a 	mov	r19,r3
   42dcc:	80006f1e 	bne	r16,zero,42f8c <__ieee754_log+0x664>
   42dd0:	100d883a 	mov	r6,r2
   42dd4:	180f883a 	mov	r7,r3
   42dd8:	9009883a 	mov	r4,r18
   42ddc:	880b883a 	mov	r5,r17
   42de0:	00461f00 	call	461f0 <__subdf3>
   42de4:	003f2f06 	br	42aa4 <__alt_data_end+0xfffdb9a4>
   42de8:	80008b26 	beq	r16,zero,43018 <__ieee754_log+0x6f0>
   42dec:	d9000017 	ldw	r4,0(sp)
   42df0:	d9400117 	ldw	r5,4(sp)
   42df4:	01cff9b4 	movhi	r7,16358
   42df8:	39cb9084 	addi	r7,r7,11842
   42dfc:	01bfb834 	movhi	r6,65248
   42e00:	0045ad80 	call	45ad8 <__muldf3>
   42e04:	a00d883a 	mov	r6,r20
   42e08:	980f883a 	mov	r7,r19
   42e0c:	9009883a 	mov	r4,r18
   42e10:	880b883a 	mov	r5,r17
   42e14:	1821883a 	mov	r16,r3
   42e18:	d8800215 	stw	r2,8(sp)
   42e1c:	00461f00 	call	461f0 <__subdf3>
   42e20:	b00d883a 	mov	r6,r22
   42e24:	a80f883a 	mov	r7,r21
   42e28:	1009883a 	mov	r4,r2
   42e2c:	180b883a 	mov	r5,r3
   42e30:	0045ad80 	call	45ad8 <__muldf3>
   42e34:	d9000017 	ldw	r4,0(sp)
   42e38:	d9400117 	ldw	r5,4(sp)
   42e3c:	018d5e74 	movhi	r6,13689
   42e40:	01cf7ab4 	movhi	r7,15850
   42e44:	318f1d84 	addi	r6,r6,15478
   42e48:	39ce7bc4 	addi	r7,r7,14831
   42e4c:	1029883a 	mov	r20,r2
   42e50:	1827883a 	mov	r19,r3
   42e54:	0045ad80 	call	45ad8 <__muldf3>
   42e58:	a009883a 	mov	r4,r20
   42e5c:	980b883a 	mov	r5,r19
   42e60:	100d883a 	mov	r6,r2
   42e64:	180f883a 	mov	r7,r3
   42e68:	00461f00 	call	461f0 <__subdf3>
   42e6c:	900d883a 	mov	r6,r18
   42e70:	880f883a 	mov	r7,r17
   42e74:	1009883a 	mov	r4,r2
   42e78:	180b883a 	mov	r5,r3
   42e7c:	00461f00 	call	461f0 <__subdf3>
   42e80:	da000217 	ldw	r8,8(sp)
   42e84:	100d883a 	mov	r6,r2
   42e88:	180f883a 	mov	r7,r3
   42e8c:	4009883a 	mov	r4,r8
   42e90:	800b883a 	mov	r5,r16
   42e94:	00461f00 	call	461f0 <__subdf3>
   42e98:	003f0206 	br	42aa4 <__alt_data_end+0xfffdb9a4>
   42e9c:	d9000017 	ldw	r4,0(sp)
   42ea0:	d9400117 	ldw	r5,4(sp)
   42ea4:	01cff9b4 	movhi	r7,16358
   42ea8:	39cb9084 	addi	r7,r7,11842
   42eac:	01bfb834 	movhi	r6,65248
   42eb0:	0045ad80 	call	45ad8 <__muldf3>
   42eb4:	e00d883a 	mov	r6,fp
   42eb8:	b80f883a 	mov	r7,r23
   42ebc:	a009883a 	mov	r4,r20
   42ec0:	980b883a 	mov	r5,r19
   42ec4:	1821883a 	mov	r16,r3
   42ec8:	d8800315 	stw	r2,12(sp)
   42ecc:	00447e00 	call	447e0 <__adddf3>
   42ed0:	b00d883a 	mov	r6,r22
   42ed4:	a80f883a 	mov	r7,r21
   42ed8:	1009883a 	mov	r4,r2
   42edc:	180b883a 	mov	r5,r3
   42ee0:	0045ad80 	call	45ad8 <__muldf3>
   42ee4:	d9000017 	ldw	r4,0(sp)
   42ee8:	d9400117 	ldw	r5,4(sp)
   42eec:	018d5e74 	movhi	r6,13689
   42ef0:	01cf7ab4 	movhi	r7,15850
   42ef4:	318f1d84 	addi	r6,r6,15478
   42ef8:	39ce7bc4 	addi	r7,r7,14831
   42efc:	1029883a 	mov	r20,r2
   42f00:	1827883a 	mov	r19,r3
   42f04:	0045ad80 	call	45ad8 <__muldf3>
   42f08:	a009883a 	mov	r4,r20
   42f0c:	980b883a 	mov	r5,r19
   42f10:	100d883a 	mov	r6,r2
   42f14:	180f883a 	mov	r7,r3
   42f18:	00447e00 	call	447e0 <__adddf3>
   42f1c:	e009883a 	mov	r4,fp
   42f20:	b80b883a 	mov	r5,r23
   42f24:	100d883a 	mov	r6,r2
   42f28:	180f883a 	mov	r7,r3
   42f2c:	00461f00 	call	461f0 <__subdf3>
   42f30:	900d883a 	mov	r6,r18
   42f34:	880f883a 	mov	r7,r17
   42f38:	1009883a 	mov	r4,r2
   42f3c:	180b883a 	mov	r5,r3
   42f40:	00461f00 	call	461f0 <__subdf3>
   42f44:	da800317 	ldw	r10,12(sp)
   42f48:	100d883a 	mov	r6,r2
   42f4c:	180f883a 	mov	r7,r3
   42f50:	5009883a 	mov	r4,r10
   42f54:	800b883a 	mov	r5,r16
   42f58:	00461f00 	call	461f0 <__subdf3>
   42f5c:	003ed106 	br	42aa4 <__alt_data_end+0xfffdb9a4>
   42f60:	200d883a 	mov	r6,r4
   42f64:	00461f00 	call	461f0 <__subdf3>
   42f68:	000d883a 	mov	r6,zero
   42f6c:	000f883a 	mov	r7,zero
   42f70:	1009883a 	mov	r4,r2
   42f74:	180b883a 	mov	r5,r3
   42f78:	004508c0 	call	4508c <__divdf3>
   42f7c:	003ec906 	br	42aa4 <__alt_data_end+0xfffdb9a4>
   42f80:	0005883a 	mov	r2,zero
   42f84:	0007883a 	mov	r3,zero
   42f88:	003ec606 	br	42aa4 <__alt_data_end+0xfffdb9a4>
   42f8c:	8009883a 	mov	r4,r16
   42f90:	0046b6c0 	call	46b6c <__floatsidf>
   42f94:	01cff9b4 	movhi	r7,16358
   42f98:	39cb9084 	addi	r7,r7,11842
   42f9c:	01bfb834 	movhi	r6,65248
   42fa0:	1009883a 	mov	r4,r2
   42fa4:	180b883a 	mov	r5,r3
   42fa8:	102b883a 	mov	r21,r2
   42fac:	1821883a 	mov	r16,r3
   42fb0:	0045ad80 	call	45ad8 <__muldf3>
   42fb4:	018d5e74 	movhi	r6,13689
   42fb8:	01cf7ab4 	movhi	r7,15850
   42fbc:	a809883a 	mov	r4,r21
   42fc0:	800b883a 	mov	r5,r16
   42fc4:	318f1d84 	addi	r6,r6,15478
   42fc8:	39ce7bc4 	addi	r7,r7,14831
   42fcc:	102f883a 	mov	r23,r2
   42fd0:	182d883a 	mov	r22,r3
   42fd4:	0045ad80 	call	45ad8 <__muldf3>
   42fd8:	a009883a 	mov	r4,r20
   42fdc:	980b883a 	mov	r5,r19
   42fe0:	100d883a 	mov	r6,r2
   42fe4:	180f883a 	mov	r7,r3
   42fe8:	00461f00 	call	461f0 <__subdf3>
   42fec:	900d883a 	mov	r6,r18
   42ff0:	880f883a 	mov	r7,r17
   42ff4:	1009883a 	mov	r4,r2
   42ff8:	180b883a 	mov	r5,r3
   42ffc:	00461f00 	call	461f0 <__subdf3>
   43000:	100d883a 	mov	r6,r2
   43004:	180f883a 	mov	r7,r3
   43008:	b809883a 	mov	r4,r23
   4300c:	b00b883a 	mov	r5,r22
   43010:	00461f00 	call	461f0 <__subdf3>
   43014:	003ea306 	br	42aa4 <__alt_data_end+0xfffdb9a4>
   43018:	a00d883a 	mov	r6,r20
   4301c:	980f883a 	mov	r7,r19
   43020:	9009883a 	mov	r4,r18
   43024:	880b883a 	mov	r5,r17
   43028:	00461f00 	call	461f0 <__subdf3>
   4302c:	b00d883a 	mov	r6,r22
   43030:	a80f883a 	mov	r7,r21
   43034:	1009883a 	mov	r4,r2
   43038:	180b883a 	mov	r5,r3
   4303c:	0045ad80 	call	45ad8 <__muldf3>
   43040:	003f3c06 	br	42d34 <__alt_data_end+0xfffdbc34>

00043044 <__fpclassifyd>:
   43044:	00a00034 	movhi	r2,32768
   43048:	10bfffc4 	addi	r2,r2,-1
   4304c:	2884703a 	and	r2,r5,r2
   43050:	10000726 	beq	r2,zero,43070 <__fpclassifyd+0x2c>
   43054:	00fffc34 	movhi	r3,65520
   43058:	019ff834 	movhi	r6,32736
   4305c:	28c7883a 	add	r3,r5,r3
   43060:	31bfffc4 	addi	r6,r6,-1
   43064:	30c00536 	bltu	r6,r3,4307c <__fpclassifyd+0x38>
   43068:	00800104 	movi	r2,4
   4306c:	f800283a 	ret
   43070:	2000021e 	bne	r4,zero,4307c <__fpclassifyd+0x38>
   43074:	00800084 	movi	r2,2
   43078:	f800283a 	ret
   4307c:	00dffc34 	movhi	r3,32752
   43080:	019ff834 	movhi	r6,32736
   43084:	28cb883a 	add	r5,r5,r3
   43088:	31bfffc4 	addi	r6,r6,-1
   4308c:	317ff62e 	bgeu	r6,r5,43068 <__alt_data_end+0xfffdbf68>
   43090:	01400434 	movhi	r5,16
   43094:	297fffc4 	addi	r5,r5,-1
   43098:	28800236 	bltu	r5,r2,430a4 <__fpclassifyd+0x60>
   4309c:	008000c4 	movi	r2,3
   430a0:	f800283a 	ret
   430a4:	10c00226 	beq	r2,r3,430b0 <__fpclassifyd+0x6c>
   430a8:	0005883a 	mov	r2,zero
   430ac:	f800283a 	ret
   430b0:	2005003a 	cmpeq	r2,r4,zero
   430b4:	f800283a 	ret

000430b8 <matherr>:
   430b8:	0005883a 	mov	r2,zero
   430bc:	f800283a 	ret

000430c0 <nan>:
   430c0:	0005883a 	mov	r2,zero
   430c4:	00dffe34 	movhi	r3,32760
   430c8:	f800283a 	ret

000430cc <__fixunssfsi>:
   430cc:	defffd04 	addi	sp,sp,-12
   430d0:	dc000015 	stw	r16,0(sp)
   430d4:	0413c034 	movhi	r16,20224
   430d8:	800b883a 	mov	r5,r16
   430dc:	dc400115 	stw	r17,4(sp)
   430e0:	dfc00215 	stw	ra,8(sp)
   430e4:	2023883a 	mov	r17,r4
   430e8:	0043be80 	call	43be8 <__gesf2>
   430ec:	1000070e 	bge	r2,zero,4310c <__fixunssfsi+0x40>
   430f0:	8809883a 	mov	r4,r17
   430f4:	004464c0 	call	4464c <__fixsfsi>
   430f8:	dfc00217 	ldw	ra,8(sp)
   430fc:	dc400117 	ldw	r17,4(sp)
   43100:	dc000017 	ldw	r16,0(sp)
   43104:	dec00304 	addi	sp,sp,12
   43108:	f800283a 	ret
   4310c:	800b883a 	mov	r5,r16
   43110:	8809883a 	mov	r4,r17
   43114:	00441680 	call	44168 <__subsf3>
   43118:	1009883a 	mov	r4,r2
   4311c:	004464c0 	call	4464c <__fixsfsi>
   43120:	00e00034 	movhi	r3,32768
   43124:	10c5883a 	add	r2,r2,r3
   43128:	003ff306 	br	430f8 <__alt_data_end+0xfffdbff8>

0004312c <__divsi3>:
   4312c:	20001b16 	blt	r4,zero,4319c <__divsi3+0x70>
   43130:	000f883a 	mov	r7,zero
   43134:	28001616 	blt	r5,zero,43190 <__divsi3+0x64>
   43138:	200d883a 	mov	r6,r4
   4313c:	29001a2e 	bgeu	r5,r4,431a8 <__divsi3+0x7c>
   43140:	00800804 	movi	r2,32
   43144:	00c00044 	movi	r3,1
   43148:	00000106 	br	43150 <__divsi3+0x24>
   4314c:	10000d26 	beq	r2,zero,43184 <__divsi3+0x58>
   43150:	294b883a 	add	r5,r5,r5
   43154:	10bfffc4 	addi	r2,r2,-1
   43158:	18c7883a 	add	r3,r3,r3
   4315c:	293ffb36 	bltu	r5,r4,4314c <__alt_data_end+0xfffdc04c>
   43160:	0005883a 	mov	r2,zero
   43164:	18000726 	beq	r3,zero,43184 <__divsi3+0x58>
   43168:	0005883a 	mov	r2,zero
   4316c:	31400236 	bltu	r6,r5,43178 <__divsi3+0x4c>
   43170:	314dc83a 	sub	r6,r6,r5
   43174:	10c4b03a 	or	r2,r2,r3
   43178:	1806d07a 	srli	r3,r3,1
   4317c:	280ad07a 	srli	r5,r5,1
   43180:	183ffa1e 	bne	r3,zero,4316c <__alt_data_end+0xfffdc06c>
   43184:	38000126 	beq	r7,zero,4318c <__divsi3+0x60>
   43188:	0085c83a 	sub	r2,zero,r2
   4318c:	f800283a 	ret
   43190:	014bc83a 	sub	r5,zero,r5
   43194:	39c0005c 	xori	r7,r7,1
   43198:	003fe706 	br	43138 <__alt_data_end+0xfffdc038>
   4319c:	0109c83a 	sub	r4,zero,r4
   431a0:	01c00044 	movi	r7,1
   431a4:	003fe306 	br	43134 <__alt_data_end+0xfffdc034>
   431a8:	00c00044 	movi	r3,1
   431ac:	003fee06 	br	43168 <__alt_data_end+0xfffdc068>

000431b0 <__modsi3>:
   431b0:	20001716 	blt	r4,zero,43210 <__modsi3+0x60>
   431b4:	000f883a 	mov	r7,zero
   431b8:	2005883a 	mov	r2,r4
   431bc:	28001216 	blt	r5,zero,43208 <__modsi3+0x58>
   431c0:	2900162e 	bgeu	r5,r4,4321c <__modsi3+0x6c>
   431c4:	01800804 	movi	r6,32
   431c8:	00c00044 	movi	r3,1
   431cc:	00000106 	br	431d4 <__modsi3+0x24>
   431d0:	30000a26 	beq	r6,zero,431fc <__modsi3+0x4c>
   431d4:	294b883a 	add	r5,r5,r5
   431d8:	31bfffc4 	addi	r6,r6,-1
   431dc:	18c7883a 	add	r3,r3,r3
   431e0:	293ffb36 	bltu	r5,r4,431d0 <__alt_data_end+0xfffdc0d0>
   431e4:	18000526 	beq	r3,zero,431fc <__modsi3+0x4c>
   431e8:	1806d07a 	srli	r3,r3,1
   431ec:	11400136 	bltu	r2,r5,431f4 <__modsi3+0x44>
   431f0:	1145c83a 	sub	r2,r2,r5
   431f4:	280ad07a 	srli	r5,r5,1
   431f8:	183ffb1e 	bne	r3,zero,431e8 <__alt_data_end+0xfffdc0e8>
   431fc:	38000126 	beq	r7,zero,43204 <__modsi3+0x54>
   43200:	0085c83a 	sub	r2,zero,r2
   43204:	f800283a 	ret
   43208:	014bc83a 	sub	r5,zero,r5
   4320c:	003fec06 	br	431c0 <__alt_data_end+0xfffdc0c0>
   43210:	0109c83a 	sub	r4,zero,r4
   43214:	01c00044 	movi	r7,1
   43218:	003fe706 	br	431b8 <__alt_data_end+0xfffdc0b8>
   4321c:	00c00044 	movi	r3,1
   43220:	003ff106 	br	431e8 <__alt_data_end+0xfffdc0e8>

00043224 <__udivsi3>:
   43224:	200d883a 	mov	r6,r4
   43228:	2900152e 	bgeu	r5,r4,43280 <__udivsi3+0x5c>
   4322c:	28001416 	blt	r5,zero,43280 <__udivsi3+0x5c>
   43230:	00800804 	movi	r2,32
   43234:	00c00044 	movi	r3,1
   43238:	00000206 	br	43244 <__udivsi3+0x20>
   4323c:	10000e26 	beq	r2,zero,43278 <__udivsi3+0x54>
   43240:	28000516 	blt	r5,zero,43258 <__udivsi3+0x34>
   43244:	294b883a 	add	r5,r5,r5
   43248:	10bfffc4 	addi	r2,r2,-1
   4324c:	18c7883a 	add	r3,r3,r3
   43250:	293ffa36 	bltu	r5,r4,4323c <__alt_data_end+0xfffdc13c>
   43254:	18000826 	beq	r3,zero,43278 <__udivsi3+0x54>
   43258:	0005883a 	mov	r2,zero
   4325c:	31400236 	bltu	r6,r5,43268 <__udivsi3+0x44>
   43260:	314dc83a 	sub	r6,r6,r5
   43264:	10c4b03a 	or	r2,r2,r3
   43268:	1806d07a 	srli	r3,r3,1
   4326c:	280ad07a 	srli	r5,r5,1
   43270:	183ffa1e 	bne	r3,zero,4325c <__alt_data_end+0xfffdc15c>
   43274:	f800283a 	ret
   43278:	0005883a 	mov	r2,zero
   4327c:	f800283a 	ret
   43280:	00c00044 	movi	r3,1
   43284:	003ff406 	br	43258 <__alt_data_end+0xfffdc158>

00043288 <__umodsi3>:
   43288:	2005883a 	mov	r2,r4
   4328c:	2900122e 	bgeu	r5,r4,432d8 <__umodsi3+0x50>
   43290:	28001116 	blt	r5,zero,432d8 <__umodsi3+0x50>
   43294:	01800804 	movi	r6,32
   43298:	00c00044 	movi	r3,1
   4329c:	00000206 	br	432a8 <__umodsi3+0x20>
   432a0:	30000c26 	beq	r6,zero,432d4 <__umodsi3+0x4c>
   432a4:	28000516 	blt	r5,zero,432bc <__umodsi3+0x34>
   432a8:	294b883a 	add	r5,r5,r5
   432ac:	31bfffc4 	addi	r6,r6,-1
   432b0:	18c7883a 	add	r3,r3,r3
   432b4:	293ffa36 	bltu	r5,r4,432a0 <__alt_data_end+0xfffdc1a0>
   432b8:	18000626 	beq	r3,zero,432d4 <__umodsi3+0x4c>
   432bc:	1806d07a 	srli	r3,r3,1
   432c0:	11400136 	bltu	r2,r5,432c8 <__umodsi3+0x40>
   432c4:	1145c83a 	sub	r2,r2,r5
   432c8:	280ad07a 	srli	r5,r5,1
   432cc:	183ffb1e 	bne	r3,zero,432bc <__alt_data_end+0xfffdc1bc>
   432d0:	f800283a 	ret
   432d4:	f800283a 	ret
   432d8:	00c00044 	movi	r3,1
   432dc:	003ff706 	br	432bc <__alt_data_end+0xfffdc1bc>

000432e0 <__addsf3>:
   432e0:	defffc04 	addi	sp,sp,-16
   432e4:	2004d7fa 	srli	r2,r4,31
   432e8:	280cd5fa 	srli	r6,r5,23
   432ec:	dc000015 	stw	r16,0(sp)
   432f0:	00c02034 	movhi	r3,128
   432f4:	2020d5fa 	srli	r16,r4,23
   432f8:	280ed7fa 	srli	r7,r5,31
   432fc:	18ffffc4 	addi	r3,r3,-1
   43300:	dc400115 	stw	r17,4(sp)
   43304:	1908703a 	and	r4,r3,r4
   43308:	194a703a 	and	r5,r3,r5
   4330c:	dfc00315 	stw	ra,12(sp)
   43310:	dc800215 	stw	r18,8(sp)
   43314:	14403fcc 	andi	r17,r2,255
   43318:	84003fcc 	andi	r16,r16,255
   4331c:	200890fa 	slli	r4,r4,3
   43320:	31803fcc 	andi	r6,r6,255
   43324:	280a90fa 	slli	r5,r5,3
   43328:	89c05026 	beq	r17,r7,4346c <__addsf3+0x18c>
   4332c:	8185c83a 	sub	r2,r16,r6
   43330:	00807a0e 	bge	zero,r2,4351c <__addsf3+0x23c>
   43334:	30001e1e 	bne	r6,zero,433b0 <__addsf3+0xd0>
   43338:	28006d1e 	bne	r5,zero,434f0 <__addsf3+0x210>
   4333c:	208001cc 	andi	r2,r4,7
   43340:	10000426 	beq	r2,zero,43354 <__addsf3+0x74>
   43344:	208003cc 	andi	r2,r4,15
   43348:	00c00104 	movi	r3,4
   4334c:	10c00126 	beq	r2,r3,43354 <__addsf3+0x74>
   43350:	20c9883a 	add	r4,r4,r3
   43354:	2081002c 	andhi	r2,r4,1024
   43358:	10003926 	beq	r2,zero,43440 <__addsf3+0x160>
   4335c:	84000044 	addi	r16,r16,1
   43360:	00803fc4 	movi	r2,255
   43364:	80807826 	beq	r16,r2,43548 <__addsf3+0x268>
   43368:	200891ba 	slli	r4,r4,6
   4336c:	8805883a 	mov	r2,r17
   43370:	2008d27a 	srli	r4,r4,9
   43374:	84003fcc 	andi	r16,r16,255
   43378:	800695fa 	slli	r3,r16,23
   4337c:	10803fcc 	andi	r2,r2,255
   43380:	04002034 	movhi	r16,128
   43384:	843fffc4 	addi	r16,r16,-1
   43388:	100497fa 	slli	r2,r2,31
   4338c:	2408703a 	and	r4,r4,r16
   43390:	20e0b03a 	or	r16,r4,r3
   43394:	8084b03a 	or	r2,r16,r2
   43398:	dfc00317 	ldw	ra,12(sp)
   4339c:	dc800217 	ldw	r18,8(sp)
   433a0:	dc400117 	ldw	r17,4(sp)
   433a4:	dc000017 	ldw	r16,0(sp)
   433a8:	dec00404 	addi	sp,sp,16
   433ac:	f800283a 	ret
   433b0:	00c03fc4 	movi	r3,255
   433b4:	80ffe126 	beq	r16,r3,4333c <__alt_data_end+0xfffdc23c>
   433b8:	29410034 	orhi	r5,r5,1024
   433bc:	00c006c4 	movi	r3,27
   433c0:	18807516 	blt	r3,r2,43598 <__addsf3+0x2b8>
   433c4:	00c00804 	movi	r3,32
   433c8:	1887c83a 	sub	r3,r3,r2
   433cc:	28c6983a 	sll	r3,r5,r3
   433d0:	288ad83a 	srl	r5,r5,r2
   433d4:	1804c03a 	cmpne	r2,r3,zero
   433d8:	288ab03a 	or	r5,r5,r2
   433dc:	2149c83a 	sub	r4,r4,r5
   433e0:	2081002c 	andhi	r2,r4,1024
   433e4:	10001426 	beq	r2,zero,43438 <__addsf3+0x158>
   433e8:	04810034 	movhi	r18,1024
   433ec:	94bfffc4 	addi	r18,r18,-1
   433f0:	24a4703a 	and	r18,r4,r18
   433f4:	9009883a 	mov	r4,r18
   433f8:	0046f000 	call	46f00 <__clzsi2>
   433fc:	10bffec4 	addi	r2,r2,-5
   43400:	90a4983a 	sll	r18,r18,r2
   43404:	14005416 	blt	r2,r16,43558 <__addsf3+0x278>
   43408:	1405c83a 	sub	r2,r2,r16
   4340c:	11000044 	addi	r4,r2,1
   43410:	00800804 	movi	r2,32
   43414:	1105c83a 	sub	r2,r2,r4
   43418:	9084983a 	sll	r2,r18,r2
   4341c:	9124d83a 	srl	r18,r18,r4
   43420:	0021883a 	mov	r16,zero
   43424:	1008c03a 	cmpne	r4,r2,zero
   43428:	9108b03a 	or	r4,r18,r4
   4342c:	003fc306 	br	4333c <__alt_data_end+0xfffdc23c>
   43430:	1000db26 	beq	r2,zero,437a0 <__addsf3+0x4c0>
   43434:	1009883a 	mov	r4,r2
   43438:	208001cc 	andi	r2,r4,7
   4343c:	103fc11e 	bne	r2,zero,43344 <__alt_data_end+0xfffdc244>
   43440:	2006d0fa 	srli	r3,r4,3
   43444:	01003fc4 	movi	r4,255
   43448:	8805883a 	mov	r2,r17
   4344c:	8100241e 	bne	r16,r4,434e0 <__addsf3+0x200>
   43450:	18006e26 	beq	r3,zero,4360c <__addsf3+0x32c>
   43454:	19001034 	orhi	r4,r3,64
   43458:	00c02034 	movhi	r3,128
   4345c:	18ffffc4 	addi	r3,r3,-1
   43460:	043fffc4 	movi	r16,-1
   43464:	20c8703a 	and	r4,r4,r3
   43468:	003fc206 	br	43374 <__alt_data_end+0xfffdc274>
   4346c:	8187c83a 	sub	r3,r16,r6
   43470:	00c03e0e 	bge	zero,r3,4356c <__addsf3+0x28c>
   43474:	30002326 	beq	r6,zero,43504 <__addsf3+0x224>
   43478:	01803fc4 	movi	r6,255
   4347c:	81bfaf26 	beq	r16,r6,4333c <__alt_data_end+0xfffdc23c>
   43480:	29410034 	orhi	r5,r5,1024
   43484:	018006c4 	movi	r6,27
   43488:	30c07416 	blt	r6,r3,4365c <__addsf3+0x37c>
   4348c:	01800804 	movi	r6,32
   43490:	30cdc83a 	sub	r6,r6,r3
   43494:	298c983a 	sll	r6,r5,r6
   43498:	28cad83a 	srl	r5,r5,r3
   4349c:	3006c03a 	cmpne	r3,r6,zero
   434a0:	28cab03a 	or	r5,r5,r3
   434a4:	2149883a 	add	r4,r4,r5
   434a8:	20c1002c 	andhi	r3,r4,1024
   434ac:	183fe226 	beq	r3,zero,43438 <__alt_data_end+0xfffdc338>
   434b0:	84000044 	addi	r16,r16,1
   434b4:	00c03fc4 	movi	r3,255
   434b8:	80c05426 	beq	r16,r3,4360c <__addsf3+0x32c>
   434bc:	00bf0034 	movhi	r2,64512
   434c0:	10bfffc4 	addi	r2,r2,-1
   434c4:	20c0004c 	andi	r3,r4,1
   434c8:	2088703a 	and	r4,r4,r2
   434cc:	2008d07a 	srli	r4,r4,1
   434d0:	20c8b03a 	or	r4,r4,r3
   434d4:	003f9906 	br	4333c <__alt_data_end+0xfffdc23c>
   434d8:	0007883a 	mov	r3,zero
   434dc:	0005883a 	mov	r2,zero
   434e0:	01002034 	movhi	r4,128
   434e4:	213fffc4 	addi	r4,r4,-1
   434e8:	1908703a 	and	r4,r3,r4
   434ec:	003fa106 	br	43374 <__alt_data_end+0xfffdc274>
   434f0:	10bfffc4 	addi	r2,r2,-1
   434f4:	103fb926 	beq	r2,zero,433dc <__alt_data_end+0xfffdc2dc>
   434f8:	00c03fc4 	movi	r3,255
   434fc:	80ffaf1e 	bne	r16,r3,433bc <__alt_data_end+0xfffdc2bc>
   43500:	003f8e06 	br	4333c <__alt_data_end+0xfffdc23c>
   43504:	283f8d26 	beq	r5,zero,4333c <__alt_data_end+0xfffdc23c>
   43508:	18ffffc4 	addi	r3,r3,-1
   4350c:	183fe526 	beq	r3,zero,434a4 <__alt_data_end+0xfffdc3a4>
   43510:	01803fc4 	movi	r6,255
   43514:	81bfdb1e 	bne	r16,r6,43484 <__alt_data_end+0xfffdc384>
   43518:	003f8806 	br	4333c <__alt_data_end+0xfffdc23c>
   4351c:	1000201e 	bne	r2,zero,435a0 <__addsf3+0x2c0>
   43520:	80800044 	addi	r2,r16,1
   43524:	10803fcc 	andi	r2,r2,255
   43528:	01800044 	movi	r6,1
   4352c:	3080450e 	bge	r6,r2,43644 <__addsf3+0x364>
   43530:	2165c83a 	sub	r18,r4,r5
   43534:	90c1002c 	andhi	r3,r18,1024
   43538:	18002b26 	beq	r3,zero,435e8 <__addsf3+0x308>
   4353c:	2925c83a 	sub	r18,r5,r4
   43540:	3823883a 	mov	r17,r7
   43544:	003fab06 	br	433f4 <__alt_data_end+0xfffdc2f4>
   43548:	8805883a 	mov	r2,r17
   4354c:	043fffc4 	movi	r16,-1
   43550:	0009883a 	mov	r4,zero
   43554:	003f8706 	br	43374 <__alt_data_end+0xfffdc274>
   43558:	013f0034 	movhi	r4,64512
   4355c:	213fffc4 	addi	r4,r4,-1
   43560:	80a1c83a 	sub	r16,r16,r2
   43564:	9108703a 	and	r4,r18,r4
   43568:	003f7406 	br	4333c <__alt_data_end+0xfffdc23c>
   4356c:	1800411e 	bne	r3,zero,43674 <__addsf3+0x394>
   43570:	80c00044 	addi	r3,r16,1
   43574:	19c03fcc 	andi	r7,r3,255
   43578:	01800044 	movi	r6,1
   4357c:	31c0260e 	bge	r6,r7,43618 <__addsf3+0x338>
   43580:	01803fc4 	movi	r6,255
   43584:	19802126 	beq	r3,r6,4360c <__addsf3+0x32c>
   43588:	2149883a 	add	r4,r4,r5
   4358c:	2008d07a 	srli	r4,r4,1
   43590:	1821883a 	mov	r16,r3
   43594:	003f6906 	br	4333c <__alt_data_end+0xfffdc23c>
   43598:	01400044 	movi	r5,1
   4359c:	003f8f06 	br	433dc <__alt_data_end+0xfffdc2dc>
   435a0:	8000151e 	bne	r16,zero,435f8 <__addsf3+0x318>
   435a4:	20002f26 	beq	r4,zero,43664 <__addsf3+0x384>
   435a8:	0084303a 	nor	r2,zero,r2
   435ac:	10000a26 	beq	r2,zero,435d8 <__addsf3+0x2f8>
   435b0:	00c03fc4 	movi	r3,255
   435b4:	30c02b26 	beq	r6,r3,43664 <__addsf3+0x384>
   435b8:	00c006c4 	movi	r3,27
   435bc:	18806d16 	blt	r3,r2,43774 <__addsf3+0x494>
   435c0:	00c00804 	movi	r3,32
   435c4:	1887c83a 	sub	r3,r3,r2
   435c8:	20c6983a 	sll	r3,r4,r3
   435cc:	2084d83a 	srl	r2,r4,r2
   435d0:	1808c03a 	cmpne	r4,r3,zero
   435d4:	1108b03a 	or	r4,r2,r4
   435d8:	2909c83a 	sub	r4,r5,r4
   435dc:	3021883a 	mov	r16,r6
   435e0:	3823883a 	mov	r17,r7
   435e4:	003f7e06 	br	433e0 <__alt_data_end+0xfffdc2e0>
   435e8:	903f821e 	bne	r18,zero,433f4 <__alt_data_end+0xfffdc2f4>
   435ec:	0005883a 	mov	r2,zero
   435f0:	0021883a 	mov	r16,zero
   435f4:	003fba06 	br	434e0 <__alt_data_end+0xfffdc3e0>
   435f8:	00c03fc4 	movi	r3,255
   435fc:	30c01926 	beq	r6,r3,43664 <__addsf3+0x384>
   43600:	0085c83a 	sub	r2,zero,r2
   43604:	21010034 	orhi	r4,r4,1024
   43608:	003feb06 	br	435b8 <__alt_data_end+0xfffdc4b8>
   4360c:	043fffc4 	movi	r16,-1
   43610:	0009883a 	mov	r4,zero
   43614:	003f5706 	br	43374 <__alt_data_end+0xfffdc274>
   43618:	80004a1e 	bne	r16,zero,43744 <__addsf3+0x464>
   4361c:	20005926 	beq	r4,zero,43784 <__addsf3+0x4a4>
   43620:	283f4626 	beq	r5,zero,4333c <__alt_data_end+0xfffdc23c>
   43624:	2149883a 	add	r4,r4,r5
   43628:	2081002c 	andhi	r2,r4,1024
   4362c:	103f8226 	beq	r2,zero,43438 <__alt_data_end+0xfffdc338>
   43630:	00bf0034 	movhi	r2,64512
   43634:	10bfffc4 	addi	r2,r2,-1
   43638:	3021883a 	mov	r16,r6
   4363c:	2088703a 	and	r4,r4,r2
   43640:	003f3e06 	br	4333c <__alt_data_end+0xfffdc23c>
   43644:	8000121e 	bne	r16,zero,43690 <__addsf3+0x3b0>
   43648:	2000261e 	bne	r4,zero,436e4 <__addsf3+0x404>
   4364c:	283fa226 	beq	r5,zero,434d8 <__alt_data_end+0xfffdc3d8>
   43650:	2809883a 	mov	r4,r5
   43654:	3823883a 	mov	r17,r7
   43658:	003f3806 	br	4333c <__alt_data_end+0xfffdc23c>
   4365c:	01400044 	movi	r5,1
   43660:	003f9006 	br	434a4 <__alt_data_end+0xfffdc3a4>
   43664:	2809883a 	mov	r4,r5
   43668:	3021883a 	mov	r16,r6
   4366c:	3823883a 	mov	r17,r7
   43670:	003f3206 	br	4333c <__alt_data_end+0xfffdc23c>
   43674:	80000c1e 	bne	r16,zero,436a8 <__addsf3+0x3c8>
   43678:	20002f26 	beq	r4,zero,43738 <__addsf3+0x458>
   4367c:	00c6303a 	nor	r3,zero,r3
   43680:	18002b1e 	bne	r3,zero,43730 <__addsf3+0x450>
   43684:	2149883a 	add	r4,r4,r5
   43688:	3021883a 	mov	r16,r6
   4368c:	003f8606 	br	434a8 <__alt_data_end+0xfffdc3a8>
   43690:	20001b1e 	bne	r4,zero,43700 <__addsf3+0x420>
   43694:	28003926 	beq	r5,zero,4377c <__addsf3+0x49c>
   43698:	2809883a 	mov	r4,r5
   4369c:	3823883a 	mov	r17,r7
   436a0:	04003fc4 	movi	r16,255
   436a4:	003f2506 	br	4333c <__alt_data_end+0xfffdc23c>
   436a8:	01c03fc4 	movi	r7,255
   436ac:	31c02226 	beq	r6,r7,43738 <__addsf3+0x458>
   436b0:	00c7c83a 	sub	r3,zero,r3
   436b4:	21010034 	orhi	r4,r4,1024
   436b8:	01c006c4 	movi	r7,27
   436bc:	38c03616 	blt	r7,r3,43798 <__addsf3+0x4b8>
   436c0:	01c00804 	movi	r7,32
   436c4:	38cfc83a 	sub	r7,r7,r3
   436c8:	21ce983a 	sll	r7,r4,r7
   436cc:	20c6d83a 	srl	r3,r4,r3
   436d0:	3808c03a 	cmpne	r4,r7,zero
   436d4:	1906b03a 	or	r3,r3,r4
   436d8:	1949883a 	add	r4,r3,r5
   436dc:	3021883a 	mov	r16,r6
   436e0:	003f7106 	br	434a8 <__alt_data_end+0xfffdc3a8>
   436e4:	283f1526 	beq	r5,zero,4333c <__alt_data_end+0xfffdc23c>
   436e8:	2145c83a 	sub	r2,r4,r5
   436ec:	10c1002c 	andhi	r3,r2,1024
   436f0:	183f4f26 	beq	r3,zero,43430 <__alt_data_end+0xfffdc330>
   436f4:	2909c83a 	sub	r4,r5,r4
   436f8:	3823883a 	mov	r17,r7
   436fc:	003f0f06 	br	4333c <__alt_data_end+0xfffdc23c>
   43700:	28001a26 	beq	r5,zero,4376c <__addsf3+0x48c>
   43704:	2008d0fa 	srli	r4,r4,3
   43708:	2080102c 	andhi	r2,r4,64
   4370c:	10000526 	beq	r2,zero,43724 <__addsf3+0x444>
   43710:	280ad0fa 	srli	r5,r5,3
   43714:	2880102c 	andhi	r2,r5,64
   43718:	1000021e 	bne	r2,zero,43724 <__addsf3+0x444>
   4371c:	2809883a 	mov	r4,r5
   43720:	3823883a 	mov	r17,r7
   43724:	200890fa 	slli	r4,r4,3
   43728:	04003fc4 	movi	r16,255
   4372c:	003f0306 	br	4333c <__alt_data_end+0xfffdc23c>
   43730:	01c03fc4 	movi	r7,255
   43734:	31ffe01e 	bne	r6,r7,436b8 <__alt_data_end+0xfffdc5b8>
   43738:	2809883a 	mov	r4,r5
   4373c:	3021883a 	mov	r16,r6
   43740:	003efe06 	br	4333c <__alt_data_end+0xfffdc23c>
   43744:	20001126 	beq	r4,zero,4378c <__addsf3+0x4ac>
   43748:	28000826 	beq	r5,zero,4376c <__addsf3+0x48c>
   4374c:	2008d0fa 	srli	r4,r4,3
   43750:	2080102c 	andhi	r2,r4,64
   43754:	103ff326 	beq	r2,zero,43724 <__alt_data_end+0xfffdc624>
   43758:	280ad0fa 	srli	r5,r5,3
   4375c:	2880102c 	andhi	r2,r5,64
   43760:	103ff01e 	bne	r2,zero,43724 <__alt_data_end+0xfffdc624>
   43764:	2809883a 	mov	r4,r5
   43768:	003fee06 	br	43724 <__alt_data_end+0xfffdc624>
   4376c:	04003fc4 	movi	r16,255
   43770:	003ef206 	br	4333c <__alt_data_end+0xfffdc23c>
   43774:	01000044 	movi	r4,1
   43778:	003f9706 	br	435d8 <__alt_data_end+0xfffdc4d8>
   4377c:	0005883a 	mov	r2,zero
   43780:	003f3406 	br	43454 <__alt_data_end+0xfffdc354>
   43784:	2809883a 	mov	r4,r5
   43788:	003eec06 	br	4333c <__alt_data_end+0xfffdc23c>
   4378c:	2809883a 	mov	r4,r5
   43790:	04003fc4 	movi	r16,255
   43794:	003ee906 	br	4333c <__alt_data_end+0xfffdc23c>
   43798:	00c00044 	movi	r3,1
   4379c:	003fce06 	br	436d8 <__alt_data_end+0xfffdc5d8>
   437a0:	0005883a 	mov	r2,zero
   437a4:	003f4e06 	br	434e0 <__alt_data_end+0xfffdc3e0>

000437a8 <__divsf3>:
   437a8:	defff504 	addi	sp,sp,-44
   437ac:	200cd5fa 	srli	r6,r4,23
   437b0:	dcc00415 	stw	r19,16(sp)
   437b4:	2026d7fa 	srli	r19,r4,31
   437b8:	00c02034 	movhi	r3,128
   437bc:	dd800715 	stw	r22,28(sp)
   437c0:	dd000515 	stw	r20,20(sp)
   437c4:	dc800315 	stw	r18,12(sp)
   437c8:	18ffffc4 	addi	r3,r3,-1
   437cc:	dfc00a15 	stw	ra,40(sp)
   437d0:	df000915 	stw	fp,36(sp)
   437d4:	ddc00815 	stw	r23,32(sp)
   437d8:	dd400615 	stw	r21,24(sp)
   437dc:	dc400215 	stw	r17,8(sp)
   437e0:	dc000115 	stw	r16,4(sp)
   437e4:	35003fcc 	andi	r20,r6,255
   437e8:	1924703a 	and	r18,r3,r4
   437ec:	9d803fcc 	andi	r22,r19,255
   437f0:	a0005226 	beq	r20,zero,4393c <__divsf3+0x194>
   437f4:	00803fc4 	movi	r2,255
   437f8:	a0802e26 	beq	r20,r2,438b4 <__divsf3+0x10c>
   437fc:	91002034 	orhi	r4,r18,128
   43800:	202490fa 	slli	r18,r4,3
   43804:	a53fe044 	addi	r20,r20,-127
   43808:	0021883a 	mov	r16,zero
   4380c:	002f883a 	mov	r23,zero
   43810:	280cd5fa 	srli	r6,r5,23
   43814:	282ad7fa 	srli	r21,r5,31
   43818:	00c02034 	movhi	r3,128
   4381c:	18ffffc4 	addi	r3,r3,-1
   43820:	31803fcc 	andi	r6,r6,255
   43824:	1962703a 	and	r17,r3,r5
   43828:	af003fcc 	andi	fp,r21,255
   4382c:	30004a26 	beq	r6,zero,43958 <__divsf3+0x1b0>
   43830:	00803fc4 	movi	r2,255
   43834:	30804526 	beq	r6,r2,4394c <__divsf3+0x1a4>
   43838:	89402034 	orhi	r5,r17,128
   4383c:	282290fa 	slli	r17,r5,3
   43840:	31bfe044 	addi	r6,r6,-127
   43844:	000b883a 	mov	r5,zero
   43848:	2c20b03a 	or	r16,r5,r16
   4384c:	802090ba 	slli	r16,r16,2
   43850:	00800134 	movhi	r2,4
   43854:	108e1d04 	addi	r2,r2,14452
   43858:	80a1883a 	add	r16,r16,r2
   4385c:	81000017 	ldw	r4,0(r16)
   43860:	9d46f03a 	xor	r3,r19,r21
   43864:	180f883a 	mov	r7,r3
   43868:	18803fcc 	andi	r2,r3,255
   4386c:	a18dc83a 	sub	r6,r20,r6
   43870:	2000683a 	jmp	r4
   43874:	00043a58 	cmpnei	zero,zero,4329
   43878:	000438dc 	xori	zero,zero,4323
   4387c:	00043a4c 	andi	zero,zero,4329
   43880:	000438c8 	cmpgei	zero,zero,4323
   43884:	00043a4c 	andi	zero,zero,4329
   43888:	00043a24 	muli	zero,zero,4328
   4388c:	00043a4c 	andi	zero,zero,4329
   43890:	000438c8 	cmpgei	zero,zero,4323
   43894:	000438dc 	xori	zero,zero,4323
   43898:	000438dc 	xori	zero,zero,4323
   4389c:	00043a24 	muli	zero,zero,4328
   438a0:	000438c8 	cmpgei	zero,zero,4323
   438a4:	00043b38 	rdprs	zero,zero,4332
   438a8:	00043b38 	rdprs	zero,zero,4332
   438ac:	00043b38 	rdprs	zero,zero,4332
   438b0:	00043aec 	andhi	zero,zero,4331
   438b4:	9000581e 	bne	r18,zero,43a18 <__divsf3+0x270>
   438b8:	04000204 	movi	r16,8
   438bc:	05c00084 	movi	r23,2
   438c0:	003fd306 	br	43810 <__alt_data_end+0xfffdc710>
   438c4:	0023883a 	mov	r17,zero
   438c8:	e02d883a 	mov	r22,fp
   438cc:	282f883a 	mov	r23,r5
   438d0:	00800084 	movi	r2,2
   438d4:	b8808f1e 	bne	r23,r2,43b14 <__divsf3+0x36c>
   438d8:	b005883a 	mov	r2,r22
   438dc:	11c0004c 	andi	r7,r2,1
   438e0:	013fffc4 	movi	r4,-1
   438e4:	000d883a 	mov	r6,zero
   438e8:	21003fcc 	andi	r4,r4,255
   438ec:	200895fa 	slli	r4,r4,23
   438f0:	38803fcc 	andi	r2,r7,255
   438f4:	00c02034 	movhi	r3,128
   438f8:	100497fa 	slli	r2,r2,31
   438fc:	18ffffc4 	addi	r3,r3,-1
   43900:	30c6703a 	and	r3,r6,r3
   43904:	1906b03a 	or	r3,r3,r4
   43908:	1884b03a 	or	r2,r3,r2
   4390c:	dfc00a17 	ldw	ra,40(sp)
   43910:	df000917 	ldw	fp,36(sp)
   43914:	ddc00817 	ldw	r23,32(sp)
   43918:	dd800717 	ldw	r22,28(sp)
   4391c:	dd400617 	ldw	r21,24(sp)
   43920:	dd000517 	ldw	r20,20(sp)
   43924:	dcc00417 	ldw	r19,16(sp)
   43928:	dc800317 	ldw	r18,12(sp)
   4392c:	dc400217 	ldw	r17,8(sp)
   43930:	dc000117 	ldw	r16,4(sp)
   43934:	dec00b04 	addi	sp,sp,44
   43938:	f800283a 	ret
   4393c:	90002b1e 	bne	r18,zero,439ec <__divsf3+0x244>
   43940:	04000104 	movi	r16,4
   43944:	05c00044 	movi	r23,1
   43948:	003fb106 	br	43810 <__alt_data_end+0xfffdc710>
   4394c:	8800251e 	bne	r17,zero,439e4 <__divsf3+0x23c>
   43950:	01400084 	movi	r5,2
   43954:	00000206 	br	43960 <__divsf3+0x1b8>
   43958:	88001a1e 	bne	r17,zero,439c4 <__divsf3+0x21c>
   4395c:	01400044 	movi	r5,1
   43960:	8160b03a 	or	r16,r16,r5
   43964:	802090ba 	slli	r16,r16,2
   43968:	00c00134 	movhi	r3,4
   4396c:	18ce6104 	addi	r3,r3,14724
   43970:	80e1883a 	add	r16,r16,r3
   43974:	80c00017 	ldw	r3,0(r16)
   43978:	9d44f03a 	xor	r2,r19,r21
   4397c:	a18dc83a 	sub	r6,r20,r6
   43980:	1800683a 	jmp	r3
   43984:	000438dc 	xori	zero,zero,4323
   43988:	000438dc 	xori	zero,zero,4323
   4398c:	00043b28 	cmpgeui	zero,zero,4332
   43990:	000438c4 	movi	zero,4323
   43994:	00043b28 	cmpgeui	zero,zero,4332
   43998:	00043a24 	muli	zero,zero,4328
   4399c:	00043b28 	cmpgeui	zero,zero,4332
   439a0:	000438c4 	movi	zero,4323
   439a4:	000438dc 	xori	zero,zero,4323
   439a8:	000438dc 	xori	zero,zero,4323
   439ac:	00043a24 	muli	zero,zero,4328
   439b0:	000438c4 	movi	zero,4323
   439b4:	00043b38 	rdprs	zero,zero,4332
   439b8:	00043b38 	rdprs	zero,zero,4332
   439bc:	00043b38 	rdprs	zero,zero,4332
   439c0:	00043b50 	cmplti	zero,zero,4333
   439c4:	8809883a 	mov	r4,r17
   439c8:	0046f000 	call	46f00 <__clzsi2>
   439cc:	10fffec4 	addi	r3,r2,-5
   439d0:	10801d84 	addi	r2,r2,118
   439d4:	88e2983a 	sll	r17,r17,r3
   439d8:	008dc83a 	sub	r6,zero,r2
   439dc:	000b883a 	mov	r5,zero
   439e0:	003f9906 	br	43848 <__alt_data_end+0xfffdc748>
   439e4:	014000c4 	movi	r5,3
   439e8:	003f9706 	br	43848 <__alt_data_end+0xfffdc748>
   439ec:	9009883a 	mov	r4,r18
   439f0:	d9400015 	stw	r5,0(sp)
   439f4:	0046f000 	call	46f00 <__clzsi2>
   439f8:	10fffec4 	addi	r3,r2,-5
   439fc:	11801d84 	addi	r6,r2,118
   43a00:	90e4983a 	sll	r18,r18,r3
   43a04:	01a9c83a 	sub	r20,zero,r6
   43a08:	0021883a 	mov	r16,zero
   43a0c:	002f883a 	mov	r23,zero
   43a10:	d9400017 	ldw	r5,0(sp)
   43a14:	003f7e06 	br	43810 <__alt_data_end+0xfffdc710>
   43a18:	04000304 	movi	r16,12
   43a1c:	05c000c4 	movi	r23,3
   43a20:	003f7b06 	br	43810 <__alt_data_end+0xfffdc710>
   43a24:	01802034 	movhi	r6,128
   43a28:	000f883a 	mov	r7,zero
   43a2c:	31bfffc4 	addi	r6,r6,-1
   43a30:	013fffc4 	movi	r4,-1
   43a34:	003fac06 	br	438e8 <__alt_data_end+0xfffdc7e8>
   43a38:	01400044 	movi	r5,1
   43a3c:	2909c83a 	sub	r4,r5,r4
   43a40:	00c006c4 	movi	r3,27
   43a44:	19004b0e 	bge	r3,r4,43b74 <__divsf3+0x3cc>
   43a48:	114e703a 	and	r7,r2,r5
   43a4c:	0009883a 	mov	r4,zero
   43a50:	000d883a 	mov	r6,zero
   43a54:	003fa406 	br	438e8 <__alt_data_end+0xfffdc7e8>
   43a58:	9006917a 	slli	r3,r18,5
   43a5c:	8822917a 	slli	r17,r17,5
   43a60:	1c40372e 	bgeu	r3,r17,43b40 <__divsf3+0x398>
   43a64:	31bfffc4 	addi	r6,r6,-1
   43a68:	010006c4 	movi	r4,27
   43a6c:	000b883a 	mov	r5,zero
   43a70:	180f883a 	mov	r7,r3
   43a74:	294b883a 	add	r5,r5,r5
   43a78:	18c7883a 	add	r3,r3,r3
   43a7c:	38000116 	blt	r7,zero,43a84 <__divsf3+0x2dc>
   43a80:	1c400236 	bltu	r3,r17,43a8c <__divsf3+0x2e4>
   43a84:	1c47c83a 	sub	r3,r3,r17
   43a88:	29400054 	ori	r5,r5,1
   43a8c:	213fffc4 	addi	r4,r4,-1
   43a90:	203ff71e 	bne	r4,zero,43a70 <__alt_data_end+0xfffdc970>
   43a94:	1806c03a 	cmpne	r3,r3,zero
   43a98:	1962b03a 	or	r17,r3,r5
   43a9c:	31001fc4 	addi	r4,r6,127
   43aa0:	013fe50e 	bge	zero,r4,43a38 <__alt_data_end+0xfffdc938>
   43aa4:	88c001cc 	andi	r3,r17,7
   43aa8:	18000426 	beq	r3,zero,43abc <__divsf3+0x314>
   43aac:	88c003cc 	andi	r3,r17,15
   43ab0:	01400104 	movi	r5,4
   43ab4:	19400126 	beq	r3,r5,43abc <__divsf3+0x314>
   43ab8:	8963883a 	add	r17,r17,r5
   43abc:	88c2002c 	andhi	r3,r17,2048
   43ac0:	18000426 	beq	r3,zero,43ad4 <__divsf3+0x32c>
   43ac4:	00fe0034 	movhi	r3,63488
   43ac8:	18ffffc4 	addi	r3,r3,-1
   43acc:	31002004 	addi	r4,r6,128
   43ad0:	88e2703a 	and	r17,r17,r3
   43ad4:	00c03f84 	movi	r3,254
   43ad8:	193f8016 	blt	r3,r4,438dc <__alt_data_end+0xfffdc7dc>
   43adc:	880c91ba 	slli	r6,r17,6
   43ae0:	11c0004c 	andi	r7,r2,1
   43ae4:	300cd27a 	srli	r6,r6,9
   43ae8:	003f7f06 	br	438e8 <__alt_data_end+0xfffdc7e8>
   43aec:	9080102c 	andhi	r2,r18,64
   43af0:	10000226 	beq	r2,zero,43afc <__divsf3+0x354>
   43af4:	8880102c 	andhi	r2,r17,64
   43af8:	10001826 	beq	r2,zero,43b5c <__divsf3+0x3b4>
   43afc:	00802034 	movhi	r2,128
   43b00:	91801034 	orhi	r6,r18,64
   43b04:	10bfffc4 	addi	r2,r2,-1
   43b08:	980f883a 	mov	r7,r19
   43b0c:	308c703a 	and	r6,r6,r2
   43b10:	003fc706 	br	43a30 <__alt_data_end+0xfffdc930>
   43b14:	008000c4 	movi	r2,3
   43b18:	b8802d26 	beq	r23,r2,43bd0 <__divsf3+0x428>
   43b1c:	00c00044 	movi	r3,1
   43b20:	b005883a 	mov	r2,r22
   43b24:	b8ffdd1e 	bne	r23,r3,43a9c <__alt_data_end+0xfffdc99c>
   43b28:	11c0004c 	andi	r7,r2,1
   43b2c:	0009883a 	mov	r4,zero
   43b30:	000d883a 	mov	r6,zero
   43b34:	003f6c06 	br	438e8 <__alt_data_end+0xfffdc7e8>
   43b38:	9023883a 	mov	r17,r18
   43b3c:	003f6406 	br	438d0 <__alt_data_end+0xfffdc7d0>
   43b40:	1c47c83a 	sub	r3,r3,r17
   43b44:	01000684 	movi	r4,26
   43b48:	01400044 	movi	r5,1
   43b4c:	003fc806 	br	43a70 <__alt_data_end+0xfffdc970>
   43b50:	9080102c 	andhi	r2,r18,64
   43b54:	103fe926 	beq	r2,zero,43afc <__alt_data_end+0xfffdc9fc>
   43b58:	0023883a 	mov	r17,zero
   43b5c:	00802034 	movhi	r2,128
   43b60:	89801034 	orhi	r6,r17,64
   43b64:	10bfffc4 	addi	r2,r2,-1
   43b68:	a80f883a 	mov	r7,r21
   43b6c:	308c703a 	and	r6,r6,r2
   43b70:	003faf06 	br	43a30 <__alt_data_end+0xfffdc930>
   43b74:	01c00804 	movi	r7,32
   43b78:	390fc83a 	sub	r7,r7,r4
   43b7c:	89ce983a 	sll	r7,r17,r7
   43b80:	890ad83a 	srl	r5,r17,r4
   43b84:	380ec03a 	cmpne	r7,r7,zero
   43b88:	29cab03a 	or	r5,r5,r7
   43b8c:	28c001cc 	andi	r3,r5,7
   43b90:	18000426 	beq	r3,zero,43ba4 <__divsf3+0x3fc>
   43b94:	28c003cc 	andi	r3,r5,15
   43b98:	01000104 	movi	r4,4
   43b9c:	19000126 	beq	r3,r4,43ba4 <__divsf3+0x3fc>
   43ba0:	290b883a 	add	r5,r5,r4
   43ba4:	28c1002c 	andhi	r3,r5,1024
   43ba8:	18000426 	beq	r3,zero,43bbc <__divsf3+0x414>
   43bac:	11c0004c 	andi	r7,r2,1
   43bb0:	01000044 	movi	r4,1
   43bb4:	000d883a 	mov	r6,zero
   43bb8:	003f4b06 	br	438e8 <__alt_data_end+0xfffdc7e8>
   43bbc:	280a91ba 	slli	r5,r5,6
   43bc0:	11c0004c 	andi	r7,r2,1
   43bc4:	0009883a 	mov	r4,zero
   43bc8:	280cd27a 	srli	r6,r5,9
   43bcc:	003f4606 	br	438e8 <__alt_data_end+0xfffdc7e8>
   43bd0:	00802034 	movhi	r2,128
   43bd4:	89801034 	orhi	r6,r17,64
   43bd8:	10bfffc4 	addi	r2,r2,-1
   43bdc:	b00f883a 	mov	r7,r22
   43be0:	308c703a 	and	r6,r6,r2
   43be4:	003f9206 	br	43a30 <__alt_data_end+0xfffdc930>

00043be8 <__gesf2>:
   43be8:	2004d5fa 	srli	r2,r4,23
   43bec:	2806d5fa 	srli	r3,r5,23
   43bf0:	01802034 	movhi	r6,128
   43bf4:	31bfffc4 	addi	r6,r6,-1
   43bf8:	10803fcc 	andi	r2,r2,255
   43bfc:	01c03fc4 	movi	r7,255
   43c00:	3110703a 	and	r8,r6,r4
   43c04:	18c03fcc 	andi	r3,r3,255
   43c08:	314c703a 	and	r6,r6,r5
   43c0c:	2008d7fa 	srli	r4,r4,31
   43c10:	280ad7fa 	srli	r5,r5,31
   43c14:	11c01926 	beq	r2,r7,43c7c <__gesf2+0x94>
   43c18:	01c03fc4 	movi	r7,255
   43c1c:	19c00f26 	beq	r3,r7,43c5c <__gesf2+0x74>
   43c20:	1000061e 	bne	r2,zero,43c3c <__gesf2+0x54>
   43c24:	400f003a 	cmpeq	r7,r8,zero
   43c28:	1800071e 	bne	r3,zero,43c48 <__gesf2+0x60>
   43c2c:	3000061e 	bne	r6,zero,43c48 <__gesf2+0x60>
   43c30:	0005883a 	mov	r2,zero
   43c34:	40000e1e 	bne	r8,zero,43c70 <__gesf2+0x88>
   43c38:	f800283a 	ret
   43c3c:	18000a1e 	bne	r3,zero,43c68 <__gesf2+0x80>
   43c40:	30000b26 	beq	r6,zero,43c70 <__gesf2+0x88>
   43c44:	000f883a 	mov	r7,zero
   43c48:	29403fcc 	andi	r5,r5,255
   43c4c:	38000726 	beq	r7,zero,43c6c <__gesf2+0x84>
   43c50:	28000826 	beq	r5,zero,43c74 <__gesf2+0x8c>
   43c54:	00800044 	movi	r2,1
   43c58:	f800283a 	ret
   43c5c:	303ff026 	beq	r6,zero,43c20 <__alt_data_end+0xfffdcb20>
   43c60:	00bfff84 	movi	r2,-2
   43c64:	f800283a 	ret
   43c68:	29403fcc 	andi	r5,r5,255
   43c6c:	21400526 	beq	r4,r5,43c84 <__gesf2+0x9c>
   43c70:	203ff826 	beq	r4,zero,43c54 <__alt_data_end+0xfffdcb54>
   43c74:	00bfffc4 	movi	r2,-1
   43c78:	f800283a 	ret
   43c7c:	403fe626 	beq	r8,zero,43c18 <__alt_data_end+0xfffdcb18>
   43c80:	003ff706 	br	43c60 <__alt_data_end+0xfffdcb60>
   43c84:	18bffa16 	blt	r3,r2,43c70 <__alt_data_end+0xfffdcb70>
   43c88:	10c00216 	blt	r2,r3,43c94 <__gesf2+0xac>
   43c8c:	323ff836 	bltu	r6,r8,43c70 <__alt_data_end+0xfffdcb70>
   43c90:	4180022e 	bgeu	r8,r6,43c9c <__gesf2+0xb4>
   43c94:	203fef1e 	bne	r4,zero,43c54 <__alt_data_end+0xfffdcb54>
   43c98:	003ff606 	br	43c74 <__alt_data_end+0xfffdcb74>
   43c9c:	0005883a 	mov	r2,zero
   43ca0:	f800283a 	ret

00043ca4 <__lesf2>:
   43ca4:	2004d5fa 	srli	r2,r4,23
   43ca8:	280cd5fa 	srli	r6,r5,23
   43cac:	00c02034 	movhi	r3,128
   43cb0:	18ffffc4 	addi	r3,r3,-1
   43cb4:	10803fcc 	andi	r2,r2,255
   43cb8:	01c03fc4 	movi	r7,255
   43cbc:	1910703a 	and	r8,r3,r4
   43cc0:	31803fcc 	andi	r6,r6,255
   43cc4:	1946703a 	and	r3,r3,r5
   43cc8:	2008d7fa 	srli	r4,r4,31
   43ccc:	280ad7fa 	srli	r5,r5,31
   43cd0:	11c01b26 	beq	r2,r7,43d40 <__lesf2+0x9c>
   43cd4:	01c03fc4 	movi	r7,255
   43cd8:	31c01126 	beq	r6,r7,43d20 <__lesf2+0x7c>
   43cdc:	1000071e 	bne	r2,zero,43cfc <__lesf2+0x58>
   43ce0:	400f003a 	cmpeq	r7,r8,zero
   43ce4:	21003fcc 	andi	r4,r4,255
   43ce8:	3000081e 	bne	r6,zero,43d0c <__lesf2+0x68>
   43cec:	1800071e 	bne	r3,zero,43d0c <__lesf2+0x68>
   43cf0:	0005883a 	mov	r2,zero
   43cf4:	40000f1e 	bne	r8,zero,43d34 <__lesf2+0x90>
   43cf8:	f800283a 	ret
   43cfc:	21003fcc 	andi	r4,r4,255
   43d00:	30000a1e 	bne	r6,zero,43d2c <__lesf2+0x88>
   43d04:	18000b26 	beq	r3,zero,43d34 <__lesf2+0x90>
   43d08:	000f883a 	mov	r7,zero
   43d0c:	29403fcc 	andi	r5,r5,255
   43d10:	38000726 	beq	r7,zero,43d30 <__lesf2+0x8c>
   43d14:	28000826 	beq	r5,zero,43d38 <__lesf2+0x94>
   43d18:	00800044 	movi	r2,1
   43d1c:	f800283a 	ret
   43d20:	183fee26 	beq	r3,zero,43cdc <__alt_data_end+0xfffdcbdc>
   43d24:	00800084 	movi	r2,2
   43d28:	f800283a 	ret
   43d2c:	29403fcc 	andi	r5,r5,255
   43d30:	21400626 	beq	r4,r5,43d4c <__lesf2+0xa8>
   43d34:	203ff826 	beq	r4,zero,43d18 <__alt_data_end+0xfffdcc18>
   43d38:	00bfffc4 	movi	r2,-1
   43d3c:	f800283a 	ret
   43d40:	403fe426 	beq	r8,zero,43cd4 <__alt_data_end+0xfffdcbd4>
   43d44:	00800084 	movi	r2,2
   43d48:	f800283a 	ret
   43d4c:	30bff916 	blt	r6,r2,43d34 <__alt_data_end+0xfffdcc34>
   43d50:	11800216 	blt	r2,r6,43d5c <__lesf2+0xb8>
   43d54:	1a3ff736 	bltu	r3,r8,43d34 <__alt_data_end+0xfffdcc34>
   43d58:	40c0022e 	bgeu	r8,r3,43d64 <__lesf2+0xc0>
   43d5c:	203fee1e 	bne	r4,zero,43d18 <__alt_data_end+0xfffdcc18>
   43d60:	003ff506 	br	43d38 <__alt_data_end+0xfffdcc38>
   43d64:	0005883a 	mov	r2,zero
   43d68:	f800283a 	ret

00043d6c <__mulsf3>:
   43d6c:	defff504 	addi	sp,sp,-44
   43d70:	dc000115 	stw	r16,4(sp)
   43d74:	2020d5fa 	srli	r16,r4,23
   43d78:	dd400615 	stw	r21,24(sp)
   43d7c:	202ad7fa 	srli	r21,r4,31
   43d80:	dc800315 	stw	r18,12(sp)
   43d84:	04802034 	movhi	r18,128
   43d88:	df000915 	stw	fp,36(sp)
   43d8c:	dd000515 	stw	r20,20(sp)
   43d90:	94bfffc4 	addi	r18,r18,-1
   43d94:	dfc00a15 	stw	ra,40(sp)
   43d98:	ddc00815 	stw	r23,32(sp)
   43d9c:	dd800715 	stw	r22,28(sp)
   43da0:	dcc00415 	stw	r19,16(sp)
   43da4:	dc400215 	stw	r17,8(sp)
   43da8:	84003fcc 	andi	r16,r16,255
   43dac:	9124703a 	and	r18,r18,r4
   43db0:	a829883a 	mov	r20,r21
   43db4:	af003fcc 	andi	fp,r21,255
   43db8:	80005426 	beq	r16,zero,43f0c <__mulsf3+0x1a0>
   43dbc:	00803fc4 	movi	r2,255
   43dc0:	80802f26 	beq	r16,r2,43e80 <__mulsf3+0x114>
   43dc4:	91002034 	orhi	r4,r18,128
   43dc8:	202490fa 	slli	r18,r4,3
   43dcc:	843fe044 	addi	r16,r16,-127
   43dd0:	0023883a 	mov	r17,zero
   43dd4:	002f883a 	mov	r23,zero
   43dd8:	2804d5fa 	srli	r2,r5,23
   43ddc:	282cd7fa 	srli	r22,r5,31
   43de0:	01002034 	movhi	r4,128
   43de4:	213fffc4 	addi	r4,r4,-1
   43de8:	10803fcc 	andi	r2,r2,255
   43dec:	2166703a 	and	r19,r4,r5
   43df0:	b1803fcc 	andi	r6,r22,255
   43df4:	10004c26 	beq	r2,zero,43f28 <__mulsf3+0x1bc>
   43df8:	00c03fc4 	movi	r3,255
   43dfc:	10c04726 	beq	r2,r3,43f1c <__mulsf3+0x1b0>
   43e00:	99002034 	orhi	r4,r19,128
   43e04:	202690fa 	slli	r19,r4,3
   43e08:	10bfe044 	addi	r2,r2,-127
   43e0c:	0007883a 	mov	r3,zero
   43e10:	80a1883a 	add	r16,r16,r2
   43e14:	010003c4 	movi	r4,15
   43e18:	1c44b03a 	or	r2,r3,r17
   43e1c:	b56af03a 	xor	r21,r22,r21
   43e20:	81c00044 	addi	r7,r16,1
   43e24:	20806b36 	bltu	r4,r2,43fd4 <__mulsf3+0x268>
   43e28:	100490ba 	slli	r2,r2,2
   43e2c:	01000134 	movhi	r4,4
   43e30:	210f9004 	addi	r4,r4,15936
   43e34:	1105883a 	add	r2,r2,r4
   43e38:	10800017 	ldw	r2,0(r2)
   43e3c:	1000683a 	jmp	r2
   43e40:	00043fd4 	movui	zero,4351
   43e44:	00043e94 	movui	zero,4346
   43e48:	00043e94 	movui	zero,4346
   43e4c:	00043e90 	cmplti	zero,zero,4346
   43e50:	00043fb8 	rdprs	zero,zero,4350
   43e54:	00043fb8 	rdprs	zero,zero,4350
   43e58:	00043fa4 	muli	zero,zero,4350
   43e5c:	00043e90 	cmplti	zero,zero,4346
   43e60:	00043fb8 	rdprs	zero,zero,4350
   43e64:	00043fa4 	muli	zero,zero,4350
   43e68:	00043fb8 	rdprs	zero,zero,4350
   43e6c:	00043e90 	cmplti	zero,zero,4346
   43e70:	00043fc4 	movi	zero,4351
   43e74:	00043fc4 	movi	zero,4351
   43e78:	00043fc4 	movi	zero,4351
   43e7c:	000440a0 	cmpeqi	zero,zero,4354
   43e80:	90003b1e 	bne	r18,zero,43f70 <__mulsf3+0x204>
   43e84:	04400204 	movi	r17,8
   43e88:	05c00084 	movi	r23,2
   43e8c:	003fd206 	br	43dd8 <__alt_data_end+0xfffdccd8>
   43e90:	302b883a 	mov	r21,r6
   43e94:	00800084 	movi	r2,2
   43e98:	18802626 	beq	r3,r2,43f34 <__mulsf3+0x1c8>
   43e9c:	008000c4 	movi	r2,3
   43ea0:	1880ab26 	beq	r3,r2,44150 <__mulsf3+0x3e4>
   43ea4:	00800044 	movi	r2,1
   43ea8:	1880a21e 	bne	r3,r2,44134 <__mulsf3+0x3c8>
   43eac:	a829883a 	mov	r20,r21
   43eb0:	0007883a 	mov	r3,zero
   43eb4:	0009883a 	mov	r4,zero
   43eb8:	18803fcc 	andi	r2,r3,255
   43ebc:	100695fa 	slli	r3,r2,23
   43ec0:	a0803fcc 	andi	r2,r20,255
   43ec4:	100a97fa 	slli	r5,r2,31
   43ec8:	00802034 	movhi	r2,128
   43ecc:	10bfffc4 	addi	r2,r2,-1
   43ed0:	2084703a 	and	r2,r4,r2
   43ed4:	10c4b03a 	or	r2,r2,r3
   43ed8:	1144b03a 	or	r2,r2,r5
   43edc:	dfc00a17 	ldw	ra,40(sp)
   43ee0:	df000917 	ldw	fp,36(sp)
   43ee4:	ddc00817 	ldw	r23,32(sp)
   43ee8:	dd800717 	ldw	r22,28(sp)
   43eec:	dd400617 	ldw	r21,24(sp)
   43ef0:	dd000517 	ldw	r20,20(sp)
   43ef4:	dcc00417 	ldw	r19,16(sp)
   43ef8:	dc800317 	ldw	r18,12(sp)
   43efc:	dc400217 	ldw	r17,8(sp)
   43f00:	dc000117 	ldw	r16,4(sp)
   43f04:	dec00b04 	addi	sp,sp,44
   43f08:	f800283a 	ret
   43f0c:	90000d1e 	bne	r18,zero,43f44 <__mulsf3+0x1d8>
   43f10:	04400104 	movi	r17,4
   43f14:	05c00044 	movi	r23,1
   43f18:	003faf06 	br	43dd8 <__alt_data_end+0xfffdccd8>
   43f1c:	9806c03a 	cmpne	r3,r19,zero
   43f20:	18c00084 	addi	r3,r3,2
   43f24:	003fba06 	br	43e10 <__alt_data_end+0xfffdcd10>
   43f28:	9800141e 	bne	r19,zero,43f7c <__mulsf3+0x210>
   43f2c:	00c00044 	movi	r3,1
   43f30:	003fb706 	br	43e10 <__alt_data_end+0xfffdcd10>
   43f34:	a829883a 	mov	r20,r21
   43f38:	00ffffc4 	movi	r3,-1
   43f3c:	0009883a 	mov	r4,zero
   43f40:	003fdd06 	br	43eb8 <__alt_data_end+0xfffdcdb8>
   43f44:	9009883a 	mov	r4,r18
   43f48:	d9400015 	stw	r5,0(sp)
   43f4c:	0046f000 	call	46f00 <__clzsi2>
   43f50:	10fffec4 	addi	r3,r2,-5
   43f54:	10801d84 	addi	r2,r2,118
   43f58:	90e4983a 	sll	r18,r18,r3
   43f5c:	00a1c83a 	sub	r16,zero,r2
   43f60:	0023883a 	mov	r17,zero
   43f64:	002f883a 	mov	r23,zero
   43f68:	d9400017 	ldw	r5,0(sp)
   43f6c:	003f9a06 	br	43dd8 <__alt_data_end+0xfffdccd8>
   43f70:	04400304 	movi	r17,12
   43f74:	05c000c4 	movi	r23,3
   43f78:	003f9706 	br	43dd8 <__alt_data_end+0xfffdccd8>
   43f7c:	9809883a 	mov	r4,r19
   43f80:	d9800015 	stw	r6,0(sp)
   43f84:	0046f000 	call	46f00 <__clzsi2>
   43f88:	10fffec4 	addi	r3,r2,-5
   43f8c:	10801d84 	addi	r2,r2,118
   43f90:	98e6983a 	sll	r19,r19,r3
   43f94:	0085c83a 	sub	r2,zero,r2
   43f98:	0007883a 	mov	r3,zero
   43f9c:	d9800017 	ldw	r6,0(sp)
   43fa0:	003f9b06 	br	43e10 <__alt_data_end+0xfffdcd10>
   43fa4:	01002034 	movhi	r4,128
   43fa8:	0029883a 	mov	r20,zero
   43fac:	213fffc4 	addi	r4,r4,-1
   43fb0:	00ffffc4 	movi	r3,-1
   43fb4:	003fc006 	br	43eb8 <__alt_data_end+0xfffdcdb8>
   43fb8:	9027883a 	mov	r19,r18
   43fbc:	b807883a 	mov	r3,r23
   43fc0:	003fb406 	br	43e94 <__alt_data_end+0xfffdcd94>
   43fc4:	9027883a 	mov	r19,r18
   43fc8:	e02b883a 	mov	r21,fp
   43fcc:	b807883a 	mov	r3,r23
   43fd0:	003fb006 	br	43e94 <__alt_data_end+0xfffdcd94>
   43fd4:	9004d43a 	srli	r2,r18,16
   43fd8:	9810d43a 	srli	r8,r19,16
   43fdc:	94bfffcc 	andi	r18,r18,65535
   43fe0:	993fffcc 	andi	r4,r19,65535
   43fe4:	910d383a 	mul	r6,r18,r4
   43fe8:	20a7383a 	mul	r19,r4,r2
   43fec:	9225383a 	mul	r18,r18,r8
   43ff0:	3006d43a 	srli	r3,r6,16
   43ff4:	1211383a 	mul	r8,r2,r8
   43ff8:	94e5883a 	add	r18,r18,r19
   43ffc:	1c87883a 	add	r3,r3,r18
   44000:	1cc0022e 	bgeu	r3,r19,4400c <__mulsf3+0x2a0>
   44004:	00800074 	movhi	r2,1
   44008:	4091883a 	add	r8,r8,r2
   4400c:	1804943a 	slli	r2,r3,16
   44010:	31bfffcc 	andi	r6,r6,65535
   44014:	1806d43a 	srli	r3,r3,16
   44018:	1185883a 	add	r2,r2,r6
   4401c:	102691ba 	slli	r19,r2,6
   44020:	1a07883a 	add	r3,r3,r8
   44024:	1004d6ba 	srli	r2,r2,26
   44028:	180891ba 	slli	r4,r3,6
   4402c:	9826c03a 	cmpne	r19,r19,zero
   44030:	9884b03a 	or	r2,r19,r2
   44034:	1126b03a 	or	r19,r2,r4
   44038:	9882002c 	andhi	r2,r19,2048
   4403c:	10000426 	beq	r2,zero,44050 <__mulsf3+0x2e4>
   44040:	9804d07a 	srli	r2,r19,1
   44044:	9900004c 	andi	r4,r19,1
   44048:	3821883a 	mov	r16,r7
   4404c:	1126b03a 	or	r19,r2,r4
   44050:	80c01fc4 	addi	r3,r16,127
   44054:	00c0210e 	bge	zero,r3,440dc <__mulsf3+0x370>
   44058:	988001cc 	andi	r2,r19,7
   4405c:	10000426 	beq	r2,zero,44070 <__mulsf3+0x304>
   44060:	988003cc 	andi	r2,r19,15
   44064:	01000104 	movi	r4,4
   44068:	11000126 	beq	r2,r4,44070 <__mulsf3+0x304>
   4406c:	9927883a 	add	r19,r19,r4
   44070:	9882002c 	andhi	r2,r19,2048
   44074:	10000426 	beq	r2,zero,44088 <__mulsf3+0x31c>
   44078:	00be0034 	movhi	r2,63488
   4407c:	10bfffc4 	addi	r2,r2,-1
   44080:	80c02004 	addi	r3,r16,128
   44084:	98a6703a 	and	r19,r19,r2
   44088:	00803f84 	movi	r2,254
   4408c:	10ffa916 	blt	r2,r3,43f34 <__alt_data_end+0xfffdce34>
   44090:	980891ba 	slli	r4,r19,6
   44094:	a829883a 	mov	r20,r21
   44098:	2008d27a 	srli	r4,r4,9
   4409c:	003f8606 	br	43eb8 <__alt_data_end+0xfffdcdb8>
   440a0:	9080102c 	andhi	r2,r18,64
   440a4:	10000826 	beq	r2,zero,440c8 <__mulsf3+0x35c>
   440a8:	9880102c 	andhi	r2,r19,64
   440ac:	1000061e 	bne	r2,zero,440c8 <__mulsf3+0x35c>
   440b0:	00802034 	movhi	r2,128
   440b4:	99001034 	orhi	r4,r19,64
   440b8:	10bfffc4 	addi	r2,r2,-1
   440bc:	b029883a 	mov	r20,r22
   440c0:	2088703a 	and	r4,r4,r2
   440c4:	003fba06 	br	43fb0 <__alt_data_end+0xfffdceb0>
   440c8:	00802034 	movhi	r2,128
   440cc:	91001034 	orhi	r4,r18,64
   440d0:	10bfffc4 	addi	r2,r2,-1
   440d4:	2088703a 	and	r4,r4,r2
   440d8:	003fb506 	br	43fb0 <__alt_data_end+0xfffdceb0>
   440dc:	00800044 	movi	r2,1
   440e0:	10c7c83a 	sub	r3,r2,r3
   440e4:	008006c4 	movi	r2,27
   440e8:	10ff7016 	blt	r2,r3,43eac <__alt_data_end+0xfffdcdac>
   440ec:	00800804 	movi	r2,32
   440f0:	10c5c83a 	sub	r2,r2,r3
   440f4:	9884983a 	sll	r2,r19,r2
   440f8:	98c6d83a 	srl	r3,r19,r3
   440fc:	1004c03a 	cmpne	r2,r2,zero
   44100:	1884b03a 	or	r2,r3,r2
   44104:	10c001cc 	andi	r3,r2,7
   44108:	18000426 	beq	r3,zero,4411c <__mulsf3+0x3b0>
   4410c:	10c003cc 	andi	r3,r2,15
   44110:	01000104 	movi	r4,4
   44114:	19000126 	beq	r3,r4,4411c <__mulsf3+0x3b0>
   44118:	1105883a 	add	r2,r2,r4
   4411c:	10c1002c 	andhi	r3,r2,1024
   44120:	18000626 	beq	r3,zero,4413c <__mulsf3+0x3d0>
   44124:	a829883a 	mov	r20,r21
   44128:	00c00044 	movi	r3,1
   4412c:	0009883a 	mov	r4,zero
   44130:	003f6106 	br	43eb8 <__alt_data_end+0xfffdcdb8>
   44134:	3821883a 	mov	r16,r7
   44138:	003fc506 	br	44050 <__alt_data_end+0xfffdcf50>
   4413c:	100491ba 	slli	r2,r2,6
   44140:	a829883a 	mov	r20,r21
   44144:	0007883a 	mov	r3,zero
   44148:	1008d27a 	srli	r4,r2,9
   4414c:	003f5a06 	br	43eb8 <__alt_data_end+0xfffdcdb8>
   44150:	00802034 	movhi	r2,128
   44154:	99001034 	orhi	r4,r19,64
   44158:	10bfffc4 	addi	r2,r2,-1
   4415c:	a829883a 	mov	r20,r21
   44160:	2088703a 	and	r4,r4,r2
   44164:	003f9206 	br	43fb0 <__alt_data_end+0xfffdceb0>

00044168 <__subsf3>:
   44168:	defffc04 	addi	sp,sp,-16
   4416c:	280cd5fa 	srli	r6,r5,23
   44170:	dc000015 	stw	r16,0(sp)
   44174:	01c02034 	movhi	r7,128
   44178:	2020d5fa 	srli	r16,r4,23
   4417c:	39ffffc4 	addi	r7,r7,-1
   44180:	3906703a 	and	r3,r7,r4
   44184:	dc400115 	stw	r17,4(sp)
   44188:	394e703a 	and	r7,r7,r5
   4418c:	2022d7fa 	srli	r17,r4,31
   44190:	dfc00315 	stw	ra,12(sp)
   44194:	dc800215 	stw	r18,8(sp)
   44198:	31803fcc 	andi	r6,r6,255
   4419c:	01003fc4 	movi	r4,255
   441a0:	84003fcc 	andi	r16,r16,255
   441a4:	180690fa 	slli	r3,r3,3
   441a8:	2804d7fa 	srli	r2,r5,31
   441ac:	380e90fa 	slli	r7,r7,3
   441b0:	31006d26 	beq	r6,r4,44368 <__subsf3+0x200>
   441b4:	1080005c 	xori	r2,r2,1
   441b8:	8189c83a 	sub	r4,r16,r6
   441bc:	14404f26 	beq	r2,r17,442fc <__subsf3+0x194>
   441c0:	0100770e 	bge	zero,r4,443a0 <__subsf3+0x238>
   441c4:	30001e1e 	bne	r6,zero,44240 <__subsf3+0xd8>
   441c8:	38006a1e 	bne	r7,zero,44374 <__subsf3+0x20c>
   441cc:	188001cc 	andi	r2,r3,7
   441d0:	10000426 	beq	r2,zero,441e4 <__subsf3+0x7c>
   441d4:	188003cc 	andi	r2,r3,15
   441d8:	01000104 	movi	r4,4
   441dc:	11000126 	beq	r2,r4,441e4 <__subsf3+0x7c>
   441e0:	1907883a 	add	r3,r3,r4
   441e4:	1881002c 	andhi	r2,r3,1024
   441e8:	10003926 	beq	r2,zero,442d0 <__subsf3+0x168>
   441ec:	84000044 	addi	r16,r16,1
   441f0:	00803fc4 	movi	r2,255
   441f4:	80807526 	beq	r16,r2,443cc <__subsf3+0x264>
   441f8:	180691ba 	slli	r3,r3,6
   441fc:	8880004c 	andi	r2,r17,1
   44200:	180ad27a 	srli	r5,r3,9
   44204:	84003fcc 	andi	r16,r16,255
   44208:	800695fa 	slli	r3,r16,23
   4420c:	10803fcc 	andi	r2,r2,255
   44210:	01002034 	movhi	r4,128
   44214:	213fffc4 	addi	r4,r4,-1
   44218:	100497fa 	slli	r2,r2,31
   4421c:	2920703a 	and	r16,r5,r4
   44220:	80e0b03a 	or	r16,r16,r3
   44224:	8084b03a 	or	r2,r16,r2
   44228:	dfc00317 	ldw	ra,12(sp)
   4422c:	dc800217 	ldw	r18,8(sp)
   44230:	dc400117 	ldw	r17,4(sp)
   44234:	dc000017 	ldw	r16,0(sp)
   44238:	dec00404 	addi	sp,sp,16
   4423c:	f800283a 	ret
   44240:	00803fc4 	movi	r2,255
   44244:	80bfe126 	beq	r16,r2,441cc <__alt_data_end+0xfffdd0cc>
   44248:	39c10034 	orhi	r7,r7,1024
   4424c:	008006c4 	movi	r2,27
   44250:	11007416 	blt	r2,r4,44424 <__subsf3+0x2bc>
   44254:	00800804 	movi	r2,32
   44258:	1105c83a 	sub	r2,r2,r4
   4425c:	3884983a 	sll	r2,r7,r2
   44260:	390ed83a 	srl	r7,r7,r4
   44264:	1008c03a 	cmpne	r4,r2,zero
   44268:	390eb03a 	or	r7,r7,r4
   4426c:	19c7c83a 	sub	r3,r3,r7
   44270:	1881002c 	andhi	r2,r3,1024
   44274:	10001426 	beq	r2,zero,442c8 <__subsf3+0x160>
   44278:	04810034 	movhi	r18,1024
   4427c:	94bfffc4 	addi	r18,r18,-1
   44280:	1ca4703a 	and	r18,r3,r18
   44284:	9009883a 	mov	r4,r18
   44288:	0046f000 	call	46f00 <__clzsi2>
   4428c:	10bffec4 	addi	r2,r2,-5
   44290:	90a4983a 	sll	r18,r18,r2
   44294:	14005116 	blt	r2,r16,443dc <__subsf3+0x274>
   44298:	1405c83a 	sub	r2,r2,r16
   4429c:	10c00044 	addi	r3,r2,1
   442a0:	00800804 	movi	r2,32
   442a4:	10c5c83a 	sub	r2,r2,r3
   442a8:	9084983a 	sll	r2,r18,r2
   442ac:	90e4d83a 	srl	r18,r18,r3
   442b0:	0021883a 	mov	r16,zero
   442b4:	1006c03a 	cmpne	r3,r2,zero
   442b8:	90c6b03a 	or	r3,r18,r3
   442bc:	003fc306 	br	441cc <__alt_data_end+0xfffdd0cc>
   442c0:	2000e026 	beq	r4,zero,44644 <__subsf3+0x4dc>
   442c4:	2007883a 	mov	r3,r4
   442c8:	188001cc 	andi	r2,r3,7
   442cc:	103fc11e 	bne	r2,zero,441d4 <__alt_data_end+0xfffdd0d4>
   442d0:	180ad0fa 	srli	r5,r3,3
   442d4:	00c03fc4 	movi	r3,255
   442d8:	8880004c 	andi	r2,r17,1
   442dc:	80c0031e 	bne	r16,r3,442ec <__subsf3+0x184>
   442e0:	28006d26 	beq	r5,zero,44498 <__subsf3+0x330>
   442e4:	29401034 	orhi	r5,r5,64
   442e8:	043fffc4 	movi	r16,-1
   442ec:	00c02034 	movhi	r3,128
   442f0:	18ffffc4 	addi	r3,r3,-1
   442f4:	28ca703a 	and	r5,r5,r3
   442f8:	003fc206 	br	44204 <__alt_data_end+0xfffdd104>
   442fc:	01003c0e 	bge	zero,r4,443f0 <__subsf3+0x288>
   44300:	30002126 	beq	r6,zero,44388 <__subsf3+0x220>
   44304:	01403fc4 	movi	r5,255
   44308:	817fb026 	beq	r16,r5,441cc <__alt_data_end+0xfffdd0cc>
   4430c:	39c10034 	orhi	r7,r7,1024
   44310:	014006c4 	movi	r5,27
   44314:	29007416 	blt	r5,r4,444e8 <__subsf3+0x380>
   44318:	01400804 	movi	r5,32
   4431c:	290bc83a 	sub	r5,r5,r4
   44320:	394a983a 	sll	r5,r7,r5
   44324:	390ed83a 	srl	r7,r7,r4
   44328:	2808c03a 	cmpne	r4,r5,zero
   4432c:	390eb03a 	or	r7,r7,r4
   44330:	19c7883a 	add	r3,r3,r7
   44334:	1901002c 	andhi	r4,r3,1024
   44338:	20003826 	beq	r4,zero,4441c <__subsf3+0x2b4>
   4433c:	84000044 	addi	r16,r16,1
   44340:	01003fc4 	movi	r4,255
   44344:	81005426 	beq	r16,r4,44498 <__subsf3+0x330>
   44348:	1023883a 	mov	r17,r2
   4434c:	00bf0034 	movhi	r2,64512
   44350:	10bfffc4 	addi	r2,r2,-1
   44354:	1900004c 	andi	r4,r3,1
   44358:	1886703a 	and	r3,r3,r2
   4435c:	1806d07a 	srli	r3,r3,1
   44360:	1906b03a 	or	r3,r3,r4
   44364:	003f9906 	br	441cc <__alt_data_end+0xfffdd0cc>
   44368:	383f9226 	beq	r7,zero,441b4 <__alt_data_end+0xfffdd0b4>
   4436c:	10803fcc 	andi	r2,r2,255
   44370:	003f9106 	br	441b8 <__alt_data_end+0xfffdd0b8>
   44374:	213fffc4 	addi	r4,r4,-1
   44378:	203fbc26 	beq	r4,zero,4426c <__alt_data_end+0xfffdd16c>
   4437c:	00803fc4 	movi	r2,255
   44380:	80bfb21e 	bne	r16,r2,4424c <__alt_data_end+0xfffdd14c>
   44384:	003f9106 	br	441cc <__alt_data_end+0xfffdd0cc>
   44388:	383f9026 	beq	r7,zero,441cc <__alt_data_end+0xfffdd0cc>
   4438c:	213fffc4 	addi	r4,r4,-1
   44390:	203fe726 	beq	r4,zero,44330 <__alt_data_end+0xfffdd230>
   44394:	01403fc4 	movi	r5,255
   44398:	817fdd1e 	bne	r16,r5,44310 <__alt_data_end+0xfffdd210>
   4439c:	003f8b06 	br	441cc <__alt_data_end+0xfffdd0cc>
   443a0:	2000221e 	bne	r4,zero,4442c <__subsf3+0x2c4>
   443a4:	81000044 	addi	r4,r16,1
   443a8:	21003fcc 	andi	r4,r4,255
   443ac:	01400044 	movi	r5,1
   443b0:	2900470e 	bge	r5,r4,444d0 <__subsf3+0x368>
   443b4:	19e5c83a 	sub	r18,r3,r7
   443b8:	9141002c 	andhi	r5,r18,1024
   443bc:	28002d26 	beq	r5,zero,44474 <__subsf3+0x30c>
   443c0:	38e5c83a 	sub	r18,r7,r3
   443c4:	1023883a 	mov	r17,r2
   443c8:	003fae06 	br	44284 <__alt_data_end+0xfffdd184>
   443cc:	8880004c 	andi	r2,r17,1
   443d0:	043fffc4 	movi	r16,-1
   443d4:	000b883a 	mov	r5,zero
   443d8:	003f8a06 	br	44204 <__alt_data_end+0xfffdd104>
   443dc:	00ff0034 	movhi	r3,64512
   443e0:	18ffffc4 	addi	r3,r3,-1
   443e4:	80a1c83a 	sub	r16,r16,r2
   443e8:	90c6703a 	and	r3,r18,r3
   443ec:	003f7706 	br	441cc <__alt_data_end+0xfffdd0cc>
   443f0:	2000431e 	bne	r4,zero,44500 <__subsf3+0x398>
   443f4:	81000044 	addi	r4,r16,1
   443f8:	21803fcc 	andi	r6,r4,255
   443fc:	01400044 	movi	r5,1
   44400:	2980280e 	bge	r5,r6,444a4 <__subsf3+0x33c>
   44404:	01403fc4 	movi	r5,255
   44408:	21402326 	beq	r4,r5,44498 <__subsf3+0x330>
   4440c:	19c7883a 	add	r3,r3,r7
   44410:	1806d07a 	srli	r3,r3,1
   44414:	2021883a 	mov	r16,r4
   44418:	003f6c06 	br	441cc <__alt_data_end+0xfffdd0cc>
   4441c:	1023883a 	mov	r17,r2
   44420:	003fa906 	br	442c8 <__alt_data_end+0xfffdd1c8>
   44424:	01c00044 	movi	r7,1
   44428:	003f9006 	br	4426c <__alt_data_end+0xfffdd16c>
   4442c:	8000151e 	bne	r16,zero,44484 <__subsf3+0x31c>
   44430:	18002f26 	beq	r3,zero,444f0 <__subsf3+0x388>
   44434:	0108303a 	nor	r4,zero,r4
   44438:	20000a26 	beq	r4,zero,44464 <__subsf3+0x2fc>
   4443c:	01403fc4 	movi	r5,255
   44440:	31402b26 	beq	r6,r5,444f0 <__subsf3+0x388>
   44444:	014006c4 	movi	r5,27
   44448:	29006e16 	blt	r5,r4,44604 <__subsf3+0x49c>
   4444c:	01400804 	movi	r5,32
   44450:	290bc83a 	sub	r5,r5,r4
   44454:	194a983a 	sll	r5,r3,r5
   44458:	1908d83a 	srl	r4,r3,r4
   4445c:	2806c03a 	cmpne	r3,r5,zero
   44460:	20c6b03a 	or	r3,r4,r3
   44464:	38c7c83a 	sub	r3,r7,r3
   44468:	3021883a 	mov	r16,r6
   4446c:	1023883a 	mov	r17,r2
   44470:	003f7f06 	br	44270 <__alt_data_end+0xfffdd170>
   44474:	903f831e 	bne	r18,zero,44284 <__alt_data_end+0xfffdd184>
   44478:	0005883a 	mov	r2,zero
   4447c:	0021883a 	mov	r16,zero
   44480:	003f9a06 	br	442ec <__alt_data_end+0xfffdd1ec>
   44484:	01403fc4 	movi	r5,255
   44488:	31401926 	beq	r6,r5,444f0 <__subsf3+0x388>
   4448c:	0109c83a 	sub	r4,zero,r4
   44490:	18c10034 	orhi	r3,r3,1024
   44494:	003feb06 	br	44444 <__alt_data_end+0xfffdd344>
   44498:	043fffc4 	movi	r16,-1
   4449c:	000b883a 	mov	r5,zero
   444a0:	003f5806 	br	44204 <__alt_data_end+0xfffdd104>
   444a4:	8000481e 	bne	r16,zero,445c8 <__subsf3+0x460>
   444a8:	18006226 	beq	r3,zero,44634 <__subsf3+0x4cc>
   444ac:	383f4726 	beq	r7,zero,441cc <__alt_data_end+0xfffdd0cc>
   444b0:	19c7883a 	add	r3,r3,r7
   444b4:	1881002c 	andhi	r2,r3,1024
   444b8:	103f8326 	beq	r2,zero,442c8 <__alt_data_end+0xfffdd1c8>
   444bc:	00bf0034 	movhi	r2,64512
   444c0:	10bfffc4 	addi	r2,r2,-1
   444c4:	2821883a 	mov	r16,r5
   444c8:	1886703a 	and	r3,r3,r2
   444cc:	003f3f06 	br	441cc <__alt_data_end+0xfffdd0cc>
   444d0:	80001c1e 	bne	r16,zero,44544 <__subsf3+0x3dc>
   444d4:	1800261e 	bne	r3,zero,44570 <__subsf3+0x408>
   444d8:	38004c26 	beq	r7,zero,4460c <__subsf3+0x4a4>
   444dc:	3807883a 	mov	r3,r7
   444e0:	1023883a 	mov	r17,r2
   444e4:	003f3906 	br	441cc <__alt_data_end+0xfffdd0cc>
   444e8:	01c00044 	movi	r7,1
   444ec:	003f9006 	br	44330 <__alt_data_end+0xfffdd230>
   444f0:	3807883a 	mov	r3,r7
   444f4:	3021883a 	mov	r16,r6
   444f8:	1023883a 	mov	r17,r2
   444fc:	003f3306 	br	441cc <__alt_data_end+0xfffdd0cc>
   44500:	8000161e 	bne	r16,zero,4455c <__subsf3+0x3f4>
   44504:	18002d26 	beq	r3,zero,445bc <__subsf3+0x454>
   44508:	0108303a 	nor	r4,zero,r4
   4450c:	20000a26 	beq	r4,zero,44538 <__subsf3+0x3d0>
   44510:	01403fc4 	movi	r5,255
   44514:	31402926 	beq	r6,r5,445bc <__subsf3+0x454>
   44518:	014006c4 	movi	r5,27
   4451c:	29004716 	blt	r5,r4,4463c <__subsf3+0x4d4>
   44520:	01400804 	movi	r5,32
   44524:	290bc83a 	sub	r5,r5,r4
   44528:	194a983a 	sll	r5,r3,r5
   4452c:	1908d83a 	srl	r4,r3,r4
   44530:	2806c03a 	cmpne	r3,r5,zero
   44534:	20c6b03a 	or	r3,r4,r3
   44538:	19c7883a 	add	r3,r3,r7
   4453c:	3021883a 	mov	r16,r6
   44540:	003f7c06 	br	44334 <__alt_data_end+0xfffdd234>
   44544:	1800111e 	bne	r3,zero,4458c <__subsf3+0x424>
   44548:	38003326 	beq	r7,zero,44618 <__subsf3+0x4b0>
   4454c:	3807883a 	mov	r3,r7
   44550:	1023883a 	mov	r17,r2
   44554:	04003fc4 	movi	r16,255
   44558:	003f1c06 	br	441cc <__alt_data_end+0xfffdd0cc>
   4455c:	01403fc4 	movi	r5,255
   44560:	31401626 	beq	r6,r5,445bc <__subsf3+0x454>
   44564:	0109c83a 	sub	r4,zero,r4
   44568:	18c10034 	orhi	r3,r3,1024
   4456c:	003fea06 	br	44518 <__alt_data_end+0xfffdd418>
   44570:	383f1626 	beq	r7,zero,441cc <__alt_data_end+0xfffdd0cc>
   44574:	19c9c83a 	sub	r4,r3,r7
   44578:	2141002c 	andhi	r5,r4,1024
   4457c:	283f5026 	beq	r5,zero,442c0 <__alt_data_end+0xfffdd1c0>
   44580:	38c7c83a 	sub	r3,r7,r3
   44584:	1023883a 	mov	r17,r2
   44588:	003f1006 	br	441cc <__alt_data_end+0xfffdd0cc>
   4458c:	38001b26 	beq	r7,zero,445fc <__subsf3+0x494>
   44590:	1806d0fa 	srli	r3,r3,3
   44594:	1900102c 	andhi	r4,r3,64
   44598:	20000526 	beq	r4,zero,445b0 <__subsf3+0x448>
   4459c:	380ed0fa 	srli	r7,r7,3
   445a0:	3900102c 	andhi	r4,r7,64
   445a4:	2000021e 	bne	r4,zero,445b0 <__subsf3+0x448>
   445a8:	3807883a 	mov	r3,r7
   445ac:	1023883a 	mov	r17,r2
   445b0:	180690fa 	slli	r3,r3,3
   445b4:	04003fc4 	movi	r16,255
   445b8:	003f0406 	br	441cc <__alt_data_end+0xfffdd0cc>
   445bc:	3807883a 	mov	r3,r7
   445c0:	3021883a 	mov	r16,r6
   445c4:	003f0106 	br	441cc <__alt_data_end+0xfffdd0cc>
   445c8:	18001726 	beq	r3,zero,44628 <__subsf3+0x4c0>
   445cc:	38000b26 	beq	r7,zero,445fc <__subsf3+0x494>
   445d0:	1806d0fa 	srli	r3,r3,3
   445d4:	1900102c 	andhi	r4,r3,64
   445d8:	20000426 	beq	r4,zero,445ec <__subsf3+0x484>
   445dc:	380ed0fa 	srli	r7,r7,3
   445e0:	3900102c 	andhi	r4,r7,64
   445e4:	2000011e 	bne	r4,zero,445ec <__subsf3+0x484>
   445e8:	3807883a 	mov	r3,r7
   445ec:	180690fa 	slli	r3,r3,3
   445f0:	1023883a 	mov	r17,r2
   445f4:	04003fc4 	movi	r16,255
   445f8:	003ef406 	br	441cc <__alt_data_end+0xfffdd0cc>
   445fc:	04003fc4 	movi	r16,255
   44600:	003ef206 	br	441cc <__alt_data_end+0xfffdd0cc>
   44604:	00c00044 	movi	r3,1
   44608:	003f9606 	br	44464 <__alt_data_end+0xfffdd364>
   4460c:	000b883a 	mov	r5,zero
   44610:	0005883a 	mov	r2,zero
   44614:	003f3506 	br	442ec <__alt_data_end+0xfffdd1ec>
   44618:	01402034 	movhi	r5,128
   4461c:	297fffc4 	addi	r5,r5,-1
   44620:	0005883a 	mov	r2,zero
   44624:	003f2f06 	br	442e4 <__alt_data_end+0xfffdd1e4>
   44628:	3807883a 	mov	r3,r7
   4462c:	04003fc4 	movi	r16,255
   44630:	003ee606 	br	441cc <__alt_data_end+0xfffdd0cc>
   44634:	3807883a 	mov	r3,r7
   44638:	003ee406 	br	441cc <__alt_data_end+0xfffdd0cc>
   4463c:	00c00044 	movi	r3,1
   44640:	003fbd06 	br	44538 <__alt_data_end+0xfffdd438>
   44644:	0005883a 	mov	r2,zero
   44648:	003f2806 	br	442ec <__alt_data_end+0xfffdd1ec>

0004464c <__fixsfsi>:
   4464c:	200ad5fa 	srli	r5,r4,23
   44650:	00c02034 	movhi	r3,128
   44654:	18ffffc4 	addi	r3,r3,-1
   44658:	29403fcc 	andi	r5,r5,255
   4465c:	00801f84 	movi	r2,126
   44660:	1906703a 	and	r3,r3,r4
   44664:	2008d7fa 	srli	r4,r4,31
   44668:	11400e0e 	bge	r2,r5,446a4 <__fixsfsi+0x58>
   4466c:	00802744 	movi	r2,157
   44670:	11400816 	blt	r2,r5,44694 <__fixsfsi+0x48>
   44674:	00802544 	movi	r2,149
   44678:	18c02034 	orhi	r3,r3,128
   4467c:	11400b0e 	bge	r2,r5,446ac <__fixsfsi+0x60>
   44680:	28bfda84 	addi	r2,r5,-150
   44684:	1884983a 	sll	r2,r3,r2
   44688:	20000726 	beq	r4,zero,446a8 <__fixsfsi+0x5c>
   4468c:	0085c83a 	sub	r2,zero,r2
   44690:	f800283a 	ret
   44694:	00a00034 	movhi	r2,32768
   44698:	10bfffc4 	addi	r2,r2,-1
   4469c:	2085883a 	add	r2,r4,r2
   446a0:	f800283a 	ret
   446a4:	0005883a 	mov	r2,zero
   446a8:	f800283a 	ret
   446ac:	00802584 	movi	r2,150
   446b0:	1145c83a 	sub	r2,r2,r5
   446b4:	1884d83a 	srl	r2,r3,r2
   446b8:	003ff306 	br	44688 <__alt_data_end+0xfffdd588>

000446bc <__floatsisf>:
   446bc:	defffd04 	addi	sp,sp,-12
   446c0:	dfc00215 	stw	ra,8(sp)
   446c4:	dc400115 	stw	r17,4(sp)
   446c8:	dc000015 	stw	r16,0(sp)
   446cc:	20003526 	beq	r4,zero,447a4 <__floatsisf+0xe8>
   446d0:	2021883a 	mov	r16,r4
   446d4:	2022d7fa 	srli	r17,r4,31
   446d8:	20003616 	blt	r4,zero,447b4 <__floatsisf+0xf8>
   446dc:	8009883a 	mov	r4,r16
   446e0:	0046f000 	call	46f00 <__clzsi2>
   446e4:	00c02784 	movi	r3,158
   446e8:	1887c83a 	sub	r3,r3,r2
   446ec:	01002584 	movi	r4,150
   446f0:	20c01416 	blt	r4,r3,44744 <__floatsisf+0x88>
   446f4:	20c9c83a 	sub	r4,r4,r3
   446f8:	8120983a 	sll	r16,r16,r4
   446fc:	00802034 	movhi	r2,128
   44700:	10bfffc4 	addi	r2,r2,-1
   44704:	8809883a 	mov	r4,r17
   44708:	80a0703a 	and	r16,r16,r2
   4470c:	18803fcc 	andi	r2,r3,255
   44710:	100695fa 	slli	r3,r2,23
   44714:	20803fcc 	andi	r2,r4,255
   44718:	100897fa 	slli	r4,r2,31
   4471c:	00802034 	movhi	r2,128
   44720:	10bfffc4 	addi	r2,r2,-1
   44724:	8084703a 	and	r2,r16,r2
   44728:	10c4b03a 	or	r2,r2,r3
   4472c:	1104b03a 	or	r2,r2,r4
   44730:	dfc00217 	ldw	ra,8(sp)
   44734:	dc400117 	ldw	r17,4(sp)
   44738:	dc000017 	ldw	r16,0(sp)
   4473c:	dec00304 	addi	sp,sp,12
   44740:	f800283a 	ret
   44744:	01002644 	movi	r4,153
   44748:	20c01c16 	blt	r4,r3,447bc <__floatsisf+0x100>
   4474c:	20c9c83a 	sub	r4,r4,r3
   44750:	8120983a 	sll	r16,r16,r4
   44754:	013f0034 	movhi	r4,64512
   44758:	213fffc4 	addi	r4,r4,-1
   4475c:	814001cc 	andi	r5,r16,7
   44760:	8108703a 	and	r4,r16,r4
   44764:	28000426 	beq	r5,zero,44778 <__floatsisf+0xbc>
   44768:	840003cc 	andi	r16,r16,15
   4476c:	01400104 	movi	r5,4
   44770:	81400126 	beq	r16,r5,44778 <__floatsisf+0xbc>
   44774:	2149883a 	add	r4,r4,r5
   44778:	2141002c 	andhi	r5,r4,1024
   4477c:	28000526 	beq	r5,zero,44794 <__floatsisf+0xd8>
   44780:	00c027c4 	movi	r3,159
   44784:	1887c83a 	sub	r3,r3,r2
   44788:	00bf0034 	movhi	r2,64512
   4478c:	10bfffc4 	addi	r2,r2,-1
   44790:	2088703a 	and	r4,r4,r2
   44794:	202091ba 	slli	r16,r4,6
   44798:	8809883a 	mov	r4,r17
   4479c:	8020d27a 	srli	r16,r16,9
   447a0:	003fda06 	br	4470c <__alt_data_end+0xfffdd60c>
   447a4:	0009883a 	mov	r4,zero
   447a8:	0007883a 	mov	r3,zero
   447ac:	0021883a 	mov	r16,zero
   447b0:	003fd606 	br	4470c <__alt_data_end+0xfffdd60c>
   447b4:	0121c83a 	sub	r16,zero,r4
   447b8:	003fc806 	br	446dc <__alt_data_end+0xfffdd5dc>
   447bc:	01002e44 	movi	r4,185
   447c0:	20c9c83a 	sub	r4,r4,r3
   447c4:	01400144 	movi	r5,5
   447c8:	8108983a 	sll	r4,r16,r4
   447cc:	288bc83a 	sub	r5,r5,r2
   447d0:	8160d83a 	srl	r16,r16,r5
   447d4:	2008c03a 	cmpne	r4,r4,zero
   447d8:	8120b03a 	or	r16,r16,r4
   447dc:	003fdd06 	br	44754 <__alt_data_end+0xfffdd654>

000447e0 <__adddf3>:
   447e0:	02c00434 	movhi	r11,16
   447e4:	5affffc4 	addi	r11,r11,-1
   447e8:	2806d7fa 	srli	r3,r5,31
   447ec:	2ad4703a 	and	r10,r5,r11
   447f0:	3ad2703a 	and	r9,r7,r11
   447f4:	3804d53a 	srli	r2,r7,20
   447f8:	3018d77a 	srli	r12,r6,29
   447fc:	280ad53a 	srli	r5,r5,20
   44800:	501490fa 	slli	r10,r10,3
   44804:	2010d77a 	srli	r8,r4,29
   44808:	481290fa 	slli	r9,r9,3
   4480c:	380ed7fa 	srli	r7,r7,31
   44810:	defffb04 	addi	sp,sp,-20
   44814:	dc800215 	stw	r18,8(sp)
   44818:	dc400115 	stw	r17,4(sp)
   4481c:	dc000015 	stw	r16,0(sp)
   44820:	dfc00415 	stw	ra,16(sp)
   44824:	dcc00315 	stw	r19,12(sp)
   44828:	1c803fcc 	andi	r18,r3,255
   4482c:	2c01ffcc 	andi	r16,r5,2047
   44830:	5210b03a 	or	r8,r10,r8
   44834:	202290fa 	slli	r17,r4,3
   44838:	1081ffcc 	andi	r2,r2,2047
   4483c:	4b12b03a 	or	r9,r9,r12
   44840:	300c90fa 	slli	r6,r6,3
   44844:	91c07526 	beq	r18,r7,44a1c <__adddf3+0x23c>
   44848:	8087c83a 	sub	r3,r16,r2
   4484c:	00c0ab0e 	bge	zero,r3,44afc <__adddf3+0x31c>
   44850:	10002a1e 	bne	r2,zero,448fc <__adddf3+0x11c>
   44854:	4984b03a 	or	r2,r9,r6
   44858:	1000961e 	bne	r2,zero,44ab4 <__adddf3+0x2d4>
   4485c:	888001cc 	andi	r2,r17,7
   44860:	10000726 	beq	r2,zero,44880 <__adddf3+0xa0>
   44864:	888003cc 	andi	r2,r17,15
   44868:	00c00104 	movi	r3,4
   4486c:	10c00426 	beq	r2,r3,44880 <__adddf3+0xa0>
   44870:	88c7883a 	add	r3,r17,r3
   44874:	1c63803a 	cmpltu	r17,r3,r17
   44878:	4451883a 	add	r8,r8,r17
   4487c:	1823883a 	mov	r17,r3
   44880:	4080202c 	andhi	r2,r8,128
   44884:	10005926 	beq	r2,zero,449ec <__adddf3+0x20c>
   44888:	84000044 	addi	r16,r16,1
   4488c:	0081ffc4 	movi	r2,2047
   44890:	8080ba26 	beq	r16,r2,44b7c <__adddf3+0x39c>
   44894:	00bfe034 	movhi	r2,65408
   44898:	10bfffc4 	addi	r2,r2,-1
   4489c:	4090703a 	and	r8,r8,r2
   448a0:	4004977a 	slli	r2,r8,29
   448a4:	4010927a 	slli	r8,r8,9
   448a8:	8822d0fa 	srli	r17,r17,3
   448ac:	8401ffcc 	andi	r16,r16,2047
   448b0:	4010d33a 	srli	r8,r8,12
   448b4:	9007883a 	mov	r3,r18
   448b8:	1444b03a 	or	r2,r2,r17
   448bc:	8401ffcc 	andi	r16,r16,2047
   448c0:	8020953a 	slli	r16,r16,20
   448c4:	18c03fcc 	andi	r3,r3,255
   448c8:	01000434 	movhi	r4,16
   448cc:	213fffc4 	addi	r4,r4,-1
   448d0:	180697fa 	slli	r3,r3,31
   448d4:	4110703a 	and	r8,r8,r4
   448d8:	4410b03a 	or	r8,r8,r16
   448dc:	40c6b03a 	or	r3,r8,r3
   448e0:	dfc00417 	ldw	ra,16(sp)
   448e4:	dcc00317 	ldw	r19,12(sp)
   448e8:	dc800217 	ldw	r18,8(sp)
   448ec:	dc400117 	ldw	r17,4(sp)
   448f0:	dc000017 	ldw	r16,0(sp)
   448f4:	dec00504 	addi	sp,sp,20
   448f8:	f800283a 	ret
   448fc:	0081ffc4 	movi	r2,2047
   44900:	80bfd626 	beq	r16,r2,4485c <__alt_data_end+0xfffdd75c>
   44904:	4a402034 	orhi	r9,r9,128
   44908:	00800e04 	movi	r2,56
   4490c:	10c09f16 	blt	r2,r3,44b8c <__adddf3+0x3ac>
   44910:	008007c4 	movi	r2,31
   44914:	10c0c216 	blt	r2,r3,44c20 <__adddf3+0x440>
   44918:	00800804 	movi	r2,32
   4491c:	10c5c83a 	sub	r2,r2,r3
   44920:	488a983a 	sll	r5,r9,r2
   44924:	30c8d83a 	srl	r4,r6,r3
   44928:	3084983a 	sll	r2,r6,r2
   4492c:	48c6d83a 	srl	r3,r9,r3
   44930:	290cb03a 	or	r6,r5,r4
   44934:	1004c03a 	cmpne	r2,r2,zero
   44938:	308cb03a 	or	r6,r6,r2
   4493c:	898dc83a 	sub	r6,r17,r6
   44940:	89a3803a 	cmpltu	r17,r17,r6
   44944:	40d1c83a 	sub	r8,r8,r3
   44948:	4451c83a 	sub	r8,r8,r17
   4494c:	3023883a 	mov	r17,r6
   44950:	4080202c 	andhi	r2,r8,128
   44954:	10002326 	beq	r2,zero,449e4 <__adddf3+0x204>
   44958:	04c02034 	movhi	r19,128
   4495c:	9cffffc4 	addi	r19,r19,-1
   44960:	44e6703a 	and	r19,r8,r19
   44964:	98007626 	beq	r19,zero,44b40 <__adddf3+0x360>
   44968:	9809883a 	mov	r4,r19
   4496c:	0046f000 	call	46f00 <__clzsi2>
   44970:	10fffe04 	addi	r3,r2,-8
   44974:	010007c4 	movi	r4,31
   44978:	20c07716 	blt	r4,r3,44b58 <__adddf3+0x378>
   4497c:	00800804 	movi	r2,32
   44980:	10c5c83a 	sub	r2,r2,r3
   44984:	8884d83a 	srl	r2,r17,r2
   44988:	98d0983a 	sll	r8,r19,r3
   4498c:	88e2983a 	sll	r17,r17,r3
   44990:	1204b03a 	or	r2,r2,r8
   44994:	1c007416 	blt	r3,r16,44b68 <__adddf3+0x388>
   44998:	1c21c83a 	sub	r16,r3,r16
   4499c:	82000044 	addi	r8,r16,1
   449a0:	00c007c4 	movi	r3,31
   449a4:	1a009116 	blt	r3,r8,44bec <__adddf3+0x40c>
   449a8:	00c00804 	movi	r3,32
   449ac:	1a07c83a 	sub	r3,r3,r8
   449b0:	8a08d83a 	srl	r4,r17,r8
   449b4:	88e2983a 	sll	r17,r17,r3
   449b8:	10c6983a 	sll	r3,r2,r3
   449bc:	1210d83a 	srl	r8,r2,r8
   449c0:	8804c03a 	cmpne	r2,r17,zero
   449c4:	1906b03a 	or	r3,r3,r4
   449c8:	18a2b03a 	or	r17,r3,r2
   449cc:	0021883a 	mov	r16,zero
   449d0:	003fa206 	br	4485c <__alt_data_end+0xfffdd75c>
   449d4:	1890b03a 	or	r8,r3,r2
   449d8:	40017d26 	beq	r8,zero,44fd0 <__adddf3+0x7f0>
   449dc:	1011883a 	mov	r8,r2
   449e0:	1823883a 	mov	r17,r3
   449e4:	888001cc 	andi	r2,r17,7
   449e8:	103f9e1e 	bne	r2,zero,44864 <__alt_data_end+0xfffdd764>
   449ec:	4004977a 	slli	r2,r8,29
   449f0:	8822d0fa 	srli	r17,r17,3
   449f4:	4010d0fa 	srli	r8,r8,3
   449f8:	9007883a 	mov	r3,r18
   449fc:	1444b03a 	or	r2,r2,r17
   44a00:	0101ffc4 	movi	r4,2047
   44a04:	81002426 	beq	r16,r4,44a98 <__adddf3+0x2b8>
   44a08:	8120703a 	and	r16,r16,r4
   44a0c:	01000434 	movhi	r4,16
   44a10:	213fffc4 	addi	r4,r4,-1
   44a14:	4110703a 	and	r8,r8,r4
   44a18:	003fa806 	br	448bc <__alt_data_end+0xfffdd7bc>
   44a1c:	8089c83a 	sub	r4,r16,r2
   44a20:	01005e0e 	bge	zero,r4,44b9c <__adddf3+0x3bc>
   44a24:	10002b26 	beq	r2,zero,44ad4 <__adddf3+0x2f4>
   44a28:	0081ffc4 	movi	r2,2047
   44a2c:	80bf8b26 	beq	r16,r2,4485c <__alt_data_end+0xfffdd75c>
   44a30:	4a402034 	orhi	r9,r9,128
   44a34:	00800e04 	movi	r2,56
   44a38:	1100a40e 	bge	r2,r4,44ccc <__adddf3+0x4ec>
   44a3c:	498cb03a 	or	r6,r9,r6
   44a40:	300ac03a 	cmpne	r5,r6,zero
   44a44:	0013883a 	mov	r9,zero
   44a48:	2c4b883a 	add	r5,r5,r17
   44a4c:	2c63803a 	cmpltu	r17,r5,r17
   44a50:	4a11883a 	add	r8,r9,r8
   44a54:	8a11883a 	add	r8,r17,r8
   44a58:	2823883a 	mov	r17,r5
   44a5c:	4080202c 	andhi	r2,r8,128
   44a60:	103fe026 	beq	r2,zero,449e4 <__alt_data_end+0xfffdd8e4>
   44a64:	84000044 	addi	r16,r16,1
   44a68:	0081ffc4 	movi	r2,2047
   44a6c:	8080d226 	beq	r16,r2,44db8 <__adddf3+0x5d8>
   44a70:	00bfe034 	movhi	r2,65408
   44a74:	10bfffc4 	addi	r2,r2,-1
   44a78:	4090703a 	and	r8,r8,r2
   44a7c:	880ad07a 	srli	r5,r17,1
   44a80:	400897fa 	slli	r4,r8,31
   44a84:	88c0004c 	andi	r3,r17,1
   44a88:	28e2b03a 	or	r17,r5,r3
   44a8c:	4010d07a 	srli	r8,r8,1
   44a90:	2462b03a 	or	r17,r4,r17
   44a94:	003f7106 	br	4485c <__alt_data_end+0xfffdd75c>
   44a98:	4088b03a 	or	r4,r8,r2
   44a9c:	20014526 	beq	r4,zero,44fb4 <__adddf3+0x7d4>
   44aa0:	01000434 	movhi	r4,16
   44aa4:	42000234 	orhi	r8,r8,8
   44aa8:	213fffc4 	addi	r4,r4,-1
   44aac:	4110703a 	and	r8,r8,r4
   44ab0:	003f8206 	br	448bc <__alt_data_end+0xfffdd7bc>
   44ab4:	18ffffc4 	addi	r3,r3,-1
   44ab8:	1800491e 	bne	r3,zero,44be0 <__adddf3+0x400>
   44abc:	898bc83a 	sub	r5,r17,r6
   44ac0:	8963803a 	cmpltu	r17,r17,r5
   44ac4:	4251c83a 	sub	r8,r8,r9
   44ac8:	4451c83a 	sub	r8,r8,r17
   44acc:	2823883a 	mov	r17,r5
   44ad0:	003f9f06 	br	44950 <__alt_data_end+0xfffdd850>
   44ad4:	4984b03a 	or	r2,r9,r6
   44ad8:	103f6026 	beq	r2,zero,4485c <__alt_data_end+0xfffdd75c>
   44adc:	213fffc4 	addi	r4,r4,-1
   44ae0:	2000931e 	bne	r4,zero,44d30 <__adddf3+0x550>
   44ae4:	898d883a 	add	r6,r17,r6
   44ae8:	3463803a 	cmpltu	r17,r6,r17
   44aec:	4251883a 	add	r8,r8,r9
   44af0:	8a11883a 	add	r8,r17,r8
   44af4:	3023883a 	mov	r17,r6
   44af8:	003fd806 	br	44a5c <__alt_data_end+0xfffdd95c>
   44afc:	1800541e 	bne	r3,zero,44c50 <__adddf3+0x470>
   44b00:	80800044 	addi	r2,r16,1
   44b04:	1081ffcc 	andi	r2,r2,2047
   44b08:	00c00044 	movi	r3,1
   44b0c:	1880a00e 	bge	r3,r2,44d90 <__adddf3+0x5b0>
   44b10:	8989c83a 	sub	r4,r17,r6
   44b14:	8905803a 	cmpltu	r2,r17,r4
   44b18:	4267c83a 	sub	r19,r8,r9
   44b1c:	98a7c83a 	sub	r19,r19,r2
   44b20:	9880202c 	andhi	r2,r19,128
   44b24:	10006326 	beq	r2,zero,44cb4 <__adddf3+0x4d4>
   44b28:	3463c83a 	sub	r17,r6,r17
   44b2c:	4a07c83a 	sub	r3,r9,r8
   44b30:	344d803a 	cmpltu	r6,r6,r17
   44b34:	19a7c83a 	sub	r19,r3,r6
   44b38:	3825883a 	mov	r18,r7
   44b3c:	983f8a1e 	bne	r19,zero,44968 <__alt_data_end+0xfffdd868>
   44b40:	8809883a 	mov	r4,r17
   44b44:	0046f000 	call	46f00 <__clzsi2>
   44b48:	10800804 	addi	r2,r2,32
   44b4c:	10fffe04 	addi	r3,r2,-8
   44b50:	010007c4 	movi	r4,31
   44b54:	20ff890e 	bge	r4,r3,4497c <__alt_data_end+0xfffdd87c>
   44b58:	10bff604 	addi	r2,r2,-40
   44b5c:	8884983a 	sll	r2,r17,r2
   44b60:	0023883a 	mov	r17,zero
   44b64:	1c3f8c0e 	bge	r3,r16,44998 <__alt_data_end+0xfffdd898>
   44b68:	023fe034 	movhi	r8,65408
   44b6c:	423fffc4 	addi	r8,r8,-1
   44b70:	80e1c83a 	sub	r16,r16,r3
   44b74:	1210703a 	and	r8,r2,r8
   44b78:	003f3806 	br	4485c <__alt_data_end+0xfffdd75c>
   44b7c:	9007883a 	mov	r3,r18
   44b80:	0011883a 	mov	r8,zero
   44b84:	0005883a 	mov	r2,zero
   44b88:	003f4c06 	br	448bc <__alt_data_end+0xfffdd7bc>
   44b8c:	498cb03a 	or	r6,r9,r6
   44b90:	300cc03a 	cmpne	r6,r6,zero
   44b94:	0007883a 	mov	r3,zero
   44b98:	003f6806 	br	4493c <__alt_data_end+0xfffdd83c>
   44b9c:	20009c1e 	bne	r4,zero,44e10 <__adddf3+0x630>
   44ba0:	80800044 	addi	r2,r16,1
   44ba4:	1141ffcc 	andi	r5,r2,2047
   44ba8:	01000044 	movi	r4,1
   44bac:	2140670e 	bge	r4,r5,44d4c <__adddf3+0x56c>
   44bb0:	0101ffc4 	movi	r4,2047
   44bb4:	11007f26 	beq	r2,r4,44db4 <__adddf3+0x5d4>
   44bb8:	898d883a 	add	r6,r17,r6
   44bbc:	4247883a 	add	r3,r8,r9
   44bc0:	3451803a 	cmpltu	r8,r6,r17
   44bc4:	40d1883a 	add	r8,r8,r3
   44bc8:	402297fa 	slli	r17,r8,31
   44bcc:	300cd07a 	srli	r6,r6,1
   44bd0:	4010d07a 	srli	r8,r8,1
   44bd4:	1021883a 	mov	r16,r2
   44bd8:	89a2b03a 	or	r17,r17,r6
   44bdc:	003f1f06 	br	4485c <__alt_data_end+0xfffdd75c>
   44be0:	0081ffc4 	movi	r2,2047
   44be4:	80bf481e 	bne	r16,r2,44908 <__alt_data_end+0xfffdd808>
   44be8:	003f1c06 	br	4485c <__alt_data_end+0xfffdd75c>
   44bec:	843ff844 	addi	r16,r16,-31
   44bf0:	01000804 	movi	r4,32
   44bf4:	1406d83a 	srl	r3,r2,r16
   44bf8:	41005026 	beq	r8,r4,44d3c <__adddf3+0x55c>
   44bfc:	01001004 	movi	r4,64
   44c00:	2211c83a 	sub	r8,r4,r8
   44c04:	1204983a 	sll	r2,r2,r8
   44c08:	88a2b03a 	or	r17,r17,r2
   44c0c:	8822c03a 	cmpne	r17,r17,zero
   44c10:	1c62b03a 	or	r17,r3,r17
   44c14:	0011883a 	mov	r8,zero
   44c18:	0021883a 	mov	r16,zero
   44c1c:	003f7106 	br	449e4 <__alt_data_end+0xfffdd8e4>
   44c20:	193ff804 	addi	r4,r3,-32
   44c24:	00800804 	movi	r2,32
   44c28:	4908d83a 	srl	r4,r9,r4
   44c2c:	18804526 	beq	r3,r2,44d44 <__adddf3+0x564>
   44c30:	00801004 	movi	r2,64
   44c34:	10c5c83a 	sub	r2,r2,r3
   44c38:	4886983a 	sll	r3,r9,r2
   44c3c:	198cb03a 	or	r6,r3,r6
   44c40:	300cc03a 	cmpne	r6,r6,zero
   44c44:	218cb03a 	or	r6,r4,r6
   44c48:	0007883a 	mov	r3,zero
   44c4c:	003f3b06 	br	4493c <__alt_data_end+0xfffdd83c>
   44c50:	80002a26 	beq	r16,zero,44cfc <__adddf3+0x51c>
   44c54:	0101ffc4 	movi	r4,2047
   44c58:	11006826 	beq	r2,r4,44dfc <__adddf3+0x61c>
   44c5c:	00c7c83a 	sub	r3,zero,r3
   44c60:	42002034 	orhi	r8,r8,128
   44c64:	01000e04 	movi	r4,56
   44c68:	20c07c16 	blt	r4,r3,44e5c <__adddf3+0x67c>
   44c6c:	010007c4 	movi	r4,31
   44c70:	20c0da16 	blt	r4,r3,44fdc <__adddf3+0x7fc>
   44c74:	01000804 	movi	r4,32
   44c78:	20c9c83a 	sub	r4,r4,r3
   44c7c:	4114983a 	sll	r10,r8,r4
   44c80:	88cad83a 	srl	r5,r17,r3
   44c84:	8908983a 	sll	r4,r17,r4
   44c88:	40c6d83a 	srl	r3,r8,r3
   44c8c:	5162b03a 	or	r17,r10,r5
   44c90:	2008c03a 	cmpne	r4,r4,zero
   44c94:	8922b03a 	or	r17,r17,r4
   44c98:	3463c83a 	sub	r17,r6,r17
   44c9c:	48c7c83a 	sub	r3,r9,r3
   44ca0:	344d803a 	cmpltu	r6,r6,r17
   44ca4:	1991c83a 	sub	r8,r3,r6
   44ca8:	1021883a 	mov	r16,r2
   44cac:	3825883a 	mov	r18,r7
   44cb0:	003f2706 	br	44950 <__alt_data_end+0xfffdd850>
   44cb4:	24d0b03a 	or	r8,r4,r19
   44cb8:	40001b1e 	bne	r8,zero,44d28 <__adddf3+0x548>
   44cbc:	0005883a 	mov	r2,zero
   44cc0:	0007883a 	mov	r3,zero
   44cc4:	0021883a 	mov	r16,zero
   44cc8:	003f4d06 	br	44a00 <__alt_data_end+0xfffdd900>
   44ccc:	008007c4 	movi	r2,31
   44cd0:	11003c16 	blt	r2,r4,44dc4 <__adddf3+0x5e4>
   44cd4:	00800804 	movi	r2,32
   44cd8:	1105c83a 	sub	r2,r2,r4
   44cdc:	488e983a 	sll	r7,r9,r2
   44ce0:	310ad83a 	srl	r5,r6,r4
   44ce4:	3084983a 	sll	r2,r6,r2
   44ce8:	4912d83a 	srl	r9,r9,r4
   44cec:	394ab03a 	or	r5,r7,r5
   44cf0:	1004c03a 	cmpne	r2,r2,zero
   44cf4:	288ab03a 	or	r5,r5,r2
   44cf8:	003f5306 	br	44a48 <__alt_data_end+0xfffdd948>
   44cfc:	4448b03a 	or	r4,r8,r17
   44d00:	20003e26 	beq	r4,zero,44dfc <__adddf3+0x61c>
   44d04:	00c6303a 	nor	r3,zero,r3
   44d08:	18003a1e 	bne	r3,zero,44df4 <__adddf3+0x614>
   44d0c:	3463c83a 	sub	r17,r6,r17
   44d10:	4a07c83a 	sub	r3,r9,r8
   44d14:	344d803a 	cmpltu	r6,r6,r17
   44d18:	1991c83a 	sub	r8,r3,r6
   44d1c:	1021883a 	mov	r16,r2
   44d20:	3825883a 	mov	r18,r7
   44d24:	003f0a06 	br	44950 <__alt_data_end+0xfffdd850>
   44d28:	2023883a 	mov	r17,r4
   44d2c:	003f0d06 	br	44964 <__alt_data_end+0xfffdd864>
   44d30:	0081ffc4 	movi	r2,2047
   44d34:	80bf3f1e 	bne	r16,r2,44a34 <__alt_data_end+0xfffdd934>
   44d38:	003ec806 	br	4485c <__alt_data_end+0xfffdd75c>
   44d3c:	0005883a 	mov	r2,zero
   44d40:	003fb106 	br	44c08 <__alt_data_end+0xfffddb08>
   44d44:	0007883a 	mov	r3,zero
   44d48:	003fbc06 	br	44c3c <__alt_data_end+0xfffddb3c>
   44d4c:	4444b03a 	or	r2,r8,r17
   44d50:	8000871e 	bne	r16,zero,44f70 <__adddf3+0x790>
   44d54:	1000ba26 	beq	r2,zero,45040 <__adddf3+0x860>
   44d58:	4984b03a 	or	r2,r9,r6
   44d5c:	103ebf26 	beq	r2,zero,4485c <__alt_data_end+0xfffdd75c>
   44d60:	8985883a 	add	r2,r17,r6
   44d64:	4247883a 	add	r3,r8,r9
   44d68:	1451803a 	cmpltu	r8,r2,r17
   44d6c:	40d1883a 	add	r8,r8,r3
   44d70:	40c0202c 	andhi	r3,r8,128
   44d74:	1023883a 	mov	r17,r2
   44d78:	183f1a26 	beq	r3,zero,449e4 <__alt_data_end+0xfffdd8e4>
   44d7c:	00bfe034 	movhi	r2,65408
   44d80:	10bfffc4 	addi	r2,r2,-1
   44d84:	2021883a 	mov	r16,r4
   44d88:	4090703a 	and	r8,r8,r2
   44d8c:	003eb306 	br	4485c <__alt_data_end+0xfffdd75c>
   44d90:	4444b03a 	or	r2,r8,r17
   44d94:	8000291e 	bne	r16,zero,44e3c <__adddf3+0x65c>
   44d98:	10004b1e 	bne	r2,zero,44ec8 <__adddf3+0x6e8>
   44d9c:	4990b03a 	or	r8,r9,r6
   44da0:	40008b26 	beq	r8,zero,44fd0 <__adddf3+0x7f0>
   44da4:	4811883a 	mov	r8,r9
   44da8:	3023883a 	mov	r17,r6
   44dac:	3825883a 	mov	r18,r7
   44db0:	003eaa06 	br	4485c <__alt_data_end+0xfffdd75c>
   44db4:	1021883a 	mov	r16,r2
   44db8:	0011883a 	mov	r8,zero
   44dbc:	0005883a 	mov	r2,zero
   44dc0:	003f0f06 	br	44a00 <__alt_data_end+0xfffdd900>
   44dc4:	217ff804 	addi	r5,r4,-32
   44dc8:	00800804 	movi	r2,32
   44dcc:	494ad83a 	srl	r5,r9,r5
   44dd0:	20807d26 	beq	r4,r2,44fc8 <__adddf3+0x7e8>
   44dd4:	00801004 	movi	r2,64
   44dd8:	1109c83a 	sub	r4,r2,r4
   44ddc:	4912983a 	sll	r9,r9,r4
   44de0:	498cb03a 	or	r6,r9,r6
   44de4:	300cc03a 	cmpne	r6,r6,zero
   44de8:	298ab03a 	or	r5,r5,r6
   44dec:	0013883a 	mov	r9,zero
   44df0:	003f1506 	br	44a48 <__alt_data_end+0xfffdd948>
   44df4:	0101ffc4 	movi	r4,2047
   44df8:	113f9a1e 	bne	r2,r4,44c64 <__alt_data_end+0xfffddb64>
   44dfc:	4811883a 	mov	r8,r9
   44e00:	3023883a 	mov	r17,r6
   44e04:	1021883a 	mov	r16,r2
   44e08:	3825883a 	mov	r18,r7
   44e0c:	003e9306 	br	4485c <__alt_data_end+0xfffdd75c>
   44e10:	8000161e 	bne	r16,zero,44e6c <__adddf3+0x68c>
   44e14:	444ab03a 	or	r5,r8,r17
   44e18:	28005126 	beq	r5,zero,44f60 <__adddf3+0x780>
   44e1c:	0108303a 	nor	r4,zero,r4
   44e20:	20004d1e 	bne	r4,zero,44f58 <__adddf3+0x778>
   44e24:	89a3883a 	add	r17,r17,r6
   44e28:	4253883a 	add	r9,r8,r9
   44e2c:	898d803a 	cmpltu	r6,r17,r6
   44e30:	3251883a 	add	r8,r6,r9
   44e34:	1021883a 	mov	r16,r2
   44e38:	003f0806 	br	44a5c <__alt_data_end+0xfffdd95c>
   44e3c:	1000301e 	bne	r2,zero,44f00 <__adddf3+0x720>
   44e40:	4984b03a 	or	r2,r9,r6
   44e44:	10007126 	beq	r2,zero,4500c <__adddf3+0x82c>
   44e48:	4811883a 	mov	r8,r9
   44e4c:	3023883a 	mov	r17,r6
   44e50:	3825883a 	mov	r18,r7
   44e54:	0401ffc4 	movi	r16,2047
   44e58:	003e8006 	br	4485c <__alt_data_end+0xfffdd75c>
   44e5c:	4462b03a 	or	r17,r8,r17
   44e60:	8822c03a 	cmpne	r17,r17,zero
   44e64:	0007883a 	mov	r3,zero
   44e68:	003f8b06 	br	44c98 <__alt_data_end+0xfffddb98>
   44e6c:	0141ffc4 	movi	r5,2047
   44e70:	11403b26 	beq	r2,r5,44f60 <__adddf3+0x780>
   44e74:	0109c83a 	sub	r4,zero,r4
   44e78:	42002034 	orhi	r8,r8,128
   44e7c:	01400e04 	movi	r5,56
   44e80:	29006716 	blt	r5,r4,45020 <__adddf3+0x840>
   44e84:	014007c4 	movi	r5,31
   44e88:	29007016 	blt	r5,r4,4504c <__adddf3+0x86c>
   44e8c:	01400804 	movi	r5,32
   44e90:	290bc83a 	sub	r5,r5,r4
   44e94:	4154983a 	sll	r10,r8,r5
   44e98:	890ed83a 	srl	r7,r17,r4
   44e9c:	894a983a 	sll	r5,r17,r5
   44ea0:	4108d83a 	srl	r4,r8,r4
   44ea4:	51e2b03a 	or	r17,r10,r7
   44ea8:	280ac03a 	cmpne	r5,r5,zero
   44eac:	8962b03a 	or	r17,r17,r5
   44eb0:	89a3883a 	add	r17,r17,r6
   44eb4:	2253883a 	add	r9,r4,r9
   44eb8:	898d803a 	cmpltu	r6,r17,r6
   44ebc:	3251883a 	add	r8,r6,r9
   44ec0:	1021883a 	mov	r16,r2
   44ec4:	003ee506 	br	44a5c <__alt_data_end+0xfffdd95c>
   44ec8:	4984b03a 	or	r2,r9,r6
   44ecc:	103e6326 	beq	r2,zero,4485c <__alt_data_end+0xfffdd75c>
   44ed0:	8987c83a 	sub	r3,r17,r6
   44ed4:	88c9803a 	cmpltu	r4,r17,r3
   44ed8:	4245c83a 	sub	r2,r8,r9
   44edc:	1105c83a 	sub	r2,r2,r4
   44ee0:	1100202c 	andhi	r4,r2,128
   44ee4:	203ebb26 	beq	r4,zero,449d4 <__alt_data_end+0xfffdd8d4>
   44ee8:	3463c83a 	sub	r17,r6,r17
   44eec:	4a07c83a 	sub	r3,r9,r8
   44ef0:	344d803a 	cmpltu	r6,r6,r17
   44ef4:	1991c83a 	sub	r8,r3,r6
   44ef8:	3825883a 	mov	r18,r7
   44efc:	003e5706 	br	4485c <__alt_data_end+0xfffdd75c>
   44f00:	4984b03a 	or	r2,r9,r6
   44f04:	10002e26 	beq	r2,zero,44fc0 <__adddf3+0x7e0>
   44f08:	4004d0fa 	srli	r2,r8,3
   44f0c:	8822d0fa 	srli	r17,r17,3
   44f10:	4010977a 	slli	r8,r8,29
   44f14:	10c0022c 	andhi	r3,r2,8
   44f18:	4462b03a 	or	r17,r8,r17
   44f1c:	18000826 	beq	r3,zero,44f40 <__adddf3+0x760>
   44f20:	4808d0fa 	srli	r4,r9,3
   44f24:	20c0022c 	andhi	r3,r4,8
   44f28:	1800051e 	bne	r3,zero,44f40 <__adddf3+0x760>
   44f2c:	300cd0fa 	srli	r6,r6,3
   44f30:	4806977a 	slli	r3,r9,29
   44f34:	2005883a 	mov	r2,r4
   44f38:	3825883a 	mov	r18,r7
   44f3c:	19a2b03a 	or	r17,r3,r6
   44f40:	8810d77a 	srli	r8,r17,29
   44f44:	100490fa 	slli	r2,r2,3
   44f48:	882290fa 	slli	r17,r17,3
   44f4c:	0401ffc4 	movi	r16,2047
   44f50:	4090b03a 	or	r8,r8,r2
   44f54:	003e4106 	br	4485c <__alt_data_end+0xfffdd75c>
   44f58:	0141ffc4 	movi	r5,2047
   44f5c:	117fc71e 	bne	r2,r5,44e7c <__alt_data_end+0xfffddd7c>
   44f60:	4811883a 	mov	r8,r9
   44f64:	3023883a 	mov	r17,r6
   44f68:	1021883a 	mov	r16,r2
   44f6c:	003e3b06 	br	4485c <__alt_data_end+0xfffdd75c>
   44f70:	10002f26 	beq	r2,zero,45030 <__adddf3+0x850>
   44f74:	4984b03a 	or	r2,r9,r6
   44f78:	10001126 	beq	r2,zero,44fc0 <__adddf3+0x7e0>
   44f7c:	4004d0fa 	srli	r2,r8,3
   44f80:	8822d0fa 	srli	r17,r17,3
   44f84:	4010977a 	slli	r8,r8,29
   44f88:	10c0022c 	andhi	r3,r2,8
   44f8c:	4462b03a 	or	r17,r8,r17
   44f90:	183feb26 	beq	r3,zero,44f40 <__alt_data_end+0xfffdde40>
   44f94:	4808d0fa 	srli	r4,r9,3
   44f98:	20c0022c 	andhi	r3,r4,8
   44f9c:	183fe81e 	bne	r3,zero,44f40 <__alt_data_end+0xfffdde40>
   44fa0:	300cd0fa 	srli	r6,r6,3
   44fa4:	4806977a 	slli	r3,r9,29
   44fa8:	2005883a 	mov	r2,r4
   44fac:	19a2b03a 	or	r17,r3,r6
   44fb0:	003fe306 	br	44f40 <__alt_data_end+0xfffdde40>
   44fb4:	0011883a 	mov	r8,zero
   44fb8:	0005883a 	mov	r2,zero
   44fbc:	003e3f06 	br	448bc <__alt_data_end+0xfffdd7bc>
   44fc0:	0401ffc4 	movi	r16,2047
   44fc4:	003e2506 	br	4485c <__alt_data_end+0xfffdd75c>
   44fc8:	0013883a 	mov	r9,zero
   44fcc:	003f8406 	br	44de0 <__alt_data_end+0xfffddce0>
   44fd0:	0005883a 	mov	r2,zero
   44fd4:	0007883a 	mov	r3,zero
   44fd8:	003e8906 	br	44a00 <__alt_data_end+0xfffdd900>
   44fdc:	197ff804 	addi	r5,r3,-32
   44fe0:	01000804 	movi	r4,32
   44fe4:	414ad83a 	srl	r5,r8,r5
   44fe8:	19002426 	beq	r3,r4,4507c <__adddf3+0x89c>
   44fec:	01001004 	movi	r4,64
   44ff0:	20c7c83a 	sub	r3,r4,r3
   44ff4:	40c6983a 	sll	r3,r8,r3
   44ff8:	1c46b03a 	or	r3,r3,r17
   44ffc:	1806c03a 	cmpne	r3,r3,zero
   45000:	28e2b03a 	or	r17,r5,r3
   45004:	0007883a 	mov	r3,zero
   45008:	003f2306 	br	44c98 <__alt_data_end+0xfffddb98>
   4500c:	0007883a 	mov	r3,zero
   45010:	5811883a 	mov	r8,r11
   45014:	00bfffc4 	movi	r2,-1
   45018:	0401ffc4 	movi	r16,2047
   4501c:	003e7806 	br	44a00 <__alt_data_end+0xfffdd900>
   45020:	4462b03a 	or	r17,r8,r17
   45024:	8822c03a 	cmpne	r17,r17,zero
   45028:	0009883a 	mov	r4,zero
   4502c:	003fa006 	br	44eb0 <__alt_data_end+0xfffdddb0>
   45030:	4811883a 	mov	r8,r9
   45034:	3023883a 	mov	r17,r6
   45038:	0401ffc4 	movi	r16,2047
   4503c:	003e0706 	br	4485c <__alt_data_end+0xfffdd75c>
   45040:	4811883a 	mov	r8,r9
   45044:	3023883a 	mov	r17,r6
   45048:	003e0406 	br	4485c <__alt_data_end+0xfffdd75c>
   4504c:	21fff804 	addi	r7,r4,-32
   45050:	01400804 	movi	r5,32
   45054:	41ced83a 	srl	r7,r8,r7
   45058:	21400a26 	beq	r4,r5,45084 <__adddf3+0x8a4>
   4505c:	01401004 	movi	r5,64
   45060:	2909c83a 	sub	r4,r5,r4
   45064:	4108983a 	sll	r4,r8,r4
   45068:	2448b03a 	or	r4,r4,r17
   4506c:	2008c03a 	cmpne	r4,r4,zero
   45070:	3922b03a 	or	r17,r7,r4
   45074:	0009883a 	mov	r4,zero
   45078:	003f8d06 	br	44eb0 <__alt_data_end+0xfffdddb0>
   4507c:	0007883a 	mov	r3,zero
   45080:	003fdd06 	br	44ff8 <__alt_data_end+0xfffddef8>
   45084:	0009883a 	mov	r4,zero
   45088:	003ff706 	br	45068 <__alt_data_end+0xfffddf68>

0004508c <__divdf3>:
   4508c:	defff204 	addi	sp,sp,-56
   45090:	dd400915 	stw	r21,36(sp)
   45094:	282ad53a 	srli	r21,r5,20
   45098:	dd000815 	stw	r20,32(sp)
   4509c:	2828d7fa 	srli	r20,r5,31
   450a0:	dc000415 	stw	r16,16(sp)
   450a4:	04000434 	movhi	r16,16
   450a8:	df000c15 	stw	fp,48(sp)
   450ac:	843fffc4 	addi	r16,r16,-1
   450b0:	dfc00d15 	stw	ra,52(sp)
   450b4:	ddc00b15 	stw	r23,44(sp)
   450b8:	dd800a15 	stw	r22,40(sp)
   450bc:	dcc00715 	stw	r19,28(sp)
   450c0:	dc800615 	stw	r18,24(sp)
   450c4:	dc400515 	stw	r17,20(sp)
   450c8:	ad41ffcc 	andi	r21,r21,2047
   450cc:	2c20703a 	and	r16,r5,r16
   450d0:	a7003fcc 	andi	fp,r20,255
   450d4:	a8006126 	beq	r21,zero,4525c <__divdf3+0x1d0>
   450d8:	0081ffc4 	movi	r2,2047
   450dc:	2025883a 	mov	r18,r4
   450e0:	a8803726 	beq	r21,r2,451c0 <__divdf3+0x134>
   450e4:	80800434 	orhi	r2,r16,16
   450e8:	100490fa 	slli	r2,r2,3
   450ec:	2020d77a 	srli	r16,r4,29
   450f0:	202490fa 	slli	r18,r4,3
   450f4:	ad7f0044 	addi	r21,r21,-1023
   450f8:	80a0b03a 	or	r16,r16,r2
   450fc:	0027883a 	mov	r19,zero
   45100:	0013883a 	mov	r9,zero
   45104:	3804d53a 	srli	r2,r7,20
   45108:	382cd7fa 	srli	r22,r7,31
   4510c:	04400434 	movhi	r17,16
   45110:	8c7fffc4 	addi	r17,r17,-1
   45114:	1081ffcc 	andi	r2,r2,2047
   45118:	3011883a 	mov	r8,r6
   4511c:	3c62703a 	and	r17,r7,r17
   45120:	b5c03fcc 	andi	r23,r22,255
   45124:	10006c26 	beq	r2,zero,452d8 <__divdf3+0x24c>
   45128:	00c1ffc4 	movi	r3,2047
   4512c:	10c06426 	beq	r2,r3,452c0 <__divdf3+0x234>
   45130:	88c00434 	orhi	r3,r17,16
   45134:	180690fa 	slli	r3,r3,3
   45138:	3022d77a 	srli	r17,r6,29
   4513c:	301090fa 	slli	r8,r6,3
   45140:	10bf0044 	addi	r2,r2,-1023
   45144:	88e2b03a 	or	r17,r17,r3
   45148:	000f883a 	mov	r7,zero
   4514c:	a58cf03a 	xor	r6,r20,r22
   45150:	3cc8b03a 	or	r4,r7,r19
   45154:	a8abc83a 	sub	r21,r21,r2
   45158:	008003c4 	movi	r2,15
   4515c:	3007883a 	mov	r3,r6
   45160:	34c03fcc 	andi	r19,r6,255
   45164:	11009036 	bltu	r2,r4,453a8 <__divdf3+0x31c>
   45168:	200890ba 	slli	r4,r4,2
   4516c:	00800134 	movhi	r2,4
   45170:	10946004 	addi	r2,r2,20864
   45174:	2089883a 	add	r4,r4,r2
   45178:	20800017 	ldw	r2,0(r4)
   4517c:	1000683a 	jmp	r2
   45180:	000453a8 	cmpgeui	zero,zero,4430
   45184:	000451f8 	rdprs	zero,zero,4423
   45188:	00045398 	cmpnei	zero,zero,4430
   4518c:	000451ec 	andhi	zero,zero,4423
   45190:	00045398 	cmpnei	zero,zero,4430
   45194:	0004536c 	andhi	zero,zero,4429
   45198:	00045398 	cmpnei	zero,zero,4430
   4519c:	000451ec 	andhi	zero,zero,4423
   451a0:	000451f8 	rdprs	zero,zero,4423
   451a4:	000451f8 	rdprs	zero,zero,4423
   451a8:	0004536c 	andhi	zero,zero,4429
   451ac:	000451ec 	andhi	zero,zero,4423
   451b0:	000451dc 	xori	zero,zero,4423
   451b4:	000451dc 	xori	zero,zero,4423
   451b8:	000451dc 	xori	zero,zero,4423
   451bc:	0004568c 	andi	zero,zero,4442
   451c0:	2404b03a 	or	r2,r4,r16
   451c4:	1000661e 	bne	r2,zero,45360 <__divdf3+0x2d4>
   451c8:	04c00204 	movi	r19,8
   451cc:	0021883a 	mov	r16,zero
   451d0:	0025883a 	mov	r18,zero
   451d4:	02400084 	movi	r9,2
   451d8:	003fca06 	br	45104 <__alt_data_end+0xfffde004>
   451dc:	8023883a 	mov	r17,r16
   451e0:	9011883a 	mov	r8,r18
   451e4:	e02f883a 	mov	r23,fp
   451e8:	480f883a 	mov	r7,r9
   451ec:	00800084 	movi	r2,2
   451f0:	3881311e 	bne	r7,r2,456b8 <__divdf3+0x62c>
   451f4:	b827883a 	mov	r19,r23
   451f8:	98c0004c 	andi	r3,r19,1
   451fc:	0081ffc4 	movi	r2,2047
   45200:	000b883a 	mov	r5,zero
   45204:	0025883a 	mov	r18,zero
   45208:	1004953a 	slli	r2,r2,20
   4520c:	18c03fcc 	andi	r3,r3,255
   45210:	04400434 	movhi	r17,16
   45214:	8c7fffc4 	addi	r17,r17,-1
   45218:	180697fa 	slli	r3,r3,31
   4521c:	2c4a703a 	and	r5,r5,r17
   45220:	288ab03a 	or	r5,r5,r2
   45224:	28c6b03a 	or	r3,r5,r3
   45228:	9005883a 	mov	r2,r18
   4522c:	dfc00d17 	ldw	ra,52(sp)
   45230:	df000c17 	ldw	fp,48(sp)
   45234:	ddc00b17 	ldw	r23,44(sp)
   45238:	dd800a17 	ldw	r22,40(sp)
   4523c:	dd400917 	ldw	r21,36(sp)
   45240:	dd000817 	ldw	r20,32(sp)
   45244:	dcc00717 	ldw	r19,28(sp)
   45248:	dc800617 	ldw	r18,24(sp)
   4524c:	dc400517 	ldw	r17,20(sp)
   45250:	dc000417 	ldw	r16,16(sp)
   45254:	dec00e04 	addi	sp,sp,56
   45258:	f800283a 	ret
   4525c:	2404b03a 	or	r2,r4,r16
   45260:	2027883a 	mov	r19,r4
   45264:	10003926 	beq	r2,zero,4534c <__divdf3+0x2c0>
   45268:	80012e26 	beq	r16,zero,45724 <__divdf3+0x698>
   4526c:	8009883a 	mov	r4,r16
   45270:	d9800315 	stw	r6,12(sp)
   45274:	d9c00215 	stw	r7,8(sp)
   45278:	0046f000 	call	46f00 <__clzsi2>
   4527c:	d9800317 	ldw	r6,12(sp)
   45280:	d9c00217 	ldw	r7,8(sp)
   45284:	113ffd44 	addi	r4,r2,-11
   45288:	00c00704 	movi	r3,28
   4528c:	19012116 	blt	r3,r4,45714 <__divdf3+0x688>
   45290:	00c00744 	movi	r3,29
   45294:	147ffe04 	addi	r17,r2,-8
   45298:	1907c83a 	sub	r3,r3,r4
   4529c:	8460983a 	sll	r16,r16,r17
   452a0:	98c6d83a 	srl	r3,r19,r3
   452a4:	9c64983a 	sll	r18,r19,r17
   452a8:	1c20b03a 	or	r16,r3,r16
   452ac:	1080fcc4 	addi	r2,r2,1011
   452b0:	00abc83a 	sub	r21,zero,r2
   452b4:	0027883a 	mov	r19,zero
   452b8:	0013883a 	mov	r9,zero
   452bc:	003f9106 	br	45104 <__alt_data_end+0xfffde004>
   452c0:	3446b03a 	or	r3,r6,r17
   452c4:	18001f1e 	bne	r3,zero,45344 <__divdf3+0x2b8>
   452c8:	0023883a 	mov	r17,zero
   452cc:	0011883a 	mov	r8,zero
   452d0:	01c00084 	movi	r7,2
   452d4:	003f9d06 	br	4514c <__alt_data_end+0xfffde04c>
   452d8:	3446b03a 	or	r3,r6,r17
   452dc:	18001526 	beq	r3,zero,45334 <__divdf3+0x2a8>
   452e0:	88011b26 	beq	r17,zero,45750 <__divdf3+0x6c4>
   452e4:	8809883a 	mov	r4,r17
   452e8:	d9800315 	stw	r6,12(sp)
   452ec:	da400115 	stw	r9,4(sp)
   452f0:	0046f000 	call	46f00 <__clzsi2>
   452f4:	d9800317 	ldw	r6,12(sp)
   452f8:	da400117 	ldw	r9,4(sp)
   452fc:	113ffd44 	addi	r4,r2,-11
   45300:	00c00704 	movi	r3,28
   45304:	19010e16 	blt	r3,r4,45740 <__divdf3+0x6b4>
   45308:	00c00744 	movi	r3,29
   4530c:	123ffe04 	addi	r8,r2,-8
   45310:	1907c83a 	sub	r3,r3,r4
   45314:	8a22983a 	sll	r17,r17,r8
   45318:	30c6d83a 	srl	r3,r6,r3
   4531c:	3210983a 	sll	r8,r6,r8
   45320:	1c62b03a 	or	r17,r3,r17
   45324:	1080fcc4 	addi	r2,r2,1011
   45328:	0085c83a 	sub	r2,zero,r2
   4532c:	000f883a 	mov	r7,zero
   45330:	003f8606 	br	4514c <__alt_data_end+0xfffde04c>
   45334:	0023883a 	mov	r17,zero
   45338:	0011883a 	mov	r8,zero
   4533c:	01c00044 	movi	r7,1
   45340:	003f8206 	br	4514c <__alt_data_end+0xfffde04c>
   45344:	01c000c4 	movi	r7,3
   45348:	003f8006 	br	4514c <__alt_data_end+0xfffde04c>
   4534c:	04c00104 	movi	r19,4
   45350:	0021883a 	mov	r16,zero
   45354:	0025883a 	mov	r18,zero
   45358:	02400044 	movi	r9,1
   4535c:	003f6906 	br	45104 <__alt_data_end+0xfffde004>
   45360:	04c00304 	movi	r19,12
   45364:	024000c4 	movi	r9,3
   45368:	003f6606 	br	45104 <__alt_data_end+0xfffde004>
   4536c:	01400434 	movhi	r5,16
   45370:	0007883a 	mov	r3,zero
   45374:	297fffc4 	addi	r5,r5,-1
   45378:	04bfffc4 	movi	r18,-1
   4537c:	0081ffc4 	movi	r2,2047
   45380:	003fa106 	br	45208 <__alt_data_end+0xfffde108>
   45384:	00c00044 	movi	r3,1
   45388:	1887c83a 	sub	r3,r3,r2
   4538c:	01000e04 	movi	r4,56
   45390:	20c1210e 	bge	r4,r3,45818 <__divdf3+0x78c>
   45394:	98c0004c 	andi	r3,r19,1
   45398:	0005883a 	mov	r2,zero
   4539c:	000b883a 	mov	r5,zero
   453a0:	0025883a 	mov	r18,zero
   453a4:	003f9806 	br	45208 <__alt_data_end+0xfffde108>
   453a8:	8c00fd36 	bltu	r17,r16,457a0 <__divdf3+0x714>
   453ac:	8440fb26 	beq	r16,r17,4579c <__divdf3+0x710>
   453b0:	8007883a 	mov	r3,r16
   453b4:	ad7fffc4 	addi	r21,r21,-1
   453b8:	0021883a 	mov	r16,zero
   453bc:	4004d63a 	srli	r2,r8,24
   453c0:	8822923a 	slli	r17,r17,8
   453c4:	1809883a 	mov	r4,r3
   453c8:	402c923a 	slli	r22,r8,8
   453cc:	88b8b03a 	or	fp,r17,r2
   453d0:	e028d43a 	srli	r20,fp,16
   453d4:	d8c00015 	stw	r3,0(sp)
   453d8:	e5ffffcc 	andi	r23,fp,65535
   453dc:	a00b883a 	mov	r5,r20
   453e0:	00432240 	call	43224 <__udivsi3>
   453e4:	d8c00017 	ldw	r3,0(sp)
   453e8:	a00b883a 	mov	r5,r20
   453ec:	d8800315 	stw	r2,12(sp)
   453f0:	1809883a 	mov	r4,r3
   453f4:	00432880 	call	43288 <__umodsi3>
   453f8:	d9800317 	ldw	r6,12(sp)
   453fc:	1006943a 	slli	r3,r2,16
   45400:	9004d43a 	srli	r2,r18,16
   45404:	b9a3383a 	mul	r17,r23,r6
   45408:	10c4b03a 	or	r2,r2,r3
   4540c:	1440062e 	bgeu	r2,r17,45428 <__divdf3+0x39c>
   45410:	1705883a 	add	r2,r2,fp
   45414:	30ffffc4 	addi	r3,r6,-1
   45418:	1700ee36 	bltu	r2,fp,457d4 <__divdf3+0x748>
   4541c:	1440ed2e 	bgeu	r2,r17,457d4 <__divdf3+0x748>
   45420:	31bfff84 	addi	r6,r6,-2
   45424:	1705883a 	add	r2,r2,fp
   45428:	1463c83a 	sub	r17,r2,r17
   4542c:	a00b883a 	mov	r5,r20
   45430:	8809883a 	mov	r4,r17
   45434:	d9800315 	stw	r6,12(sp)
   45438:	00432240 	call	43224 <__udivsi3>
   4543c:	a00b883a 	mov	r5,r20
   45440:	8809883a 	mov	r4,r17
   45444:	d8800215 	stw	r2,8(sp)
   45448:	00432880 	call	43288 <__umodsi3>
   4544c:	d9c00217 	ldw	r7,8(sp)
   45450:	1004943a 	slli	r2,r2,16
   45454:	94bfffcc 	andi	r18,r18,65535
   45458:	b9d1383a 	mul	r8,r23,r7
   4545c:	90a4b03a 	or	r18,r18,r2
   45460:	d9800317 	ldw	r6,12(sp)
   45464:	9200062e 	bgeu	r18,r8,45480 <__divdf3+0x3f4>
   45468:	9725883a 	add	r18,r18,fp
   4546c:	38bfffc4 	addi	r2,r7,-1
   45470:	9700d636 	bltu	r18,fp,457cc <__divdf3+0x740>
   45474:	9200d52e 	bgeu	r18,r8,457cc <__divdf3+0x740>
   45478:	39ffff84 	addi	r7,r7,-2
   4547c:	9725883a 	add	r18,r18,fp
   45480:	3004943a 	slli	r2,r6,16
   45484:	b012d43a 	srli	r9,r22,16
   45488:	b1bfffcc 	andi	r6,r22,65535
   4548c:	11e2b03a 	or	r17,r2,r7
   45490:	8806d43a 	srli	r3,r17,16
   45494:	893fffcc 	andi	r4,r17,65535
   45498:	218b383a 	mul	r5,r4,r6
   4549c:	30c5383a 	mul	r2,r6,r3
   454a0:	2249383a 	mul	r4,r4,r9
   454a4:	280ed43a 	srli	r7,r5,16
   454a8:	9225c83a 	sub	r18,r18,r8
   454ac:	2089883a 	add	r4,r4,r2
   454b0:	3909883a 	add	r4,r7,r4
   454b4:	1a47383a 	mul	r3,r3,r9
   454b8:	2080022e 	bgeu	r4,r2,454c4 <__divdf3+0x438>
   454bc:	00800074 	movhi	r2,1
   454c0:	1887883a 	add	r3,r3,r2
   454c4:	2004d43a 	srli	r2,r4,16
   454c8:	2008943a 	slli	r4,r4,16
   454cc:	297fffcc 	andi	r5,r5,65535
   454d0:	10c7883a 	add	r3,r2,r3
   454d4:	2149883a 	add	r4,r4,r5
   454d8:	90c0a536 	bltu	r18,r3,45770 <__divdf3+0x6e4>
   454dc:	90c0bf26 	beq	r18,r3,457dc <__divdf3+0x750>
   454e0:	90c7c83a 	sub	r3,r18,r3
   454e4:	810fc83a 	sub	r7,r16,r4
   454e8:	81e5803a 	cmpltu	r18,r16,r7
   454ec:	1ca5c83a 	sub	r18,r3,r18
   454f0:	e480c126 	beq	fp,r18,457f8 <__divdf3+0x76c>
   454f4:	a00b883a 	mov	r5,r20
   454f8:	9009883a 	mov	r4,r18
   454fc:	d9800315 	stw	r6,12(sp)
   45500:	d9c00215 	stw	r7,8(sp)
   45504:	da400115 	stw	r9,4(sp)
   45508:	00432240 	call	43224 <__udivsi3>
   4550c:	a00b883a 	mov	r5,r20
   45510:	9009883a 	mov	r4,r18
   45514:	d8800015 	stw	r2,0(sp)
   45518:	00432880 	call	43288 <__umodsi3>
   4551c:	d9c00217 	ldw	r7,8(sp)
   45520:	da000017 	ldw	r8,0(sp)
   45524:	1006943a 	slli	r3,r2,16
   45528:	3804d43a 	srli	r2,r7,16
   4552c:	ba21383a 	mul	r16,r23,r8
   45530:	d9800317 	ldw	r6,12(sp)
   45534:	10c4b03a 	or	r2,r2,r3
   45538:	da400117 	ldw	r9,4(sp)
   4553c:	1400062e 	bgeu	r2,r16,45558 <__divdf3+0x4cc>
   45540:	1705883a 	add	r2,r2,fp
   45544:	40ffffc4 	addi	r3,r8,-1
   45548:	1700ad36 	bltu	r2,fp,45800 <__divdf3+0x774>
   4554c:	1400ac2e 	bgeu	r2,r16,45800 <__divdf3+0x774>
   45550:	423fff84 	addi	r8,r8,-2
   45554:	1705883a 	add	r2,r2,fp
   45558:	1421c83a 	sub	r16,r2,r16
   4555c:	a00b883a 	mov	r5,r20
   45560:	8009883a 	mov	r4,r16
   45564:	d9800315 	stw	r6,12(sp)
   45568:	d9c00215 	stw	r7,8(sp)
   4556c:	da000015 	stw	r8,0(sp)
   45570:	da400115 	stw	r9,4(sp)
   45574:	00432240 	call	43224 <__udivsi3>
   45578:	8009883a 	mov	r4,r16
   4557c:	a00b883a 	mov	r5,r20
   45580:	1025883a 	mov	r18,r2
   45584:	00432880 	call	43288 <__umodsi3>
   45588:	d9c00217 	ldw	r7,8(sp)
   4558c:	1004943a 	slli	r2,r2,16
   45590:	bcaf383a 	mul	r23,r23,r18
   45594:	393fffcc 	andi	r4,r7,65535
   45598:	2088b03a 	or	r4,r4,r2
   4559c:	d9800317 	ldw	r6,12(sp)
   455a0:	da000017 	ldw	r8,0(sp)
   455a4:	da400117 	ldw	r9,4(sp)
   455a8:	25c0062e 	bgeu	r4,r23,455c4 <__divdf3+0x538>
   455ac:	2709883a 	add	r4,r4,fp
   455b0:	90bfffc4 	addi	r2,r18,-1
   455b4:	27009436 	bltu	r4,fp,45808 <__divdf3+0x77c>
   455b8:	25c0932e 	bgeu	r4,r23,45808 <__divdf3+0x77c>
   455bc:	94bfff84 	addi	r18,r18,-2
   455c0:	2709883a 	add	r4,r4,fp
   455c4:	4004943a 	slli	r2,r8,16
   455c8:	25efc83a 	sub	r23,r4,r23
   455cc:	1490b03a 	or	r8,r2,r18
   455d0:	4008d43a 	srli	r4,r8,16
   455d4:	40ffffcc 	andi	r3,r8,65535
   455d8:	30c5383a 	mul	r2,r6,r3
   455dc:	1a47383a 	mul	r3,r3,r9
   455e0:	310d383a 	mul	r6,r6,r4
   455e4:	100ad43a 	srli	r5,r2,16
   455e8:	4913383a 	mul	r9,r9,r4
   455ec:	1987883a 	add	r3,r3,r6
   455f0:	28c7883a 	add	r3,r5,r3
   455f4:	1980022e 	bgeu	r3,r6,45600 <__divdf3+0x574>
   455f8:	01000074 	movhi	r4,1
   455fc:	4913883a 	add	r9,r9,r4
   45600:	1808d43a 	srli	r4,r3,16
   45604:	1806943a 	slli	r3,r3,16
   45608:	10bfffcc 	andi	r2,r2,65535
   4560c:	2253883a 	add	r9,r4,r9
   45610:	1887883a 	add	r3,r3,r2
   45614:	ba403836 	bltu	r23,r9,456f8 <__divdf3+0x66c>
   45618:	ba403626 	beq	r23,r9,456f4 <__divdf3+0x668>
   4561c:	42000054 	ori	r8,r8,1
   45620:	a880ffc4 	addi	r2,r21,1023
   45624:	00bf570e 	bge	zero,r2,45384 <__alt_data_end+0xfffde284>
   45628:	40c001cc 	andi	r3,r8,7
   4562c:	18000726 	beq	r3,zero,4564c <__divdf3+0x5c0>
   45630:	40c003cc 	andi	r3,r8,15
   45634:	01000104 	movi	r4,4
   45638:	19000426 	beq	r3,r4,4564c <__divdf3+0x5c0>
   4563c:	4107883a 	add	r3,r8,r4
   45640:	1a11803a 	cmpltu	r8,r3,r8
   45644:	8a23883a 	add	r17,r17,r8
   45648:	1811883a 	mov	r8,r3
   4564c:	88c0402c 	andhi	r3,r17,256
   45650:	18000426 	beq	r3,zero,45664 <__divdf3+0x5d8>
   45654:	00ffc034 	movhi	r3,65280
   45658:	18ffffc4 	addi	r3,r3,-1
   4565c:	a8810004 	addi	r2,r21,1024
   45660:	88e2703a 	and	r17,r17,r3
   45664:	00c1ff84 	movi	r3,2046
   45668:	18bee316 	blt	r3,r2,451f8 <__alt_data_end+0xfffde0f8>
   4566c:	8824977a 	slli	r18,r17,29
   45670:	4010d0fa 	srli	r8,r8,3
   45674:	8822927a 	slli	r17,r17,9
   45678:	1081ffcc 	andi	r2,r2,2047
   4567c:	9224b03a 	or	r18,r18,r8
   45680:	880ad33a 	srli	r5,r17,12
   45684:	98c0004c 	andi	r3,r19,1
   45688:	003edf06 	br	45208 <__alt_data_end+0xfffde108>
   4568c:	8080022c 	andhi	r2,r16,8
   45690:	10001226 	beq	r2,zero,456dc <__divdf3+0x650>
   45694:	8880022c 	andhi	r2,r17,8
   45698:	1000101e 	bne	r2,zero,456dc <__divdf3+0x650>
   4569c:	00800434 	movhi	r2,16
   456a0:	89400234 	orhi	r5,r17,8
   456a4:	10bfffc4 	addi	r2,r2,-1
   456a8:	b007883a 	mov	r3,r22
   456ac:	288a703a 	and	r5,r5,r2
   456b0:	4025883a 	mov	r18,r8
   456b4:	003f3106 	br	4537c <__alt_data_end+0xfffde27c>
   456b8:	008000c4 	movi	r2,3
   456bc:	3880a626 	beq	r7,r2,45958 <__divdf3+0x8cc>
   456c0:	00800044 	movi	r2,1
   456c4:	3880521e 	bne	r7,r2,45810 <__divdf3+0x784>
   456c8:	b807883a 	mov	r3,r23
   456cc:	0005883a 	mov	r2,zero
   456d0:	000b883a 	mov	r5,zero
   456d4:	0025883a 	mov	r18,zero
   456d8:	003ecb06 	br	45208 <__alt_data_end+0xfffde108>
   456dc:	00800434 	movhi	r2,16
   456e0:	81400234 	orhi	r5,r16,8
   456e4:	10bfffc4 	addi	r2,r2,-1
   456e8:	a007883a 	mov	r3,r20
   456ec:	288a703a 	and	r5,r5,r2
   456f0:	003f2206 	br	4537c <__alt_data_end+0xfffde27c>
   456f4:	183fca26 	beq	r3,zero,45620 <__alt_data_end+0xfffde520>
   456f8:	e5ef883a 	add	r23,fp,r23
   456fc:	40bfffc4 	addi	r2,r8,-1
   45700:	bf00392e 	bgeu	r23,fp,457e8 <__divdf3+0x75c>
   45704:	1011883a 	mov	r8,r2
   45708:	ba7fc41e 	bne	r23,r9,4561c <__alt_data_end+0xfffde51c>
   4570c:	b0ffc31e 	bne	r22,r3,4561c <__alt_data_end+0xfffde51c>
   45710:	003fc306 	br	45620 <__alt_data_end+0xfffde520>
   45714:	143ff604 	addi	r16,r2,-40
   45718:	9c20983a 	sll	r16,r19,r16
   4571c:	0025883a 	mov	r18,zero
   45720:	003ee206 	br	452ac <__alt_data_end+0xfffde1ac>
   45724:	d9800315 	stw	r6,12(sp)
   45728:	d9c00215 	stw	r7,8(sp)
   4572c:	0046f000 	call	46f00 <__clzsi2>
   45730:	10800804 	addi	r2,r2,32
   45734:	d9c00217 	ldw	r7,8(sp)
   45738:	d9800317 	ldw	r6,12(sp)
   4573c:	003ed106 	br	45284 <__alt_data_end+0xfffde184>
   45740:	147ff604 	addi	r17,r2,-40
   45744:	3462983a 	sll	r17,r6,r17
   45748:	0011883a 	mov	r8,zero
   4574c:	003ef506 	br	45324 <__alt_data_end+0xfffde224>
   45750:	3009883a 	mov	r4,r6
   45754:	d9800315 	stw	r6,12(sp)
   45758:	da400115 	stw	r9,4(sp)
   4575c:	0046f000 	call	46f00 <__clzsi2>
   45760:	10800804 	addi	r2,r2,32
   45764:	da400117 	ldw	r9,4(sp)
   45768:	d9800317 	ldw	r6,12(sp)
   4576c:	003ee306 	br	452fc <__alt_data_end+0xfffde1fc>
   45770:	85a1883a 	add	r16,r16,r22
   45774:	8585803a 	cmpltu	r2,r16,r22
   45778:	1705883a 	add	r2,r2,fp
   4577c:	14a5883a 	add	r18,r2,r18
   45780:	88bfffc4 	addi	r2,r17,-1
   45784:	e4800c2e 	bgeu	fp,r18,457b8 <__divdf3+0x72c>
   45788:	90c03e36 	bltu	r18,r3,45884 <__divdf3+0x7f8>
   4578c:	1c806926 	beq	r3,r18,45934 <__divdf3+0x8a8>
   45790:	90c7c83a 	sub	r3,r18,r3
   45794:	1023883a 	mov	r17,r2
   45798:	003f5206 	br	454e4 <__alt_data_end+0xfffde3e4>
   4579c:	923f0436 	bltu	r18,r8,453b0 <__alt_data_end+0xfffde2b0>
   457a0:	800897fa 	slli	r4,r16,31
   457a4:	9004d07a 	srli	r2,r18,1
   457a8:	8006d07a 	srli	r3,r16,1
   457ac:	902097fa 	slli	r16,r18,31
   457b0:	20a4b03a 	or	r18,r4,r2
   457b4:	003f0106 	br	453bc <__alt_data_end+0xfffde2bc>
   457b8:	e4bff51e 	bne	fp,r18,45790 <__alt_data_end+0xfffde690>
   457bc:	85bff22e 	bgeu	r16,r22,45788 <__alt_data_end+0xfffde688>
   457c0:	e0c7c83a 	sub	r3,fp,r3
   457c4:	1023883a 	mov	r17,r2
   457c8:	003f4606 	br	454e4 <__alt_data_end+0xfffde3e4>
   457cc:	100f883a 	mov	r7,r2
   457d0:	003f2b06 	br	45480 <__alt_data_end+0xfffde380>
   457d4:	180d883a 	mov	r6,r3
   457d8:	003f1306 	br	45428 <__alt_data_end+0xfffde328>
   457dc:	813fe436 	bltu	r16,r4,45770 <__alt_data_end+0xfffde670>
   457e0:	0007883a 	mov	r3,zero
   457e4:	003f3f06 	br	454e4 <__alt_data_end+0xfffde3e4>
   457e8:	ba402c36 	bltu	r23,r9,4589c <__divdf3+0x810>
   457ec:	4dc05426 	beq	r9,r23,45940 <__divdf3+0x8b4>
   457f0:	1011883a 	mov	r8,r2
   457f4:	003f8906 	br	4561c <__alt_data_end+0xfffde51c>
   457f8:	023fffc4 	movi	r8,-1
   457fc:	003f8806 	br	45620 <__alt_data_end+0xfffde520>
   45800:	1811883a 	mov	r8,r3
   45804:	003f5406 	br	45558 <__alt_data_end+0xfffde458>
   45808:	1025883a 	mov	r18,r2
   4580c:	003f6d06 	br	455c4 <__alt_data_end+0xfffde4c4>
   45810:	b827883a 	mov	r19,r23
   45814:	003f8206 	br	45620 <__alt_data_end+0xfffde520>
   45818:	010007c4 	movi	r4,31
   4581c:	20c02616 	blt	r4,r3,458b8 <__divdf3+0x82c>
   45820:	00800804 	movi	r2,32
   45824:	10c5c83a 	sub	r2,r2,r3
   45828:	888a983a 	sll	r5,r17,r2
   4582c:	40c8d83a 	srl	r4,r8,r3
   45830:	4084983a 	sll	r2,r8,r2
   45834:	88e2d83a 	srl	r17,r17,r3
   45838:	2906b03a 	or	r3,r5,r4
   4583c:	1004c03a 	cmpne	r2,r2,zero
   45840:	1886b03a 	or	r3,r3,r2
   45844:	188001cc 	andi	r2,r3,7
   45848:	10000726 	beq	r2,zero,45868 <__divdf3+0x7dc>
   4584c:	188003cc 	andi	r2,r3,15
   45850:	01000104 	movi	r4,4
   45854:	11000426 	beq	r2,r4,45868 <__divdf3+0x7dc>
   45858:	1805883a 	mov	r2,r3
   4585c:	10c00104 	addi	r3,r2,4
   45860:	1885803a 	cmpltu	r2,r3,r2
   45864:	88a3883a 	add	r17,r17,r2
   45868:	8880202c 	andhi	r2,r17,128
   4586c:	10002726 	beq	r2,zero,4590c <__divdf3+0x880>
   45870:	98c0004c 	andi	r3,r19,1
   45874:	00800044 	movi	r2,1
   45878:	000b883a 	mov	r5,zero
   4587c:	0025883a 	mov	r18,zero
   45880:	003e6106 	br	45208 <__alt_data_end+0xfffde108>
   45884:	85a1883a 	add	r16,r16,r22
   45888:	8585803a 	cmpltu	r2,r16,r22
   4588c:	1705883a 	add	r2,r2,fp
   45890:	14a5883a 	add	r18,r2,r18
   45894:	8c7fff84 	addi	r17,r17,-2
   45898:	003f1106 	br	454e0 <__alt_data_end+0xfffde3e0>
   4589c:	b589883a 	add	r4,r22,r22
   458a0:	25ad803a 	cmpltu	r22,r4,r22
   458a4:	b739883a 	add	fp,r22,fp
   458a8:	40bfff84 	addi	r2,r8,-2
   458ac:	bf2f883a 	add	r23,r23,fp
   458b0:	202d883a 	mov	r22,r4
   458b4:	003f9306 	br	45704 <__alt_data_end+0xfffde604>
   458b8:	013ff844 	movi	r4,-31
   458bc:	2085c83a 	sub	r2,r4,r2
   458c0:	8888d83a 	srl	r4,r17,r2
   458c4:	00800804 	movi	r2,32
   458c8:	18802126 	beq	r3,r2,45950 <__divdf3+0x8c4>
   458cc:	00801004 	movi	r2,64
   458d0:	10c5c83a 	sub	r2,r2,r3
   458d4:	8884983a 	sll	r2,r17,r2
   458d8:	1204b03a 	or	r2,r2,r8
   458dc:	1004c03a 	cmpne	r2,r2,zero
   458e0:	2084b03a 	or	r2,r4,r2
   458e4:	144001cc 	andi	r17,r2,7
   458e8:	88000d1e 	bne	r17,zero,45920 <__divdf3+0x894>
   458ec:	000b883a 	mov	r5,zero
   458f0:	1024d0fa 	srli	r18,r2,3
   458f4:	98c0004c 	andi	r3,r19,1
   458f8:	0005883a 	mov	r2,zero
   458fc:	9464b03a 	or	r18,r18,r17
   45900:	003e4106 	br	45208 <__alt_data_end+0xfffde108>
   45904:	1007883a 	mov	r3,r2
   45908:	0023883a 	mov	r17,zero
   4590c:	880a927a 	slli	r5,r17,9
   45910:	1805883a 	mov	r2,r3
   45914:	8822977a 	slli	r17,r17,29
   45918:	280ad33a 	srli	r5,r5,12
   4591c:	003ff406 	br	458f0 <__alt_data_end+0xfffde7f0>
   45920:	10c003cc 	andi	r3,r2,15
   45924:	01000104 	movi	r4,4
   45928:	193ff626 	beq	r3,r4,45904 <__alt_data_end+0xfffde804>
   4592c:	0023883a 	mov	r17,zero
   45930:	003fca06 	br	4585c <__alt_data_end+0xfffde75c>
   45934:	813fd336 	bltu	r16,r4,45884 <__alt_data_end+0xfffde784>
   45938:	1023883a 	mov	r17,r2
   4593c:	003fa806 	br	457e0 <__alt_data_end+0xfffde6e0>
   45940:	b0ffd636 	bltu	r22,r3,4589c <__alt_data_end+0xfffde79c>
   45944:	1011883a 	mov	r8,r2
   45948:	b0ff341e 	bne	r22,r3,4561c <__alt_data_end+0xfffde51c>
   4594c:	003f3406 	br	45620 <__alt_data_end+0xfffde520>
   45950:	0005883a 	mov	r2,zero
   45954:	003fe006 	br	458d8 <__alt_data_end+0xfffde7d8>
   45958:	00800434 	movhi	r2,16
   4595c:	89400234 	orhi	r5,r17,8
   45960:	10bfffc4 	addi	r2,r2,-1
   45964:	b807883a 	mov	r3,r23
   45968:	288a703a 	and	r5,r5,r2
   4596c:	4025883a 	mov	r18,r8
   45970:	003e8206 	br	4537c <__alt_data_end+0xfffde27c>

00045974 <__eqdf2>:
   45974:	2804d53a 	srli	r2,r5,20
   45978:	3806d53a 	srli	r3,r7,20
   4597c:	02000434 	movhi	r8,16
   45980:	423fffc4 	addi	r8,r8,-1
   45984:	1081ffcc 	andi	r2,r2,2047
   45988:	0281ffc4 	movi	r10,2047
   4598c:	2a12703a 	and	r9,r5,r8
   45990:	18c1ffcc 	andi	r3,r3,2047
   45994:	3a10703a 	and	r8,r7,r8
   45998:	280ad7fa 	srli	r5,r5,31
   4599c:	380ed7fa 	srli	r7,r7,31
   459a0:	12801026 	beq	r2,r10,459e4 <__eqdf2+0x70>
   459a4:	0281ffc4 	movi	r10,2047
   459a8:	1a800a26 	beq	r3,r10,459d4 <__eqdf2+0x60>
   459ac:	10c00226 	beq	r2,r3,459b8 <__eqdf2+0x44>
   459b0:	00800044 	movi	r2,1
   459b4:	f800283a 	ret
   459b8:	4a3ffd1e 	bne	r9,r8,459b0 <__alt_data_end+0xfffde8b0>
   459bc:	21bffc1e 	bne	r4,r6,459b0 <__alt_data_end+0xfffde8b0>
   459c0:	29c00c26 	beq	r5,r7,459f4 <__eqdf2+0x80>
   459c4:	103ffa1e 	bne	r2,zero,459b0 <__alt_data_end+0xfffde8b0>
   459c8:	2244b03a 	or	r2,r4,r9
   459cc:	1004c03a 	cmpne	r2,r2,zero
   459d0:	f800283a 	ret
   459d4:	3214b03a 	or	r10,r6,r8
   459d8:	503ff426 	beq	r10,zero,459ac <__alt_data_end+0xfffde8ac>
   459dc:	00800044 	movi	r2,1
   459e0:	f800283a 	ret
   459e4:	2254b03a 	or	r10,r4,r9
   459e8:	503fee26 	beq	r10,zero,459a4 <__alt_data_end+0xfffde8a4>
   459ec:	00800044 	movi	r2,1
   459f0:	f800283a 	ret
   459f4:	0005883a 	mov	r2,zero
   459f8:	f800283a 	ret

000459fc <__gedf2>:
   459fc:	2804d53a 	srli	r2,r5,20
   45a00:	3806d53a 	srli	r3,r7,20
   45a04:	02000434 	movhi	r8,16
   45a08:	423fffc4 	addi	r8,r8,-1
   45a0c:	1081ffcc 	andi	r2,r2,2047
   45a10:	0241ffc4 	movi	r9,2047
   45a14:	2a14703a 	and	r10,r5,r8
   45a18:	18c1ffcc 	andi	r3,r3,2047
   45a1c:	3a10703a 	and	r8,r7,r8
   45a20:	280ad7fa 	srli	r5,r5,31
   45a24:	380ed7fa 	srli	r7,r7,31
   45a28:	12401d26 	beq	r2,r9,45aa0 <__gedf2+0xa4>
   45a2c:	0241ffc4 	movi	r9,2047
   45a30:	1a401226 	beq	r3,r9,45a7c <__gedf2+0x80>
   45a34:	1000081e 	bne	r2,zero,45a58 <__gedf2+0x5c>
   45a38:	2296b03a 	or	r11,r4,r10
   45a3c:	5813003a 	cmpeq	r9,r11,zero
   45a40:	1800091e 	bne	r3,zero,45a68 <__gedf2+0x6c>
   45a44:	3218b03a 	or	r12,r6,r8
   45a48:	6000071e 	bne	r12,zero,45a68 <__gedf2+0x6c>
   45a4c:	0005883a 	mov	r2,zero
   45a50:	5800101e 	bne	r11,zero,45a94 <__gedf2+0x98>
   45a54:	f800283a 	ret
   45a58:	18000c1e 	bne	r3,zero,45a8c <__gedf2+0x90>
   45a5c:	3212b03a 	or	r9,r6,r8
   45a60:	48000c26 	beq	r9,zero,45a94 <__gedf2+0x98>
   45a64:	0013883a 	mov	r9,zero
   45a68:	39c03fcc 	andi	r7,r7,255
   45a6c:	48000826 	beq	r9,zero,45a90 <__gedf2+0x94>
   45a70:	38000926 	beq	r7,zero,45a98 <__gedf2+0x9c>
   45a74:	00800044 	movi	r2,1
   45a78:	f800283a 	ret
   45a7c:	3212b03a 	or	r9,r6,r8
   45a80:	483fec26 	beq	r9,zero,45a34 <__alt_data_end+0xfffde934>
   45a84:	00bfff84 	movi	r2,-2
   45a88:	f800283a 	ret
   45a8c:	39c03fcc 	andi	r7,r7,255
   45a90:	29c00626 	beq	r5,r7,45aac <__gedf2+0xb0>
   45a94:	283ff726 	beq	r5,zero,45a74 <__alt_data_end+0xfffde974>
   45a98:	00bfffc4 	movi	r2,-1
   45a9c:	f800283a 	ret
   45aa0:	2292b03a 	or	r9,r4,r10
   45aa4:	483fe126 	beq	r9,zero,45a2c <__alt_data_end+0xfffde92c>
   45aa8:	003ff606 	br	45a84 <__alt_data_end+0xfffde984>
   45aac:	18bff916 	blt	r3,r2,45a94 <__alt_data_end+0xfffde994>
   45ab0:	10c00316 	blt	r2,r3,45ac0 <__gedf2+0xc4>
   45ab4:	42bff736 	bltu	r8,r10,45a94 <__alt_data_end+0xfffde994>
   45ab8:	52000326 	beq	r10,r8,45ac8 <__gedf2+0xcc>
   45abc:	5200042e 	bgeu	r10,r8,45ad0 <__gedf2+0xd4>
   45ac0:	283fec1e 	bne	r5,zero,45a74 <__alt_data_end+0xfffde974>
   45ac4:	003ff406 	br	45a98 <__alt_data_end+0xfffde998>
   45ac8:	313ff236 	bltu	r6,r4,45a94 <__alt_data_end+0xfffde994>
   45acc:	21bffc36 	bltu	r4,r6,45ac0 <__alt_data_end+0xfffde9c0>
   45ad0:	0005883a 	mov	r2,zero
   45ad4:	f800283a 	ret

00045ad8 <__muldf3>:
   45ad8:	defff304 	addi	sp,sp,-52
   45adc:	2804d53a 	srli	r2,r5,20
   45ae0:	dd800915 	stw	r22,36(sp)
   45ae4:	282cd7fa 	srli	r22,r5,31
   45ae8:	dc000315 	stw	r16,12(sp)
   45aec:	04000434 	movhi	r16,16
   45af0:	dd400815 	stw	r21,32(sp)
   45af4:	dc800515 	stw	r18,20(sp)
   45af8:	843fffc4 	addi	r16,r16,-1
   45afc:	dfc00c15 	stw	ra,48(sp)
   45b00:	df000b15 	stw	fp,44(sp)
   45b04:	ddc00a15 	stw	r23,40(sp)
   45b08:	dd000715 	stw	r20,28(sp)
   45b0c:	dcc00615 	stw	r19,24(sp)
   45b10:	dc400415 	stw	r17,16(sp)
   45b14:	1481ffcc 	andi	r18,r2,2047
   45b18:	2c20703a 	and	r16,r5,r16
   45b1c:	b02b883a 	mov	r21,r22
   45b20:	b2403fcc 	andi	r9,r22,255
   45b24:	90006026 	beq	r18,zero,45ca8 <__muldf3+0x1d0>
   45b28:	0081ffc4 	movi	r2,2047
   45b2c:	2029883a 	mov	r20,r4
   45b30:	90803626 	beq	r18,r2,45c0c <__muldf3+0x134>
   45b34:	80800434 	orhi	r2,r16,16
   45b38:	100490fa 	slli	r2,r2,3
   45b3c:	2020d77a 	srli	r16,r4,29
   45b40:	202890fa 	slli	r20,r4,3
   45b44:	94bf0044 	addi	r18,r18,-1023
   45b48:	80a0b03a 	or	r16,r16,r2
   45b4c:	0027883a 	mov	r19,zero
   45b50:	0039883a 	mov	fp,zero
   45b54:	3804d53a 	srli	r2,r7,20
   45b58:	382ed7fa 	srli	r23,r7,31
   45b5c:	04400434 	movhi	r17,16
   45b60:	8c7fffc4 	addi	r17,r17,-1
   45b64:	1081ffcc 	andi	r2,r2,2047
   45b68:	3011883a 	mov	r8,r6
   45b6c:	3c62703a 	and	r17,r7,r17
   45b70:	ba803fcc 	andi	r10,r23,255
   45b74:	10006d26 	beq	r2,zero,45d2c <__muldf3+0x254>
   45b78:	00c1ffc4 	movi	r3,2047
   45b7c:	10c06526 	beq	r2,r3,45d14 <__muldf3+0x23c>
   45b80:	88c00434 	orhi	r3,r17,16
   45b84:	180690fa 	slli	r3,r3,3
   45b88:	3022d77a 	srli	r17,r6,29
   45b8c:	301090fa 	slli	r8,r6,3
   45b90:	10bf0044 	addi	r2,r2,-1023
   45b94:	88e2b03a 	or	r17,r17,r3
   45b98:	000b883a 	mov	r5,zero
   45b9c:	9085883a 	add	r2,r18,r2
   45ba0:	2cc8b03a 	or	r4,r5,r19
   45ba4:	00c003c4 	movi	r3,15
   45ba8:	bdacf03a 	xor	r22,r23,r22
   45bac:	12c00044 	addi	r11,r2,1
   45bb0:	19009936 	bltu	r3,r4,45e18 <__muldf3+0x340>
   45bb4:	200890ba 	slli	r4,r4,2
   45bb8:	00c00134 	movhi	r3,4
   45bbc:	18d6f304 	addi	r3,r3,23500
   45bc0:	20c9883a 	add	r4,r4,r3
   45bc4:	20c00017 	ldw	r3,0(r4)
   45bc8:	1800683a 	jmp	r3
   45bcc:	00045e18 	cmpnei	zero,zero,4472
   45bd0:	00045c2c 	andhi	zero,zero,4464
   45bd4:	00045c2c 	andhi	zero,zero,4464
   45bd8:	00045c28 	cmpgeui	zero,zero,4464
   45bdc:	00045df4 	movhi	zero,4471
   45be0:	00045df4 	movhi	zero,4471
   45be4:	00045ddc 	xori	zero,zero,4471
   45be8:	00045c28 	cmpgeui	zero,zero,4464
   45bec:	00045df4 	movhi	zero,4471
   45bf0:	00045ddc 	xori	zero,zero,4471
   45bf4:	00045df4 	movhi	zero,4471
   45bf8:	00045c28 	cmpgeui	zero,zero,4464
   45bfc:	00045e04 	movi	zero,4472
   45c00:	00045e04 	movi	zero,4472
   45c04:	00045e04 	movi	zero,4472
   45c08:	00046020 	cmpeqi	zero,zero,4480
   45c0c:	2404b03a 	or	r2,r4,r16
   45c10:	10006f1e 	bne	r2,zero,45dd0 <__muldf3+0x2f8>
   45c14:	04c00204 	movi	r19,8
   45c18:	0021883a 	mov	r16,zero
   45c1c:	0029883a 	mov	r20,zero
   45c20:	07000084 	movi	fp,2
   45c24:	003fcb06 	br	45b54 <__alt_data_end+0xfffdea54>
   45c28:	502d883a 	mov	r22,r10
   45c2c:	00800084 	movi	r2,2
   45c30:	28805726 	beq	r5,r2,45d90 <__muldf3+0x2b8>
   45c34:	008000c4 	movi	r2,3
   45c38:	28816626 	beq	r5,r2,461d4 <__muldf3+0x6fc>
   45c3c:	00800044 	movi	r2,1
   45c40:	2881411e 	bne	r5,r2,46148 <__muldf3+0x670>
   45c44:	b02b883a 	mov	r21,r22
   45c48:	0005883a 	mov	r2,zero
   45c4c:	000b883a 	mov	r5,zero
   45c50:	0029883a 	mov	r20,zero
   45c54:	1004953a 	slli	r2,r2,20
   45c58:	a8c03fcc 	andi	r3,r21,255
   45c5c:	04400434 	movhi	r17,16
   45c60:	8c7fffc4 	addi	r17,r17,-1
   45c64:	180697fa 	slli	r3,r3,31
   45c68:	2c4a703a 	and	r5,r5,r17
   45c6c:	288ab03a 	or	r5,r5,r2
   45c70:	28c6b03a 	or	r3,r5,r3
   45c74:	a005883a 	mov	r2,r20
   45c78:	dfc00c17 	ldw	ra,48(sp)
   45c7c:	df000b17 	ldw	fp,44(sp)
   45c80:	ddc00a17 	ldw	r23,40(sp)
   45c84:	dd800917 	ldw	r22,36(sp)
   45c88:	dd400817 	ldw	r21,32(sp)
   45c8c:	dd000717 	ldw	r20,28(sp)
   45c90:	dcc00617 	ldw	r19,24(sp)
   45c94:	dc800517 	ldw	r18,20(sp)
   45c98:	dc400417 	ldw	r17,16(sp)
   45c9c:	dc000317 	ldw	r16,12(sp)
   45ca0:	dec00d04 	addi	sp,sp,52
   45ca4:	f800283a 	ret
   45ca8:	2404b03a 	or	r2,r4,r16
   45cac:	2027883a 	mov	r19,r4
   45cb0:	10004226 	beq	r2,zero,45dbc <__muldf3+0x2e4>
   45cb4:	8000fc26 	beq	r16,zero,460a8 <__muldf3+0x5d0>
   45cb8:	8009883a 	mov	r4,r16
   45cbc:	d9800215 	stw	r6,8(sp)
   45cc0:	d9c00015 	stw	r7,0(sp)
   45cc4:	da400115 	stw	r9,4(sp)
   45cc8:	0046f000 	call	46f00 <__clzsi2>
   45ccc:	d9800217 	ldw	r6,8(sp)
   45cd0:	d9c00017 	ldw	r7,0(sp)
   45cd4:	da400117 	ldw	r9,4(sp)
   45cd8:	113ffd44 	addi	r4,r2,-11
   45cdc:	00c00704 	movi	r3,28
   45ce0:	1900ed16 	blt	r3,r4,46098 <__muldf3+0x5c0>
   45ce4:	00c00744 	movi	r3,29
   45ce8:	147ffe04 	addi	r17,r2,-8
   45cec:	1907c83a 	sub	r3,r3,r4
   45cf0:	8460983a 	sll	r16,r16,r17
   45cf4:	98c6d83a 	srl	r3,r19,r3
   45cf8:	9c68983a 	sll	r20,r19,r17
   45cfc:	1c20b03a 	or	r16,r3,r16
   45d00:	1080fcc4 	addi	r2,r2,1011
   45d04:	00a5c83a 	sub	r18,zero,r2
   45d08:	0027883a 	mov	r19,zero
   45d0c:	0039883a 	mov	fp,zero
   45d10:	003f9006 	br	45b54 <__alt_data_end+0xfffdea54>
   45d14:	3446b03a 	or	r3,r6,r17
   45d18:	1800261e 	bne	r3,zero,45db4 <__muldf3+0x2dc>
   45d1c:	0023883a 	mov	r17,zero
   45d20:	0011883a 	mov	r8,zero
   45d24:	01400084 	movi	r5,2
   45d28:	003f9c06 	br	45b9c <__alt_data_end+0xfffdea9c>
   45d2c:	3446b03a 	or	r3,r6,r17
   45d30:	18001c26 	beq	r3,zero,45da4 <__muldf3+0x2cc>
   45d34:	8800ce26 	beq	r17,zero,46070 <__muldf3+0x598>
   45d38:	8809883a 	mov	r4,r17
   45d3c:	d9800215 	stw	r6,8(sp)
   45d40:	da400115 	stw	r9,4(sp)
   45d44:	da800015 	stw	r10,0(sp)
   45d48:	0046f000 	call	46f00 <__clzsi2>
   45d4c:	d9800217 	ldw	r6,8(sp)
   45d50:	da400117 	ldw	r9,4(sp)
   45d54:	da800017 	ldw	r10,0(sp)
   45d58:	113ffd44 	addi	r4,r2,-11
   45d5c:	00c00704 	movi	r3,28
   45d60:	1900bf16 	blt	r3,r4,46060 <__muldf3+0x588>
   45d64:	00c00744 	movi	r3,29
   45d68:	123ffe04 	addi	r8,r2,-8
   45d6c:	1907c83a 	sub	r3,r3,r4
   45d70:	8a22983a 	sll	r17,r17,r8
   45d74:	30c6d83a 	srl	r3,r6,r3
   45d78:	3210983a 	sll	r8,r6,r8
   45d7c:	1c62b03a 	or	r17,r3,r17
   45d80:	1080fcc4 	addi	r2,r2,1011
   45d84:	0085c83a 	sub	r2,zero,r2
   45d88:	000b883a 	mov	r5,zero
   45d8c:	003f8306 	br	45b9c <__alt_data_end+0xfffdea9c>
   45d90:	b02b883a 	mov	r21,r22
   45d94:	0081ffc4 	movi	r2,2047
   45d98:	000b883a 	mov	r5,zero
   45d9c:	0029883a 	mov	r20,zero
   45da0:	003fac06 	br	45c54 <__alt_data_end+0xfffdeb54>
   45da4:	0023883a 	mov	r17,zero
   45da8:	0011883a 	mov	r8,zero
   45dac:	01400044 	movi	r5,1
   45db0:	003f7a06 	br	45b9c <__alt_data_end+0xfffdea9c>
   45db4:	014000c4 	movi	r5,3
   45db8:	003f7806 	br	45b9c <__alt_data_end+0xfffdea9c>
   45dbc:	04c00104 	movi	r19,4
   45dc0:	0021883a 	mov	r16,zero
   45dc4:	0029883a 	mov	r20,zero
   45dc8:	07000044 	movi	fp,1
   45dcc:	003f6106 	br	45b54 <__alt_data_end+0xfffdea54>
   45dd0:	04c00304 	movi	r19,12
   45dd4:	070000c4 	movi	fp,3
   45dd8:	003f5e06 	br	45b54 <__alt_data_end+0xfffdea54>
   45ddc:	01400434 	movhi	r5,16
   45de0:	002b883a 	mov	r21,zero
   45de4:	297fffc4 	addi	r5,r5,-1
   45de8:	053fffc4 	movi	r20,-1
   45dec:	0081ffc4 	movi	r2,2047
   45df0:	003f9806 	br	45c54 <__alt_data_end+0xfffdeb54>
   45df4:	8023883a 	mov	r17,r16
   45df8:	a011883a 	mov	r8,r20
   45dfc:	e00b883a 	mov	r5,fp
   45e00:	003f8a06 	br	45c2c <__alt_data_end+0xfffdeb2c>
   45e04:	8023883a 	mov	r17,r16
   45e08:	a011883a 	mov	r8,r20
   45e0c:	482d883a 	mov	r22,r9
   45e10:	e00b883a 	mov	r5,fp
   45e14:	003f8506 	br	45c2c <__alt_data_end+0xfffdeb2c>
   45e18:	a00ad43a 	srli	r5,r20,16
   45e1c:	401ad43a 	srli	r13,r8,16
   45e20:	a53fffcc 	andi	r20,r20,65535
   45e24:	423fffcc 	andi	r8,r8,65535
   45e28:	4519383a 	mul	r12,r8,r20
   45e2c:	4147383a 	mul	r3,r8,r5
   45e30:	6d09383a 	mul	r4,r13,r20
   45e34:	600cd43a 	srli	r6,r12,16
   45e38:	2b5d383a 	mul	r14,r5,r13
   45e3c:	20c9883a 	add	r4,r4,r3
   45e40:	310d883a 	add	r6,r6,r4
   45e44:	30c0022e 	bgeu	r6,r3,45e50 <__muldf3+0x378>
   45e48:	00c00074 	movhi	r3,1
   45e4c:	70dd883a 	add	r14,r14,r3
   45e50:	8826d43a 	srli	r19,r17,16
   45e54:	8bffffcc 	andi	r15,r17,65535
   45e58:	7d23383a 	mul	r17,r15,r20
   45e5c:	7949383a 	mul	r4,r15,r5
   45e60:	9d29383a 	mul	r20,r19,r20
   45e64:	8814d43a 	srli	r10,r17,16
   45e68:	3012943a 	slli	r9,r6,16
   45e6c:	a129883a 	add	r20,r20,r4
   45e70:	633fffcc 	andi	r12,r12,65535
   45e74:	5515883a 	add	r10,r10,r20
   45e78:	3006d43a 	srli	r3,r6,16
   45e7c:	4b13883a 	add	r9,r9,r12
   45e80:	2ccb383a 	mul	r5,r5,r19
   45e84:	5100022e 	bgeu	r10,r4,45e90 <__muldf3+0x3b8>
   45e88:	01000074 	movhi	r4,1
   45e8c:	290b883a 	add	r5,r5,r4
   45e90:	802ad43a 	srli	r21,r16,16
   45e94:	843fffcc 	andi	r16,r16,65535
   45e98:	440d383a 	mul	r6,r8,r16
   45e9c:	4565383a 	mul	r18,r8,r21
   45ea0:	8349383a 	mul	r4,r16,r13
   45ea4:	500e943a 	slli	r7,r10,16
   45ea8:	3010d43a 	srli	r8,r6,16
   45eac:	5028d43a 	srli	r20,r10,16
   45eb0:	2489883a 	add	r4,r4,r18
   45eb4:	8abfffcc 	andi	r10,r17,65535
   45eb8:	3a95883a 	add	r10,r7,r10
   45ebc:	4119883a 	add	r12,r8,r4
   45ec0:	a169883a 	add	r20,r20,r5
   45ec4:	1a87883a 	add	r3,r3,r10
   45ec8:	6d5b383a 	mul	r13,r13,r21
   45ecc:	6480022e 	bgeu	r12,r18,45ed8 <__muldf3+0x400>
   45ed0:	01000074 	movhi	r4,1
   45ed4:	691b883a 	add	r13,r13,r4
   45ed8:	7c25383a 	mul	r18,r15,r16
   45edc:	7d4b383a 	mul	r5,r15,r21
   45ee0:	84cf383a 	mul	r7,r16,r19
   45ee4:	901ed43a 	srli	r15,r18,16
   45ee8:	6008d43a 	srli	r4,r12,16
   45eec:	6010943a 	slli	r8,r12,16
   45ef0:	394f883a 	add	r7,r7,r5
   45ef4:	333fffcc 	andi	r12,r6,65535
   45ef8:	79df883a 	add	r15,r15,r7
   45efc:	235b883a 	add	r13,r4,r13
   45f00:	9d63383a 	mul	r17,r19,r21
   45f04:	4309883a 	add	r4,r8,r12
   45f08:	7940022e 	bgeu	r15,r5,45f14 <__muldf3+0x43c>
   45f0c:	01400074 	movhi	r5,1
   45f10:	8963883a 	add	r17,r17,r5
   45f14:	780a943a 	slli	r5,r15,16
   45f18:	91bfffcc 	andi	r6,r18,65535
   45f1c:	70c7883a 	add	r3,r14,r3
   45f20:	298d883a 	add	r6,r5,r6
   45f24:	1a8f803a 	cmpltu	r7,r3,r10
   45f28:	350b883a 	add	r5,r6,r20
   45f2c:	20c7883a 	add	r3,r4,r3
   45f30:	3955883a 	add	r10,r7,r5
   45f34:	1909803a 	cmpltu	r4,r3,r4
   45f38:	6a91883a 	add	r8,r13,r10
   45f3c:	780cd43a 	srli	r6,r15,16
   45f40:	2219883a 	add	r12,r4,r8
   45f44:	2d0b803a 	cmpltu	r5,r5,r20
   45f48:	51cf803a 	cmpltu	r7,r10,r7
   45f4c:	29ceb03a 	or	r7,r5,r7
   45f50:	4351803a 	cmpltu	r8,r8,r13
   45f54:	610b803a 	cmpltu	r5,r12,r4
   45f58:	4148b03a 	or	r4,r8,r5
   45f5c:	398f883a 	add	r7,r7,r6
   45f60:	3909883a 	add	r4,r7,r4
   45f64:	1810927a 	slli	r8,r3,9
   45f68:	2449883a 	add	r4,r4,r17
   45f6c:	2008927a 	slli	r4,r4,9
   45f70:	6022d5fa 	srli	r17,r12,23
   45f74:	1806d5fa 	srli	r3,r3,23
   45f78:	4252b03a 	or	r9,r8,r9
   45f7c:	600a927a 	slli	r5,r12,9
   45f80:	4810c03a 	cmpne	r8,r9,zero
   45f84:	2462b03a 	or	r17,r4,r17
   45f88:	40c6b03a 	or	r3,r8,r3
   45f8c:	8900402c 	andhi	r4,r17,256
   45f90:	1950b03a 	or	r8,r3,r5
   45f94:	20000726 	beq	r4,zero,45fb4 <__muldf3+0x4dc>
   45f98:	4006d07a 	srli	r3,r8,1
   45f9c:	880497fa 	slli	r2,r17,31
   45fa0:	4200004c 	andi	r8,r8,1
   45fa4:	8822d07a 	srli	r17,r17,1
   45fa8:	1a10b03a 	or	r8,r3,r8
   45fac:	1210b03a 	or	r8,r2,r8
   45fb0:	5805883a 	mov	r2,r11
   45fb4:	1140ffc4 	addi	r5,r2,1023
   45fb8:	0140440e 	bge	zero,r5,460cc <__muldf3+0x5f4>
   45fbc:	40c001cc 	andi	r3,r8,7
   45fc0:	18000726 	beq	r3,zero,45fe0 <__muldf3+0x508>
   45fc4:	40c003cc 	andi	r3,r8,15
   45fc8:	01000104 	movi	r4,4
   45fcc:	19000426 	beq	r3,r4,45fe0 <__muldf3+0x508>
   45fd0:	4107883a 	add	r3,r8,r4
   45fd4:	1a11803a 	cmpltu	r8,r3,r8
   45fd8:	8a23883a 	add	r17,r17,r8
   45fdc:	1811883a 	mov	r8,r3
   45fe0:	88c0402c 	andhi	r3,r17,256
   45fe4:	18000426 	beq	r3,zero,45ff8 <__muldf3+0x520>
   45fe8:	11410004 	addi	r5,r2,1024
   45fec:	00bfc034 	movhi	r2,65280
   45ff0:	10bfffc4 	addi	r2,r2,-1
   45ff4:	88a2703a 	and	r17,r17,r2
   45ff8:	0081ff84 	movi	r2,2046
   45ffc:	117f6416 	blt	r2,r5,45d90 <__alt_data_end+0xfffdec90>
   46000:	8828977a 	slli	r20,r17,29
   46004:	4010d0fa 	srli	r8,r8,3
   46008:	8822927a 	slli	r17,r17,9
   4600c:	2881ffcc 	andi	r2,r5,2047
   46010:	a228b03a 	or	r20,r20,r8
   46014:	880ad33a 	srli	r5,r17,12
   46018:	b02b883a 	mov	r21,r22
   4601c:	003f0d06 	br	45c54 <__alt_data_end+0xfffdeb54>
   46020:	8080022c 	andhi	r2,r16,8
   46024:	10000926 	beq	r2,zero,4604c <__muldf3+0x574>
   46028:	8880022c 	andhi	r2,r17,8
   4602c:	1000071e 	bne	r2,zero,4604c <__muldf3+0x574>
   46030:	00800434 	movhi	r2,16
   46034:	89400234 	orhi	r5,r17,8
   46038:	10bfffc4 	addi	r2,r2,-1
   4603c:	b82b883a 	mov	r21,r23
   46040:	288a703a 	and	r5,r5,r2
   46044:	4029883a 	mov	r20,r8
   46048:	003f6806 	br	45dec <__alt_data_end+0xfffdecec>
   4604c:	00800434 	movhi	r2,16
   46050:	81400234 	orhi	r5,r16,8
   46054:	10bfffc4 	addi	r2,r2,-1
   46058:	288a703a 	and	r5,r5,r2
   4605c:	003f6306 	br	45dec <__alt_data_end+0xfffdecec>
   46060:	147ff604 	addi	r17,r2,-40
   46064:	3462983a 	sll	r17,r6,r17
   46068:	0011883a 	mov	r8,zero
   4606c:	003f4406 	br	45d80 <__alt_data_end+0xfffdec80>
   46070:	3009883a 	mov	r4,r6
   46074:	d9800215 	stw	r6,8(sp)
   46078:	da400115 	stw	r9,4(sp)
   4607c:	da800015 	stw	r10,0(sp)
   46080:	0046f000 	call	46f00 <__clzsi2>
   46084:	10800804 	addi	r2,r2,32
   46088:	da800017 	ldw	r10,0(sp)
   4608c:	da400117 	ldw	r9,4(sp)
   46090:	d9800217 	ldw	r6,8(sp)
   46094:	003f3006 	br	45d58 <__alt_data_end+0xfffdec58>
   46098:	143ff604 	addi	r16,r2,-40
   4609c:	9c20983a 	sll	r16,r19,r16
   460a0:	0029883a 	mov	r20,zero
   460a4:	003f1606 	br	45d00 <__alt_data_end+0xfffdec00>
   460a8:	d9800215 	stw	r6,8(sp)
   460ac:	d9c00015 	stw	r7,0(sp)
   460b0:	da400115 	stw	r9,4(sp)
   460b4:	0046f000 	call	46f00 <__clzsi2>
   460b8:	10800804 	addi	r2,r2,32
   460bc:	da400117 	ldw	r9,4(sp)
   460c0:	d9c00017 	ldw	r7,0(sp)
   460c4:	d9800217 	ldw	r6,8(sp)
   460c8:	003f0306 	br	45cd8 <__alt_data_end+0xfffdebd8>
   460cc:	00c00044 	movi	r3,1
   460d0:	1947c83a 	sub	r3,r3,r5
   460d4:	00800e04 	movi	r2,56
   460d8:	10feda16 	blt	r2,r3,45c44 <__alt_data_end+0xfffdeb44>
   460dc:	008007c4 	movi	r2,31
   460e0:	10c01b16 	blt	r2,r3,46150 <__muldf3+0x678>
   460e4:	00800804 	movi	r2,32
   460e8:	10c5c83a 	sub	r2,r2,r3
   460ec:	888a983a 	sll	r5,r17,r2
   460f0:	40c8d83a 	srl	r4,r8,r3
   460f4:	4084983a 	sll	r2,r8,r2
   460f8:	88e2d83a 	srl	r17,r17,r3
   460fc:	2906b03a 	or	r3,r5,r4
   46100:	1004c03a 	cmpne	r2,r2,zero
   46104:	1886b03a 	or	r3,r3,r2
   46108:	188001cc 	andi	r2,r3,7
   4610c:	10000726 	beq	r2,zero,4612c <__muldf3+0x654>
   46110:	188003cc 	andi	r2,r3,15
   46114:	01000104 	movi	r4,4
   46118:	11000426 	beq	r2,r4,4612c <__muldf3+0x654>
   4611c:	1805883a 	mov	r2,r3
   46120:	10c00104 	addi	r3,r2,4
   46124:	1885803a 	cmpltu	r2,r3,r2
   46128:	88a3883a 	add	r17,r17,r2
   4612c:	8880202c 	andhi	r2,r17,128
   46130:	10001c26 	beq	r2,zero,461a4 <__muldf3+0x6cc>
   46134:	b02b883a 	mov	r21,r22
   46138:	00800044 	movi	r2,1
   4613c:	000b883a 	mov	r5,zero
   46140:	0029883a 	mov	r20,zero
   46144:	003ec306 	br	45c54 <__alt_data_end+0xfffdeb54>
   46148:	5805883a 	mov	r2,r11
   4614c:	003f9906 	br	45fb4 <__alt_data_end+0xfffdeeb4>
   46150:	00bff844 	movi	r2,-31
   46154:	1145c83a 	sub	r2,r2,r5
   46158:	8888d83a 	srl	r4,r17,r2
   4615c:	00800804 	movi	r2,32
   46160:	18801a26 	beq	r3,r2,461cc <__muldf3+0x6f4>
   46164:	00801004 	movi	r2,64
   46168:	10c5c83a 	sub	r2,r2,r3
   4616c:	8884983a 	sll	r2,r17,r2
   46170:	1204b03a 	or	r2,r2,r8
   46174:	1004c03a 	cmpne	r2,r2,zero
   46178:	2084b03a 	or	r2,r4,r2
   4617c:	144001cc 	andi	r17,r2,7
   46180:	88000d1e 	bne	r17,zero,461b8 <__muldf3+0x6e0>
   46184:	000b883a 	mov	r5,zero
   46188:	1028d0fa 	srli	r20,r2,3
   4618c:	b02b883a 	mov	r21,r22
   46190:	0005883a 	mov	r2,zero
   46194:	a468b03a 	or	r20,r20,r17
   46198:	003eae06 	br	45c54 <__alt_data_end+0xfffdeb54>
   4619c:	1007883a 	mov	r3,r2
   461a0:	0023883a 	mov	r17,zero
   461a4:	880a927a 	slli	r5,r17,9
   461a8:	1805883a 	mov	r2,r3
   461ac:	8822977a 	slli	r17,r17,29
   461b0:	280ad33a 	srli	r5,r5,12
   461b4:	003ff406 	br	46188 <__alt_data_end+0xfffdf088>
   461b8:	10c003cc 	andi	r3,r2,15
   461bc:	01000104 	movi	r4,4
   461c0:	193ff626 	beq	r3,r4,4619c <__alt_data_end+0xfffdf09c>
   461c4:	0023883a 	mov	r17,zero
   461c8:	003fd506 	br	46120 <__alt_data_end+0xfffdf020>
   461cc:	0005883a 	mov	r2,zero
   461d0:	003fe706 	br	46170 <__alt_data_end+0xfffdf070>
   461d4:	00800434 	movhi	r2,16
   461d8:	89400234 	orhi	r5,r17,8
   461dc:	10bfffc4 	addi	r2,r2,-1
   461e0:	b02b883a 	mov	r21,r22
   461e4:	288a703a 	and	r5,r5,r2
   461e8:	4029883a 	mov	r20,r8
   461ec:	003eff06 	br	45dec <__alt_data_end+0xfffdecec>

000461f0 <__subdf3>:
   461f0:	02000434 	movhi	r8,16
   461f4:	423fffc4 	addi	r8,r8,-1
   461f8:	defffb04 	addi	sp,sp,-20
   461fc:	2a14703a 	and	r10,r5,r8
   46200:	3812d53a 	srli	r9,r7,20
   46204:	3a10703a 	and	r8,r7,r8
   46208:	2006d77a 	srli	r3,r4,29
   4620c:	3004d77a 	srli	r2,r6,29
   46210:	dc000015 	stw	r16,0(sp)
   46214:	501490fa 	slli	r10,r10,3
   46218:	2820d53a 	srli	r16,r5,20
   4621c:	401090fa 	slli	r8,r8,3
   46220:	dc800215 	stw	r18,8(sp)
   46224:	dc400115 	stw	r17,4(sp)
   46228:	dfc00415 	stw	ra,16(sp)
   4622c:	202290fa 	slli	r17,r4,3
   46230:	dcc00315 	stw	r19,12(sp)
   46234:	4a41ffcc 	andi	r9,r9,2047
   46238:	0101ffc4 	movi	r4,2047
   4623c:	2824d7fa 	srli	r18,r5,31
   46240:	8401ffcc 	andi	r16,r16,2047
   46244:	50c6b03a 	or	r3,r10,r3
   46248:	380ed7fa 	srli	r7,r7,31
   4624c:	408ab03a 	or	r5,r8,r2
   46250:	300c90fa 	slli	r6,r6,3
   46254:	49009626 	beq	r9,r4,464b0 <__subdf3+0x2c0>
   46258:	39c0005c 	xori	r7,r7,1
   4625c:	8245c83a 	sub	r2,r16,r9
   46260:	3c807426 	beq	r7,r18,46434 <__subdf3+0x244>
   46264:	0080af0e 	bge	zero,r2,46524 <__subdf3+0x334>
   46268:	48002a1e 	bne	r9,zero,46314 <__subdf3+0x124>
   4626c:	2988b03a 	or	r4,r5,r6
   46270:	20009a1e 	bne	r4,zero,464dc <__subdf3+0x2ec>
   46274:	888001cc 	andi	r2,r17,7
   46278:	10000726 	beq	r2,zero,46298 <__subdf3+0xa8>
   4627c:	888003cc 	andi	r2,r17,15
   46280:	01000104 	movi	r4,4
   46284:	11000426 	beq	r2,r4,46298 <__subdf3+0xa8>
   46288:	890b883a 	add	r5,r17,r4
   4628c:	2c63803a 	cmpltu	r17,r5,r17
   46290:	1c47883a 	add	r3,r3,r17
   46294:	2823883a 	mov	r17,r5
   46298:	1880202c 	andhi	r2,r3,128
   4629c:	10005926 	beq	r2,zero,46404 <__subdf3+0x214>
   462a0:	84000044 	addi	r16,r16,1
   462a4:	0081ffc4 	movi	r2,2047
   462a8:	8080be26 	beq	r16,r2,465a4 <__subdf3+0x3b4>
   462ac:	017fe034 	movhi	r5,65408
   462b0:	297fffc4 	addi	r5,r5,-1
   462b4:	1946703a 	and	r3,r3,r5
   462b8:	1804977a 	slli	r2,r3,29
   462bc:	1806927a 	slli	r3,r3,9
   462c0:	8822d0fa 	srli	r17,r17,3
   462c4:	8401ffcc 	andi	r16,r16,2047
   462c8:	180ad33a 	srli	r5,r3,12
   462cc:	9100004c 	andi	r4,r18,1
   462d0:	1444b03a 	or	r2,r2,r17
   462d4:	80c1ffcc 	andi	r3,r16,2047
   462d8:	1820953a 	slli	r16,r3,20
   462dc:	20c03fcc 	andi	r3,r4,255
   462e0:	180897fa 	slli	r4,r3,31
   462e4:	00c00434 	movhi	r3,16
   462e8:	18ffffc4 	addi	r3,r3,-1
   462ec:	28c6703a 	and	r3,r5,r3
   462f0:	1c06b03a 	or	r3,r3,r16
   462f4:	1906b03a 	or	r3,r3,r4
   462f8:	dfc00417 	ldw	ra,16(sp)
   462fc:	dcc00317 	ldw	r19,12(sp)
   46300:	dc800217 	ldw	r18,8(sp)
   46304:	dc400117 	ldw	r17,4(sp)
   46308:	dc000017 	ldw	r16,0(sp)
   4630c:	dec00504 	addi	sp,sp,20
   46310:	f800283a 	ret
   46314:	0101ffc4 	movi	r4,2047
   46318:	813fd626 	beq	r16,r4,46274 <__alt_data_end+0xfffdf174>
   4631c:	29402034 	orhi	r5,r5,128
   46320:	01000e04 	movi	r4,56
   46324:	2080a316 	blt	r4,r2,465b4 <__subdf3+0x3c4>
   46328:	010007c4 	movi	r4,31
   4632c:	2080c616 	blt	r4,r2,46648 <__subdf3+0x458>
   46330:	01000804 	movi	r4,32
   46334:	2089c83a 	sub	r4,r4,r2
   46338:	2910983a 	sll	r8,r5,r4
   4633c:	308ed83a 	srl	r7,r6,r2
   46340:	3108983a 	sll	r4,r6,r4
   46344:	2884d83a 	srl	r2,r5,r2
   46348:	41ccb03a 	or	r6,r8,r7
   4634c:	2008c03a 	cmpne	r4,r4,zero
   46350:	310cb03a 	or	r6,r6,r4
   46354:	898dc83a 	sub	r6,r17,r6
   46358:	89a3803a 	cmpltu	r17,r17,r6
   4635c:	1887c83a 	sub	r3,r3,r2
   46360:	1c47c83a 	sub	r3,r3,r17
   46364:	3023883a 	mov	r17,r6
   46368:	1880202c 	andhi	r2,r3,128
   4636c:	10002326 	beq	r2,zero,463fc <__subdf3+0x20c>
   46370:	04c02034 	movhi	r19,128
   46374:	9cffffc4 	addi	r19,r19,-1
   46378:	1ce6703a 	and	r19,r3,r19
   4637c:	98007a26 	beq	r19,zero,46568 <__subdf3+0x378>
   46380:	9809883a 	mov	r4,r19
   46384:	0046f000 	call	46f00 <__clzsi2>
   46388:	113ffe04 	addi	r4,r2,-8
   4638c:	00c007c4 	movi	r3,31
   46390:	19007b16 	blt	r3,r4,46580 <__subdf3+0x390>
   46394:	00800804 	movi	r2,32
   46398:	1105c83a 	sub	r2,r2,r4
   4639c:	8884d83a 	srl	r2,r17,r2
   463a0:	9906983a 	sll	r3,r19,r4
   463a4:	8922983a 	sll	r17,r17,r4
   463a8:	10c4b03a 	or	r2,r2,r3
   463ac:	24007816 	blt	r4,r16,46590 <__subdf3+0x3a0>
   463b0:	2421c83a 	sub	r16,r4,r16
   463b4:	80c00044 	addi	r3,r16,1
   463b8:	010007c4 	movi	r4,31
   463bc:	20c09516 	blt	r4,r3,46614 <__subdf3+0x424>
   463c0:	01400804 	movi	r5,32
   463c4:	28cbc83a 	sub	r5,r5,r3
   463c8:	88c8d83a 	srl	r4,r17,r3
   463cc:	8962983a 	sll	r17,r17,r5
   463d0:	114a983a 	sll	r5,r2,r5
   463d4:	10c6d83a 	srl	r3,r2,r3
   463d8:	8804c03a 	cmpne	r2,r17,zero
   463dc:	290ab03a 	or	r5,r5,r4
   463e0:	28a2b03a 	or	r17,r5,r2
   463e4:	0021883a 	mov	r16,zero
   463e8:	003fa206 	br	46274 <__alt_data_end+0xfffdf174>
   463ec:	2090b03a 	or	r8,r4,r2
   463f0:	40018e26 	beq	r8,zero,46a2c <__subdf3+0x83c>
   463f4:	1007883a 	mov	r3,r2
   463f8:	2023883a 	mov	r17,r4
   463fc:	888001cc 	andi	r2,r17,7
   46400:	103f9e1e 	bne	r2,zero,4627c <__alt_data_end+0xfffdf17c>
   46404:	1804977a 	slli	r2,r3,29
   46408:	8822d0fa 	srli	r17,r17,3
   4640c:	1810d0fa 	srli	r8,r3,3
   46410:	9100004c 	andi	r4,r18,1
   46414:	1444b03a 	or	r2,r2,r17
   46418:	00c1ffc4 	movi	r3,2047
   4641c:	80c02826 	beq	r16,r3,464c0 <__subdf3+0x2d0>
   46420:	01400434 	movhi	r5,16
   46424:	297fffc4 	addi	r5,r5,-1
   46428:	80e0703a 	and	r16,r16,r3
   4642c:	414a703a 	and	r5,r8,r5
   46430:	003fa806 	br	462d4 <__alt_data_end+0xfffdf1d4>
   46434:	0080630e 	bge	zero,r2,465c4 <__subdf3+0x3d4>
   46438:	48003026 	beq	r9,zero,464fc <__subdf3+0x30c>
   4643c:	0101ffc4 	movi	r4,2047
   46440:	813f8c26 	beq	r16,r4,46274 <__alt_data_end+0xfffdf174>
   46444:	29402034 	orhi	r5,r5,128
   46448:	01000e04 	movi	r4,56
   4644c:	2080a90e 	bge	r4,r2,466f4 <__subdf3+0x504>
   46450:	298cb03a 	or	r6,r5,r6
   46454:	3012c03a 	cmpne	r9,r6,zero
   46458:	0005883a 	mov	r2,zero
   4645c:	4c53883a 	add	r9,r9,r17
   46460:	4c63803a 	cmpltu	r17,r9,r17
   46464:	10c7883a 	add	r3,r2,r3
   46468:	88c7883a 	add	r3,r17,r3
   4646c:	4823883a 	mov	r17,r9
   46470:	1880202c 	andhi	r2,r3,128
   46474:	1000d026 	beq	r2,zero,467b8 <__subdf3+0x5c8>
   46478:	84000044 	addi	r16,r16,1
   4647c:	0081ffc4 	movi	r2,2047
   46480:	8080fe26 	beq	r16,r2,4687c <__subdf3+0x68c>
   46484:	00bfe034 	movhi	r2,65408
   46488:	10bfffc4 	addi	r2,r2,-1
   4648c:	1886703a 	and	r3,r3,r2
   46490:	880ad07a 	srli	r5,r17,1
   46494:	180497fa 	slli	r2,r3,31
   46498:	8900004c 	andi	r4,r17,1
   4649c:	2922b03a 	or	r17,r5,r4
   464a0:	1806d07a 	srli	r3,r3,1
   464a4:	1462b03a 	or	r17,r2,r17
   464a8:	3825883a 	mov	r18,r7
   464ac:	003f7106 	br	46274 <__alt_data_end+0xfffdf174>
   464b0:	2984b03a 	or	r2,r5,r6
   464b4:	103f6826 	beq	r2,zero,46258 <__alt_data_end+0xfffdf158>
   464b8:	39c03fcc 	andi	r7,r7,255
   464bc:	003f6706 	br	4625c <__alt_data_end+0xfffdf15c>
   464c0:	4086b03a 	or	r3,r8,r2
   464c4:	18015226 	beq	r3,zero,46a10 <__subdf3+0x820>
   464c8:	00c00434 	movhi	r3,16
   464cc:	41400234 	orhi	r5,r8,8
   464d0:	18ffffc4 	addi	r3,r3,-1
   464d4:	28ca703a 	and	r5,r5,r3
   464d8:	003f7e06 	br	462d4 <__alt_data_end+0xfffdf1d4>
   464dc:	10bfffc4 	addi	r2,r2,-1
   464e0:	1000491e 	bne	r2,zero,46608 <__subdf3+0x418>
   464e4:	898fc83a 	sub	r7,r17,r6
   464e8:	89e3803a 	cmpltu	r17,r17,r7
   464ec:	1947c83a 	sub	r3,r3,r5
   464f0:	1c47c83a 	sub	r3,r3,r17
   464f4:	3823883a 	mov	r17,r7
   464f8:	003f9b06 	br	46368 <__alt_data_end+0xfffdf268>
   464fc:	2988b03a 	or	r4,r5,r6
   46500:	203f5c26 	beq	r4,zero,46274 <__alt_data_end+0xfffdf174>
   46504:	10bfffc4 	addi	r2,r2,-1
   46508:	1000931e 	bne	r2,zero,46758 <__subdf3+0x568>
   4650c:	898d883a 	add	r6,r17,r6
   46510:	3463803a 	cmpltu	r17,r6,r17
   46514:	1947883a 	add	r3,r3,r5
   46518:	88c7883a 	add	r3,r17,r3
   4651c:	3023883a 	mov	r17,r6
   46520:	003fd306 	br	46470 <__alt_data_end+0xfffdf370>
   46524:	1000541e 	bne	r2,zero,46678 <__subdf3+0x488>
   46528:	80800044 	addi	r2,r16,1
   4652c:	1081ffcc 	andi	r2,r2,2047
   46530:	01000044 	movi	r4,1
   46534:	2080a20e 	bge	r4,r2,467c0 <__subdf3+0x5d0>
   46538:	8989c83a 	sub	r4,r17,r6
   4653c:	8905803a 	cmpltu	r2,r17,r4
   46540:	1967c83a 	sub	r19,r3,r5
   46544:	98a7c83a 	sub	r19,r19,r2
   46548:	9880202c 	andhi	r2,r19,128
   4654c:	10006326 	beq	r2,zero,466dc <__subdf3+0x4ec>
   46550:	3463c83a 	sub	r17,r6,r17
   46554:	28c7c83a 	sub	r3,r5,r3
   46558:	344d803a 	cmpltu	r6,r6,r17
   4655c:	19a7c83a 	sub	r19,r3,r6
   46560:	3825883a 	mov	r18,r7
   46564:	983f861e 	bne	r19,zero,46380 <__alt_data_end+0xfffdf280>
   46568:	8809883a 	mov	r4,r17
   4656c:	0046f000 	call	46f00 <__clzsi2>
   46570:	10800804 	addi	r2,r2,32
   46574:	113ffe04 	addi	r4,r2,-8
   46578:	00c007c4 	movi	r3,31
   4657c:	193f850e 	bge	r3,r4,46394 <__alt_data_end+0xfffdf294>
   46580:	10bff604 	addi	r2,r2,-40
   46584:	8884983a 	sll	r2,r17,r2
   46588:	0023883a 	mov	r17,zero
   4658c:	243f880e 	bge	r4,r16,463b0 <__alt_data_end+0xfffdf2b0>
   46590:	00ffe034 	movhi	r3,65408
   46594:	18ffffc4 	addi	r3,r3,-1
   46598:	8121c83a 	sub	r16,r16,r4
   4659c:	10c6703a 	and	r3,r2,r3
   465a0:	003f3406 	br	46274 <__alt_data_end+0xfffdf174>
   465a4:	9100004c 	andi	r4,r18,1
   465a8:	000b883a 	mov	r5,zero
   465ac:	0005883a 	mov	r2,zero
   465b0:	003f4806 	br	462d4 <__alt_data_end+0xfffdf1d4>
   465b4:	298cb03a 	or	r6,r5,r6
   465b8:	300cc03a 	cmpne	r6,r6,zero
   465bc:	0005883a 	mov	r2,zero
   465c0:	003f6406 	br	46354 <__alt_data_end+0xfffdf254>
   465c4:	10009a1e 	bne	r2,zero,46830 <__subdf3+0x640>
   465c8:	82400044 	addi	r9,r16,1
   465cc:	4881ffcc 	andi	r2,r9,2047
   465d0:	02800044 	movi	r10,1
   465d4:	5080670e 	bge	r10,r2,46774 <__subdf3+0x584>
   465d8:	0081ffc4 	movi	r2,2047
   465dc:	4880af26 	beq	r9,r2,4689c <__subdf3+0x6ac>
   465e0:	898d883a 	add	r6,r17,r6
   465e4:	1945883a 	add	r2,r3,r5
   465e8:	3447803a 	cmpltu	r3,r6,r17
   465ec:	1887883a 	add	r3,r3,r2
   465f0:	182297fa 	slli	r17,r3,31
   465f4:	300cd07a 	srli	r6,r6,1
   465f8:	1806d07a 	srli	r3,r3,1
   465fc:	4821883a 	mov	r16,r9
   46600:	89a2b03a 	or	r17,r17,r6
   46604:	003f1b06 	br	46274 <__alt_data_end+0xfffdf174>
   46608:	0101ffc4 	movi	r4,2047
   4660c:	813f441e 	bne	r16,r4,46320 <__alt_data_end+0xfffdf220>
   46610:	003f1806 	br	46274 <__alt_data_end+0xfffdf174>
   46614:	843ff844 	addi	r16,r16,-31
   46618:	01400804 	movi	r5,32
   4661c:	1408d83a 	srl	r4,r2,r16
   46620:	19405026 	beq	r3,r5,46764 <__subdf3+0x574>
   46624:	01401004 	movi	r5,64
   46628:	28c7c83a 	sub	r3,r5,r3
   4662c:	10c4983a 	sll	r2,r2,r3
   46630:	88a2b03a 	or	r17,r17,r2
   46634:	8822c03a 	cmpne	r17,r17,zero
   46638:	2462b03a 	or	r17,r4,r17
   4663c:	0007883a 	mov	r3,zero
   46640:	0021883a 	mov	r16,zero
   46644:	003f6d06 	br	463fc <__alt_data_end+0xfffdf2fc>
   46648:	11fff804 	addi	r7,r2,-32
   4664c:	01000804 	movi	r4,32
   46650:	29ced83a 	srl	r7,r5,r7
   46654:	11004526 	beq	r2,r4,4676c <__subdf3+0x57c>
   46658:	01001004 	movi	r4,64
   4665c:	2089c83a 	sub	r4,r4,r2
   46660:	2904983a 	sll	r2,r5,r4
   46664:	118cb03a 	or	r6,r2,r6
   46668:	300cc03a 	cmpne	r6,r6,zero
   4666c:	398cb03a 	or	r6,r7,r6
   46670:	0005883a 	mov	r2,zero
   46674:	003f3706 	br	46354 <__alt_data_end+0xfffdf254>
   46678:	80002a26 	beq	r16,zero,46724 <__subdf3+0x534>
   4667c:	0101ffc4 	movi	r4,2047
   46680:	49006626 	beq	r9,r4,4681c <__subdf3+0x62c>
   46684:	0085c83a 	sub	r2,zero,r2
   46688:	18c02034 	orhi	r3,r3,128
   4668c:	01000e04 	movi	r4,56
   46690:	20807e16 	blt	r4,r2,4688c <__subdf3+0x69c>
   46694:	010007c4 	movi	r4,31
   46698:	2080e716 	blt	r4,r2,46a38 <__subdf3+0x848>
   4669c:	01000804 	movi	r4,32
   466a0:	2089c83a 	sub	r4,r4,r2
   466a4:	1914983a 	sll	r10,r3,r4
   466a8:	8890d83a 	srl	r8,r17,r2
   466ac:	8908983a 	sll	r4,r17,r4
   466b0:	1884d83a 	srl	r2,r3,r2
   466b4:	5222b03a 	or	r17,r10,r8
   466b8:	2006c03a 	cmpne	r3,r4,zero
   466bc:	88e2b03a 	or	r17,r17,r3
   466c0:	3463c83a 	sub	r17,r6,r17
   466c4:	2885c83a 	sub	r2,r5,r2
   466c8:	344d803a 	cmpltu	r6,r6,r17
   466cc:	1187c83a 	sub	r3,r2,r6
   466d0:	4821883a 	mov	r16,r9
   466d4:	3825883a 	mov	r18,r7
   466d8:	003f2306 	br	46368 <__alt_data_end+0xfffdf268>
   466dc:	24d0b03a 	or	r8,r4,r19
   466e0:	40001b1e 	bne	r8,zero,46750 <__subdf3+0x560>
   466e4:	0005883a 	mov	r2,zero
   466e8:	0009883a 	mov	r4,zero
   466ec:	0021883a 	mov	r16,zero
   466f0:	003f4906 	br	46418 <__alt_data_end+0xfffdf318>
   466f4:	010007c4 	movi	r4,31
   466f8:	20803a16 	blt	r4,r2,467e4 <__subdf3+0x5f4>
   466fc:	01000804 	movi	r4,32
   46700:	2089c83a 	sub	r4,r4,r2
   46704:	2912983a 	sll	r9,r5,r4
   46708:	3090d83a 	srl	r8,r6,r2
   4670c:	3108983a 	sll	r4,r6,r4
   46710:	2884d83a 	srl	r2,r5,r2
   46714:	4a12b03a 	or	r9,r9,r8
   46718:	2008c03a 	cmpne	r4,r4,zero
   4671c:	4912b03a 	or	r9,r9,r4
   46720:	003f4e06 	br	4645c <__alt_data_end+0xfffdf35c>
   46724:	1c48b03a 	or	r4,r3,r17
   46728:	20003c26 	beq	r4,zero,4681c <__subdf3+0x62c>
   4672c:	0084303a 	nor	r2,zero,r2
   46730:	1000381e 	bne	r2,zero,46814 <__subdf3+0x624>
   46734:	3463c83a 	sub	r17,r6,r17
   46738:	28c5c83a 	sub	r2,r5,r3
   4673c:	344d803a 	cmpltu	r6,r6,r17
   46740:	1187c83a 	sub	r3,r2,r6
   46744:	4821883a 	mov	r16,r9
   46748:	3825883a 	mov	r18,r7
   4674c:	003f0606 	br	46368 <__alt_data_end+0xfffdf268>
   46750:	2023883a 	mov	r17,r4
   46754:	003f0906 	br	4637c <__alt_data_end+0xfffdf27c>
   46758:	0101ffc4 	movi	r4,2047
   4675c:	813f3a1e 	bne	r16,r4,46448 <__alt_data_end+0xfffdf348>
   46760:	003ec406 	br	46274 <__alt_data_end+0xfffdf174>
   46764:	0005883a 	mov	r2,zero
   46768:	003fb106 	br	46630 <__alt_data_end+0xfffdf530>
   4676c:	0005883a 	mov	r2,zero
   46770:	003fbc06 	br	46664 <__alt_data_end+0xfffdf564>
   46774:	1c44b03a 	or	r2,r3,r17
   46778:	80008e1e 	bne	r16,zero,469b4 <__subdf3+0x7c4>
   4677c:	1000c826 	beq	r2,zero,46aa0 <__subdf3+0x8b0>
   46780:	2984b03a 	or	r2,r5,r6
   46784:	103ebb26 	beq	r2,zero,46274 <__alt_data_end+0xfffdf174>
   46788:	8989883a 	add	r4,r17,r6
   4678c:	1945883a 	add	r2,r3,r5
   46790:	2447803a 	cmpltu	r3,r4,r17
   46794:	1887883a 	add	r3,r3,r2
   46798:	1880202c 	andhi	r2,r3,128
   4679c:	2023883a 	mov	r17,r4
   467a0:	103f1626 	beq	r2,zero,463fc <__alt_data_end+0xfffdf2fc>
   467a4:	00bfe034 	movhi	r2,65408
   467a8:	10bfffc4 	addi	r2,r2,-1
   467ac:	5021883a 	mov	r16,r10
   467b0:	1886703a 	and	r3,r3,r2
   467b4:	003eaf06 	br	46274 <__alt_data_end+0xfffdf174>
   467b8:	3825883a 	mov	r18,r7
   467bc:	003f0f06 	br	463fc <__alt_data_end+0xfffdf2fc>
   467c0:	1c44b03a 	or	r2,r3,r17
   467c4:	8000251e 	bne	r16,zero,4685c <__subdf3+0x66c>
   467c8:	1000661e 	bne	r2,zero,46964 <__subdf3+0x774>
   467cc:	2990b03a 	or	r8,r5,r6
   467d0:	40009626 	beq	r8,zero,46a2c <__subdf3+0x83c>
   467d4:	2807883a 	mov	r3,r5
   467d8:	3023883a 	mov	r17,r6
   467dc:	3825883a 	mov	r18,r7
   467e0:	003ea406 	br	46274 <__alt_data_end+0xfffdf174>
   467e4:	127ff804 	addi	r9,r2,-32
   467e8:	01000804 	movi	r4,32
   467ec:	2a52d83a 	srl	r9,r5,r9
   467f0:	11008c26 	beq	r2,r4,46a24 <__subdf3+0x834>
   467f4:	01001004 	movi	r4,64
   467f8:	2085c83a 	sub	r2,r4,r2
   467fc:	2884983a 	sll	r2,r5,r2
   46800:	118cb03a 	or	r6,r2,r6
   46804:	300cc03a 	cmpne	r6,r6,zero
   46808:	4992b03a 	or	r9,r9,r6
   4680c:	0005883a 	mov	r2,zero
   46810:	003f1206 	br	4645c <__alt_data_end+0xfffdf35c>
   46814:	0101ffc4 	movi	r4,2047
   46818:	493f9c1e 	bne	r9,r4,4668c <__alt_data_end+0xfffdf58c>
   4681c:	2807883a 	mov	r3,r5
   46820:	3023883a 	mov	r17,r6
   46824:	4821883a 	mov	r16,r9
   46828:	3825883a 	mov	r18,r7
   4682c:	003e9106 	br	46274 <__alt_data_end+0xfffdf174>
   46830:	80001f1e 	bne	r16,zero,468b0 <__subdf3+0x6c0>
   46834:	1c48b03a 	or	r4,r3,r17
   46838:	20005a26 	beq	r4,zero,469a4 <__subdf3+0x7b4>
   4683c:	0084303a 	nor	r2,zero,r2
   46840:	1000561e 	bne	r2,zero,4699c <__subdf3+0x7ac>
   46844:	89a3883a 	add	r17,r17,r6
   46848:	1945883a 	add	r2,r3,r5
   4684c:	898d803a 	cmpltu	r6,r17,r6
   46850:	3087883a 	add	r3,r6,r2
   46854:	4821883a 	mov	r16,r9
   46858:	003f0506 	br	46470 <__alt_data_end+0xfffdf370>
   4685c:	10002b1e 	bne	r2,zero,4690c <__subdf3+0x71c>
   46860:	2984b03a 	or	r2,r5,r6
   46864:	10008026 	beq	r2,zero,46a68 <__subdf3+0x878>
   46868:	2807883a 	mov	r3,r5
   4686c:	3023883a 	mov	r17,r6
   46870:	3825883a 	mov	r18,r7
   46874:	0401ffc4 	movi	r16,2047
   46878:	003e7e06 	br	46274 <__alt_data_end+0xfffdf174>
   4687c:	3809883a 	mov	r4,r7
   46880:	0011883a 	mov	r8,zero
   46884:	0005883a 	mov	r2,zero
   46888:	003ee306 	br	46418 <__alt_data_end+0xfffdf318>
   4688c:	1c62b03a 	or	r17,r3,r17
   46890:	8822c03a 	cmpne	r17,r17,zero
   46894:	0005883a 	mov	r2,zero
   46898:	003f8906 	br	466c0 <__alt_data_end+0xfffdf5c0>
   4689c:	3809883a 	mov	r4,r7
   468a0:	4821883a 	mov	r16,r9
   468a4:	0011883a 	mov	r8,zero
   468a8:	0005883a 	mov	r2,zero
   468ac:	003eda06 	br	46418 <__alt_data_end+0xfffdf318>
   468b0:	0101ffc4 	movi	r4,2047
   468b4:	49003b26 	beq	r9,r4,469a4 <__subdf3+0x7b4>
   468b8:	0085c83a 	sub	r2,zero,r2
   468bc:	18c02034 	orhi	r3,r3,128
   468c0:	01000e04 	movi	r4,56
   468c4:	20806e16 	blt	r4,r2,46a80 <__subdf3+0x890>
   468c8:	010007c4 	movi	r4,31
   468cc:	20807716 	blt	r4,r2,46aac <__subdf3+0x8bc>
   468d0:	01000804 	movi	r4,32
   468d4:	2089c83a 	sub	r4,r4,r2
   468d8:	1914983a 	sll	r10,r3,r4
   468dc:	8890d83a 	srl	r8,r17,r2
   468e0:	8908983a 	sll	r4,r17,r4
   468e4:	1884d83a 	srl	r2,r3,r2
   468e8:	5222b03a 	or	r17,r10,r8
   468ec:	2006c03a 	cmpne	r3,r4,zero
   468f0:	88e2b03a 	or	r17,r17,r3
   468f4:	89a3883a 	add	r17,r17,r6
   468f8:	1145883a 	add	r2,r2,r5
   468fc:	898d803a 	cmpltu	r6,r17,r6
   46900:	3087883a 	add	r3,r6,r2
   46904:	4821883a 	mov	r16,r9
   46908:	003ed906 	br	46470 <__alt_data_end+0xfffdf370>
   4690c:	2984b03a 	or	r2,r5,r6
   46910:	10004226 	beq	r2,zero,46a1c <__subdf3+0x82c>
   46914:	1808d0fa 	srli	r4,r3,3
   46918:	8822d0fa 	srli	r17,r17,3
   4691c:	1806977a 	slli	r3,r3,29
   46920:	2080022c 	andhi	r2,r4,8
   46924:	1c62b03a 	or	r17,r3,r17
   46928:	10000826 	beq	r2,zero,4694c <__subdf3+0x75c>
   4692c:	2812d0fa 	srli	r9,r5,3
   46930:	4880022c 	andhi	r2,r9,8
   46934:	1000051e 	bne	r2,zero,4694c <__subdf3+0x75c>
   46938:	300cd0fa 	srli	r6,r6,3
   4693c:	2804977a 	slli	r2,r5,29
   46940:	4809883a 	mov	r4,r9
   46944:	3825883a 	mov	r18,r7
   46948:	11a2b03a 	or	r17,r2,r6
   4694c:	8806d77a 	srli	r3,r17,29
   46950:	200890fa 	slli	r4,r4,3
   46954:	882290fa 	slli	r17,r17,3
   46958:	0401ffc4 	movi	r16,2047
   4695c:	1906b03a 	or	r3,r3,r4
   46960:	003e4406 	br	46274 <__alt_data_end+0xfffdf174>
   46964:	2984b03a 	or	r2,r5,r6
   46968:	103e4226 	beq	r2,zero,46274 <__alt_data_end+0xfffdf174>
   4696c:	8989c83a 	sub	r4,r17,r6
   46970:	8911803a 	cmpltu	r8,r17,r4
   46974:	1945c83a 	sub	r2,r3,r5
   46978:	1205c83a 	sub	r2,r2,r8
   4697c:	1200202c 	andhi	r8,r2,128
   46980:	403e9a26 	beq	r8,zero,463ec <__alt_data_end+0xfffdf2ec>
   46984:	3463c83a 	sub	r17,r6,r17
   46988:	28c5c83a 	sub	r2,r5,r3
   4698c:	344d803a 	cmpltu	r6,r6,r17
   46990:	1187c83a 	sub	r3,r2,r6
   46994:	3825883a 	mov	r18,r7
   46998:	003e3606 	br	46274 <__alt_data_end+0xfffdf174>
   4699c:	0101ffc4 	movi	r4,2047
   469a0:	493fc71e 	bne	r9,r4,468c0 <__alt_data_end+0xfffdf7c0>
   469a4:	2807883a 	mov	r3,r5
   469a8:	3023883a 	mov	r17,r6
   469ac:	4821883a 	mov	r16,r9
   469b0:	003e3006 	br	46274 <__alt_data_end+0xfffdf174>
   469b4:	10003626 	beq	r2,zero,46a90 <__subdf3+0x8a0>
   469b8:	2984b03a 	or	r2,r5,r6
   469bc:	10001726 	beq	r2,zero,46a1c <__subdf3+0x82c>
   469c0:	1808d0fa 	srli	r4,r3,3
   469c4:	8822d0fa 	srli	r17,r17,3
   469c8:	1806977a 	slli	r3,r3,29
   469cc:	2080022c 	andhi	r2,r4,8
   469d0:	1c62b03a 	or	r17,r3,r17
   469d4:	10000726 	beq	r2,zero,469f4 <__subdf3+0x804>
   469d8:	2812d0fa 	srli	r9,r5,3
   469dc:	4880022c 	andhi	r2,r9,8
   469e0:	1000041e 	bne	r2,zero,469f4 <__subdf3+0x804>
   469e4:	300cd0fa 	srli	r6,r6,3
   469e8:	2804977a 	slli	r2,r5,29
   469ec:	4809883a 	mov	r4,r9
   469f0:	11a2b03a 	or	r17,r2,r6
   469f4:	8806d77a 	srli	r3,r17,29
   469f8:	200890fa 	slli	r4,r4,3
   469fc:	882290fa 	slli	r17,r17,3
   46a00:	3825883a 	mov	r18,r7
   46a04:	1906b03a 	or	r3,r3,r4
   46a08:	0401ffc4 	movi	r16,2047
   46a0c:	003e1906 	br	46274 <__alt_data_end+0xfffdf174>
   46a10:	000b883a 	mov	r5,zero
   46a14:	0005883a 	mov	r2,zero
   46a18:	003e2e06 	br	462d4 <__alt_data_end+0xfffdf1d4>
   46a1c:	0401ffc4 	movi	r16,2047
   46a20:	003e1406 	br	46274 <__alt_data_end+0xfffdf174>
   46a24:	0005883a 	mov	r2,zero
   46a28:	003f7506 	br	46800 <__alt_data_end+0xfffdf700>
   46a2c:	0005883a 	mov	r2,zero
   46a30:	0009883a 	mov	r4,zero
   46a34:	003e7806 	br	46418 <__alt_data_end+0xfffdf318>
   46a38:	123ff804 	addi	r8,r2,-32
   46a3c:	01000804 	movi	r4,32
   46a40:	1a10d83a 	srl	r8,r3,r8
   46a44:	11002526 	beq	r2,r4,46adc <__subdf3+0x8ec>
   46a48:	01001004 	movi	r4,64
   46a4c:	2085c83a 	sub	r2,r4,r2
   46a50:	1884983a 	sll	r2,r3,r2
   46a54:	1444b03a 	or	r2,r2,r17
   46a58:	1004c03a 	cmpne	r2,r2,zero
   46a5c:	40a2b03a 	or	r17,r8,r2
   46a60:	0005883a 	mov	r2,zero
   46a64:	003f1606 	br	466c0 <__alt_data_end+0xfffdf5c0>
   46a68:	02000434 	movhi	r8,16
   46a6c:	0009883a 	mov	r4,zero
   46a70:	423fffc4 	addi	r8,r8,-1
   46a74:	00bfffc4 	movi	r2,-1
   46a78:	0401ffc4 	movi	r16,2047
   46a7c:	003e6606 	br	46418 <__alt_data_end+0xfffdf318>
   46a80:	1c62b03a 	or	r17,r3,r17
   46a84:	8822c03a 	cmpne	r17,r17,zero
   46a88:	0005883a 	mov	r2,zero
   46a8c:	003f9906 	br	468f4 <__alt_data_end+0xfffdf7f4>
   46a90:	2807883a 	mov	r3,r5
   46a94:	3023883a 	mov	r17,r6
   46a98:	0401ffc4 	movi	r16,2047
   46a9c:	003df506 	br	46274 <__alt_data_end+0xfffdf174>
   46aa0:	2807883a 	mov	r3,r5
   46aa4:	3023883a 	mov	r17,r6
   46aa8:	003df206 	br	46274 <__alt_data_end+0xfffdf174>
   46aac:	123ff804 	addi	r8,r2,-32
   46ab0:	01000804 	movi	r4,32
   46ab4:	1a10d83a 	srl	r8,r3,r8
   46ab8:	11000a26 	beq	r2,r4,46ae4 <__subdf3+0x8f4>
   46abc:	01001004 	movi	r4,64
   46ac0:	2085c83a 	sub	r2,r4,r2
   46ac4:	1884983a 	sll	r2,r3,r2
   46ac8:	1444b03a 	or	r2,r2,r17
   46acc:	1004c03a 	cmpne	r2,r2,zero
   46ad0:	40a2b03a 	or	r17,r8,r2
   46ad4:	0005883a 	mov	r2,zero
   46ad8:	003f8606 	br	468f4 <__alt_data_end+0xfffdf7f4>
   46adc:	0005883a 	mov	r2,zero
   46ae0:	003fdc06 	br	46a54 <__alt_data_end+0xfffdf954>
   46ae4:	0005883a 	mov	r2,zero
   46ae8:	003ff706 	br	46ac8 <__alt_data_end+0xfffdf9c8>

00046aec <__fixdfsi>:
   46aec:	280cd53a 	srli	r6,r5,20
   46af0:	00c00434 	movhi	r3,16
   46af4:	18ffffc4 	addi	r3,r3,-1
   46af8:	3181ffcc 	andi	r6,r6,2047
   46afc:	01c0ff84 	movi	r7,1022
   46b00:	28c6703a 	and	r3,r5,r3
   46b04:	280ad7fa 	srli	r5,r5,31
   46b08:	3980120e 	bge	r7,r6,46b54 <__fixdfsi+0x68>
   46b0c:	00810744 	movi	r2,1053
   46b10:	11800c16 	blt	r2,r6,46b44 <__fixdfsi+0x58>
   46b14:	00810cc4 	movi	r2,1075
   46b18:	1185c83a 	sub	r2,r2,r6
   46b1c:	01c007c4 	movi	r7,31
   46b20:	18c00434 	orhi	r3,r3,16
   46b24:	38800d16 	blt	r7,r2,46b5c <__fixdfsi+0x70>
   46b28:	31befb44 	addi	r6,r6,-1043
   46b2c:	2084d83a 	srl	r2,r4,r2
   46b30:	1986983a 	sll	r3,r3,r6
   46b34:	1884b03a 	or	r2,r3,r2
   46b38:	28000726 	beq	r5,zero,46b58 <__fixdfsi+0x6c>
   46b3c:	0085c83a 	sub	r2,zero,r2
   46b40:	f800283a 	ret
   46b44:	00a00034 	movhi	r2,32768
   46b48:	10bfffc4 	addi	r2,r2,-1
   46b4c:	2885883a 	add	r2,r5,r2
   46b50:	f800283a 	ret
   46b54:	0005883a 	mov	r2,zero
   46b58:	f800283a 	ret
   46b5c:	008104c4 	movi	r2,1043
   46b60:	1185c83a 	sub	r2,r2,r6
   46b64:	1884d83a 	srl	r2,r3,r2
   46b68:	003ff306 	br	46b38 <__alt_data_end+0xfffdfa38>

00046b6c <__floatsidf>:
   46b6c:	defffd04 	addi	sp,sp,-12
   46b70:	dfc00215 	stw	ra,8(sp)
   46b74:	dc400115 	stw	r17,4(sp)
   46b78:	dc000015 	stw	r16,0(sp)
   46b7c:	20002b26 	beq	r4,zero,46c2c <__floatsidf+0xc0>
   46b80:	2023883a 	mov	r17,r4
   46b84:	2020d7fa 	srli	r16,r4,31
   46b88:	20002d16 	blt	r4,zero,46c40 <__floatsidf+0xd4>
   46b8c:	8809883a 	mov	r4,r17
   46b90:	0046f000 	call	46f00 <__clzsi2>
   46b94:	01410784 	movi	r5,1054
   46b98:	288bc83a 	sub	r5,r5,r2
   46b9c:	01010cc4 	movi	r4,1075
   46ba0:	2149c83a 	sub	r4,r4,r5
   46ba4:	00c007c4 	movi	r3,31
   46ba8:	1900160e 	bge	r3,r4,46c04 <__floatsidf+0x98>
   46bac:	00c104c4 	movi	r3,1043
   46bb0:	1947c83a 	sub	r3,r3,r5
   46bb4:	88c6983a 	sll	r3,r17,r3
   46bb8:	00800434 	movhi	r2,16
   46bbc:	10bfffc4 	addi	r2,r2,-1
   46bc0:	1886703a 	and	r3,r3,r2
   46bc4:	2941ffcc 	andi	r5,r5,2047
   46bc8:	800d883a 	mov	r6,r16
   46bcc:	0005883a 	mov	r2,zero
   46bd0:	280a953a 	slli	r5,r5,20
   46bd4:	31803fcc 	andi	r6,r6,255
   46bd8:	01000434 	movhi	r4,16
   46bdc:	300c97fa 	slli	r6,r6,31
   46be0:	213fffc4 	addi	r4,r4,-1
   46be4:	1906703a 	and	r3,r3,r4
   46be8:	1946b03a 	or	r3,r3,r5
   46bec:	1986b03a 	or	r3,r3,r6
   46bf0:	dfc00217 	ldw	ra,8(sp)
   46bf4:	dc400117 	ldw	r17,4(sp)
   46bf8:	dc000017 	ldw	r16,0(sp)
   46bfc:	dec00304 	addi	sp,sp,12
   46c00:	f800283a 	ret
   46c04:	00c002c4 	movi	r3,11
   46c08:	1887c83a 	sub	r3,r3,r2
   46c0c:	88c6d83a 	srl	r3,r17,r3
   46c10:	8904983a 	sll	r2,r17,r4
   46c14:	01000434 	movhi	r4,16
   46c18:	213fffc4 	addi	r4,r4,-1
   46c1c:	2941ffcc 	andi	r5,r5,2047
   46c20:	1906703a 	and	r3,r3,r4
   46c24:	800d883a 	mov	r6,r16
   46c28:	003fe906 	br	46bd0 <__alt_data_end+0xfffdfad0>
   46c2c:	000d883a 	mov	r6,zero
   46c30:	000b883a 	mov	r5,zero
   46c34:	0007883a 	mov	r3,zero
   46c38:	0005883a 	mov	r2,zero
   46c3c:	003fe406 	br	46bd0 <__alt_data_end+0xfffdfad0>
   46c40:	0123c83a 	sub	r17,zero,r4
   46c44:	003fd106 	br	46b8c <__alt_data_end+0xfffdfa8c>

00046c48 <__extendsfdf2>:
   46c48:	200ad5fa 	srli	r5,r4,23
   46c4c:	defffd04 	addi	sp,sp,-12
   46c50:	dc400115 	stw	r17,4(sp)
   46c54:	29403fcc 	andi	r5,r5,255
   46c58:	29800044 	addi	r6,r5,1
   46c5c:	04402034 	movhi	r17,128
   46c60:	dc000015 	stw	r16,0(sp)
   46c64:	8c7fffc4 	addi	r17,r17,-1
   46c68:	dfc00215 	stw	ra,8(sp)
   46c6c:	31803fcc 	andi	r6,r6,255
   46c70:	00800044 	movi	r2,1
   46c74:	8922703a 	and	r17,r17,r4
   46c78:	2020d7fa 	srli	r16,r4,31
   46c7c:	1180110e 	bge	r2,r6,46cc4 <__extendsfdf2+0x7c>
   46c80:	880cd0fa 	srli	r6,r17,3
   46c84:	8822977a 	slli	r17,r17,29
   46c88:	2940e004 	addi	r5,r5,896
   46c8c:	2941ffcc 	andi	r5,r5,2047
   46c90:	2804953a 	slli	r2,r5,20
   46c94:	01400434 	movhi	r5,16
   46c98:	800697fa 	slli	r3,r16,31
   46c9c:	297fffc4 	addi	r5,r5,-1
   46ca0:	314a703a 	and	r5,r6,r5
   46ca4:	288ab03a 	or	r5,r5,r2
   46ca8:	28c6b03a 	or	r3,r5,r3
   46cac:	8805883a 	mov	r2,r17
   46cb0:	dfc00217 	ldw	ra,8(sp)
   46cb4:	dc400117 	ldw	r17,4(sp)
   46cb8:	dc000017 	ldw	r16,0(sp)
   46cbc:	dec00304 	addi	sp,sp,12
   46cc0:	f800283a 	ret
   46cc4:	2800111e 	bne	r5,zero,46d0c <__extendsfdf2+0xc4>
   46cc8:	88001c26 	beq	r17,zero,46d3c <__extendsfdf2+0xf4>
   46ccc:	8809883a 	mov	r4,r17
   46cd0:	0046f000 	call	46f00 <__clzsi2>
   46cd4:	00c00284 	movi	r3,10
   46cd8:	18801b16 	blt	r3,r2,46d48 <__extendsfdf2+0x100>
   46cdc:	018002c4 	movi	r6,11
   46ce0:	308dc83a 	sub	r6,r6,r2
   46ce4:	11000544 	addi	r4,r2,21
   46ce8:	8986d83a 	srl	r3,r17,r6
   46cec:	8922983a 	sll	r17,r17,r4
   46cf0:	0180e244 	movi	r6,905
   46cf4:	01400434 	movhi	r5,16
   46cf8:	3085c83a 	sub	r2,r6,r2
   46cfc:	297fffc4 	addi	r5,r5,-1
   46d00:	194c703a 	and	r6,r3,r5
   46d04:	1141ffcc 	andi	r5,r2,2047
   46d08:	003fe006 	br	46c8c <__alt_data_end+0xfffdfb8c>
   46d0c:	88000826 	beq	r17,zero,46d30 <__extendsfdf2+0xe8>
   46d10:	880cd0fa 	srli	r6,r17,3
   46d14:	00800434 	movhi	r2,16
   46d18:	10bfffc4 	addi	r2,r2,-1
   46d1c:	31800234 	orhi	r6,r6,8
   46d20:	8822977a 	slli	r17,r17,29
   46d24:	308c703a 	and	r6,r6,r2
   46d28:	0141ffc4 	movi	r5,2047
   46d2c:	003fd706 	br	46c8c <__alt_data_end+0xfffdfb8c>
   46d30:	0141ffc4 	movi	r5,2047
   46d34:	000d883a 	mov	r6,zero
   46d38:	003fd406 	br	46c8c <__alt_data_end+0xfffdfb8c>
   46d3c:	000b883a 	mov	r5,zero
   46d40:	000d883a 	mov	r6,zero
   46d44:	003fd106 	br	46c8c <__alt_data_end+0xfffdfb8c>
   46d48:	11bffd44 	addi	r6,r2,-11
   46d4c:	8986983a 	sll	r3,r17,r6
   46d50:	0023883a 	mov	r17,zero
   46d54:	003fe606 	br	46cf0 <__alt_data_end+0xfffdfbf0>

00046d58 <__truncdfsf2>:
   46d58:	2810d53a 	srli	r8,r5,20
   46d5c:	01c00434 	movhi	r7,16
   46d60:	39ffffc4 	addi	r7,r7,-1
   46d64:	29ce703a 	and	r7,r5,r7
   46d68:	4201ffcc 	andi	r8,r8,2047
   46d6c:	380e90fa 	slli	r7,r7,3
   46d70:	200cd77a 	srli	r6,r4,29
   46d74:	42400044 	addi	r9,r8,1
   46d78:	4a41ffcc 	andi	r9,r9,2047
   46d7c:	00c00044 	movi	r3,1
   46d80:	280ad7fa 	srli	r5,r5,31
   46d84:	31ceb03a 	or	r7,r6,r7
   46d88:	200490fa 	slli	r2,r4,3
   46d8c:	1a40230e 	bge	r3,r9,46e1c <__truncdfsf2+0xc4>
   46d90:	40ff2004 	addi	r3,r8,-896
   46d94:	01803f84 	movi	r6,254
   46d98:	30c01516 	blt	r6,r3,46df0 <__truncdfsf2+0x98>
   46d9c:	00c0380e 	bge	zero,r3,46e80 <__truncdfsf2+0x128>
   46da0:	200c91ba 	slli	r6,r4,6
   46da4:	380e90fa 	slli	r7,r7,3
   46da8:	1004d77a 	srli	r2,r2,29
   46dac:	300cc03a 	cmpne	r6,r6,zero
   46db0:	31ccb03a 	or	r6,r6,r7
   46db4:	308cb03a 	or	r6,r6,r2
   46db8:	308001cc 	andi	r2,r6,7
   46dbc:	10000426 	beq	r2,zero,46dd0 <__truncdfsf2+0x78>
   46dc0:	308003cc 	andi	r2,r6,15
   46dc4:	01000104 	movi	r4,4
   46dc8:	11000126 	beq	r2,r4,46dd0 <__truncdfsf2+0x78>
   46dcc:	31800104 	addi	r6,r6,4
   46dd0:	3081002c 	andhi	r2,r6,1024
   46dd4:	10001626 	beq	r2,zero,46e30 <__truncdfsf2+0xd8>
   46dd8:	18c00044 	addi	r3,r3,1
   46ddc:	00803fc4 	movi	r2,255
   46de0:	18800326 	beq	r3,r2,46df0 <__truncdfsf2+0x98>
   46de4:	300c91ba 	slli	r6,r6,6
   46de8:	300cd27a 	srli	r6,r6,9
   46dec:	00000206 	br	46df8 <__truncdfsf2+0xa0>
   46df0:	00ffffc4 	movi	r3,-1
   46df4:	000d883a 	mov	r6,zero
   46df8:	18c03fcc 	andi	r3,r3,255
   46dfc:	180895fa 	slli	r4,r3,23
   46e00:	00c02034 	movhi	r3,128
   46e04:	280a97fa 	slli	r5,r5,31
   46e08:	18ffffc4 	addi	r3,r3,-1
   46e0c:	30c6703a 	and	r3,r6,r3
   46e10:	1906b03a 	or	r3,r3,r4
   46e14:	1944b03a 	or	r2,r3,r5
   46e18:	f800283a 	ret
   46e1c:	40000b1e 	bne	r8,zero,46e4c <__truncdfsf2+0xf4>
   46e20:	388cb03a 	or	r6,r7,r2
   46e24:	0007883a 	mov	r3,zero
   46e28:	30000426 	beq	r6,zero,46e3c <__truncdfsf2+0xe4>
   46e2c:	01800144 	movi	r6,5
   46e30:	00803fc4 	movi	r2,255
   46e34:	300cd0fa 	srli	r6,r6,3
   46e38:	18800a26 	beq	r3,r2,46e64 <__truncdfsf2+0x10c>
   46e3c:	00802034 	movhi	r2,128
   46e40:	10bfffc4 	addi	r2,r2,-1
   46e44:	308c703a 	and	r6,r6,r2
   46e48:	003feb06 	br	46df8 <__alt_data_end+0xfffdfcf8>
   46e4c:	3888b03a 	or	r4,r7,r2
   46e50:	203fe726 	beq	r4,zero,46df0 <__alt_data_end+0xfffdfcf0>
   46e54:	380c90fa 	slli	r6,r7,3
   46e58:	00c03fc4 	movi	r3,255
   46e5c:	31808034 	orhi	r6,r6,512
   46e60:	003fd506 	br	46db8 <__alt_data_end+0xfffdfcb8>
   46e64:	303fe226 	beq	r6,zero,46df0 <__alt_data_end+0xfffdfcf0>
   46e68:	00802034 	movhi	r2,128
   46e6c:	31801034 	orhi	r6,r6,64
   46e70:	10bfffc4 	addi	r2,r2,-1
   46e74:	00ffffc4 	movi	r3,-1
   46e78:	308c703a 	and	r6,r6,r2
   46e7c:	003fde06 	br	46df8 <__alt_data_end+0xfffdfcf8>
   46e80:	013ffa44 	movi	r4,-23
   46e84:	19000e16 	blt	r3,r4,46ec0 <__truncdfsf2+0x168>
   46e88:	01000784 	movi	r4,30
   46e8c:	20c9c83a 	sub	r4,r4,r3
   46e90:	018007c4 	movi	r6,31
   46e94:	39c02034 	orhi	r7,r7,128
   46e98:	31000b16 	blt	r6,r4,46ec8 <__truncdfsf2+0x170>
   46e9c:	423f2084 	addi	r8,r8,-894
   46ea0:	120c983a 	sll	r6,r2,r8
   46ea4:	3a0e983a 	sll	r7,r7,r8
   46ea8:	1104d83a 	srl	r2,r2,r4
   46eac:	300cc03a 	cmpne	r6,r6,zero
   46eb0:	31ceb03a 	or	r7,r6,r7
   46eb4:	388cb03a 	or	r6,r7,r2
   46eb8:	0007883a 	mov	r3,zero
   46ebc:	003fbe06 	br	46db8 <__alt_data_end+0xfffdfcb8>
   46ec0:	0007883a 	mov	r3,zero
   46ec4:	003fd906 	br	46e2c <__alt_data_end+0xfffdfd2c>
   46ec8:	01bfff84 	movi	r6,-2
   46ecc:	30cdc83a 	sub	r6,r6,r3
   46ed0:	00c00804 	movi	r3,32
   46ed4:	398cd83a 	srl	r6,r7,r6
   46ed8:	20c00726 	beq	r4,r3,46ef8 <__truncdfsf2+0x1a0>
   46edc:	423f2884 	addi	r8,r8,-862
   46ee0:	3a0e983a 	sll	r7,r7,r8
   46ee4:	3884b03a 	or	r2,r7,r2
   46ee8:	1004c03a 	cmpne	r2,r2,zero
   46eec:	118cb03a 	or	r6,r2,r6
   46ef0:	0007883a 	mov	r3,zero
   46ef4:	003fb006 	br	46db8 <__alt_data_end+0xfffdfcb8>
   46ef8:	000f883a 	mov	r7,zero
   46efc:	003ff906 	br	46ee4 <__alt_data_end+0xfffdfde4>

00046f00 <__clzsi2>:
   46f00:	00bfffd4 	movui	r2,65535
   46f04:	11000536 	bltu	r2,r4,46f1c <__clzsi2+0x1c>
   46f08:	00803fc4 	movi	r2,255
   46f0c:	11000f36 	bltu	r2,r4,46f4c <__clzsi2+0x4c>
   46f10:	00800804 	movi	r2,32
   46f14:	0007883a 	mov	r3,zero
   46f18:	00000506 	br	46f30 <__clzsi2+0x30>
   46f1c:	00804034 	movhi	r2,256
   46f20:	10bfffc4 	addi	r2,r2,-1
   46f24:	11000c2e 	bgeu	r2,r4,46f58 <__clzsi2+0x58>
   46f28:	00800204 	movi	r2,8
   46f2c:	00c00604 	movi	r3,24
   46f30:	20c8d83a 	srl	r4,r4,r3
   46f34:	00c00174 	movhi	r3,5
   46f38:	18da1304 	addi	r3,r3,26700
   46f3c:	1909883a 	add	r4,r3,r4
   46f40:	20c00003 	ldbu	r3,0(r4)
   46f44:	10c5c83a 	sub	r2,r2,r3
   46f48:	f800283a 	ret
   46f4c:	00800604 	movi	r2,24
   46f50:	00c00204 	movi	r3,8
   46f54:	003ff606 	br	46f30 <__alt_data_end+0xfffdfe30>
   46f58:	00800404 	movi	r2,16
   46f5c:	1007883a 	mov	r3,r2
   46f60:	003ff306 	br	46f30 <__alt_data_end+0xfffdfe30>

00046f64 <__errno>:
   46f64:	008001b4 	movhi	r2,6
   46f68:	10a1a804 	addi	r2,r2,-31072
   46f6c:	10800017 	ldw	r2,0(r2)
   46f70:	f800283a 	ret

00046f74 <_fopen_r>:
   46f74:	defffa04 	addi	sp,sp,-24
   46f78:	3005883a 	mov	r2,r6
   46f7c:	dcc00415 	stw	r19,16(sp)
   46f80:	d80d883a 	mov	r6,sp
   46f84:	2827883a 	mov	r19,r5
   46f88:	100b883a 	mov	r5,r2
   46f8c:	dc800315 	stw	r18,12(sp)
   46f90:	dfc00515 	stw	ra,20(sp)
   46f94:	dc400215 	stw	r17,8(sp)
   46f98:	dc000115 	stw	r16,4(sp)
   46f9c:	2025883a 	mov	r18,r4
   46fa0:	004c9f80 	call	4c9f8 <__sflags>
   46fa4:	10002726 	beq	r2,zero,47044 <_fopen_r+0xd0>
   46fa8:	9009883a 	mov	r4,r18
   46fac:	1023883a 	mov	r17,r2
   46fb0:	004c8780 	call	4c878 <__sfp>
   46fb4:	1021883a 	mov	r16,r2
   46fb8:	10002226 	beq	r2,zero,47044 <_fopen_r+0xd0>
   46fbc:	d9800017 	ldw	r6,0(sp)
   46fc0:	01c06d84 	movi	r7,438
   46fc4:	980b883a 	mov	r5,r19
   46fc8:	9009883a 	mov	r4,r18
   46fcc:	00480980 	call	48098 <_open_r>
   46fd0:	10001916 	blt	r2,zero,47038 <_fopen_r+0xc4>
   46fd4:	8080038d 	sth	r2,14(r16)
   46fd8:	00800174 	movhi	r2,5
   46fdc:	10a11f04 	addi	r2,r2,-31620
   46fe0:	80800815 	stw	r2,32(r16)
   46fe4:	00800174 	movhi	r2,5
   46fe8:	10a13604 	addi	r2,r2,-31528
   46fec:	80800915 	stw	r2,36(r16)
   46ff0:	00800174 	movhi	r2,5
   46ff4:	10a15504 	addi	r2,r2,-31404
   46ff8:	80800a15 	stw	r2,40(r16)
   46ffc:	00800174 	movhi	r2,5
   47000:	10a16c04 	addi	r2,r2,-31312
   47004:	8440030d 	sth	r17,12(r16)
   47008:	84000715 	stw	r16,28(r16)
   4700c:	80800b15 	stw	r2,44(r16)
   47010:	8c40400c 	andi	r17,r17,256
   47014:	88000d1e 	bne	r17,zero,4704c <_fopen_r+0xd8>
   47018:	8005883a 	mov	r2,r16
   4701c:	dfc00517 	ldw	ra,20(sp)
   47020:	dcc00417 	ldw	r19,16(sp)
   47024:	dc800317 	ldw	r18,12(sp)
   47028:	dc400217 	ldw	r17,8(sp)
   4702c:	dc000117 	ldw	r16,4(sp)
   47030:	dec00604 	addi	sp,sp,24
   47034:	f800283a 	ret
   47038:	004c9b80 	call	4c9b8 <__sfp_lock_acquire>
   4703c:	8000030d 	sth	zero,12(r16)
   47040:	004c9bc0 	call	4c9bc <__sfp_lock_release>
   47044:	0005883a 	mov	r2,zero
   47048:	003ff406 	br	4701c <__alt_data_end+0xfffdff1c>
   4704c:	01c00084 	movi	r7,2
   47050:	000d883a 	mov	r6,zero
   47054:	800b883a 	mov	r5,r16
   47058:	9009883a 	mov	r4,r18
   4705c:	00470cc0 	call	470cc <_fseek_r>
   47060:	8005883a 	mov	r2,r16
   47064:	003fed06 	br	4701c <__alt_data_end+0xfffdff1c>

00047068 <fopen>:
   47068:	008001b4 	movhi	r2,6
   4706c:	10a1a804 	addi	r2,r2,-31072
   47070:	280d883a 	mov	r6,r5
   47074:	200b883a 	mov	r5,r4
   47078:	11000017 	ldw	r4,0(r2)
   4707c:	0046f741 	jmpi	46f74 <_fopen_r>

00047080 <_fprintf_r>:
   47080:	defffe04 	addi	sp,sp,-8
   47084:	2809883a 	mov	r4,r5
   47088:	300b883a 	mov	r5,r6
   4708c:	dfc00015 	stw	ra,0(sp)
   47090:	d9c00115 	stw	r7,4(sp)
   47094:	d9800104 	addi	r6,sp,4
   47098:	004a8480 	call	4a848 <__vfprintf_internal>
   4709c:	dfc00017 	ldw	ra,0(sp)
   470a0:	dec00204 	addi	sp,sp,8
   470a4:	f800283a 	ret

000470a8 <fprintf>:
   470a8:	defffd04 	addi	sp,sp,-12
   470ac:	dfc00015 	stw	ra,0(sp)
   470b0:	d9800115 	stw	r6,4(sp)
   470b4:	d9c00215 	stw	r7,8(sp)
   470b8:	d9800104 	addi	r6,sp,4
   470bc:	004a8480 	call	4a848 <__vfprintf_internal>
   470c0:	dfc00017 	ldw	ra,0(sp)
   470c4:	dec00304 	addi	sp,sp,12
   470c8:	f800283a 	ret

000470cc <_fseek_r>:
   470cc:	00470ec1 	jmpi	470ec <_fseeko_r>

000470d0 <fseek>:
   470d0:	008001b4 	movhi	r2,6
   470d4:	10a1a804 	addi	r2,r2,-31072
   470d8:	300f883a 	mov	r7,r6
   470dc:	280d883a 	mov	r6,r5
   470e0:	200b883a 	mov	r5,r4
   470e4:	11000017 	ldw	r4,0(r2)
   470e8:	00470ec1 	jmpi	470ec <_fseeko_r>

000470ec <_fseeko_r>:
   470ec:	deffe804 	addi	sp,sp,-96
   470f0:	dd401415 	stw	r21,80(sp)
   470f4:	dc801115 	stw	r18,68(sp)
   470f8:	dc401015 	stw	r17,64(sp)
   470fc:	dc000f15 	stw	r16,60(sp)
   47100:	dfc01715 	stw	ra,92(sp)
   47104:	ddc01615 	stw	r23,88(sp)
   47108:	dd801515 	stw	r22,84(sp)
   4710c:	dd001315 	stw	r20,76(sp)
   47110:	dcc01215 	stw	r19,72(sp)
   47114:	2023883a 	mov	r17,r4
   47118:	2821883a 	mov	r16,r5
   4711c:	302b883a 	mov	r21,r6
   47120:	3825883a 	mov	r18,r7
   47124:	20000226 	beq	r4,zero,47130 <_fseeko_r+0x44>
   47128:	20800e17 	ldw	r2,56(r4)
   4712c:	10005a26 	beq	r2,zero,47298 <_fseeko_r+0x1ac>
   47130:	8080030b 	ldhu	r2,12(r16)
   47134:	00c04204 	movi	r3,264
   47138:	1080420c 	andi	r2,r2,264
   4713c:	10c05b26 	beq	r2,r3,472ac <_fseeko_r+0x1c0>
   47140:	85000a17 	ldw	r20,40(r16)
   47144:	a000f626 	beq	r20,zero,47520 <_fseeko_r+0x434>
   47148:	00800044 	movi	r2,1
   4714c:	90803e26 	beq	r18,r2,47248 <_fseeko_r+0x15c>
   47150:	00800084 	movi	r2,2
   47154:	90801026 	beq	r18,r2,47198 <_fseeko_r+0xac>
   47158:	90000f26 	beq	r18,zero,47198 <_fseeko_r+0xac>
   4715c:	00800584 	movi	r2,22
   47160:	88800015 	stw	r2,0(r17)
   47164:	04ffffc4 	movi	r19,-1
   47168:	9805883a 	mov	r2,r19
   4716c:	dfc01717 	ldw	ra,92(sp)
   47170:	ddc01617 	ldw	r23,88(sp)
   47174:	dd801517 	ldw	r22,84(sp)
   47178:	dd401417 	ldw	r21,80(sp)
   4717c:	dd001317 	ldw	r20,76(sp)
   47180:	dcc01217 	ldw	r19,72(sp)
   47184:	dc801117 	ldw	r18,68(sp)
   47188:	dc401017 	ldw	r17,64(sp)
   4718c:	dc000f17 	ldw	r16,60(sp)
   47190:	dec01804 	addi	sp,sp,96
   47194:	f800283a 	ret
   47198:	80800417 	ldw	r2,16(r16)
   4719c:	002f883a 	mov	r23,zero
   471a0:	0027883a 	mov	r19,zero
   471a4:	1000cb26 	beq	r2,zero,474d4 <_fseeko_r+0x3e8>
   471a8:	8080030b 	ldhu	r2,12(r16)
   471ac:	10c2068c 	andi	r3,r2,2074
   471b0:	1800071e 	bne	r3,zero,471d0 <_fseeko_r+0xe4>
   471b4:	10c1000c 	andi	r3,r2,1024
   471b8:	1800451e 	bne	r3,zero,472d0 <_fseeko_r+0x1e4>
   471bc:	00c00174 	movhi	r3,5
   471c0:	18e15504 	addi	r3,r3,-31404
   471c4:	a0c0b726 	beq	r20,r3,474a4 <_fseeko_r+0x3b8>
   471c8:	10820014 	ori	r2,r2,2048
   471cc:	8080030d 	sth	r2,12(r16)
   471d0:	800b883a 	mov	r5,r16
   471d4:	8809883a 	mov	r4,r17
   471d8:	004c5cc0 	call	4c5cc <_fflush_r>
   471dc:	1027883a 	mov	r19,r2
   471e0:	103fe01e 	bne	r2,zero,47164 <__alt_data_end+0xfffe0064>
   471e4:	81400717 	ldw	r5,28(r16)
   471e8:	900f883a 	mov	r7,r18
   471ec:	a80d883a 	mov	r6,r21
   471f0:	8809883a 	mov	r4,r17
   471f4:	a03ee83a 	callr	r20
   471f8:	00ffffc4 	movi	r3,-1
   471fc:	10ffd926 	beq	r2,r3,47164 <__alt_data_end+0xfffe0064>
   47200:	81400c17 	ldw	r5,48(r16)
   47204:	28000526 	beq	r5,zero,4721c <_fseeko_r+0x130>
   47208:	80801004 	addi	r2,r16,64
   4720c:	28800226 	beq	r5,r2,47218 <_fseeko_r+0x12c>
   47210:	8809883a 	mov	r4,r17
   47214:	004cbc80 	call	4cbc8 <_free_r>
   47218:	80000c15 	stw	zero,48(r16)
   4721c:	8080030b 	ldhu	r2,12(r16)
   47220:	80c00417 	ldw	r3,16(r16)
   47224:	80000115 	stw	zero,4(r16)
   47228:	10bdf7cc 	andi	r2,r2,63455
   4722c:	80c00015 	stw	r3,0(r16)
   47230:	8080030d 	sth	r2,12(r16)
   47234:	01800204 	movi	r6,8
   47238:	000b883a 	mov	r5,zero
   4723c:	81001704 	addi	r4,r16,92
   47240:	0047f700 	call	47f70 <memset>
   47244:	003fc806 	br	47168 <__alt_data_end+0xfffe0068>
   47248:	800b883a 	mov	r5,r16
   4724c:	8809883a 	mov	r4,r17
   47250:	004c5cc0 	call	4c5cc <_fflush_r>
   47254:	8080030b 	ldhu	r2,12(r16)
   47258:	10c4000c 	andi	r3,r2,4096
   4725c:	18008726 	beq	r3,zero,4747c <_fseeko_r+0x390>
   47260:	84c01417 	ldw	r19,80(r16)
   47264:	10c0010c 	andi	r3,r2,4
   47268:	1800431e 	bne	r3,zero,47378 <_fseeko_r+0x28c>
   4726c:	1080020c 	andi	r2,r2,8
   47270:	10008026 	beq	r2,zero,47474 <_fseeko_r+0x388>
   47274:	80c00017 	ldw	r3,0(r16)
   47278:	80800417 	ldw	r2,16(r16)
   4727c:	18000226 	beq	r3,zero,47288 <_fseeko_r+0x19c>
   47280:	1887c83a 	sub	r3,r3,r2
   47284:	98e7883a 	add	r19,r19,r3
   47288:	aceb883a 	add	r21,r21,r19
   4728c:	05c00044 	movi	r23,1
   47290:	0025883a 	mov	r18,zero
   47294:	003fc306 	br	471a4 <__alt_data_end+0xfffe00a4>
   47298:	004c9a80 	call	4c9a8 <__sinit>
   4729c:	8080030b 	ldhu	r2,12(r16)
   472a0:	00c04204 	movi	r3,264
   472a4:	1080420c 	andi	r2,r2,264
   472a8:	10ffa51e 	bne	r2,r3,47140 <__alt_data_end+0xfffe0040>
   472ac:	800b883a 	mov	r5,r16
   472b0:	8809883a 	mov	r4,r17
   472b4:	004c5cc0 	call	4c5cc <_fflush_r>
   472b8:	003fa106 	br	47140 <__alt_data_end+0xfffe0040>
   472bc:	8080030b 	ldhu	r2,12(r16)
   472c0:	00c10004 	movi	r3,1024
   472c4:	80c01315 	stw	r3,76(r16)
   472c8:	10c4b03a 	or	r2,r2,r3
   472cc:	8080030d 	sth	r2,12(r16)
   472d0:	9000311e 	bne	r18,zero,47398 <_fseeko_r+0x2ac>
   472d4:	a82d883a 	mov	r22,r21
   472d8:	b800371e 	bne	r23,zero,473b8 <_fseeko_r+0x2cc>
   472dc:	8080030b 	ldhu	r2,12(r16)
   472e0:	1084000c 	andi	r2,r2,4096
   472e4:	10007f26 	beq	r2,zero,474e4 <_fseeko_r+0x3f8>
   472e8:	80801417 	ldw	r2,80(r16)
   472ec:	81800117 	ldw	r6,4(r16)
   472f0:	81400c17 	ldw	r5,48(r16)
   472f4:	11a7c83a 	sub	r19,r2,r6
   472f8:	28008226 	beq	r5,zero,47504 <_fseeko_r+0x418>
   472fc:	81c00f17 	ldw	r7,60(r16)
   47300:	99e7c83a 	sub	r19,r19,r7
   47304:	81000e17 	ldw	r4,56(r16)
   47308:	80800417 	ldw	r2,16(r16)
   4730c:	99a7883a 	add	r19,r19,r6
   47310:	2087c83a 	sub	r3,r4,r2
   47314:	98e7c83a 	sub	r19,r19,r3
   47318:	38c7883a 	add	r3,r7,r3
   4731c:	b4c02b16 	blt	r22,r19,473cc <_fseeko_r+0x2e0>
   47320:	98c9883a 	add	r4,r19,r3
   47324:	b100292e 	bgeu	r22,r4,473cc <_fseeko_r+0x2e0>
   47328:	b4e7c83a 	sub	r19,r22,r19
   4732c:	14c5883a 	add	r2,r2,r19
   47330:	1ce7c83a 	sub	r19,r3,r19
   47334:	80800015 	stw	r2,0(r16)
   47338:	84c00115 	stw	r19,4(r16)
   4733c:	28000526 	beq	r5,zero,47354 <_fseeko_r+0x268>
   47340:	80801004 	addi	r2,r16,64
   47344:	28800226 	beq	r5,r2,47350 <_fseeko_r+0x264>
   47348:	8809883a 	mov	r4,r17
   4734c:	004cbc80 	call	4cbc8 <_free_r>
   47350:	80000c15 	stw	zero,48(r16)
   47354:	8080030b 	ldhu	r2,12(r16)
   47358:	01800204 	movi	r6,8
   4735c:	000b883a 	mov	r5,zero
   47360:	10bff7cc 	andi	r2,r2,65503
   47364:	8080030d 	sth	r2,12(r16)
   47368:	81001704 	addi	r4,r16,92
   4736c:	0047f700 	call	47f70 <memset>
   47370:	0027883a 	mov	r19,zero
   47374:	003f7c06 	br	47168 <__alt_data_end+0xfffe0068>
   47378:	80c00117 	ldw	r3,4(r16)
   4737c:	80800c17 	ldw	r2,48(r16)
   47380:	98e7c83a 	sub	r19,r19,r3
   47384:	10003b26 	beq	r2,zero,47474 <_fseeko_r+0x388>
   47388:	80c00f17 	ldw	r3,60(r16)
   4738c:	80800417 	ldw	r2,16(r16)
   47390:	98e7c83a 	sub	r19,r19,r3
   47394:	003fbc06 	br	47288 <__alt_data_end+0xfffe0188>
   47398:	8140038f 	ldh	r5,14(r16)
   4739c:	d80d883a 	mov	r6,sp
   473a0:	8809883a 	mov	r4,r17
   473a4:	004754c0 	call	4754c <_fstat_r>
   473a8:	103f891e 	bne	r2,zero,471d0 <__alt_data_end+0xfffe00d0>
   473ac:	dd800417 	ldw	r22,16(sp)
   473b0:	adad883a 	add	r22,r21,r22
   473b4:	b83fc926 	beq	r23,zero,472dc <__alt_data_end+0xfffe01dc>
   473b8:	81400c17 	ldw	r5,48(r16)
   473bc:	81800117 	ldw	r6,4(r16)
   473c0:	28005026 	beq	r5,zero,47504 <_fseeko_r+0x418>
   473c4:	81c00f17 	ldw	r7,60(r16)
   473c8:	003fce06 	br	47304 <__alt_data_end+0xfffe0204>
   473cc:	84c01317 	ldw	r19,76(r16)
   473d0:	81400717 	ldw	r5,28(r16)
   473d4:	000f883a 	mov	r7,zero
   473d8:	04e7c83a 	sub	r19,zero,r19
   473dc:	9da6703a 	and	r19,r19,r22
   473e0:	980d883a 	mov	r6,r19
   473e4:	8809883a 	mov	r4,r17
   473e8:	a03ee83a 	callr	r20
   473ec:	00ffffc4 	movi	r3,-1
   473f0:	10ff7726 	beq	r2,r3,471d0 <__alt_data_end+0xfffe00d0>
   473f4:	80800417 	ldw	r2,16(r16)
   473f8:	81400c17 	ldw	r5,48(r16)
   473fc:	80000115 	stw	zero,4(r16)
   47400:	80800015 	stw	r2,0(r16)
   47404:	28000526 	beq	r5,zero,4741c <_fseeko_r+0x330>
   47408:	80801004 	addi	r2,r16,64
   4740c:	28800226 	beq	r5,r2,47418 <_fseeko_r+0x32c>
   47410:	8809883a 	mov	r4,r17
   47414:	004cbc80 	call	4cbc8 <_free_r>
   47418:	80000c15 	stw	zero,48(r16)
   4741c:	8080030b 	ldhu	r2,12(r16)
   47420:	b4e7c83a 	sub	r19,r22,r19
   47424:	10bff7cc 	andi	r2,r2,65503
   47428:	8080030d 	sth	r2,12(r16)
   4742c:	98000b26 	beq	r19,zero,4745c <_fseeko_r+0x370>
   47430:	800b883a 	mov	r5,r16
   47434:	8809883a 	mov	r4,r17
   47438:	00482540 	call	48254 <__srefill_r>
   4743c:	103f641e 	bne	r2,zero,471d0 <__alt_data_end+0xfffe00d0>
   47440:	80800117 	ldw	r2,4(r16)
   47444:	14ff6236 	bltu	r2,r19,471d0 <__alt_data_end+0xfffe00d0>
   47448:	80c00017 	ldw	r3,0(r16)
   4744c:	14c5c83a 	sub	r2,r2,r19
   47450:	80800115 	stw	r2,4(r16)
   47454:	1ce7883a 	add	r19,r3,r19
   47458:	84c00015 	stw	r19,0(r16)
   4745c:	01800204 	movi	r6,8
   47460:	000b883a 	mov	r5,zero
   47464:	81001704 	addi	r4,r16,92
   47468:	0047f700 	call	47f70 <memset>
   4746c:	0027883a 	mov	r19,zero
   47470:	003f3d06 	br	47168 <__alt_data_end+0xfffe0068>
   47474:	80800417 	ldw	r2,16(r16)
   47478:	003f8306 	br	47288 <__alt_data_end+0xfffe0188>
   4747c:	81400717 	ldw	r5,28(r16)
   47480:	900f883a 	mov	r7,r18
   47484:	000d883a 	mov	r6,zero
   47488:	8809883a 	mov	r4,r17
   4748c:	a03ee83a 	callr	r20
   47490:	1027883a 	mov	r19,r2
   47494:	00bfffc4 	movi	r2,-1
   47498:	98bf3226 	beq	r19,r2,47164 <__alt_data_end+0xfffe0064>
   4749c:	8080030b 	ldhu	r2,12(r16)
   474a0:	003f7006 	br	47264 <__alt_data_end+0xfffe0164>
   474a4:	8140038f 	ldh	r5,14(r16)
   474a8:	283f4716 	blt	r5,zero,471c8 <__alt_data_end+0xfffe00c8>
   474ac:	d80d883a 	mov	r6,sp
   474b0:	8809883a 	mov	r4,r17
   474b4:	004754c0 	call	4754c <_fstat_r>
   474b8:	1000041e 	bne	r2,zero,474cc <_fseeko_r+0x3e0>
   474bc:	d8800117 	ldw	r2,4(sp)
   474c0:	00e00014 	movui	r3,32768
   474c4:	10bc000c 	andi	r2,r2,61440
   474c8:	10ff7c26 	beq	r2,r3,472bc <__alt_data_end+0xfffe01bc>
   474cc:	8080030b 	ldhu	r2,12(r16)
   474d0:	003f3d06 	br	471c8 <__alt_data_end+0xfffe00c8>
   474d4:	800b883a 	mov	r5,r16
   474d8:	8809883a 	mov	r4,r17
   474dc:	00475a80 	call	475a8 <__smakebuf_r>
   474e0:	003f3106 	br	471a8 <__alt_data_end+0xfffe00a8>
   474e4:	81400717 	ldw	r5,28(r16)
   474e8:	01c00044 	movi	r7,1
   474ec:	000d883a 	mov	r6,zero
   474f0:	8809883a 	mov	r4,r17
   474f4:	a03ee83a 	callr	r20
   474f8:	00ffffc4 	movi	r3,-1
   474fc:	10ff7b1e 	bne	r2,r3,472ec <__alt_data_end+0xfffe01ec>
   47500:	003f3306 	br	471d0 <__alt_data_end+0xfffe00d0>
   47504:	80c00017 	ldw	r3,0(r16)
   47508:	80800417 	ldw	r2,16(r16)
   4750c:	000b883a 	mov	r5,zero
   47510:	1887c83a 	sub	r3,r3,r2
   47514:	98e7c83a 	sub	r19,r19,r3
   47518:	30c7883a 	add	r3,r6,r3
   4751c:	003f7f06 	br	4731c <__alt_data_end+0xfffe021c>
   47520:	00800744 	movi	r2,29
   47524:	88800015 	stw	r2,0(r17)
   47528:	04ffffc4 	movi	r19,-1
   4752c:	003f0e06 	br	47168 <__alt_data_end+0xfffe0068>

00047530 <fseeko>:
   47530:	008001b4 	movhi	r2,6
   47534:	10a1a804 	addi	r2,r2,-31072
   47538:	300f883a 	mov	r7,r6
   4753c:	280d883a 	mov	r6,r5
   47540:	200b883a 	mov	r5,r4
   47544:	11000017 	ldw	r4,0(r2)
   47548:	00470ec1 	jmpi	470ec <_fseeko_r>

0004754c <_fstat_r>:
   4754c:	defffd04 	addi	sp,sp,-12
   47550:	2805883a 	mov	r2,r5
   47554:	dc000015 	stw	r16,0(sp)
   47558:	040001b4 	movhi	r16,6
   4755c:	dc400115 	stw	r17,4(sp)
   47560:	8428b704 	addi	r16,r16,-23844
   47564:	2023883a 	mov	r17,r4
   47568:	300b883a 	mov	r5,r6
   4756c:	1009883a 	mov	r4,r2
   47570:	dfc00215 	stw	ra,8(sp)
   47574:	80000015 	stw	zero,0(r16)
   47578:	0051be80 	call	51be8 <fstat>
   4757c:	00ffffc4 	movi	r3,-1
   47580:	10c00526 	beq	r2,r3,47598 <_fstat_r+0x4c>
   47584:	dfc00217 	ldw	ra,8(sp)
   47588:	dc400117 	ldw	r17,4(sp)
   4758c:	dc000017 	ldw	r16,0(sp)
   47590:	dec00304 	addi	sp,sp,12
   47594:	f800283a 	ret
   47598:	80c00017 	ldw	r3,0(r16)
   4759c:	183ff926 	beq	r3,zero,47584 <__alt_data_end+0xfffe0484>
   475a0:	88c00015 	stw	r3,0(r17)
   475a4:	003ff706 	br	47584 <__alt_data_end+0xfffe0484>

000475a8 <__smakebuf_r>:
   475a8:	2880030b 	ldhu	r2,12(r5)
   475ac:	10c0008c 	andi	r3,r2,2
   475b0:	1800411e 	bne	r3,zero,476b8 <__smakebuf_r+0x110>
   475b4:	deffec04 	addi	sp,sp,-80
   475b8:	dc000f15 	stw	r16,60(sp)
   475bc:	2821883a 	mov	r16,r5
   475c0:	2940038f 	ldh	r5,14(r5)
   475c4:	dc401015 	stw	r17,64(sp)
   475c8:	dfc01315 	stw	ra,76(sp)
   475cc:	dcc01215 	stw	r19,72(sp)
   475d0:	dc801115 	stw	r18,68(sp)
   475d4:	2023883a 	mov	r17,r4
   475d8:	28001c16 	blt	r5,zero,4764c <__smakebuf_r+0xa4>
   475dc:	d80d883a 	mov	r6,sp
   475e0:	004754c0 	call	4754c <_fstat_r>
   475e4:	10001816 	blt	r2,zero,47648 <__smakebuf_r+0xa0>
   475e8:	d8800117 	ldw	r2,4(sp)
   475ec:	00e00014 	movui	r3,32768
   475f0:	10bc000c 	andi	r2,r2,61440
   475f4:	14c80020 	cmpeqi	r19,r2,8192
   475f8:	10c03726 	beq	r2,r3,476d8 <__smakebuf_r+0x130>
   475fc:	80c0030b 	ldhu	r3,12(r16)
   47600:	18c20014 	ori	r3,r3,2048
   47604:	80c0030d 	sth	r3,12(r16)
   47608:	00c80004 	movi	r3,8192
   4760c:	10c0521e 	bne	r2,r3,47758 <__smakebuf_r+0x1b0>
   47610:	8140038f 	ldh	r5,14(r16)
   47614:	8809883a 	mov	r4,r17
   47618:	004d51c0 	call	4d51c <_isatty_r>
   4761c:	10004c26 	beq	r2,zero,47750 <__smakebuf_r+0x1a8>
   47620:	8080030b 	ldhu	r2,12(r16)
   47624:	80c010c4 	addi	r3,r16,67
   47628:	80c00015 	stw	r3,0(r16)
   4762c:	10800054 	ori	r2,r2,1
   47630:	8080030d 	sth	r2,12(r16)
   47634:	00800044 	movi	r2,1
   47638:	80c00415 	stw	r3,16(r16)
   4763c:	80800515 	stw	r2,20(r16)
   47640:	04810004 	movi	r18,1024
   47644:	00000706 	br	47664 <__smakebuf_r+0xbc>
   47648:	8080030b 	ldhu	r2,12(r16)
   4764c:	10c0200c 	andi	r3,r2,128
   47650:	18001f1e 	bne	r3,zero,476d0 <__smakebuf_r+0x128>
   47654:	04810004 	movi	r18,1024
   47658:	10820014 	ori	r2,r2,2048
   4765c:	8080030d 	sth	r2,12(r16)
   47660:	0027883a 	mov	r19,zero
   47664:	900b883a 	mov	r5,r18
   47668:	8809883a 	mov	r4,r17
   4766c:	00477640 	call	47764 <_malloc_r>
   47670:	10002c26 	beq	r2,zero,47724 <__smakebuf_r+0x17c>
   47674:	80c0030b 	ldhu	r3,12(r16)
   47678:	01000174 	movhi	r4,5
   4767c:	21319804 	addi	r4,r4,-14752
   47680:	89000f15 	stw	r4,60(r17)
   47684:	18c02014 	ori	r3,r3,128
   47688:	80c0030d 	sth	r3,12(r16)
   4768c:	80800015 	stw	r2,0(r16)
   47690:	80800415 	stw	r2,16(r16)
   47694:	84800515 	stw	r18,20(r16)
   47698:	98001a1e 	bne	r19,zero,47704 <__smakebuf_r+0x15c>
   4769c:	dfc01317 	ldw	ra,76(sp)
   476a0:	dcc01217 	ldw	r19,72(sp)
   476a4:	dc801117 	ldw	r18,68(sp)
   476a8:	dc401017 	ldw	r17,64(sp)
   476ac:	dc000f17 	ldw	r16,60(sp)
   476b0:	dec01404 	addi	sp,sp,80
   476b4:	f800283a 	ret
   476b8:	288010c4 	addi	r2,r5,67
   476bc:	28800015 	stw	r2,0(r5)
   476c0:	28800415 	stw	r2,16(r5)
   476c4:	00800044 	movi	r2,1
   476c8:	28800515 	stw	r2,20(r5)
   476cc:	f800283a 	ret
   476d0:	04801004 	movi	r18,64
   476d4:	003fe006 	br	47658 <__alt_data_end+0xfffe0558>
   476d8:	81000a17 	ldw	r4,40(r16)
   476dc:	00c00174 	movhi	r3,5
   476e0:	18e15504 	addi	r3,r3,-31404
   476e4:	20ffc51e 	bne	r4,r3,475fc <__alt_data_end+0xfffe04fc>
   476e8:	8080030b 	ldhu	r2,12(r16)
   476ec:	04810004 	movi	r18,1024
   476f0:	84801315 	stw	r18,76(r16)
   476f4:	1484b03a 	or	r2,r2,r18
   476f8:	8080030d 	sth	r2,12(r16)
   476fc:	0027883a 	mov	r19,zero
   47700:	003fd806 	br	47664 <__alt_data_end+0xfffe0564>
   47704:	8140038f 	ldh	r5,14(r16)
   47708:	8809883a 	mov	r4,r17
   4770c:	004d51c0 	call	4d51c <_isatty_r>
   47710:	103fe226 	beq	r2,zero,4769c <__alt_data_end+0xfffe059c>
   47714:	8080030b 	ldhu	r2,12(r16)
   47718:	10800054 	ori	r2,r2,1
   4771c:	8080030d 	sth	r2,12(r16)
   47720:	003fde06 	br	4769c <__alt_data_end+0xfffe059c>
   47724:	8080030b 	ldhu	r2,12(r16)
   47728:	10c0800c 	andi	r3,r2,512
   4772c:	183fdb1e 	bne	r3,zero,4769c <__alt_data_end+0xfffe059c>
   47730:	10800094 	ori	r2,r2,2
   47734:	80c010c4 	addi	r3,r16,67
   47738:	8080030d 	sth	r2,12(r16)
   4773c:	00800044 	movi	r2,1
   47740:	80c00015 	stw	r3,0(r16)
   47744:	80c00415 	stw	r3,16(r16)
   47748:	80800515 	stw	r2,20(r16)
   4774c:	003fd306 	br	4769c <__alt_data_end+0xfffe059c>
   47750:	04810004 	movi	r18,1024
   47754:	003fc306 	br	47664 <__alt_data_end+0xfffe0564>
   47758:	0027883a 	mov	r19,zero
   4775c:	04810004 	movi	r18,1024
   47760:	003fc006 	br	47664 <__alt_data_end+0xfffe0564>

00047764 <_malloc_r>:
   47764:	defff504 	addi	sp,sp,-44
   47768:	dc800315 	stw	r18,12(sp)
   4776c:	dfc00a15 	stw	ra,40(sp)
   47770:	df000915 	stw	fp,36(sp)
   47774:	ddc00815 	stw	r23,32(sp)
   47778:	dd800715 	stw	r22,28(sp)
   4777c:	dd400615 	stw	r21,24(sp)
   47780:	dd000515 	stw	r20,20(sp)
   47784:	dcc00415 	stw	r19,16(sp)
   47788:	dc400215 	stw	r17,8(sp)
   4778c:	dc000115 	stw	r16,4(sp)
   47790:	288002c4 	addi	r2,r5,11
   47794:	00c00584 	movi	r3,22
   47798:	2025883a 	mov	r18,r4
   4779c:	18807f2e 	bgeu	r3,r2,4799c <_malloc_r+0x238>
   477a0:	047ffe04 	movi	r17,-8
   477a4:	1462703a 	and	r17,r2,r17
   477a8:	8800a316 	blt	r17,zero,47a38 <_malloc_r+0x2d4>
   477ac:	8940a236 	bltu	r17,r5,47a38 <_malloc_r+0x2d4>
   477b0:	0051ff00 	call	51ff0 <__malloc_lock>
   477b4:	00807dc4 	movi	r2,503
   477b8:	1441e92e 	bgeu	r2,r17,47f60 <_malloc_r+0x7fc>
   477bc:	8804d27a 	srli	r2,r17,9
   477c0:	1000a126 	beq	r2,zero,47a48 <_malloc_r+0x2e4>
   477c4:	00c00104 	movi	r3,4
   477c8:	18811e36 	bltu	r3,r2,47c44 <_malloc_r+0x4e0>
   477cc:	8804d1ba 	srli	r2,r17,6
   477d0:	12000e44 	addi	r8,r2,57
   477d4:	11c00e04 	addi	r7,r2,56
   477d8:	4209883a 	add	r4,r8,r8
   477dc:	04c00174 	movhi	r19,5
   477e0:	2109883a 	add	r4,r4,r4
   477e4:	9cdbe904 	addi	r19,r19,28580
   477e8:	2109883a 	add	r4,r4,r4
   477ec:	9909883a 	add	r4,r19,r4
   477f0:	24000117 	ldw	r16,4(r4)
   477f4:	213ffe04 	addi	r4,r4,-8
   477f8:	24009726 	beq	r4,r16,47a58 <_malloc_r+0x2f4>
   477fc:	80800117 	ldw	r2,4(r16)
   47800:	01bfff04 	movi	r6,-4
   47804:	014003c4 	movi	r5,15
   47808:	1184703a 	and	r2,r2,r6
   4780c:	1447c83a 	sub	r3,r2,r17
   47810:	28c00716 	blt	r5,r3,47830 <_malloc_r+0xcc>
   47814:	1800920e 	bge	r3,zero,47a60 <_malloc_r+0x2fc>
   47818:	84000317 	ldw	r16,12(r16)
   4781c:	24008e26 	beq	r4,r16,47a58 <_malloc_r+0x2f4>
   47820:	80800117 	ldw	r2,4(r16)
   47824:	1184703a 	and	r2,r2,r6
   47828:	1447c83a 	sub	r3,r2,r17
   4782c:	28fff90e 	bge	r5,r3,47814 <__alt_data_end+0xfffe0714>
   47830:	3809883a 	mov	r4,r7
   47834:	01800174 	movhi	r6,5
   47838:	9c000417 	ldw	r16,16(r19)
   4783c:	319be904 	addi	r6,r6,28580
   47840:	32000204 	addi	r8,r6,8
   47844:	82013426 	beq	r16,r8,47d18 <_malloc_r+0x5b4>
   47848:	80c00117 	ldw	r3,4(r16)
   4784c:	00bfff04 	movi	r2,-4
   47850:	188e703a 	and	r7,r3,r2
   47854:	3c45c83a 	sub	r2,r7,r17
   47858:	00c003c4 	movi	r3,15
   4785c:	18811f16 	blt	r3,r2,47cdc <_malloc_r+0x578>
   47860:	32000515 	stw	r8,20(r6)
   47864:	32000415 	stw	r8,16(r6)
   47868:	10007f0e 	bge	r2,zero,47a68 <_malloc_r+0x304>
   4786c:	00807fc4 	movi	r2,511
   47870:	11c0fd36 	bltu	r2,r7,47c68 <_malloc_r+0x504>
   47874:	3806d0fa 	srli	r3,r7,3
   47878:	01c00044 	movi	r7,1
   4787c:	30800117 	ldw	r2,4(r6)
   47880:	19400044 	addi	r5,r3,1
   47884:	294b883a 	add	r5,r5,r5
   47888:	1807d0ba 	srai	r3,r3,2
   4788c:	294b883a 	add	r5,r5,r5
   47890:	294b883a 	add	r5,r5,r5
   47894:	298b883a 	add	r5,r5,r6
   47898:	38c6983a 	sll	r3,r7,r3
   4789c:	29c00017 	ldw	r7,0(r5)
   478a0:	2a7ffe04 	addi	r9,r5,-8
   478a4:	1886b03a 	or	r3,r3,r2
   478a8:	82400315 	stw	r9,12(r16)
   478ac:	81c00215 	stw	r7,8(r16)
   478b0:	30c00115 	stw	r3,4(r6)
   478b4:	2c000015 	stw	r16,0(r5)
   478b8:	3c000315 	stw	r16,12(r7)
   478bc:	2005d0ba 	srai	r2,r4,2
   478c0:	01400044 	movi	r5,1
   478c4:	288a983a 	sll	r5,r5,r2
   478c8:	19406f36 	bltu	r3,r5,47a88 <_malloc_r+0x324>
   478cc:	28c4703a 	and	r2,r5,r3
   478d0:	10000a1e 	bne	r2,zero,478fc <_malloc_r+0x198>
   478d4:	00bfff04 	movi	r2,-4
   478d8:	294b883a 	add	r5,r5,r5
   478dc:	2088703a 	and	r4,r4,r2
   478e0:	28c4703a 	and	r2,r5,r3
   478e4:	21000104 	addi	r4,r4,4
   478e8:	1000041e 	bne	r2,zero,478fc <_malloc_r+0x198>
   478ec:	294b883a 	add	r5,r5,r5
   478f0:	28c4703a 	and	r2,r5,r3
   478f4:	21000104 	addi	r4,r4,4
   478f8:	103ffc26 	beq	r2,zero,478ec <__alt_data_end+0xfffe07ec>
   478fc:	02bfff04 	movi	r10,-4
   47900:	024003c4 	movi	r9,15
   47904:	21800044 	addi	r6,r4,1
   47908:	318d883a 	add	r6,r6,r6
   4790c:	318d883a 	add	r6,r6,r6
   47910:	318d883a 	add	r6,r6,r6
   47914:	998d883a 	add	r6,r19,r6
   47918:	333ffe04 	addi	r12,r6,-8
   4791c:	2017883a 	mov	r11,r4
   47920:	31800104 	addi	r6,r6,4
   47924:	34000017 	ldw	r16,0(r6)
   47928:	31fffd04 	addi	r7,r6,-12
   4792c:	81c0041e 	bne	r16,r7,47940 <_malloc_r+0x1dc>
   47930:	0000fb06 	br	47d20 <_malloc_r+0x5bc>
   47934:	1801030e 	bge	r3,zero,47d44 <_malloc_r+0x5e0>
   47938:	84000317 	ldw	r16,12(r16)
   4793c:	81c0f826 	beq	r16,r7,47d20 <_malloc_r+0x5bc>
   47940:	80800117 	ldw	r2,4(r16)
   47944:	1284703a 	and	r2,r2,r10
   47948:	1447c83a 	sub	r3,r2,r17
   4794c:	48fff90e 	bge	r9,r3,47934 <__alt_data_end+0xfffe0834>
   47950:	80800317 	ldw	r2,12(r16)
   47954:	81000217 	ldw	r4,8(r16)
   47958:	89400054 	ori	r5,r17,1
   4795c:	81400115 	stw	r5,4(r16)
   47960:	20800315 	stw	r2,12(r4)
   47964:	11000215 	stw	r4,8(r2)
   47968:	8463883a 	add	r17,r16,r17
   4796c:	9c400515 	stw	r17,20(r19)
   47970:	9c400415 	stw	r17,16(r19)
   47974:	18800054 	ori	r2,r3,1
   47978:	88800115 	stw	r2,4(r17)
   4797c:	8a000315 	stw	r8,12(r17)
   47980:	8a000215 	stw	r8,8(r17)
   47984:	88e3883a 	add	r17,r17,r3
   47988:	88c00015 	stw	r3,0(r17)
   4798c:	9009883a 	mov	r4,r18
   47990:	00520140 	call	52014 <__malloc_unlock>
   47994:	80800204 	addi	r2,r16,8
   47998:	00001b06 	br	47a08 <_malloc_r+0x2a4>
   4799c:	04400404 	movi	r17,16
   479a0:	89402536 	bltu	r17,r5,47a38 <_malloc_r+0x2d4>
   479a4:	0051ff00 	call	51ff0 <__malloc_lock>
   479a8:	00800184 	movi	r2,6
   479ac:	01000084 	movi	r4,2
   479b0:	04c00174 	movhi	r19,5
   479b4:	1085883a 	add	r2,r2,r2
   479b8:	9cdbe904 	addi	r19,r19,28580
   479bc:	1085883a 	add	r2,r2,r2
   479c0:	9885883a 	add	r2,r19,r2
   479c4:	14000117 	ldw	r16,4(r2)
   479c8:	10fffe04 	addi	r3,r2,-8
   479cc:	80c0d926 	beq	r16,r3,47d34 <_malloc_r+0x5d0>
   479d0:	80c00117 	ldw	r3,4(r16)
   479d4:	81000317 	ldw	r4,12(r16)
   479d8:	00bfff04 	movi	r2,-4
   479dc:	1884703a 	and	r2,r3,r2
   479e0:	81400217 	ldw	r5,8(r16)
   479e4:	8085883a 	add	r2,r16,r2
   479e8:	10c00117 	ldw	r3,4(r2)
   479ec:	29000315 	stw	r4,12(r5)
   479f0:	21400215 	stw	r5,8(r4)
   479f4:	18c00054 	ori	r3,r3,1
   479f8:	10c00115 	stw	r3,4(r2)
   479fc:	9009883a 	mov	r4,r18
   47a00:	00520140 	call	52014 <__malloc_unlock>
   47a04:	80800204 	addi	r2,r16,8
   47a08:	dfc00a17 	ldw	ra,40(sp)
   47a0c:	df000917 	ldw	fp,36(sp)
   47a10:	ddc00817 	ldw	r23,32(sp)
   47a14:	dd800717 	ldw	r22,28(sp)
   47a18:	dd400617 	ldw	r21,24(sp)
   47a1c:	dd000517 	ldw	r20,20(sp)
   47a20:	dcc00417 	ldw	r19,16(sp)
   47a24:	dc800317 	ldw	r18,12(sp)
   47a28:	dc400217 	ldw	r17,8(sp)
   47a2c:	dc000117 	ldw	r16,4(sp)
   47a30:	dec00b04 	addi	sp,sp,44
   47a34:	f800283a 	ret
   47a38:	00800304 	movi	r2,12
   47a3c:	90800015 	stw	r2,0(r18)
   47a40:	0005883a 	mov	r2,zero
   47a44:	003ff006 	br	47a08 <__alt_data_end+0xfffe0908>
   47a48:	01002004 	movi	r4,128
   47a4c:	02001004 	movi	r8,64
   47a50:	01c00fc4 	movi	r7,63
   47a54:	003f6106 	br	477dc <__alt_data_end+0xfffe06dc>
   47a58:	4009883a 	mov	r4,r8
   47a5c:	003f7506 	br	47834 <__alt_data_end+0xfffe0734>
   47a60:	81000317 	ldw	r4,12(r16)
   47a64:	003fde06 	br	479e0 <__alt_data_end+0xfffe08e0>
   47a68:	81c5883a 	add	r2,r16,r7
   47a6c:	11400117 	ldw	r5,4(r2)
   47a70:	9009883a 	mov	r4,r18
   47a74:	29400054 	ori	r5,r5,1
   47a78:	11400115 	stw	r5,4(r2)
   47a7c:	00520140 	call	52014 <__malloc_unlock>
   47a80:	80800204 	addi	r2,r16,8
   47a84:	003fe006 	br	47a08 <__alt_data_end+0xfffe0908>
   47a88:	9c000217 	ldw	r16,8(r19)
   47a8c:	00bfff04 	movi	r2,-4
   47a90:	85800117 	ldw	r22,4(r16)
   47a94:	b0ac703a 	and	r22,r22,r2
   47a98:	b4400336 	bltu	r22,r17,47aa8 <_malloc_r+0x344>
   47a9c:	b445c83a 	sub	r2,r22,r17
   47aa0:	00c003c4 	movi	r3,15
   47aa4:	18805d16 	blt	r3,r2,47c1c <_malloc_r+0x4b8>
   47aa8:	05c001b4 	movhi	r23,6
   47aac:	008001b4 	movhi	r2,6
   47ab0:	10a8ba04 	addi	r2,r2,-23832
   47ab4:	bde1a904 	addi	r23,r23,-31068
   47ab8:	15400017 	ldw	r21,0(r2)
   47abc:	b8c00017 	ldw	r3,0(r23)
   47ac0:	00bfffc4 	movi	r2,-1
   47ac4:	858d883a 	add	r6,r16,r22
   47ac8:	8d6b883a 	add	r21,r17,r21
   47acc:	1880ea26 	beq	r3,r2,47e78 <_malloc_r+0x714>
   47ad0:	ad4403c4 	addi	r21,r21,4111
   47ad4:	00bc0004 	movi	r2,-4096
   47ad8:	a8aa703a 	and	r21,r21,r2
   47adc:	a80b883a 	mov	r5,r21
   47ae0:	9009883a 	mov	r4,r18
   47ae4:	d9800015 	stw	r6,0(sp)
   47ae8:	00484280 	call	48428 <_sbrk_r>
   47aec:	1029883a 	mov	r20,r2
   47af0:	00bfffc4 	movi	r2,-1
   47af4:	d9800017 	ldw	r6,0(sp)
   47af8:	a080e826 	beq	r20,r2,47e9c <_malloc_r+0x738>
   47afc:	a180a636 	bltu	r20,r6,47d98 <_malloc_r+0x634>
   47b00:	070001b4 	movhi	fp,6
   47b04:	e728c504 	addi	fp,fp,-23788
   47b08:	e0800017 	ldw	r2,0(fp)
   47b0c:	a887883a 	add	r3,r21,r2
   47b10:	e0c00015 	stw	r3,0(fp)
   47b14:	3500e626 	beq	r6,r20,47eb0 <_malloc_r+0x74c>
   47b18:	b9000017 	ldw	r4,0(r23)
   47b1c:	00bfffc4 	movi	r2,-1
   47b20:	2080ee26 	beq	r4,r2,47edc <_malloc_r+0x778>
   47b24:	a185c83a 	sub	r2,r20,r6
   47b28:	10c5883a 	add	r2,r2,r3
   47b2c:	e0800015 	stw	r2,0(fp)
   47b30:	a0c001cc 	andi	r3,r20,7
   47b34:	1800bc26 	beq	r3,zero,47e28 <_malloc_r+0x6c4>
   47b38:	a0e9c83a 	sub	r20,r20,r3
   47b3c:	00840204 	movi	r2,4104
   47b40:	a5000204 	addi	r20,r20,8
   47b44:	10c7c83a 	sub	r3,r2,r3
   47b48:	a545883a 	add	r2,r20,r21
   47b4c:	1083ffcc 	andi	r2,r2,4095
   47b50:	18abc83a 	sub	r21,r3,r2
   47b54:	a80b883a 	mov	r5,r21
   47b58:	9009883a 	mov	r4,r18
   47b5c:	00484280 	call	48428 <_sbrk_r>
   47b60:	00ffffc4 	movi	r3,-1
   47b64:	10c0e126 	beq	r2,r3,47eec <_malloc_r+0x788>
   47b68:	1505c83a 	sub	r2,r2,r20
   47b6c:	1545883a 	add	r2,r2,r21
   47b70:	10800054 	ori	r2,r2,1
   47b74:	e0c00017 	ldw	r3,0(fp)
   47b78:	9d000215 	stw	r20,8(r19)
   47b7c:	a0800115 	stw	r2,4(r20)
   47b80:	a8c7883a 	add	r3,r21,r3
   47b84:	e0c00015 	stw	r3,0(fp)
   47b88:	84c00e26 	beq	r16,r19,47bc4 <_malloc_r+0x460>
   47b8c:	018003c4 	movi	r6,15
   47b90:	3580a72e 	bgeu	r6,r22,47e30 <_malloc_r+0x6cc>
   47b94:	81400117 	ldw	r5,4(r16)
   47b98:	013ffe04 	movi	r4,-8
   47b9c:	b0bffd04 	addi	r2,r22,-12
   47ba0:	1104703a 	and	r2,r2,r4
   47ba4:	2900004c 	andi	r4,r5,1
   47ba8:	2088b03a 	or	r4,r4,r2
   47bac:	81000115 	stw	r4,4(r16)
   47bb0:	01400144 	movi	r5,5
   47bb4:	8089883a 	add	r4,r16,r2
   47bb8:	21400115 	stw	r5,4(r4)
   47bbc:	21400215 	stw	r5,8(r4)
   47bc0:	3080cd36 	bltu	r6,r2,47ef8 <_malloc_r+0x794>
   47bc4:	008001b4 	movhi	r2,6
   47bc8:	10a8b904 	addi	r2,r2,-23836
   47bcc:	11000017 	ldw	r4,0(r2)
   47bd0:	20c0012e 	bgeu	r4,r3,47bd8 <_malloc_r+0x474>
   47bd4:	10c00015 	stw	r3,0(r2)
   47bd8:	008001b4 	movhi	r2,6
   47bdc:	10a8b804 	addi	r2,r2,-23840
   47be0:	11000017 	ldw	r4,0(r2)
   47be4:	9c000217 	ldw	r16,8(r19)
   47be8:	20c0012e 	bgeu	r4,r3,47bf0 <_malloc_r+0x48c>
   47bec:	10c00015 	stw	r3,0(r2)
   47bf0:	80c00117 	ldw	r3,4(r16)
   47bf4:	00bfff04 	movi	r2,-4
   47bf8:	1886703a 	and	r3,r3,r2
   47bfc:	1c45c83a 	sub	r2,r3,r17
   47c00:	1c400236 	bltu	r3,r17,47c0c <_malloc_r+0x4a8>
   47c04:	00c003c4 	movi	r3,15
   47c08:	18800416 	blt	r3,r2,47c1c <_malloc_r+0x4b8>
   47c0c:	9009883a 	mov	r4,r18
   47c10:	00520140 	call	52014 <__malloc_unlock>
   47c14:	0005883a 	mov	r2,zero
   47c18:	003f7b06 	br	47a08 <__alt_data_end+0xfffe0908>
   47c1c:	88c00054 	ori	r3,r17,1
   47c20:	80c00115 	stw	r3,4(r16)
   47c24:	8463883a 	add	r17,r16,r17
   47c28:	10800054 	ori	r2,r2,1
   47c2c:	9c400215 	stw	r17,8(r19)
   47c30:	88800115 	stw	r2,4(r17)
   47c34:	9009883a 	mov	r4,r18
   47c38:	00520140 	call	52014 <__malloc_unlock>
   47c3c:	80800204 	addi	r2,r16,8
   47c40:	003f7106 	br	47a08 <__alt_data_end+0xfffe0908>
   47c44:	00c00504 	movi	r3,20
   47c48:	18804a2e 	bgeu	r3,r2,47d74 <_malloc_r+0x610>
   47c4c:	00c01504 	movi	r3,84
   47c50:	18806e36 	bltu	r3,r2,47e0c <_malloc_r+0x6a8>
   47c54:	8804d33a 	srli	r2,r17,12
   47c58:	12001bc4 	addi	r8,r2,111
   47c5c:	11c01b84 	addi	r7,r2,110
   47c60:	4209883a 	add	r4,r8,r8
   47c64:	003edd06 	br	477dc <__alt_data_end+0xfffe06dc>
   47c68:	3804d27a 	srli	r2,r7,9
   47c6c:	00c00104 	movi	r3,4
   47c70:	1880442e 	bgeu	r3,r2,47d84 <_malloc_r+0x620>
   47c74:	00c00504 	movi	r3,20
   47c78:	18808136 	bltu	r3,r2,47e80 <_malloc_r+0x71c>
   47c7c:	11401704 	addi	r5,r2,92
   47c80:	10c016c4 	addi	r3,r2,91
   47c84:	294b883a 	add	r5,r5,r5
   47c88:	294b883a 	add	r5,r5,r5
   47c8c:	294b883a 	add	r5,r5,r5
   47c90:	994b883a 	add	r5,r19,r5
   47c94:	28800017 	ldw	r2,0(r5)
   47c98:	01800174 	movhi	r6,5
   47c9c:	297ffe04 	addi	r5,r5,-8
   47ca0:	319be904 	addi	r6,r6,28580
   47ca4:	28806526 	beq	r5,r2,47e3c <_malloc_r+0x6d8>
   47ca8:	01bfff04 	movi	r6,-4
   47cac:	10c00117 	ldw	r3,4(r2)
   47cb0:	1986703a 	and	r3,r3,r6
   47cb4:	38c0022e 	bgeu	r7,r3,47cc0 <_malloc_r+0x55c>
   47cb8:	10800217 	ldw	r2,8(r2)
   47cbc:	28bffb1e 	bne	r5,r2,47cac <__alt_data_end+0xfffe0bac>
   47cc0:	11400317 	ldw	r5,12(r2)
   47cc4:	98c00117 	ldw	r3,4(r19)
   47cc8:	81400315 	stw	r5,12(r16)
   47ccc:	80800215 	stw	r2,8(r16)
   47cd0:	2c000215 	stw	r16,8(r5)
   47cd4:	14000315 	stw	r16,12(r2)
   47cd8:	003ef806 	br	478bc <__alt_data_end+0xfffe07bc>
   47cdc:	88c00054 	ori	r3,r17,1
   47ce0:	80c00115 	stw	r3,4(r16)
   47ce4:	8463883a 	add	r17,r16,r17
   47ce8:	34400515 	stw	r17,20(r6)
   47cec:	34400415 	stw	r17,16(r6)
   47cf0:	10c00054 	ori	r3,r2,1
   47cf4:	8a000315 	stw	r8,12(r17)
   47cf8:	8a000215 	stw	r8,8(r17)
   47cfc:	88c00115 	stw	r3,4(r17)
   47d00:	88a3883a 	add	r17,r17,r2
   47d04:	88800015 	stw	r2,0(r17)
   47d08:	9009883a 	mov	r4,r18
   47d0c:	00520140 	call	52014 <__malloc_unlock>
   47d10:	80800204 	addi	r2,r16,8
   47d14:	003f3c06 	br	47a08 <__alt_data_end+0xfffe0908>
   47d18:	30c00117 	ldw	r3,4(r6)
   47d1c:	003ee706 	br	478bc <__alt_data_end+0xfffe07bc>
   47d20:	5ac00044 	addi	r11,r11,1
   47d24:	588000cc 	andi	r2,r11,3
   47d28:	31800204 	addi	r6,r6,8
   47d2c:	103efd1e 	bne	r2,zero,47924 <__alt_data_end+0xfffe0824>
   47d30:	00002406 	br	47dc4 <_malloc_r+0x660>
   47d34:	14000317 	ldw	r16,12(r2)
   47d38:	143f251e 	bne	r2,r16,479d0 <__alt_data_end+0xfffe08d0>
   47d3c:	21000084 	addi	r4,r4,2
   47d40:	003ebc06 	br	47834 <__alt_data_end+0xfffe0734>
   47d44:	8085883a 	add	r2,r16,r2
   47d48:	10c00117 	ldw	r3,4(r2)
   47d4c:	81000317 	ldw	r4,12(r16)
   47d50:	81400217 	ldw	r5,8(r16)
   47d54:	18c00054 	ori	r3,r3,1
   47d58:	10c00115 	stw	r3,4(r2)
   47d5c:	29000315 	stw	r4,12(r5)
   47d60:	21400215 	stw	r5,8(r4)
   47d64:	9009883a 	mov	r4,r18
   47d68:	00520140 	call	52014 <__malloc_unlock>
   47d6c:	80800204 	addi	r2,r16,8
   47d70:	003f2506 	br	47a08 <__alt_data_end+0xfffe0908>
   47d74:	12001704 	addi	r8,r2,92
   47d78:	11c016c4 	addi	r7,r2,91
   47d7c:	4209883a 	add	r4,r8,r8
   47d80:	003e9606 	br	477dc <__alt_data_end+0xfffe06dc>
   47d84:	3804d1ba 	srli	r2,r7,6
   47d88:	11400e44 	addi	r5,r2,57
   47d8c:	10c00e04 	addi	r3,r2,56
   47d90:	294b883a 	add	r5,r5,r5
   47d94:	003fbc06 	br	47c88 <__alt_data_end+0xfffe0b88>
   47d98:	84ff5926 	beq	r16,r19,47b00 <__alt_data_end+0xfffe0a00>
   47d9c:	00800174 	movhi	r2,5
   47da0:	109be904 	addi	r2,r2,28580
   47da4:	14000217 	ldw	r16,8(r2)
   47da8:	00bfff04 	movi	r2,-4
   47dac:	80c00117 	ldw	r3,4(r16)
   47db0:	1886703a 	and	r3,r3,r2
   47db4:	003f9106 	br	47bfc <__alt_data_end+0xfffe0afc>
   47db8:	60800217 	ldw	r2,8(r12)
   47dbc:	213fffc4 	addi	r4,r4,-1
   47dc0:	1300651e 	bne	r2,r12,47f58 <_malloc_r+0x7f4>
   47dc4:	208000cc 	andi	r2,r4,3
   47dc8:	633ffe04 	addi	r12,r12,-8
   47dcc:	103ffa1e 	bne	r2,zero,47db8 <__alt_data_end+0xfffe0cb8>
   47dd0:	98800117 	ldw	r2,4(r19)
   47dd4:	0146303a 	nor	r3,zero,r5
   47dd8:	1884703a 	and	r2,r3,r2
   47ddc:	98800115 	stw	r2,4(r19)
   47de0:	294b883a 	add	r5,r5,r5
   47de4:	117f2836 	bltu	r2,r5,47a88 <__alt_data_end+0xfffe0988>
   47de8:	283f2726 	beq	r5,zero,47a88 <__alt_data_end+0xfffe0988>
   47dec:	2886703a 	and	r3,r5,r2
   47df0:	5809883a 	mov	r4,r11
   47df4:	183ec31e 	bne	r3,zero,47904 <__alt_data_end+0xfffe0804>
   47df8:	294b883a 	add	r5,r5,r5
   47dfc:	2886703a 	and	r3,r5,r2
   47e00:	21000104 	addi	r4,r4,4
   47e04:	183ffc26 	beq	r3,zero,47df8 <__alt_data_end+0xfffe0cf8>
   47e08:	003ebe06 	br	47904 <__alt_data_end+0xfffe0804>
   47e0c:	00c05504 	movi	r3,340
   47e10:	18801236 	bltu	r3,r2,47e5c <_malloc_r+0x6f8>
   47e14:	8804d3fa 	srli	r2,r17,15
   47e18:	12001e04 	addi	r8,r2,120
   47e1c:	11c01dc4 	addi	r7,r2,119
   47e20:	4209883a 	add	r4,r8,r8
   47e24:	003e6d06 	br	477dc <__alt_data_end+0xfffe06dc>
   47e28:	00c40004 	movi	r3,4096
   47e2c:	003f4606 	br	47b48 <__alt_data_end+0xfffe0a48>
   47e30:	00800044 	movi	r2,1
   47e34:	a0800115 	stw	r2,4(r20)
   47e38:	003f7406 	br	47c0c <__alt_data_end+0xfffe0b0c>
   47e3c:	1805d0ba 	srai	r2,r3,2
   47e40:	01c00044 	movi	r7,1
   47e44:	30c00117 	ldw	r3,4(r6)
   47e48:	388e983a 	sll	r7,r7,r2
   47e4c:	2805883a 	mov	r2,r5
   47e50:	38c6b03a 	or	r3,r7,r3
   47e54:	30c00115 	stw	r3,4(r6)
   47e58:	003f9b06 	br	47cc8 <__alt_data_end+0xfffe0bc8>
   47e5c:	00c15504 	movi	r3,1364
   47e60:	18801a36 	bltu	r3,r2,47ecc <_malloc_r+0x768>
   47e64:	8804d4ba 	srli	r2,r17,18
   47e68:	12001f44 	addi	r8,r2,125
   47e6c:	11c01f04 	addi	r7,r2,124
   47e70:	4209883a 	add	r4,r8,r8
   47e74:	003e5906 	br	477dc <__alt_data_end+0xfffe06dc>
   47e78:	ad400404 	addi	r21,r21,16
   47e7c:	003f1706 	br	47adc <__alt_data_end+0xfffe09dc>
   47e80:	00c01504 	movi	r3,84
   47e84:	18802336 	bltu	r3,r2,47f14 <_malloc_r+0x7b0>
   47e88:	3804d33a 	srli	r2,r7,12
   47e8c:	11401bc4 	addi	r5,r2,111
   47e90:	10c01b84 	addi	r3,r2,110
   47e94:	294b883a 	add	r5,r5,r5
   47e98:	003f7b06 	br	47c88 <__alt_data_end+0xfffe0b88>
   47e9c:	9c000217 	ldw	r16,8(r19)
   47ea0:	00bfff04 	movi	r2,-4
   47ea4:	80c00117 	ldw	r3,4(r16)
   47ea8:	1886703a 	and	r3,r3,r2
   47eac:	003f5306 	br	47bfc <__alt_data_end+0xfffe0afc>
   47eb0:	3083ffcc 	andi	r2,r6,4095
   47eb4:	103f181e 	bne	r2,zero,47b18 <__alt_data_end+0xfffe0a18>
   47eb8:	99000217 	ldw	r4,8(r19)
   47ebc:	b545883a 	add	r2,r22,r21
   47ec0:	10800054 	ori	r2,r2,1
   47ec4:	20800115 	stw	r2,4(r4)
   47ec8:	003f3e06 	br	47bc4 <__alt_data_end+0xfffe0ac4>
   47ecc:	01003f84 	movi	r4,254
   47ed0:	02001fc4 	movi	r8,127
   47ed4:	01c01f84 	movi	r7,126
   47ed8:	003e4006 	br	477dc <__alt_data_end+0xfffe06dc>
   47edc:	008001b4 	movhi	r2,6
   47ee0:	10a1a904 	addi	r2,r2,-31068
   47ee4:	15000015 	stw	r20,0(r2)
   47ee8:	003f1106 	br	47b30 <__alt_data_end+0xfffe0a30>
   47eec:	00800044 	movi	r2,1
   47ef0:	002b883a 	mov	r21,zero
   47ef4:	003f1f06 	br	47b74 <__alt_data_end+0xfffe0a74>
   47ef8:	81400204 	addi	r5,r16,8
   47efc:	9009883a 	mov	r4,r18
   47f00:	004cbc80 	call	4cbc8 <_free_r>
   47f04:	008001b4 	movhi	r2,6
   47f08:	10a8c504 	addi	r2,r2,-23788
   47f0c:	10c00017 	ldw	r3,0(r2)
   47f10:	003f2c06 	br	47bc4 <__alt_data_end+0xfffe0ac4>
   47f14:	00c05504 	movi	r3,340
   47f18:	18800536 	bltu	r3,r2,47f30 <_malloc_r+0x7cc>
   47f1c:	3804d3fa 	srli	r2,r7,15
   47f20:	11401e04 	addi	r5,r2,120
   47f24:	10c01dc4 	addi	r3,r2,119
   47f28:	294b883a 	add	r5,r5,r5
   47f2c:	003f5606 	br	47c88 <__alt_data_end+0xfffe0b88>
   47f30:	00c15504 	movi	r3,1364
   47f34:	18800536 	bltu	r3,r2,47f4c <_malloc_r+0x7e8>
   47f38:	3804d4ba 	srli	r2,r7,18
   47f3c:	11401f44 	addi	r5,r2,125
   47f40:	10c01f04 	addi	r3,r2,124
   47f44:	294b883a 	add	r5,r5,r5
   47f48:	003f4f06 	br	47c88 <__alt_data_end+0xfffe0b88>
   47f4c:	01403f84 	movi	r5,254
   47f50:	00c01f84 	movi	r3,126
   47f54:	003f4c06 	br	47c88 <__alt_data_end+0xfffe0b88>
   47f58:	98800117 	ldw	r2,4(r19)
   47f5c:	003fa006 	br	47de0 <__alt_data_end+0xfffe0ce0>
   47f60:	8808d0fa 	srli	r4,r17,3
   47f64:	20800044 	addi	r2,r4,1
   47f68:	1085883a 	add	r2,r2,r2
   47f6c:	003e9006 	br	479b0 <__alt_data_end+0xfffe08b0>

00047f70 <memset>:
   47f70:	20c000cc 	andi	r3,r4,3
   47f74:	2005883a 	mov	r2,r4
   47f78:	18004426 	beq	r3,zero,4808c <memset+0x11c>
   47f7c:	31ffffc4 	addi	r7,r6,-1
   47f80:	30004026 	beq	r6,zero,48084 <memset+0x114>
   47f84:	2813883a 	mov	r9,r5
   47f88:	200d883a 	mov	r6,r4
   47f8c:	2007883a 	mov	r3,r4
   47f90:	00000406 	br	47fa4 <memset+0x34>
   47f94:	3a3fffc4 	addi	r8,r7,-1
   47f98:	31800044 	addi	r6,r6,1
   47f9c:	38003926 	beq	r7,zero,48084 <memset+0x114>
   47fa0:	400f883a 	mov	r7,r8
   47fa4:	18c00044 	addi	r3,r3,1
   47fa8:	32400005 	stb	r9,0(r6)
   47fac:	1a0000cc 	andi	r8,r3,3
   47fb0:	403ff81e 	bne	r8,zero,47f94 <__alt_data_end+0xfffe0e94>
   47fb4:	010000c4 	movi	r4,3
   47fb8:	21c02d2e 	bgeu	r4,r7,48070 <memset+0x100>
   47fbc:	29003fcc 	andi	r4,r5,255
   47fc0:	200c923a 	slli	r6,r4,8
   47fc4:	3108b03a 	or	r4,r6,r4
   47fc8:	200c943a 	slli	r6,r4,16
   47fcc:	218cb03a 	or	r6,r4,r6
   47fd0:	010003c4 	movi	r4,15
   47fd4:	21c0182e 	bgeu	r4,r7,48038 <memset+0xc8>
   47fd8:	3b3ffc04 	addi	r12,r7,-16
   47fdc:	6018d13a 	srli	r12,r12,4
   47fe0:	1a000104 	addi	r8,r3,4
   47fe4:	1ac00204 	addi	r11,r3,8
   47fe8:	6008913a 	slli	r4,r12,4
   47fec:	1a800304 	addi	r10,r3,12
   47ff0:	1813883a 	mov	r9,r3
   47ff4:	21000504 	addi	r4,r4,20
   47ff8:	1909883a 	add	r4,r3,r4
   47ffc:	49800015 	stw	r6,0(r9)
   48000:	41800015 	stw	r6,0(r8)
   48004:	59800015 	stw	r6,0(r11)
   48008:	51800015 	stw	r6,0(r10)
   4800c:	42000404 	addi	r8,r8,16
   48010:	4a400404 	addi	r9,r9,16
   48014:	5ac00404 	addi	r11,r11,16
   48018:	52800404 	addi	r10,r10,16
   4801c:	413ff71e 	bne	r8,r4,47ffc <__alt_data_end+0xfffe0efc>
   48020:	63000044 	addi	r12,r12,1
   48024:	6018913a 	slli	r12,r12,4
   48028:	39c003cc 	andi	r7,r7,15
   4802c:	010000c4 	movi	r4,3
   48030:	1b07883a 	add	r3,r3,r12
   48034:	21c00e2e 	bgeu	r4,r7,48070 <memset+0x100>
   48038:	1813883a 	mov	r9,r3
   4803c:	3811883a 	mov	r8,r7
   48040:	010000c4 	movi	r4,3
   48044:	49800015 	stw	r6,0(r9)
   48048:	423fff04 	addi	r8,r8,-4
   4804c:	4a400104 	addi	r9,r9,4
   48050:	223ffc36 	bltu	r4,r8,48044 <__alt_data_end+0xfffe0f44>
   48054:	393fff04 	addi	r4,r7,-4
   48058:	2008d0ba 	srli	r4,r4,2
   4805c:	39c000cc 	andi	r7,r7,3
   48060:	21000044 	addi	r4,r4,1
   48064:	2109883a 	add	r4,r4,r4
   48068:	2109883a 	add	r4,r4,r4
   4806c:	1907883a 	add	r3,r3,r4
   48070:	38000526 	beq	r7,zero,48088 <memset+0x118>
   48074:	19cf883a 	add	r7,r3,r7
   48078:	19400005 	stb	r5,0(r3)
   4807c:	18c00044 	addi	r3,r3,1
   48080:	38fffd1e 	bne	r7,r3,48078 <__alt_data_end+0xfffe0f78>
   48084:	f800283a 	ret
   48088:	f800283a 	ret
   4808c:	2007883a 	mov	r3,r4
   48090:	300f883a 	mov	r7,r6
   48094:	003fc706 	br	47fb4 <__alt_data_end+0xfffe0eb4>

00048098 <_open_r>:
   48098:	defffd04 	addi	sp,sp,-12
   4809c:	2805883a 	mov	r2,r5
   480a0:	dc000015 	stw	r16,0(sp)
   480a4:	040001b4 	movhi	r16,6
   480a8:	dc400115 	stw	r17,4(sp)
   480ac:	300b883a 	mov	r5,r6
   480b0:	8428b704 	addi	r16,r16,-23844
   480b4:	2023883a 	mov	r17,r4
   480b8:	380d883a 	mov	r6,r7
   480bc:	1009883a 	mov	r4,r2
   480c0:	dfc00215 	stw	ra,8(sp)
   480c4:	80000015 	stw	zero,0(r16)
   480c8:	00521380 	call	52138 <open>
   480cc:	00ffffc4 	movi	r3,-1
   480d0:	10c00526 	beq	r2,r3,480e8 <_open_r+0x50>
   480d4:	dfc00217 	ldw	ra,8(sp)
   480d8:	dc400117 	ldw	r17,4(sp)
   480dc:	dc000017 	ldw	r16,0(sp)
   480e0:	dec00304 	addi	sp,sp,12
   480e4:	f800283a 	ret
   480e8:	80c00017 	ldw	r3,0(r16)
   480ec:	183ff926 	beq	r3,zero,480d4 <__alt_data_end+0xfffe0fd4>
   480f0:	88c00015 	stw	r3,0(r17)
   480f4:	003ff706 	br	480d4 <__alt_data_end+0xfffe0fd4>

000480f8 <_printf_r>:
   480f8:	defffd04 	addi	sp,sp,-12
   480fc:	2805883a 	mov	r2,r5
   48100:	dfc00015 	stw	ra,0(sp)
   48104:	d9800115 	stw	r6,4(sp)
   48108:	d9c00215 	stw	r7,8(sp)
   4810c:	21400217 	ldw	r5,8(r4)
   48110:	d9c00104 	addi	r7,sp,4
   48114:	100d883a 	mov	r6,r2
   48118:	00486500 	call	48650 <___vfprintf_internal_r>
   4811c:	dfc00017 	ldw	ra,0(sp)
   48120:	dec00304 	addi	sp,sp,12
   48124:	f800283a 	ret

00048128 <printf>:
   48128:	defffc04 	addi	sp,sp,-16
   4812c:	dfc00015 	stw	ra,0(sp)
   48130:	d9400115 	stw	r5,4(sp)
   48134:	d9800215 	stw	r6,8(sp)
   48138:	d9c00315 	stw	r7,12(sp)
   4813c:	008001b4 	movhi	r2,6
   48140:	10a1a804 	addi	r2,r2,-31072
   48144:	10800017 	ldw	r2,0(r2)
   48148:	200b883a 	mov	r5,r4
   4814c:	d9800104 	addi	r6,sp,4
   48150:	11000217 	ldw	r4,8(r2)
   48154:	004a8480 	call	4a848 <__vfprintf_internal>
   48158:	dfc00017 	ldw	ra,0(sp)
   4815c:	dec00404 	addi	sp,sp,16
   48160:	f800283a 	ret

00048164 <_puts_r>:
   48164:	defff604 	addi	sp,sp,-40
   48168:	dc000715 	stw	r16,28(sp)
   4816c:	2021883a 	mov	r16,r4
   48170:	2809883a 	mov	r4,r5
   48174:	dc400815 	stw	r17,32(sp)
   48178:	dfc00915 	stw	ra,36(sp)
   4817c:	2823883a 	mov	r17,r5
   48180:	00485b80 	call	485b8 <strlen>
   48184:	10c00044 	addi	r3,r2,1
   48188:	d8800115 	stw	r2,4(sp)
   4818c:	00800174 	movhi	r2,5
   48190:	109a5404 	addi	r2,r2,26960
   48194:	d8800215 	stw	r2,8(sp)
   48198:	00800044 	movi	r2,1
   4819c:	d8800315 	stw	r2,12(sp)
   481a0:	00800084 	movi	r2,2
   481a4:	dc400015 	stw	r17,0(sp)
   481a8:	d8c00615 	stw	r3,24(sp)
   481ac:	dec00415 	stw	sp,16(sp)
   481b0:	d8800515 	stw	r2,20(sp)
   481b4:	80000226 	beq	r16,zero,481c0 <_puts_r+0x5c>
   481b8:	80800e17 	ldw	r2,56(r16)
   481bc:	10001426 	beq	r2,zero,48210 <_puts_r+0xac>
   481c0:	81400217 	ldw	r5,8(r16)
   481c4:	2880030b 	ldhu	r2,12(r5)
   481c8:	10c8000c 	andi	r3,r2,8192
   481cc:	1800061e 	bne	r3,zero,481e8 <_puts_r+0x84>
   481d0:	29001917 	ldw	r4,100(r5)
   481d4:	00f7ffc4 	movi	r3,-8193
   481d8:	10880014 	ori	r2,r2,8192
   481dc:	20c6703a 	and	r3,r4,r3
   481e0:	2880030d 	sth	r2,12(r5)
   481e4:	28c01915 	stw	r3,100(r5)
   481e8:	d9800404 	addi	r6,sp,16
   481ec:	8009883a 	mov	r4,r16
   481f0:	004ced80 	call	4ced8 <__sfvwrite_r>
   481f4:	1000091e 	bne	r2,zero,4821c <_puts_r+0xb8>
   481f8:	00800284 	movi	r2,10
   481fc:	dfc00917 	ldw	ra,36(sp)
   48200:	dc400817 	ldw	r17,32(sp)
   48204:	dc000717 	ldw	r16,28(sp)
   48208:	dec00a04 	addi	sp,sp,40
   4820c:	f800283a 	ret
   48210:	8009883a 	mov	r4,r16
   48214:	004c9a80 	call	4c9a8 <__sinit>
   48218:	003fe906 	br	481c0 <__alt_data_end+0xfffe10c0>
   4821c:	00bfffc4 	movi	r2,-1
   48220:	003ff606 	br	481fc <__alt_data_end+0xfffe10fc>

00048224 <puts>:
   48224:	008001b4 	movhi	r2,6
   48228:	10a1a804 	addi	r2,r2,-31072
   4822c:	200b883a 	mov	r5,r4
   48230:	11000017 	ldw	r4,0(r2)
   48234:	00481641 	jmpi	48164 <_puts_r>

00048238 <lflush>:
   48238:	2080030b 	ldhu	r2,12(r4)
   4823c:	00c00244 	movi	r3,9
   48240:	1080024c 	andi	r2,r2,9
   48244:	10c00226 	beq	r2,r3,48250 <lflush+0x18>
   48248:	0005883a 	mov	r2,zero
   4824c:	f800283a 	ret
   48250:	004c6281 	jmpi	4c628 <fflush>

00048254 <__srefill_r>:
   48254:	defffc04 	addi	sp,sp,-16
   48258:	dc400115 	stw	r17,4(sp)
   4825c:	dc000015 	stw	r16,0(sp)
   48260:	dfc00315 	stw	ra,12(sp)
   48264:	dc800215 	stw	r18,8(sp)
   48268:	2023883a 	mov	r17,r4
   4826c:	2821883a 	mov	r16,r5
   48270:	20000226 	beq	r4,zero,4827c <__srefill_r+0x28>
   48274:	20800e17 	ldw	r2,56(r4)
   48278:	10003c26 	beq	r2,zero,4836c <__srefill_r+0x118>
   4827c:	80c0030b 	ldhu	r3,12(r16)
   48280:	1908000c 	andi	r4,r3,8192
   48284:	1805883a 	mov	r2,r3
   48288:	2000071e 	bne	r4,zero,482a8 <__srefill_r+0x54>
   4828c:	81001917 	ldw	r4,100(r16)
   48290:	18880014 	ori	r2,r3,8192
   48294:	00f7ffc4 	movi	r3,-8193
   48298:	20c8703a 	and	r4,r4,r3
   4829c:	8080030d 	sth	r2,12(r16)
   482a0:	1007883a 	mov	r3,r2
   482a4:	81001915 	stw	r4,100(r16)
   482a8:	80000115 	stw	zero,4(r16)
   482ac:	1100080c 	andi	r4,r2,32
   482b0:	2000571e 	bne	r4,zero,48410 <__srefill_r+0x1bc>
   482b4:	1100010c 	andi	r4,r2,4
   482b8:	20001f26 	beq	r4,zero,48338 <__srefill_r+0xe4>
   482bc:	81400c17 	ldw	r5,48(r16)
   482c0:	28000826 	beq	r5,zero,482e4 <__srefill_r+0x90>
   482c4:	80801004 	addi	r2,r16,64
   482c8:	28800226 	beq	r5,r2,482d4 <__srefill_r+0x80>
   482cc:	8809883a 	mov	r4,r17
   482d0:	004cbc80 	call	4cbc8 <_free_r>
   482d4:	80800f17 	ldw	r2,60(r16)
   482d8:	80000c15 	stw	zero,48(r16)
   482dc:	80800115 	stw	r2,4(r16)
   482e0:	1000391e 	bne	r2,zero,483c8 <__srefill_r+0x174>
   482e4:	80800417 	ldw	r2,16(r16)
   482e8:	10004b26 	beq	r2,zero,48418 <__srefill_r+0x1c4>
   482ec:	8480030b 	ldhu	r18,12(r16)
   482f0:	908000cc 	andi	r2,r18,3
   482f4:	10001f1e 	bne	r2,zero,48374 <__srefill_r+0x120>
   482f8:	81800417 	ldw	r6,16(r16)
   482fc:	80800817 	ldw	r2,32(r16)
   48300:	81c00517 	ldw	r7,20(r16)
   48304:	81400717 	ldw	r5,28(r16)
   48308:	81800015 	stw	r6,0(r16)
   4830c:	8809883a 	mov	r4,r17
   48310:	103ee83a 	callr	r2
   48314:	80800115 	stw	r2,4(r16)
   48318:	00800e0e 	bge	zero,r2,48354 <__srefill_r+0x100>
   4831c:	0005883a 	mov	r2,zero
   48320:	dfc00317 	ldw	ra,12(sp)
   48324:	dc800217 	ldw	r18,8(sp)
   48328:	dc400117 	ldw	r17,4(sp)
   4832c:	dc000017 	ldw	r16,0(sp)
   48330:	dec00404 	addi	sp,sp,16
   48334:	f800283a 	ret
   48338:	1100040c 	andi	r4,r2,16
   4833c:	20003026 	beq	r4,zero,48400 <__srefill_r+0x1ac>
   48340:	1080020c 	andi	r2,r2,8
   48344:	1000241e 	bne	r2,zero,483d8 <__srefill_r+0x184>
   48348:	18c00114 	ori	r3,r3,4
   4834c:	80c0030d 	sth	r3,12(r16)
   48350:	003fe406 	br	482e4 <__alt_data_end+0xfffe11e4>
   48354:	80c0030b 	ldhu	r3,12(r16)
   48358:	1000161e 	bne	r2,zero,483b4 <__srefill_r+0x160>
   4835c:	18c00814 	ori	r3,r3,32
   48360:	00bfffc4 	movi	r2,-1
   48364:	80c0030d 	sth	r3,12(r16)
   48368:	003fed06 	br	48320 <__alt_data_end+0xfffe1220>
   4836c:	004c9a80 	call	4c9a8 <__sinit>
   48370:	003fc206 	br	4827c <__alt_data_end+0xfffe117c>
   48374:	008001b4 	movhi	r2,6
   48378:	10a1a704 	addi	r2,r2,-31076
   4837c:	11000017 	ldw	r4,0(r2)
   48380:	01400174 	movhi	r5,5
   48384:	00800044 	movi	r2,1
   48388:	29608e04 	addi	r5,r5,-32200
   4838c:	8080030d 	sth	r2,12(r16)
   48390:	004d3940 	call	4d394 <_fwalk>
   48394:	00800244 	movi	r2,9
   48398:	8480030d 	sth	r18,12(r16)
   4839c:	9480024c 	andi	r18,r18,9
   483a0:	90bfd51e 	bne	r18,r2,482f8 <__alt_data_end+0xfffe11f8>
   483a4:	800b883a 	mov	r5,r16
   483a8:	8809883a 	mov	r4,r17
   483ac:	004c3b00 	call	4c3b0 <__sflush_r>
   483b0:	003fd106 	br	482f8 <__alt_data_end+0xfffe11f8>
   483b4:	18c01014 	ori	r3,r3,64
   483b8:	80000115 	stw	zero,4(r16)
   483bc:	00bfffc4 	movi	r2,-1
   483c0:	80c0030d 	sth	r3,12(r16)
   483c4:	003fd606 	br	48320 <__alt_data_end+0xfffe1220>
   483c8:	80c00e17 	ldw	r3,56(r16)
   483cc:	0005883a 	mov	r2,zero
   483d0:	80c00015 	stw	r3,0(r16)
   483d4:	003fd206 	br	48320 <__alt_data_end+0xfffe1220>
   483d8:	800b883a 	mov	r5,r16
   483dc:	8809883a 	mov	r4,r17
   483e0:	004c5cc0 	call	4c5cc <_fflush_r>
   483e4:	10000a1e 	bne	r2,zero,48410 <__srefill_r+0x1bc>
   483e8:	8080030b 	ldhu	r2,12(r16)
   483ec:	00fffdc4 	movi	r3,-9
   483f0:	80000215 	stw	zero,8(r16)
   483f4:	1886703a 	and	r3,r3,r2
   483f8:	80000615 	stw	zero,24(r16)
   483fc:	003fd206 	br	48348 <__alt_data_end+0xfffe1248>
   48400:	00800244 	movi	r2,9
   48404:	88800015 	stw	r2,0(r17)
   48408:	18c01014 	ori	r3,r3,64
   4840c:	80c0030d 	sth	r3,12(r16)
   48410:	00bfffc4 	movi	r2,-1
   48414:	003fc206 	br	48320 <__alt_data_end+0xfffe1220>
   48418:	800b883a 	mov	r5,r16
   4841c:	8809883a 	mov	r4,r17
   48420:	00475a80 	call	475a8 <__smakebuf_r>
   48424:	003fb106 	br	482ec <__alt_data_end+0xfffe11ec>

00048428 <_sbrk_r>:
   48428:	defffd04 	addi	sp,sp,-12
   4842c:	dc000015 	stw	r16,0(sp)
   48430:	040001b4 	movhi	r16,6
   48434:	dc400115 	stw	r17,4(sp)
   48438:	8428b704 	addi	r16,r16,-23844
   4843c:	2023883a 	mov	r17,r4
   48440:	2809883a 	mov	r4,r5
   48444:	dfc00215 	stw	ra,8(sp)
   48448:	80000015 	stw	zero,0(r16)
   4844c:	00524280 	call	52428 <sbrk>
   48450:	00ffffc4 	movi	r3,-1
   48454:	10c00526 	beq	r2,r3,4846c <_sbrk_r+0x44>
   48458:	dfc00217 	ldw	ra,8(sp)
   4845c:	dc400117 	ldw	r17,4(sp)
   48460:	dc000017 	ldw	r16,0(sp)
   48464:	dec00304 	addi	sp,sp,12
   48468:	f800283a 	ret
   4846c:	80c00017 	ldw	r3,0(r16)
   48470:	183ff926 	beq	r3,zero,48458 <__alt_data_end+0xfffe1358>
   48474:	88c00015 	stw	r3,0(r17)
   48478:	003ff706 	br	48458 <__alt_data_end+0xfffe1358>

0004847c <__sread>:
   4847c:	defffe04 	addi	sp,sp,-8
   48480:	dc000015 	stw	r16,0(sp)
   48484:	2821883a 	mov	r16,r5
   48488:	2940038f 	ldh	r5,14(r5)
   4848c:	dfc00115 	stw	ra,4(sp)
   48490:	004ea300 	call	4ea30 <_read_r>
   48494:	10000716 	blt	r2,zero,484b4 <__sread+0x38>
   48498:	80c01417 	ldw	r3,80(r16)
   4849c:	1887883a 	add	r3,r3,r2
   484a0:	80c01415 	stw	r3,80(r16)
   484a4:	dfc00117 	ldw	ra,4(sp)
   484a8:	dc000017 	ldw	r16,0(sp)
   484ac:	dec00204 	addi	sp,sp,8
   484b0:	f800283a 	ret
   484b4:	80c0030b 	ldhu	r3,12(r16)
   484b8:	18fbffcc 	andi	r3,r3,61439
   484bc:	80c0030d 	sth	r3,12(r16)
   484c0:	dfc00117 	ldw	ra,4(sp)
   484c4:	dc000017 	ldw	r16,0(sp)
   484c8:	dec00204 	addi	sp,sp,8
   484cc:	f800283a 	ret

000484d0 <__seofread>:
   484d0:	0005883a 	mov	r2,zero
   484d4:	f800283a 	ret

000484d8 <__swrite>:
   484d8:	2880030b 	ldhu	r2,12(r5)
   484dc:	defffb04 	addi	sp,sp,-20
   484e0:	dcc00315 	stw	r19,12(sp)
   484e4:	dc800215 	stw	r18,8(sp)
   484e8:	dc400115 	stw	r17,4(sp)
   484ec:	dc000015 	stw	r16,0(sp)
   484f0:	dfc00415 	stw	ra,16(sp)
   484f4:	10c0400c 	andi	r3,r2,256
   484f8:	2821883a 	mov	r16,r5
   484fc:	2023883a 	mov	r17,r4
   48500:	3025883a 	mov	r18,r6
   48504:	3827883a 	mov	r19,r7
   48508:	18000526 	beq	r3,zero,48520 <__swrite+0x48>
   4850c:	2940038f 	ldh	r5,14(r5)
   48510:	01c00084 	movi	r7,2
   48514:	000d883a 	mov	r6,zero
   48518:	004d64c0 	call	4d64c <_lseek_r>
   4851c:	8080030b 	ldhu	r2,12(r16)
   48520:	8140038f 	ldh	r5,14(r16)
   48524:	10bbffcc 	andi	r2,r2,61439
   48528:	980f883a 	mov	r7,r19
   4852c:	900d883a 	mov	r6,r18
   48530:	8809883a 	mov	r4,r17
   48534:	8080030d 	sth	r2,12(r16)
   48538:	dfc00417 	ldw	ra,16(sp)
   4853c:	dcc00317 	ldw	r19,12(sp)
   48540:	dc800217 	ldw	r18,8(sp)
   48544:	dc400117 	ldw	r17,4(sp)
   48548:	dc000017 	ldw	r16,0(sp)
   4854c:	dec00504 	addi	sp,sp,20
   48550:	004a9201 	jmpi	4a920 <_write_r>

00048554 <__sseek>:
   48554:	defffe04 	addi	sp,sp,-8
   48558:	dc000015 	stw	r16,0(sp)
   4855c:	2821883a 	mov	r16,r5
   48560:	2940038f 	ldh	r5,14(r5)
   48564:	dfc00115 	stw	ra,4(sp)
   48568:	004d64c0 	call	4d64c <_lseek_r>
   4856c:	00ffffc4 	movi	r3,-1
   48570:	10c00826 	beq	r2,r3,48594 <__sseek+0x40>
   48574:	80c0030b 	ldhu	r3,12(r16)
   48578:	80801415 	stw	r2,80(r16)
   4857c:	18c40014 	ori	r3,r3,4096
   48580:	80c0030d 	sth	r3,12(r16)
   48584:	dfc00117 	ldw	ra,4(sp)
   48588:	dc000017 	ldw	r16,0(sp)
   4858c:	dec00204 	addi	sp,sp,8
   48590:	f800283a 	ret
   48594:	80c0030b 	ldhu	r3,12(r16)
   48598:	18fbffcc 	andi	r3,r3,61439
   4859c:	80c0030d 	sth	r3,12(r16)
   485a0:	dfc00117 	ldw	ra,4(sp)
   485a4:	dc000017 	ldw	r16,0(sp)
   485a8:	dec00204 	addi	sp,sp,8
   485ac:	f800283a 	ret

000485b0 <__sclose>:
   485b0:	2940038f 	ldh	r5,14(r5)
   485b4:	004aad41 	jmpi	4aad4 <_close_r>

000485b8 <strlen>:
   485b8:	208000cc 	andi	r2,r4,3
   485bc:	10002026 	beq	r2,zero,48640 <strlen+0x88>
   485c0:	20800007 	ldb	r2,0(r4)
   485c4:	10002026 	beq	r2,zero,48648 <strlen+0x90>
   485c8:	2005883a 	mov	r2,r4
   485cc:	00000206 	br	485d8 <strlen+0x20>
   485d0:	10c00007 	ldb	r3,0(r2)
   485d4:	18001826 	beq	r3,zero,48638 <strlen+0x80>
   485d8:	10800044 	addi	r2,r2,1
   485dc:	10c000cc 	andi	r3,r2,3
   485e0:	183ffb1e 	bne	r3,zero,485d0 <__alt_data_end+0xfffe14d0>
   485e4:	10c00017 	ldw	r3,0(r2)
   485e8:	01ffbff4 	movhi	r7,65279
   485ec:	39ffbfc4 	addi	r7,r7,-257
   485f0:	00ca303a 	nor	r5,zero,r3
   485f4:	01a02074 	movhi	r6,32897
   485f8:	19c7883a 	add	r3,r3,r7
   485fc:	31a02004 	addi	r6,r6,-32640
   48600:	1946703a 	and	r3,r3,r5
   48604:	1986703a 	and	r3,r3,r6
   48608:	1800091e 	bne	r3,zero,48630 <strlen+0x78>
   4860c:	10800104 	addi	r2,r2,4
   48610:	10c00017 	ldw	r3,0(r2)
   48614:	19cb883a 	add	r5,r3,r7
   48618:	00c6303a 	nor	r3,zero,r3
   4861c:	28c6703a 	and	r3,r5,r3
   48620:	1986703a 	and	r3,r3,r6
   48624:	183ff926 	beq	r3,zero,4860c <__alt_data_end+0xfffe150c>
   48628:	00000106 	br	48630 <strlen+0x78>
   4862c:	10800044 	addi	r2,r2,1
   48630:	10c00007 	ldb	r3,0(r2)
   48634:	183ffd1e 	bne	r3,zero,4862c <__alt_data_end+0xfffe152c>
   48638:	1105c83a 	sub	r2,r2,r4
   4863c:	f800283a 	ret
   48640:	2005883a 	mov	r2,r4
   48644:	003fe706 	br	485e4 <__alt_data_end+0xfffe14e4>
   48648:	0005883a 	mov	r2,zero
   4864c:	f800283a 	ret

00048650 <___vfprintf_internal_r>:
   48650:	deffb804 	addi	sp,sp,-288
   48654:	dfc04715 	stw	ra,284(sp)
   48658:	ddc04515 	stw	r23,276(sp)
   4865c:	dd404315 	stw	r21,268(sp)
   48660:	d9002c15 	stw	r4,176(sp)
   48664:	282f883a 	mov	r23,r5
   48668:	302b883a 	mov	r21,r6
   4866c:	d9c02d15 	stw	r7,180(sp)
   48670:	df004615 	stw	fp,280(sp)
   48674:	dd804415 	stw	r22,272(sp)
   48678:	dd004215 	stw	r20,264(sp)
   4867c:	dcc04115 	stw	r19,260(sp)
   48680:	dc804015 	stw	r18,256(sp)
   48684:	dc403f15 	stw	r17,252(sp)
   48688:	dc003e15 	stw	r16,248(sp)
   4868c:	004d61c0 	call	4d61c <_localeconv_r>
   48690:	10800017 	ldw	r2,0(r2)
   48694:	1009883a 	mov	r4,r2
   48698:	d8803415 	stw	r2,208(sp)
   4869c:	00485b80 	call	485b8 <strlen>
   486a0:	d8803715 	stw	r2,220(sp)
   486a4:	d8802c17 	ldw	r2,176(sp)
   486a8:	10000226 	beq	r2,zero,486b4 <___vfprintf_internal_r+0x64>
   486ac:	10800e17 	ldw	r2,56(r2)
   486b0:	1000f926 	beq	r2,zero,48a98 <___vfprintf_internal_r+0x448>
   486b4:	b880030b 	ldhu	r2,12(r23)
   486b8:	10c8000c 	andi	r3,r2,8192
   486bc:	1800061e 	bne	r3,zero,486d8 <___vfprintf_internal_r+0x88>
   486c0:	b9001917 	ldw	r4,100(r23)
   486c4:	00f7ffc4 	movi	r3,-8193
   486c8:	10880014 	ori	r2,r2,8192
   486cc:	20c6703a 	and	r3,r4,r3
   486d0:	b880030d 	sth	r2,12(r23)
   486d4:	b8c01915 	stw	r3,100(r23)
   486d8:	10c0020c 	andi	r3,r2,8
   486dc:	1800c126 	beq	r3,zero,489e4 <___vfprintf_internal_r+0x394>
   486e0:	b8c00417 	ldw	r3,16(r23)
   486e4:	1800bf26 	beq	r3,zero,489e4 <___vfprintf_internal_r+0x394>
   486e8:	1080068c 	andi	r2,r2,26
   486ec:	00c00284 	movi	r3,10
   486f0:	10c0c426 	beq	r2,r3,48a04 <___vfprintf_internal_r+0x3b4>
   486f4:	d8c00404 	addi	r3,sp,16
   486f8:	05000174 	movhi	r20,5
   486fc:	d9001e04 	addi	r4,sp,120
   48700:	a51a6584 	addi	r20,r20,27030
   48704:	d8c01e15 	stw	r3,120(sp)
   48708:	d8002015 	stw	zero,128(sp)
   4870c:	d8001f15 	stw	zero,124(sp)
   48710:	d8003315 	stw	zero,204(sp)
   48714:	d8003615 	stw	zero,216(sp)
   48718:	d8003815 	stw	zero,224(sp)
   4871c:	1811883a 	mov	r8,r3
   48720:	d8003915 	stw	zero,228(sp)
   48724:	d8003a15 	stw	zero,232(sp)
   48728:	d8002f15 	stw	zero,188(sp)
   4872c:	d9002815 	stw	r4,160(sp)
   48730:	a8800007 	ldb	r2,0(r21)
   48734:	10027b26 	beq	r2,zero,49124 <___vfprintf_internal_r+0xad4>
   48738:	00c00944 	movi	r3,37
   4873c:	a821883a 	mov	r16,r21
   48740:	10c0021e 	bne	r2,r3,4874c <___vfprintf_internal_r+0xfc>
   48744:	00001406 	br	48798 <___vfprintf_internal_r+0x148>
   48748:	10c00326 	beq	r2,r3,48758 <___vfprintf_internal_r+0x108>
   4874c:	84000044 	addi	r16,r16,1
   48750:	80800007 	ldb	r2,0(r16)
   48754:	103ffc1e 	bne	r2,zero,48748 <__alt_data_end+0xfffe1648>
   48758:	8563c83a 	sub	r17,r16,r21
   4875c:	88000e26 	beq	r17,zero,48798 <___vfprintf_internal_r+0x148>
   48760:	d8c02017 	ldw	r3,128(sp)
   48764:	d8801f17 	ldw	r2,124(sp)
   48768:	45400015 	stw	r21,0(r8)
   4876c:	1c47883a 	add	r3,r3,r17
   48770:	10800044 	addi	r2,r2,1
   48774:	d8c02015 	stw	r3,128(sp)
   48778:	44400115 	stw	r17,4(r8)
   4877c:	d8801f15 	stw	r2,124(sp)
   48780:	00c001c4 	movi	r3,7
   48784:	1880a716 	blt	r3,r2,48a24 <___vfprintf_internal_r+0x3d4>
   48788:	42000204 	addi	r8,r8,8
   4878c:	d9402f17 	ldw	r5,188(sp)
   48790:	2c4b883a 	add	r5,r5,r17
   48794:	d9402f15 	stw	r5,188(sp)
   48798:	80800007 	ldb	r2,0(r16)
   4879c:	1000a826 	beq	r2,zero,48a40 <___vfprintf_internal_r+0x3f0>
   487a0:	84400047 	ldb	r17,1(r16)
   487a4:	00bfffc4 	movi	r2,-1
   487a8:	85400044 	addi	r21,r16,1
   487ac:	d8002785 	stb	zero,158(sp)
   487b0:	0007883a 	mov	r3,zero
   487b4:	000f883a 	mov	r7,zero
   487b8:	d8802915 	stw	r2,164(sp)
   487bc:	d8003115 	stw	zero,196(sp)
   487c0:	0025883a 	mov	r18,zero
   487c4:	01401604 	movi	r5,88
   487c8:	01800244 	movi	r6,9
   487cc:	02800a84 	movi	r10,42
   487d0:	02401b04 	movi	r9,108
   487d4:	ad400044 	addi	r21,r21,1
   487d8:	88bff804 	addi	r2,r17,-32
   487dc:	28830436 	bltu	r5,r2,493f0 <___vfprintf_internal_r+0xda0>
   487e0:	100490ba 	slli	r2,r2,2
   487e4:	01000174 	movhi	r4,5
   487e8:	2121fe04 	addi	r4,r4,-30728
   487ec:	1105883a 	add	r2,r2,r4
   487f0:	10800017 	ldw	r2,0(r2)
   487f4:	1000683a 	jmp	r2
   487f8:	00049310 	cmplti	zero,zero,4684
   487fc:	000493f0 	cmpltui	zero,zero,4687
   48800:	000493f0 	cmpltui	zero,zero,4687
   48804:	00049330 	cmpltui	zero,zero,4684
   48808:	000493f0 	cmpltui	zero,zero,4687
   4880c:	000493f0 	cmpltui	zero,zero,4687
   48810:	000493f0 	cmpltui	zero,zero,4687
   48814:	000493f0 	cmpltui	zero,zero,4687
   48818:	000493f0 	cmpltui	zero,zero,4687
   4881c:	000493f0 	cmpltui	zero,zero,4687
   48820:	00048aa4 	muli	zero,zero,4650
   48824:	0004924c 	andi	zero,zero,4681
   48828:	000493f0 	cmpltui	zero,zero,4687
   4882c:	0004896c 	andhi	zero,zero,4645
   48830:	00048acc 	andi	zero,zero,4651
   48834:	000493f0 	cmpltui	zero,zero,4687
   48838:	00048b0c 	andi	zero,zero,4652
   4883c:	00048b18 	cmpnei	zero,zero,4652
   48840:	00048b18 	cmpnei	zero,zero,4652
   48844:	00048b18 	cmpnei	zero,zero,4652
   48848:	00048b18 	cmpnei	zero,zero,4652
   4884c:	00048b18 	cmpnei	zero,zero,4652
   48850:	00048b18 	cmpnei	zero,zero,4652
   48854:	00048b18 	cmpnei	zero,zero,4652
   48858:	00048b18 	cmpnei	zero,zero,4652
   4885c:	00048b18 	cmpnei	zero,zero,4652
   48860:	000493f0 	cmpltui	zero,zero,4687
   48864:	000493f0 	cmpltui	zero,zero,4687
   48868:	000493f0 	cmpltui	zero,zero,4687
   4886c:	000493f0 	cmpltui	zero,zero,4687
   48870:	000493f0 	cmpltui	zero,zero,4687
   48874:	000493f0 	cmpltui	zero,zero,4687
   48878:	000493f0 	cmpltui	zero,zero,4687
   4887c:	000493f0 	cmpltui	zero,zero,4687
   48880:	000493f0 	cmpltui	zero,zero,4687
   48884:	000493f0 	cmpltui	zero,zero,4687
   48888:	00048b4c 	andi	zero,zero,4653
   4888c:	00048c08 	cmpgei	zero,zero,4656
   48890:	000493f0 	cmpltui	zero,zero,4687
   48894:	00048c08 	cmpgei	zero,zero,4656
   48898:	000493f0 	cmpltui	zero,zero,4687
   4889c:	000493f0 	cmpltui	zero,zero,4687
   488a0:	000493f0 	cmpltui	zero,zero,4687
   488a4:	000493f0 	cmpltui	zero,zero,4687
   488a8:	00048ca8 	cmpgeui	zero,zero,4658
   488ac:	000493f0 	cmpltui	zero,zero,4687
   488b0:	000493f0 	cmpltui	zero,zero,4687
   488b4:	00048cb4 	movhi	zero,4658
   488b8:	000493f0 	cmpltui	zero,zero,4687
   488bc:	000493f0 	cmpltui	zero,zero,4687
   488c0:	000493f0 	cmpltui	zero,zero,4687
   488c4:	000493f0 	cmpltui	zero,zero,4687
   488c8:	000493f0 	cmpltui	zero,zero,4687
   488cc:	0004912c 	andhi	zero,zero,4676
   488d0:	000493f0 	cmpltui	zero,zero,4687
   488d4:	000493f0 	cmpltui	zero,zero,4687
   488d8:	0004918c 	andi	zero,zero,4678
   488dc:	000493f0 	cmpltui	zero,zero,4687
   488e0:	000493f0 	cmpltui	zero,zero,4687
   488e4:	000493f0 	cmpltui	zero,zero,4687
   488e8:	000493f0 	cmpltui	zero,zero,4687
   488ec:	000493f0 	cmpltui	zero,zero,4687
   488f0:	000493f0 	cmpltui	zero,zero,4687
   488f4:	000493f0 	cmpltui	zero,zero,4687
   488f8:	000493f0 	cmpltui	zero,zero,4687
   488fc:	000493f0 	cmpltui	zero,zero,4687
   48900:	000493f0 	cmpltui	zero,zero,4687
   48904:	0004939c 	xori	zero,zero,4686
   48908:	0004933c 	xorhi	zero,zero,4684
   4890c:	00048c08 	cmpgei	zero,zero,4656
   48910:	00048c08 	cmpgei	zero,zero,4656
   48914:	00048c08 	cmpgei	zero,zero,4656
   48918:	0004934c 	andi	zero,zero,4685
   4891c:	0004933c 	xorhi	zero,zero,4684
   48920:	000493f0 	cmpltui	zero,zero,4687
   48924:	000493f0 	cmpltui	zero,zero,4687
   48928:	00049358 	cmpnei	zero,zero,4685
   4892c:	000493f0 	cmpltui	zero,zero,4687
   48930:	00049368 	cmpgeui	zero,zero,4685
   48934:	0004923c 	xorhi	zero,zero,4680
   48938:	00048978 	rdprs	zero,zero,4645
   4893c:	0004925c 	xori	zero,zero,4681
   48940:	000493f0 	cmpltui	zero,zero,4687
   48944:	00049268 	cmpgeui	zero,zero,4681
   48948:	000493f0 	cmpltui	zero,zero,4687
   4894c:	000492c4 	movi	zero,4683
   48950:	000493f0 	cmpltui	zero,zero,4687
   48954:	000493f0 	cmpltui	zero,zero,4687
   48958:	000492d4 	movui	zero,4683
   4895c:	d9003117 	ldw	r4,196(sp)
   48960:	d8802d15 	stw	r2,180(sp)
   48964:	0109c83a 	sub	r4,zero,r4
   48968:	d9003115 	stw	r4,196(sp)
   4896c:	94800114 	ori	r18,r18,4
   48970:	ac400007 	ldb	r17,0(r21)
   48974:	003f9706 	br	487d4 <__alt_data_end+0xfffe16d4>
   48978:	00800c04 	movi	r2,48
   4897c:	d9002d17 	ldw	r4,180(sp)
   48980:	d9402917 	ldw	r5,164(sp)
   48984:	d8802705 	stb	r2,156(sp)
   48988:	00801e04 	movi	r2,120
   4898c:	d8802745 	stb	r2,157(sp)
   48990:	d8002785 	stb	zero,158(sp)
   48994:	20c00104 	addi	r3,r4,4
   48998:	24c00017 	ldw	r19,0(r4)
   4899c:	002d883a 	mov	r22,zero
   489a0:	90800094 	ori	r2,r18,2
   489a4:	28029a16 	blt	r5,zero,49410 <___vfprintf_internal_r+0xdc0>
   489a8:	00bfdfc4 	movi	r2,-129
   489ac:	90a4703a 	and	r18,r18,r2
   489b0:	d8c02d15 	stw	r3,180(sp)
   489b4:	94800094 	ori	r18,r18,2
   489b8:	9802871e 	bne	r19,zero,493d8 <___vfprintf_internal_r+0xd88>
   489bc:	00800174 	movhi	r2,5
   489c0:	109a5e04 	addi	r2,r2,27000
   489c4:	d8803915 	stw	r2,228(sp)
   489c8:	04401e04 	movi	r17,120
   489cc:	d8802917 	ldw	r2,164(sp)
   489d0:	0039883a 	mov	fp,zero
   489d4:	1001e926 	beq	r2,zero,4917c <___vfprintf_internal_r+0xb2c>
   489d8:	0027883a 	mov	r19,zero
   489dc:	002d883a 	mov	r22,zero
   489e0:	00020506 	br	491f8 <___vfprintf_internal_r+0xba8>
   489e4:	d9002c17 	ldw	r4,176(sp)
   489e8:	b80b883a 	mov	r5,r23
   489ec:	004a9800 	call	4a980 <__swsetup_r>
   489f0:	1005ac1e 	bne	r2,zero,4a0a4 <___vfprintf_internal_r+0x1a54>
   489f4:	b880030b 	ldhu	r2,12(r23)
   489f8:	00c00284 	movi	r3,10
   489fc:	1080068c 	andi	r2,r2,26
   48a00:	10ff3c1e 	bne	r2,r3,486f4 <__alt_data_end+0xfffe15f4>
   48a04:	b880038f 	ldh	r2,14(r23)
   48a08:	103f3a16 	blt	r2,zero,486f4 <__alt_data_end+0xfffe15f4>
   48a0c:	d9c02d17 	ldw	r7,180(sp)
   48a10:	d9002c17 	ldw	r4,176(sp)
   48a14:	a80d883a 	mov	r6,r21
   48a18:	b80b883a 	mov	r5,r23
   48a1c:	004a8640 	call	4a864 <__sbprintf>
   48a20:	00001106 	br	48a68 <___vfprintf_internal_r+0x418>
   48a24:	d9002c17 	ldw	r4,176(sp)
   48a28:	d9801e04 	addi	r6,sp,120
   48a2c:	b80b883a 	mov	r5,r23
   48a30:	004f1cc0 	call	4f1cc <__sprint_r>
   48a34:	1000081e 	bne	r2,zero,48a58 <___vfprintf_internal_r+0x408>
   48a38:	da000404 	addi	r8,sp,16
   48a3c:	003f5306 	br	4878c <__alt_data_end+0xfffe168c>
   48a40:	d8802017 	ldw	r2,128(sp)
   48a44:	10000426 	beq	r2,zero,48a58 <___vfprintf_internal_r+0x408>
   48a48:	d9002c17 	ldw	r4,176(sp)
   48a4c:	d9801e04 	addi	r6,sp,120
   48a50:	b80b883a 	mov	r5,r23
   48a54:	004f1cc0 	call	4f1cc <__sprint_r>
   48a58:	b880030b 	ldhu	r2,12(r23)
   48a5c:	1080100c 	andi	r2,r2,64
   48a60:	1005901e 	bne	r2,zero,4a0a4 <___vfprintf_internal_r+0x1a54>
   48a64:	d8802f17 	ldw	r2,188(sp)
   48a68:	dfc04717 	ldw	ra,284(sp)
   48a6c:	df004617 	ldw	fp,280(sp)
   48a70:	ddc04517 	ldw	r23,276(sp)
   48a74:	dd804417 	ldw	r22,272(sp)
   48a78:	dd404317 	ldw	r21,268(sp)
   48a7c:	dd004217 	ldw	r20,264(sp)
   48a80:	dcc04117 	ldw	r19,260(sp)
   48a84:	dc804017 	ldw	r18,256(sp)
   48a88:	dc403f17 	ldw	r17,252(sp)
   48a8c:	dc003e17 	ldw	r16,248(sp)
   48a90:	dec04804 	addi	sp,sp,288
   48a94:	f800283a 	ret
   48a98:	d9002c17 	ldw	r4,176(sp)
   48a9c:	004c9a80 	call	4c9a8 <__sinit>
   48aa0:	003f0406 	br	486b4 <__alt_data_end+0xfffe15b4>
   48aa4:	d8802d17 	ldw	r2,180(sp)
   48aa8:	d9002d17 	ldw	r4,180(sp)
   48aac:	10800017 	ldw	r2,0(r2)
   48ab0:	d8803115 	stw	r2,196(sp)
   48ab4:	20800104 	addi	r2,r4,4
   48ab8:	d9003117 	ldw	r4,196(sp)
   48abc:	203fa716 	blt	r4,zero,4895c <__alt_data_end+0xfffe185c>
   48ac0:	d8802d15 	stw	r2,180(sp)
   48ac4:	ac400007 	ldb	r17,0(r21)
   48ac8:	003f4206 	br	487d4 <__alt_data_end+0xfffe16d4>
   48acc:	ac400007 	ldb	r17,0(r21)
   48ad0:	aac00044 	addi	r11,r21,1
   48ad4:	8a872826 	beq	r17,r10,4a778 <___vfprintf_internal_r+0x2128>
   48ad8:	88bff404 	addi	r2,r17,-48
   48adc:	0009883a 	mov	r4,zero
   48ae0:	30867d36 	bltu	r6,r2,4a4d8 <___vfprintf_internal_r+0x1e88>
   48ae4:	5c400007 	ldb	r17,0(r11)
   48ae8:	210002a4 	muli	r4,r4,10
   48aec:	5d400044 	addi	r21,r11,1
   48af0:	a817883a 	mov	r11,r21
   48af4:	2089883a 	add	r4,r4,r2
   48af8:	88bff404 	addi	r2,r17,-48
   48afc:	30bff92e 	bgeu	r6,r2,48ae4 <__alt_data_end+0xfffe19e4>
   48b00:	2005c916 	blt	r4,zero,4a228 <___vfprintf_internal_r+0x1bd8>
   48b04:	d9002915 	stw	r4,164(sp)
   48b08:	003f3306 	br	487d8 <__alt_data_end+0xfffe16d8>
   48b0c:	94802014 	ori	r18,r18,128
   48b10:	ac400007 	ldb	r17,0(r21)
   48b14:	003f2f06 	br	487d4 <__alt_data_end+0xfffe16d4>
   48b18:	a809883a 	mov	r4,r21
   48b1c:	d8003115 	stw	zero,196(sp)
   48b20:	88bff404 	addi	r2,r17,-48
   48b24:	0017883a 	mov	r11,zero
   48b28:	24400007 	ldb	r17,0(r4)
   48b2c:	5ac002a4 	muli	r11,r11,10
   48b30:	ad400044 	addi	r21,r21,1
   48b34:	a809883a 	mov	r4,r21
   48b38:	12d7883a 	add	r11,r2,r11
   48b3c:	88bff404 	addi	r2,r17,-48
   48b40:	30bff92e 	bgeu	r6,r2,48b28 <__alt_data_end+0xfffe1a28>
   48b44:	dac03115 	stw	r11,196(sp)
   48b48:	003f2306 	br	487d8 <__alt_data_end+0xfffe16d8>
   48b4c:	18c03fcc 	andi	r3,r3,255
   48b50:	18072b1e 	bne	r3,zero,4a800 <___vfprintf_internal_r+0x21b0>
   48b54:	94800414 	ori	r18,r18,16
   48b58:	9080080c 	andi	r2,r18,32
   48b5c:	10037b26 	beq	r2,zero,4994c <___vfprintf_internal_r+0x12fc>
   48b60:	d9402d17 	ldw	r5,180(sp)
   48b64:	28800117 	ldw	r2,4(r5)
   48b68:	2cc00017 	ldw	r19,0(r5)
   48b6c:	29400204 	addi	r5,r5,8
   48b70:	d9402d15 	stw	r5,180(sp)
   48b74:	102d883a 	mov	r22,r2
   48b78:	10044b16 	blt	r2,zero,49ca8 <___vfprintf_internal_r+0x1658>
   48b7c:	d9402917 	ldw	r5,164(sp)
   48b80:	df002783 	ldbu	fp,158(sp)
   48b84:	2803bc16 	blt	r5,zero,49a78 <___vfprintf_internal_r+0x1428>
   48b88:	00ffdfc4 	movi	r3,-129
   48b8c:	9d84b03a 	or	r2,r19,r22
   48b90:	90e4703a 	and	r18,r18,r3
   48b94:	10017726 	beq	r2,zero,49174 <___vfprintf_internal_r+0xb24>
   48b98:	b0038326 	beq	r22,zero,499a8 <___vfprintf_internal_r+0x1358>
   48b9c:	dc402a15 	stw	r17,168(sp)
   48ba0:	dc001e04 	addi	r16,sp,120
   48ba4:	b023883a 	mov	r17,r22
   48ba8:	402d883a 	mov	r22,r8
   48bac:	9809883a 	mov	r4,r19
   48bb0:	880b883a 	mov	r5,r17
   48bb4:	01800284 	movi	r6,10
   48bb8:	000f883a 	mov	r7,zero
   48bbc:	00513a00 	call	513a0 <__umoddi3>
   48bc0:	10800c04 	addi	r2,r2,48
   48bc4:	843fffc4 	addi	r16,r16,-1
   48bc8:	9809883a 	mov	r4,r19
   48bcc:	880b883a 	mov	r5,r17
   48bd0:	80800005 	stb	r2,0(r16)
   48bd4:	01800284 	movi	r6,10
   48bd8:	000f883a 	mov	r7,zero
   48bdc:	0050e280 	call	50e28 <__udivdi3>
   48be0:	1027883a 	mov	r19,r2
   48be4:	10c4b03a 	or	r2,r2,r3
   48be8:	1823883a 	mov	r17,r3
   48bec:	103fef1e 	bne	r2,zero,48bac <__alt_data_end+0xfffe1aac>
   48bf0:	d8c02817 	ldw	r3,160(sp)
   48bf4:	dc402a17 	ldw	r17,168(sp)
   48bf8:	b011883a 	mov	r8,r22
   48bfc:	1c07c83a 	sub	r3,r3,r16
   48c00:	d8c02e15 	stw	r3,184(sp)
   48c04:	00005906 	br	48d6c <___vfprintf_internal_r+0x71c>
   48c08:	18c03fcc 	andi	r3,r3,255
   48c0c:	1806fa1e 	bne	r3,zero,4a7f8 <___vfprintf_internal_r+0x21a8>
   48c10:	9080020c 	andi	r2,r18,8
   48c14:	10048a26 	beq	r2,zero,49e40 <___vfprintf_internal_r+0x17f0>
   48c18:	d8c02d17 	ldw	r3,180(sp)
   48c1c:	d9002d17 	ldw	r4,180(sp)
   48c20:	d9402d17 	ldw	r5,180(sp)
   48c24:	18c00017 	ldw	r3,0(r3)
   48c28:	21000117 	ldw	r4,4(r4)
   48c2c:	29400204 	addi	r5,r5,8
   48c30:	d8c03615 	stw	r3,216(sp)
   48c34:	d9003815 	stw	r4,224(sp)
   48c38:	d9402d15 	stw	r5,180(sp)
   48c3c:	d9003617 	ldw	r4,216(sp)
   48c40:	d9403817 	ldw	r5,224(sp)
   48c44:	da003d15 	stw	r8,244(sp)
   48c48:	04000044 	movi	r16,1
   48c4c:	00430440 	call	43044 <__fpclassifyd>
   48c50:	da003d17 	ldw	r8,244(sp)
   48c54:	14041f1e 	bne	r2,r16,49cd4 <___vfprintf_internal_r+0x1684>
   48c58:	d9003617 	ldw	r4,216(sp)
   48c5c:	d9403817 	ldw	r5,224(sp)
   48c60:	000d883a 	mov	r6,zero
   48c64:	000f883a 	mov	r7,zero
   48c68:	00518d80 	call	518d8 <__ledf2>
   48c6c:	da003d17 	ldw	r8,244(sp)
   48c70:	1005be16 	blt	r2,zero,4a36c <___vfprintf_internal_r+0x1d1c>
   48c74:	df002783 	ldbu	fp,158(sp)
   48c78:	008011c4 	movi	r2,71
   48c7c:	1445330e 	bge	r2,r17,4a14c <___vfprintf_internal_r+0x1afc>
   48c80:	04000174 	movhi	r16,5
   48c84:	841a5604 	addi	r16,r16,26968
   48c88:	00c000c4 	movi	r3,3
   48c8c:	00bfdfc4 	movi	r2,-129
   48c90:	d8c02a15 	stw	r3,168(sp)
   48c94:	90a4703a 	and	r18,r18,r2
   48c98:	d8c02e15 	stw	r3,184(sp)
   48c9c:	d8002915 	stw	zero,164(sp)
   48ca0:	d8003215 	stw	zero,200(sp)
   48ca4:	00003706 	br	48d84 <___vfprintf_internal_r+0x734>
   48ca8:	94800214 	ori	r18,r18,8
   48cac:	ac400007 	ldb	r17,0(r21)
   48cb0:	003ec806 	br	487d4 <__alt_data_end+0xfffe16d4>
   48cb4:	18c03fcc 	andi	r3,r3,255
   48cb8:	1806db1e 	bne	r3,zero,4a828 <___vfprintf_internal_r+0x21d8>
   48cbc:	94800414 	ori	r18,r18,16
   48cc0:	9080080c 	andi	r2,r18,32
   48cc4:	1002d826 	beq	r2,zero,49828 <___vfprintf_internal_r+0x11d8>
   48cc8:	d9402d17 	ldw	r5,180(sp)
   48ccc:	d8c02917 	ldw	r3,164(sp)
   48cd0:	d8002785 	stb	zero,158(sp)
   48cd4:	28800204 	addi	r2,r5,8
   48cd8:	2cc00017 	ldw	r19,0(r5)
   48cdc:	2d800117 	ldw	r22,4(r5)
   48ce0:	18048f16 	blt	r3,zero,49f20 <___vfprintf_internal_r+0x18d0>
   48ce4:	013fdfc4 	movi	r4,-129
   48ce8:	9d86b03a 	or	r3,r19,r22
   48cec:	d8802d15 	stw	r2,180(sp)
   48cf0:	9124703a 	and	r18,r18,r4
   48cf4:	1802d91e 	bne	r3,zero,4985c <___vfprintf_internal_r+0x120c>
   48cf8:	d8c02917 	ldw	r3,164(sp)
   48cfc:	0039883a 	mov	fp,zero
   48d00:	1805c326 	beq	r3,zero,4a410 <___vfprintf_internal_r+0x1dc0>
   48d04:	0027883a 	mov	r19,zero
   48d08:	002d883a 	mov	r22,zero
   48d0c:	dc001e04 	addi	r16,sp,120
   48d10:	9806d0fa 	srli	r3,r19,3
   48d14:	b008977a 	slli	r4,r22,29
   48d18:	b02cd0fa 	srli	r22,r22,3
   48d1c:	9cc001cc 	andi	r19,r19,7
   48d20:	98800c04 	addi	r2,r19,48
   48d24:	843fffc4 	addi	r16,r16,-1
   48d28:	20e6b03a 	or	r19,r4,r3
   48d2c:	80800005 	stb	r2,0(r16)
   48d30:	9d86b03a 	or	r3,r19,r22
   48d34:	183ff61e 	bne	r3,zero,48d10 <__alt_data_end+0xfffe1c10>
   48d38:	90c0004c 	andi	r3,r18,1
   48d3c:	18013b26 	beq	r3,zero,4922c <___vfprintf_internal_r+0xbdc>
   48d40:	10803fcc 	andi	r2,r2,255
   48d44:	1080201c 	xori	r2,r2,128
   48d48:	10bfe004 	addi	r2,r2,-128
   48d4c:	00c00c04 	movi	r3,48
   48d50:	10c13626 	beq	r2,r3,4922c <___vfprintf_internal_r+0xbdc>
   48d54:	80ffffc5 	stb	r3,-1(r16)
   48d58:	d8c02817 	ldw	r3,160(sp)
   48d5c:	80bfffc4 	addi	r2,r16,-1
   48d60:	1021883a 	mov	r16,r2
   48d64:	1887c83a 	sub	r3,r3,r2
   48d68:	d8c02e15 	stw	r3,184(sp)
   48d6c:	d8802e17 	ldw	r2,184(sp)
   48d70:	d9002917 	ldw	r4,164(sp)
   48d74:	1100010e 	bge	r2,r4,48d7c <___vfprintf_internal_r+0x72c>
   48d78:	2005883a 	mov	r2,r4
   48d7c:	d8802a15 	stw	r2,168(sp)
   48d80:	d8003215 	stw	zero,200(sp)
   48d84:	e7003fcc 	andi	fp,fp,255
   48d88:	e700201c 	xori	fp,fp,128
   48d8c:	e73fe004 	addi	fp,fp,-128
   48d90:	e0000326 	beq	fp,zero,48da0 <___vfprintf_internal_r+0x750>
   48d94:	d8c02a17 	ldw	r3,168(sp)
   48d98:	18c00044 	addi	r3,r3,1
   48d9c:	d8c02a15 	stw	r3,168(sp)
   48da0:	90c0008c 	andi	r3,r18,2
   48da4:	d8c02b15 	stw	r3,172(sp)
   48da8:	18000326 	beq	r3,zero,48db8 <___vfprintf_internal_r+0x768>
   48dac:	d8c02a17 	ldw	r3,168(sp)
   48db0:	18c00084 	addi	r3,r3,2
   48db4:	d8c02a15 	stw	r3,168(sp)
   48db8:	90c0210c 	andi	r3,r18,132
   48dbc:	d8c03015 	stw	r3,192(sp)
   48dc0:	1801a31e 	bne	r3,zero,49450 <___vfprintf_internal_r+0xe00>
   48dc4:	d9003117 	ldw	r4,196(sp)
   48dc8:	d8c02a17 	ldw	r3,168(sp)
   48dcc:	20e7c83a 	sub	r19,r4,r3
   48dd0:	04c19f0e 	bge	zero,r19,49450 <___vfprintf_internal_r+0xe00>
   48dd4:	02400404 	movi	r9,16
   48dd8:	d8c02017 	ldw	r3,128(sp)
   48ddc:	d8801f17 	ldw	r2,124(sp)
   48de0:	4cc50d0e 	bge	r9,r19,4a218 <___vfprintf_internal_r+0x1bc8>
   48de4:	01400174 	movhi	r5,5
   48de8:	295a6984 	addi	r5,r5,27046
   48dec:	dc403b15 	stw	r17,236(sp)
   48df0:	d9403515 	stw	r5,212(sp)
   48df4:	9823883a 	mov	r17,r19
   48df8:	482d883a 	mov	r22,r9
   48dfc:	9027883a 	mov	r19,r18
   48e00:	070001c4 	movi	fp,7
   48e04:	8025883a 	mov	r18,r16
   48e08:	dc002c17 	ldw	r16,176(sp)
   48e0c:	00000306 	br	48e1c <___vfprintf_internal_r+0x7cc>
   48e10:	8c7ffc04 	addi	r17,r17,-16
   48e14:	42000204 	addi	r8,r8,8
   48e18:	b440130e 	bge	r22,r17,48e68 <___vfprintf_internal_r+0x818>
   48e1c:	01000174 	movhi	r4,5
   48e20:	18c00404 	addi	r3,r3,16
   48e24:	10800044 	addi	r2,r2,1
   48e28:	211a6984 	addi	r4,r4,27046
   48e2c:	41000015 	stw	r4,0(r8)
   48e30:	45800115 	stw	r22,4(r8)
   48e34:	d8c02015 	stw	r3,128(sp)
   48e38:	d8801f15 	stw	r2,124(sp)
   48e3c:	e0bff40e 	bge	fp,r2,48e10 <__alt_data_end+0xfffe1d10>
   48e40:	d9801e04 	addi	r6,sp,120
   48e44:	b80b883a 	mov	r5,r23
   48e48:	8009883a 	mov	r4,r16
   48e4c:	004f1cc0 	call	4f1cc <__sprint_r>
   48e50:	103f011e 	bne	r2,zero,48a58 <__alt_data_end+0xfffe1958>
   48e54:	8c7ffc04 	addi	r17,r17,-16
   48e58:	d8c02017 	ldw	r3,128(sp)
   48e5c:	d8801f17 	ldw	r2,124(sp)
   48e60:	da000404 	addi	r8,sp,16
   48e64:	b47fed16 	blt	r22,r17,48e1c <__alt_data_end+0xfffe1d1c>
   48e68:	9021883a 	mov	r16,r18
   48e6c:	9825883a 	mov	r18,r19
   48e70:	8827883a 	mov	r19,r17
   48e74:	dc403b17 	ldw	r17,236(sp)
   48e78:	d9403517 	ldw	r5,212(sp)
   48e7c:	98c7883a 	add	r3,r19,r3
   48e80:	10800044 	addi	r2,r2,1
   48e84:	41400015 	stw	r5,0(r8)
   48e88:	44c00115 	stw	r19,4(r8)
   48e8c:	d8c02015 	stw	r3,128(sp)
   48e90:	d8801f15 	stw	r2,124(sp)
   48e94:	010001c4 	movi	r4,7
   48e98:	2082a316 	blt	r4,r2,49928 <___vfprintf_internal_r+0x12d8>
   48e9c:	df002787 	ldb	fp,158(sp)
   48ea0:	42000204 	addi	r8,r8,8
   48ea4:	e0000c26 	beq	fp,zero,48ed8 <___vfprintf_internal_r+0x888>
   48ea8:	d8801f17 	ldw	r2,124(sp)
   48eac:	d9002784 	addi	r4,sp,158
   48eb0:	18c00044 	addi	r3,r3,1
   48eb4:	10800044 	addi	r2,r2,1
   48eb8:	41000015 	stw	r4,0(r8)
   48ebc:	01000044 	movi	r4,1
   48ec0:	41000115 	stw	r4,4(r8)
   48ec4:	d8c02015 	stw	r3,128(sp)
   48ec8:	d8801f15 	stw	r2,124(sp)
   48ecc:	010001c4 	movi	r4,7
   48ed0:	20823c16 	blt	r4,r2,497c4 <___vfprintf_internal_r+0x1174>
   48ed4:	42000204 	addi	r8,r8,8
   48ed8:	d8802b17 	ldw	r2,172(sp)
   48edc:	10000c26 	beq	r2,zero,48f10 <___vfprintf_internal_r+0x8c0>
   48ee0:	d8801f17 	ldw	r2,124(sp)
   48ee4:	d9002704 	addi	r4,sp,156
   48ee8:	18c00084 	addi	r3,r3,2
   48eec:	10800044 	addi	r2,r2,1
   48ef0:	41000015 	stw	r4,0(r8)
   48ef4:	01000084 	movi	r4,2
   48ef8:	41000115 	stw	r4,4(r8)
   48efc:	d8c02015 	stw	r3,128(sp)
   48f00:	d8801f15 	stw	r2,124(sp)
   48f04:	010001c4 	movi	r4,7
   48f08:	20823616 	blt	r4,r2,497e4 <___vfprintf_internal_r+0x1194>
   48f0c:	42000204 	addi	r8,r8,8
   48f10:	d9003017 	ldw	r4,192(sp)
   48f14:	00802004 	movi	r2,128
   48f18:	20819926 	beq	r4,r2,49580 <___vfprintf_internal_r+0xf30>
   48f1c:	d9402917 	ldw	r5,164(sp)
   48f20:	d8802e17 	ldw	r2,184(sp)
   48f24:	28adc83a 	sub	r22,r5,r2
   48f28:	0580310e 	bge	zero,r22,48ff0 <___vfprintf_internal_r+0x9a0>
   48f2c:	07000404 	movi	fp,16
   48f30:	d8801f17 	ldw	r2,124(sp)
   48f34:	e584140e 	bge	fp,r22,49f88 <___vfprintf_internal_r+0x1938>
   48f38:	01400174 	movhi	r5,5
   48f3c:	295a6584 	addi	r5,r5,27030
   48f40:	dc402915 	stw	r17,164(sp)
   48f44:	d9402b15 	stw	r5,172(sp)
   48f48:	b023883a 	mov	r17,r22
   48f4c:	04c001c4 	movi	r19,7
   48f50:	a82d883a 	mov	r22,r21
   48f54:	902b883a 	mov	r21,r18
   48f58:	8025883a 	mov	r18,r16
   48f5c:	dc002c17 	ldw	r16,176(sp)
   48f60:	00000306 	br	48f70 <___vfprintf_internal_r+0x920>
   48f64:	8c7ffc04 	addi	r17,r17,-16
   48f68:	42000204 	addi	r8,r8,8
   48f6c:	e440110e 	bge	fp,r17,48fb4 <___vfprintf_internal_r+0x964>
   48f70:	18c00404 	addi	r3,r3,16
   48f74:	10800044 	addi	r2,r2,1
   48f78:	45000015 	stw	r20,0(r8)
   48f7c:	47000115 	stw	fp,4(r8)
   48f80:	d8c02015 	stw	r3,128(sp)
   48f84:	d8801f15 	stw	r2,124(sp)
   48f88:	98bff60e 	bge	r19,r2,48f64 <__alt_data_end+0xfffe1e64>
   48f8c:	d9801e04 	addi	r6,sp,120
   48f90:	b80b883a 	mov	r5,r23
   48f94:	8009883a 	mov	r4,r16
   48f98:	004f1cc0 	call	4f1cc <__sprint_r>
   48f9c:	103eae1e 	bne	r2,zero,48a58 <__alt_data_end+0xfffe1958>
   48fa0:	8c7ffc04 	addi	r17,r17,-16
   48fa4:	d8c02017 	ldw	r3,128(sp)
   48fa8:	d8801f17 	ldw	r2,124(sp)
   48fac:	da000404 	addi	r8,sp,16
   48fb0:	e47fef16 	blt	fp,r17,48f70 <__alt_data_end+0xfffe1e70>
   48fb4:	9021883a 	mov	r16,r18
   48fb8:	a825883a 	mov	r18,r21
   48fbc:	b02b883a 	mov	r21,r22
   48fc0:	882d883a 	mov	r22,r17
   48fc4:	dc402917 	ldw	r17,164(sp)
   48fc8:	d9002b17 	ldw	r4,172(sp)
   48fcc:	1d87883a 	add	r3,r3,r22
   48fd0:	10800044 	addi	r2,r2,1
   48fd4:	41000015 	stw	r4,0(r8)
   48fd8:	45800115 	stw	r22,4(r8)
   48fdc:	d8c02015 	stw	r3,128(sp)
   48fe0:	d8801f15 	stw	r2,124(sp)
   48fe4:	010001c4 	movi	r4,7
   48fe8:	2081ee16 	blt	r4,r2,497a4 <___vfprintf_internal_r+0x1154>
   48fec:	42000204 	addi	r8,r8,8
   48ff0:	9080400c 	andi	r2,r18,256
   48ff4:	1001181e 	bne	r2,zero,49458 <___vfprintf_internal_r+0xe08>
   48ff8:	d9402e17 	ldw	r5,184(sp)
   48ffc:	d8801f17 	ldw	r2,124(sp)
   49000:	44000015 	stw	r16,0(r8)
   49004:	1947883a 	add	r3,r3,r5
   49008:	10800044 	addi	r2,r2,1
   4900c:	41400115 	stw	r5,4(r8)
   49010:	d8c02015 	stw	r3,128(sp)
   49014:	d8801f15 	stw	r2,124(sp)
   49018:	010001c4 	movi	r4,7
   4901c:	2081d316 	blt	r4,r2,4976c <___vfprintf_internal_r+0x111c>
   49020:	42000204 	addi	r8,r8,8
   49024:	9480010c 	andi	r18,r18,4
   49028:	90003226 	beq	r18,zero,490f4 <___vfprintf_internal_r+0xaa4>
   4902c:	d9403117 	ldw	r5,196(sp)
   49030:	d8802a17 	ldw	r2,168(sp)
   49034:	28a1c83a 	sub	r16,r5,r2
   49038:	04002e0e 	bge	zero,r16,490f4 <___vfprintf_internal_r+0xaa4>
   4903c:	04400404 	movi	r17,16
   49040:	d8801f17 	ldw	r2,124(sp)
   49044:	8c04a20e 	bge	r17,r16,4a2d0 <___vfprintf_internal_r+0x1c80>
   49048:	01400174 	movhi	r5,5
   4904c:	295a6984 	addi	r5,r5,27046
   49050:	d9403515 	stw	r5,212(sp)
   49054:	048001c4 	movi	r18,7
   49058:	dcc02c17 	ldw	r19,176(sp)
   4905c:	00000306 	br	4906c <___vfprintf_internal_r+0xa1c>
   49060:	843ffc04 	addi	r16,r16,-16
   49064:	42000204 	addi	r8,r8,8
   49068:	8c00130e 	bge	r17,r16,490b8 <___vfprintf_internal_r+0xa68>
   4906c:	01000174 	movhi	r4,5
   49070:	18c00404 	addi	r3,r3,16
   49074:	10800044 	addi	r2,r2,1
   49078:	211a6984 	addi	r4,r4,27046
   4907c:	41000015 	stw	r4,0(r8)
   49080:	44400115 	stw	r17,4(r8)
   49084:	d8c02015 	stw	r3,128(sp)
   49088:	d8801f15 	stw	r2,124(sp)
   4908c:	90bff40e 	bge	r18,r2,49060 <__alt_data_end+0xfffe1f60>
   49090:	d9801e04 	addi	r6,sp,120
   49094:	b80b883a 	mov	r5,r23
   49098:	9809883a 	mov	r4,r19
   4909c:	004f1cc0 	call	4f1cc <__sprint_r>
   490a0:	103e6d1e 	bne	r2,zero,48a58 <__alt_data_end+0xfffe1958>
   490a4:	843ffc04 	addi	r16,r16,-16
   490a8:	d8c02017 	ldw	r3,128(sp)
   490ac:	d8801f17 	ldw	r2,124(sp)
   490b0:	da000404 	addi	r8,sp,16
   490b4:	8c3fed16 	blt	r17,r16,4906c <__alt_data_end+0xfffe1f6c>
   490b8:	d9403517 	ldw	r5,212(sp)
   490bc:	1c07883a 	add	r3,r3,r16
   490c0:	10800044 	addi	r2,r2,1
   490c4:	41400015 	stw	r5,0(r8)
   490c8:	44000115 	stw	r16,4(r8)
   490cc:	d8c02015 	stw	r3,128(sp)
   490d0:	d8801f15 	stw	r2,124(sp)
   490d4:	010001c4 	movi	r4,7
   490d8:	2080060e 	bge	r4,r2,490f4 <___vfprintf_internal_r+0xaa4>
   490dc:	d9002c17 	ldw	r4,176(sp)
   490e0:	d9801e04 	addi	r6,sp,120
   490e4:	b80b883a 	mov	r5,r23
   490e8:	004f1cc0 	call	4f1cc <__sprint_r>
   490ec:	103e5a1e 	bne	r2,zero,48a58 <__alt_data_end+0xfffe1958>
   490f0:	d8c02017 	ldw	r3,128(sp)
   490f4:	d8803117 	ldw	r2,196(sp)
   490f8:	d9002a17 	ldw	r4,168(sp)
   490fc:	1100010e 	bge	r2,r4,49104 <___vfprintf_internal_r+0xab4>
   49100:	2005883a 	mov	r2,r4
   49104:	d9402f17 	ldw	r5,188(sp)
   49108:	288b883a 	add	r5,r5,r2
   4910c:	d9402f15 	stw	r5,188(sp)
   49110:	18019e1e 	bne	r3,zero,4978c <___vfprintf_internal_r+0x113c>
   49114:	a8800007 	ldb	r2,0(r21)
   49118:	d8001f15 	stw	zero,124(sp)
   4911c:	da000404 	addi	r8,sp,16
   49120:	103d851e 	bne	r2,zero,48738 <__alt_data_end+0xfffe1638>
   49124:	a821883a 	mov	r16,r21
   49128:	003d9b06 	br	48798 <__alt_data_end+0xfffe1698>
   4912c:	18c03fcc 	andi	r3,r3,255
   49130:	1805c11e 	bne	r3,zero,4a838 <___vfprintf_internal_r+0x21e8>
   49134:	94800414 	ori	r18,r18,16
   49138:	9080080c 	andi	r2,r18,32
   4913c:	10020c26 	beq	r2,zero,49970 <___vfprintf_internal_r+0x1320>
   49140:	d8802d17 	ldw	r2,180(sp)
   49144:	d9002917 	ldw	r4,164(sp)
   49148:	d8002785 	stb	zero,158(sp)
   4914c:	10c00204 	addi	r3,r2,8
   49150:	14c00017 	ldw	r19,0(r2)
   49154:	15800117 	ldw	r22,4(r2)
   49158:	20040f16 	blt	r4,zero,4a198 <___vfprintf_internal_r+0x1b48>
   4915c:	013fdfc4 	movi	r4,-129
   49160:	9d84b03a 	or	r2,r19,r22
   49164:	d8c02d15 	stw	r3,180(sp)
   49168:	9124703a 	and	r18,r18,r4
   4916c:	0039883a 	mov	fp,zero
   49170:	103e891e 	bne	r2,zero,48b98 <__alt_data_end+0xfffe1a98>
   49174:	d9002917 	ldw	r4,164(sp)
   49178:	2002c11e 	bne	r4,zero,49c80 <___vfprintf_internal_r+0x1630>
   4917c:	d8002915 	stw	zero,164(sp)
   49180:	d8002e15 	stw	zero,184(sp)
   49184:	dc001e04 	addi	r16,sp,120
   49188:	003ef806 	br	48d6c <__alt_data_end+0xfffe1c6c>
   4918c:	18c03fcc 	andi	r3,r3,255
   49190:	18059d1e 	bne	r3,zero,4a808 <___vfprintf_internal_r+0x21b8>
   49194:	01400174 	movhi	r5,5
   49198:	295a5904 	addi	r5,r5,26980
   4919c:	d9403915 	stw	r5,228(sp)
   491a0:	9080080c 	andi	r2,r18,32
   491a4:	10005226 	beq	r2,zero,492f0 <___vfprintf_internal_r+0xca0>
   491a8:	d8802d17 	ldw	r2,180(sp)
   491ac:	14c00017 	ldw	r19,0(r2)
   491b0:	15800117 	ldw	r22,4(r2)
   491b4:	10800204 	addi	r2,r2,8
   491b8:	d8802d15 	stw	r2,180(sp)
   491bc:	9080004c 	andi	r2,r18,1
   491c0:	10019026 	beq	r2,zero,49804 <___vfprintf_internal_r+0x11b4>
   491c4:	9d84b03a 	or	r2,r19,r22
   491c8:	10036926 	beq	r2,zero,49f70 <___vfprintf_internal_r+0x1920>
   491cc:	d8c02917 	ldw	r3,164(sp)
   491d0:	00800c04 	movi	r2,48
   491d4:	d8802705 	stb	r2,156(sp)
   491d8:	dc402745 	stb	r17,157(sp)
   491dc:	d8002785 	stb	zero,158(sp)
   491e0:	90800094 	ori	r2,r18,2
   491e4:	18045d16 	blt	r3,zero,4a35c <___vfprintf_internal_r+0x1d0c>
   491e8:	00bfdfc4 	movi	r2,-129
   491ec:	90a4703a 	and	r18,r18,r2
   491f0:	94800094 	ori	r18,r18,2
   491f4:	0039883a 	mov	fp,zero
   491f8:	d9003917 	ldw	r4,228(sp)
   491fc:	dc001e04 	addi	r16,sp,120
   49200:	988003cc 	andi	r2,r19,15
   49204:	b006973a 	slli	r3,r22,28
   49208:	2085883a 	add	r2,r4,r2
   4920c:	9826d13a 	srli	r19,r19,4
   49210:	10800003 	ldbu	r2,0(r2)
   49214:	b02cd13a 	srli	r22,r22,4
   49218:	843fffc4 	addi	r16,r16,-1
   4921c:	1ce6b03a 	or	r19,r3,r19
   49220:	80800005 	stb	r2,0(r16)
   49224:	9d84b03a 	or	r2,r19,r22
   49228:	103ff51e 	bne	r2,zero,49200 <__alt_data_end+0xfffe2100>
   4922c:	d8c02817 	ldw	r3,160(sp)
   49230:	1c07c83a 	sub	r3,r3,r16
   49234:	d8c02e15 	stw	r3,184(sp)
   49238:	003ecc06 	br	48d6c <__alt_data_end+0xfffe1c6c>
   4923c:	18c03fcc 	andi	r3,r3,255
   49240:	183e9f26 	beq	r3,zero,48cc0 <__alt_data_end+0xfffe1bc0>
   49244:	d9c02785 	stb	r7,158(sp)
   49248:	003e9d06 	br	48cc0 <__alt_data_end+0xfffe1bc0>
   4924c:	00c00044 	movi	r3,1
   49250:	01c00ac4 	movi	r7,43
   49254:	ac400007 	ldb	r17,0(r21)
   49258:	003d5e06 	br	487d4 <__alt_data_end+0xfffe16d4>
   4925c:	94800814 	ori	r18,r18,32
   49260:	ac400007 	ldb	r17,0(r21)
   49264:	003d5b06 	br	487d4 <__alt_data_end+0xfffe16d4>
   49268:	d8c02d17 	ldw	r3,180(sp)
   4926c:	d8002785 	stb	zero,158(sp)
   49270:	1c000017 	ldw	r16,0(r3)
   49274:	1cc00104 	addi	r19,r3,4
   49278:	80041926 	beq	r16,zero,4a2e0 <___vfprintf_internal_r+0x1c90>
   4927c:	d9002917 	ldw	r4,164(sp)
   49280:	2003d016 	blt	r4,zero,4a1c4 <___vfprintf_internal_r+0x1b74>
   49284:	200d883a 	mov	r6,r4
   49288:	000b883a 	mov	r5,zero
   4928c:	8009883a 	mov	r4,r16
   49290:	da003d15 	stw	r8,244(sp)
   49294:	004d6ac0 	call	4d6ac <memchr>
   49298:	da003d17 	ldw	r8,244(sp)
   4929c:	10045426 	beq	r2,zero,4a3f0 <___vfprintf_internal_r+0x1da0>
   492a0:	1405c83a 	sub	r2,r2,r16
   492a4:	d8802e15 	stw	r2,184(sp)
   492a8:	1003cc16 	blt	r2,zero,4a1dc <___vfprintf_internal_r+0x1b8c>
   492ac:	df002783 	ldbu	fp,158(sp)
   492b0:	d8802a15 	stw	r2,168(sp)
   492b4:	dcc02d15 	stw	r19,180(sp)
   492b8:	d8002915 	stw	zero,164(sp)
   492bc:	d8003215 	stw	zero,200(sp)
   492c0:	003eb006 	br	48d84 <__alt_data_end+0xfffe1c84>
   492c4:	18c03fcc 	andi	r3,r3,255
   492c8:	183f9b26 	beq	r3,zero,49138 <__alt_data_end+0xfffe2038>
   492cc:	d9c02785 	stb	r7,158(sp)
   492d0:	003f9906 	br	49138 <__alt_data_end+0xfffe2038>
   492d4:	18c03fcc 	andi	r3,r3,255
   492d8:	1805551e 	bne	r3,zero,4a830 <___vfprintf_internal_r+0x21e0>
   492dc:	01400174 	movhi	r5,5
   492e0:	295a5e04 	addi	r5,r5,27000
   492e4:	d9403915 	stw	r5,228(sp)
   492e8:	9080080c 	andi	r2,r18,32
   492ec:	103fae1e 	bne	r2,zero,491a8 <__alt_data_end+0xfffe20a8>
   492f0:	9080040c 	andi	r2,r18,16
   492f4:	1002de26 	beq	r2,zero,49e70 <___vfprintf_internal_r+0x1820>
   492f8:	d8c02d17 	ldw	r3,180(sp)
   492fc:	002d883a 	mov	r22,zero
   49300:	1cc00017 	ldw	r19,0(r3)
   49304:	18c00104 	addi	r3,r3,4
   49308:	d8c02d15 	stw	r3,180(sp)
   4930c:	003fab06 	br	491bc <__alt_data_end+0xfffe20bc>
   49310:	38803fcc 	andi	r2,r7,255
   49314:	1080201c 	xori	r2,r2,128
   49318:	10bfe004 	addi	r2,r2,-128
   4931c:	1002d21e 	bne	r2,zero,49e68 <___vfprintf_internal_r+0x1818>
   49320:	00c00044 	movi	r3,1
   49324:	01c00804 	movi	r7,32
   49328:	ac400007 	ldb	r17,0(r21)
   4932c:	003d2906 	br	487d4 <__alt_data_end+0xfffe16d4>
   49330:	94800054 	ori	r18,r18,1
   49334:	ac400007 	ldb	r17,0(r21)
   49338:	003d2606 	br	487d4 <__alt_data_end+0xfffe16d4>
   4933c:	18c03fcc 	andi	r3,r3,255
   49340:	183e0526 	beq	r3,zero,48b58 <__alt_data_end+0xfffe1a58>
   49344:	d9c02785 	stb	r7,158(sp)
   49348:	003e0306 	br	48b58 <__alt_data_end+0xfffe1a58>
   4934c:	94801014 	ori	r18,r18,64
   49350:	ac400007 	ldb	r17,0(r21)
   49354:	003d1f06 	br	487d4 <__alt_data_end+0xfffe16d4>
   49358:	ac400007 	ldb	r17,0(r21)
   4935c:	8a438726 	beq	r17,r9,4a17c <___vfprintf_internal_r+0x1b2c>
   49360:	94800414 	ori	r18,r18,16
   49364:	003d1b06 	br	487d4 <__alt_data_end+0xfffe16d4>
   49368:	18c03fcc 	andi	r3,r3,255
   4936c:	1805341e 	bne	r3,zero,4a840 <___vfprintf_internal_r+0x21f0>
   49370:	9080080c 	andi	r2,r18,32
   49374:	1002cd26 	beq	r2,zero,49eac <___vfprintf_internal_r+0x185c>
   49378:	d9402d17 	ldw	r5,180(sp)
   4937c:	d9002f17 	ldw	r4,188(sp)
   49380:	28800017 	ldw	r2,0(r5)
   49384:	2007d7fa 	srai	r3,r4,31
   49388:	29400104 	addi	r5,r5,4
   4938c:	d9402d15 	stw	r5,180(sp)
   49390:	11000015 	stw	r4,0(r2)
   49394:	10c00115 	stw	r3,4(r2)
   49398:	003ce506 	br	48730 <__alt_data_end+0xfffe1630>
   4939c:	d8c02d17 	ldw	r3,180(sp)
   493a0:	d9002d17 	ldw	r4,180(sp)
   493a4:	d8002785 	stb	zero,158(sp)
   493a8:	18800017 	ldw	r2,0(r3)
   493ac:	21000104 	addi	r4,r4,4
   493b0:	00c00044 	movi	r3,1
   493b4:	d8c02a15 	stw	r3,168(sp)
   493b8:	d8801405 	stb	r2,80(sp)
   493bc:	d9002d15 	stw	r4,180(sp)
   493c0:	d8c02e15 	stw	r3,184(sp)
   493c4:	d8002915 	stw	zero,164(sp)
   493c8:	d8003215 	stw	zero,200(sp)
   493cc:	dc001404 	addi	r16,sp,80
   493d0:	0039883a 	mov	fp,zero
   493d4:	003e7206 	br	48da0 <__alt_data_end+0xfffe1ca0>
   493d8:	01000174 	movhi	r4,5
   493dc:	211a5e04 	addi	r4,r4,27000
   493e0:	0039883a 	mov	fp,zero
   493e4:	d9003915 	stw	r4,228(sp)
   493e8:	04401e04 	movi	r17,120
   493ec:	003f8206 	br	491f8 <__alt_data_end+0xfffe20f8>
   493f0:	18c03fcc 	andi	r3,r3,255
   493f4:	1805061e 	bne	r3,zero,4a810 <___vfprintf_internal_r+0x21c0>
   493f8:	883d9126 	beq	r17,zero,48a40 <__alt_data_end+0xfffe1940>
   493fc:	00c00044 	movi	r3,1
   49400:	d8c02a15 	stw	r3,168(sp)
   49404:	dc401405 	stb	r17,80(sp)
   49408:	d8002785 	stb	zero,158(sp)
   4940c:	003fec06 	br	493c0 <__alt_data_end+0xfffe22c0>
   49410:	01400174 	movhi	r5,5
   49414:	295a5e04 	addi	r5,r5,27000
   49418:	d9403915 	stw	r5,228(sp)
   4941c:	d8c02d15 	stw	r3,180(sp)
   49420:	1025883a 	mov	r18,r2
   49424:	04401e04 	movi	r17,120
   49428:	9d84b03a 	or	r2,r19,r22
   4942c:	1000fc1e 	bne	r2,zero,49820 <___vfprintf_internal_r+0x11d0>
   49430:	0039883a 	mov	fp,zero
   49434:	00800084 	movi	r2,2
   49438:	10803fcc 	andi	r2,r2,255
   4943c:	00c00044 	movi	r3,1
   49440:	10c20f26 	beq	r2,r3,49c80 <___vfprintf_internal_r+0x1630>
   49444:	00c00084 	movi	r3,2
   49448:	10fd6326 	beq	r2,r3,489d8 <__alt_data_end+0xfffe18d8>
   4944c:	003e2d06 	br	48d04 <__alt_data_end+0xfffe1c04>
   49450:	d8c02017 	ldw	r3,128(sp)
   49454:	003e9306 	br	48ea4 <__alt_data_end+0xfffe1da4>
   49458:	00801944 	movi	r2,101
   4945c:	14407e0e 	bge	r2,r17,49658 <___vfprintf_internal_r+0x1008>
   49460:	d9003617 	ldw	r4,216(sp)
   49464:	d9403817 	ldw	r5,224(sp)
   49468:	000d883a 	mov	r6,zero
   4946c:	000f883a 	mov	r7,zero
   49470:	d8c03c15 	stw	r3,240(sp)
   49474:	da003d15 	stw	r8,244(sp)
   49478:	00459740 	call	45974 <__eqdf2>
   4947c:	d8c03c17 	ldw	r3,240(sp)
   49480:	da003d17 	ldw	r8,244(sp)
   49484:	1000f71e 	bne	r2,zero,49864 <___vfprintf_internal_r+0x1214>
   49488:	d8801f17 	ldw	r2,124(sp)
   4948c:	01000174 	movhi	r4,5
   49490:	211a6504 	addi	r4,r4,27028
   49494:	18c00044 	addi	r3,r3,1
   49498:	10800044 	addi	r2,r2,1
   4949c:	41000015 	stw	r4,0(r8)
   494a0:	01000044 	movi	r4,1
   494a4:	41000115 	stw	r4,4(r8)
   494a8:	d8c02015 	stw	r3,128(sp)
   494ac:	d8801f15 	stw	r2,124(sp)
   494b0:	010001c4 	movi	r4,7
   494b4:	2082b816 	blt	r4,r2,49f98 <___vfprintf_internal_r+0x1948>
   494b8:	42000204 	addi	r8,r8,8
   494bc:	d8802617 	ldw	r2,152(sp)
   494c0:	d9403317 	ldw	r5,204(sp)
   494c4:	11400216 	blt	r2,r5,494d0 <___vfprintf_internal_r+0xe80>
   494c8:	9080004c 	andi	r2,r18,1
   494cc:	103ed526 	beq	r2,zero,49024 <__alt_data_end+0xfffe1f24>
   494d0:	d8803717 	ldw	r2,220(sp)
   494d4:	d9003417 	ldw	r4,208(sp)
   494d8:	d9403717 	ldw	r5,220(sp)
   494dc:	1887883a 	add	r3,r3,r2
   494e0:	d8801f17 	ldw	r2,124(sp)
   494e4:	41000015 	stw	r4,0(r8)
   494e8:	41400115 	stw	r5,4(r8)
   494ec:	10800044 	addi	r2,r2,1
   494f0:	d8c02015 	stw	r3,128(sp)
   494f4:	d8801f15 	stw	r2,124(sp)
   494f8:	010001c4 	movi	r4,7
   494fc:	20832916 	blt	r4,r2,4a1a4 <___vfprintf_internal_r+0x1b54>
   49500:	42000204 	addi	r8,r8,8
   49504:	d8803317 	ldw	r2,204(sp)
   49508:	143fffc4 	addi	r16,r2,-1
   4950c:	043ec50e 	bge	zero,r16,49024 <__alt_data_end+0xfffe1f24>
   49510:	04400404 	movi	r17,16
   49514:	d8801f17 	ldw	r2,124(sp)
   49518:	8c00880e 	bge	r17,r16,4973c <___vfprintf_internal_r+0x10ec>
   4951c:	01400174 	movhi	r5,5
   49520:	295a6584 	addi	r5,r5,27030
   49524:	d9402b15 	stw	r5,172(sp)
   49528:	058001c4 	movi	r22,7
   4952c:	dcc02c17 	ldw	r19,176(sp)
   49530:	00000306 	br	49540 <___vfprintf_internal_r+0xef0>
   49534:	42000204 	addi	r8,r8,8
   49538:	843ffc04 	addi	r16,r16,-16
   4953c:	8c00820e 	bge	r17,r16,49748 <___vfprintf_internal_r+0x10f8>
   49540:	18c00404 	addi	r3,r3,16
   49544:	10800044 	addi	r2,r2,1
   49548:	45000015 	stw	r20,0(r8)
   4954c:	44400115 	stw	r17,4(r8)
   49550:	d8c02015 	stw	r3,128(sp)
   49554:	d8801f15 	stw	r2,124(sp)
   49558:	b0bff60e 	bge	r22,r2,49534 <__alt_data_end+0xfffe2434>
   4955c:	d9801e04 	addi	r6,sp,120
   49560:	b80b883a 	mov	r5,r23
   49564:	9809883a 	mov	r4,r19
   49568:	004f1cc0 	call	4f1cc <__sprint_r>
   4956c:	103d3a1e 	bne	r2,zero,48a58 <__alt_data_end+0xfffe1958>
   49570:	d8c02017 	ldw	r3,128(sp)
   49574:	d8801f17 	ldw	r2,124(sp)
   49578:	da000404 	addi	r8,sp,16
   4957c:	003fee06 	br	49538 <__alt_data_end+0xfffe2438>
   49580:	d9403117 	ldw	r5,196(sp)
   49584:	d8802a17 	ldw	r2,168(sp)
   49588:	28adc83a 	sub	r22,r5,r2
   4958c:	05be630e 	bge	zero,r22,48f1c <__alt_data_end+0xfffe1e1c>
   49590:	07000404 	movi	fp,16
   49594:	d8801f17 	ldw	r2,124(sp)
   49598:	e5838f0e 	bge	fp,r22,4a3d8 <___vfprintf_internal_r+0x1d88>
   4959c:	01400174 	movhi	r5,5
   495a0:	295a6584 	addi	r5,r5,27030
   495a4:	dc403015 	stw	r17,192(sp)
   495a8:	d9402b15 	stw	r5,172(sp)
   495ac:	b023883a 	mov	r17,r22
   495b0:	04c001c4 	movi	r19,7
   495b4:	a82d883a 	mov	r22,r21
   495b8:	902b883a 	mov	r21,r18
   495bc:	8025883a 	mov	r18,r16
   495c0:	dc002c17 	ldw	r16,176(sp)
   495c4:	00000306 	br	495d4 <___vfprintf_internal_r+0xf84>
   495c8:	8c7ffc04 	addi	r17,r17,-16
   495cc:	42000204 	addi	r8,r8,8
   495d0:	e440110e 	bge	fp,r17,49618 <___vfprintf_internal_r+0xfc8>
   495d4:	18c00404 	addi	r3,r3,16
   495d8:	10800044 	addi	r2,r2,1
   495dc:	45000015 	stw	r20,0(r8)
   495e0:	47000115 	stw	fp,4(r8)
   495e4:	d8c02015 	stw	r3,128(sp)
   495e8:	d8801f15 	stw	r2,124(sp)
   495ec:	98bff60e 	bge	r19,r2,495c8 <__alt_data_end+0xfffe24c8>
   495f0:	d9801e04 	addi	r6,sp,120
   495f4:	b80b883a 	mov	r5,r23
   495f8:	8009883a 	mov	r4,r16
   495fc:	004f1cc0 	call	4f1cc <__sprint_r>
   49600:	103d151e 	bne	r2,zero,48a58 <__alt_data_end+0xfffe1958>
   49604:	8c7ffc04 	addi	r17,r17,-16
   49608:	d8c02017 	ldw	r3,128(sp)
   4960c:	d8801f17 	ldw	r2,124(sp)
   49610:	da000404 	addi	r8,sp,16
   49614:	e47fef16 	blt	fp,r17,495d4 <__alt_data_end+0xfffe24d4>
   49618:	9021883a 	mov	r16,r18
   4961c:	a825883a 	mov	r18,r21
   49620:	b02b883a 	mov	r21,r22
   49624:	882d883a 	mov	r22,r17
   49628:	dc403017 	ldw	r17,192(sp)
   4962c:	d9002b17 	ldw	r4,172(sp)
   49630:	1d87883a 	add	r3,r3,r22
   49634:	10800044 	addi	r2,r2,1
   49638:	41000015 	stw	r4,0(r8)
   4963c:	45800115 	stw	r22,4(r8)
   49640:	d8c02015 	stw	r3,128(sp)
   49644:	d8801f15 	stw	r2,124(sp)
   49648:	010001c4 	movi	r4,7
   4964c:	20818e16 	blt	r4,r2,49c88 <___vfprintf_internal_r+0x1638>
   49650:	42000204 	addi	r8,r8,8
   49654:	003e3106 	br	48f1c <__alt_data_end+0xfffe1e1c>
   49658:	d9403317 	ldw	r5,204(sp)
   4965c:	00800044 	movi	r2,1
   49660:	18c00044 	addi	r3,r3,1
   49664:	1141530e 	bge	r2,r5,49bb4 <___vfprintf_internal_r+0x1564>
   49668:	dc401f17 	ldw	r17,124(sp)
   4966c:	00800044 	movi	r2,1
   49670:	40800115 	stw	r2,4(r8)
   49674:	8c400044 	addi	r17,r17,1
   49678:	44000015 	stw	r16,0(r8)
   4967c:	d8c02015 	stw	r3,128(sp)
   49680:	dc401f15 	stw	r17,124(sp)
   49684:	008001c4 	movi	r2,7
   49688:	14416b16 	blt	r2,r17,49c38 <___vfprintf_internal_r+0x15e8>
   4968c:	42000204 	addi	r8,r8,8
   49690:	d8803717 	ldw	r2,220(sp)
   49694:	d9003417 	ldw	r4,208(sp)
   49698:	8c400044 	addi	r17,r17,1
   4969c:	10c7883a 	add	r3,r2,r3
   496a0:	40800115 	stw	r2,4(r8)
   496a4:	41000015 	stw	r4,0(r8)
   496a8:	d8c02015 	stw	r3,128(sp)
   496ac:	dc401f15 	stw	r17,124(sp)
   496b0:	008001c4 	movi	r2,7
   496b4:	14416916 	blt	r2,r17,49c5c <___vfprintf_internal_r+0x160c>
   496b8:	45800204 	addi	r22,r8,8
   496bc:	d9003617 	ldw	r4,216(sp)
   496c0:	d9403817 	ldw	r5,224(sp)
   496c4:	000d883a 	mov	r6,zero
   496c8:	000f883a 	mov	r7,zero
   496cc:	d8c03c15 	stw	r3,240(sp)
   496d0:	00459740 	call	45974 <__eqdf2>
   496d4:	d8c03c17 	ldw	r3,240(sp)
   496d8:	1000bc26 	beq	r2,zero,499cc <___vfprintf_internal_r+0x137c>
   496dc:	d9403317 	ldw	r5,204(sp)
   496e0:	84000044 	addi	r16,r16,1
   496e4:	8c400044 	addi	r17,r17,1
   496e8:	28bfffc4 	addi	r2,r5,-1
   496ec:	1887883a 	add	r3,r3,r2
   496f0:	b0800115 	stw	r2,4(r22)
   496f4:	b4000015 	stw	r16,0(r22)
   496f8:	d8c02015 	stw	r3,128(sp)
   496fc:	dc401f15 	stw	r17,124(sp)
   49700:	008001c4 	movi	r2,7
   49704:	14414316 	blt	r2,r17,49c14 <___vfprintf_internal_r+0x15c4>
   49708:	b5800204 	addi	r22,r22,8
   4970c:	d9003a17 	ldw	r4,232(sp)
   49710:	df0022c4 	addi	fp,sp,139
   49714:	8c400044 	addi	r17,r17,1
   49718:	20c7883a 	add	r3,r4,r3
   4971c:	b7000015 	stw	fp,0(r22)
   49720:	b1000115 	stw	r4,4(r22)
   49724:	d8c02015 	stw	r3,128(sp)
   49728:	dc401f15 	stw	r17,124(sp)
   4972c:	008001c4 	movi	r2,7
   49730:	14400e16 	blt	r2,r17,4976c <___vfprintf_internal_r+0x111c>
   49734:	b2000204 	addi	r8,r22,8
   49738:	003e3a06 	br	49024 <__alt_data_end+0xfffe1f24>
   4973c:	01000174 	movhi	r4,5
   49740:	211a6584 	addi	r4,r4,27030
   49744:	d9002b15 	stw	r4,172(sp)
   49748:	d9002b17 	ldw	r4,172(sp)
   4974c:	1c07883a 	add	r3,r3,r16
   49750:	44000115 	stw	r16,4(r8)
   49754:	41000015 	stw	r4,0(r8)
   49758:	10800044 	addi	r2,r2,1
   4975c:	d8c02015 	stw	r3,128(sp)
   49760:	d8801f15 	stw	r2,124(sp)
   49764:	010001c4 	movi	r4,7
   49768:	20be2d0e 	bge	r4,r2,49020 <__alt_data_end+0xfffe1f20>
   4976c:	d9002c17 	ldw	r4,176(sp)
   49770:	d9801e04 	addi	r6,sp,120
   49774:	b80b883a 	mov	r5,r23
   49778:	004f1cc0 	call	4f1cc <__sprint_r>
   4977c:	103cb61e 	bne	r2,zero,48a58 <__alt_data_end+0xfffe1958>
   49780:	d8c02017 	ldw	r3,128(sp)
   49784:	da000404 	addi	r8,sp,16
   49788:	003e2606 	br	49024 <__alt_data_end+0xfffe1f24>
   4978c:	d9002c17 	ldw	r4,176(sp)
   49790:	d9801e04 	addi	r6,sp,120
   49794:	b80b883a 	mov	r5,r23
   49798:	004f1cc0 	call	4f1cc <__sprint_r>
   4979c:	103e5d26 	beq	r2,zero,49114 <__alt_data_end+0xfffe2014>
   497a0:	003cad06 	br	48a58 <__alt_data_end+0xfffe1958>
   497a4:	d9002c17 	ldw	r4,176(sp)
   497a8:	d9801e04 	addi	r6,sp,120
   497ac:	b80b883a 	mov	r5,r23
   497b0:	004f1cc0 	call	4f1cc <__sprint_r>
   497b4:	103ca81e 	bne	r2,zero,48a58 <__alt_data_end+0xfffe1958>
   497b8:	d8c02017 	ldw	r3,128(sp)
   497bc:	da000404 	addi	r8,sp,16
   497c0:	003e0b06 	br	48ff0 <__alt_data_end+0xfffe1ef0>
   497c4:	d9002c17 	ldw	r4,176(sp)
   497c8:	d9801e04 	addi	r6,sp,120
   497cc:	b80b883a 	mov	r5,r23
   497d0:	004f1cc0 	call	4f1cc <__sprint_r>
   497d4:	103ca01e 	bne	r2,zero,48a58 <__alt_data_end+0xfffe1958>
   497d8:	d8c02017 	ldw	r3,128(sp)
   497dc:	da000404 	addi	r8,sp,16
   497e0:	003dbd06 	br	48ed8 <__alt_data_end+0xfffe1dd8>
   497e4:	d9002c17 	ldw	r4,176(sp)
   497e8:	d9801e04 	addi	r6,sp,120
   497ec:	b80b883a 	mov	r5,r23
   497f0:	004f1cc0 	call	4f1cc <__sprint_r>
   497f4:	103c981e 	bne	r2,zero,48a58 <__alt_data_end+0xfffe1958>
   497f8:	d8c02017 	ldw	r3,128(sp)
   497fc:	da000404 	addi	r8,sp,16
   49800:	003dc306 	br	48f10 <__alt_data_end+0xfffe1e10>
   49804:	d8802917 	ldw	r2,164(sp)
   49808:	d8002785 	stb	zero,158(sp)
   4980c:	103f0616 	blt	r2,zero,49428 <__alt_data_end+0xfffe2328>
   49810:	00ffdfc4 	movi	r3,-129
   49814:	9d84b03a 	or	r2,r19,r22
   49818:	90e4703a 	and	r18,r18,r3
   4981c:	103c6b26 	beq	r2,zero,489cc <__alt_data_end+0xfffe18cc>
   49820:	0039883a 	mov	fp,zero
   49824:	003e7406 	br	491f8 <__alt_data_end+0xfffe20f8>
   49828:	9080040c 	andi	r2,r18,16
   4982c:	1001b326 	beq	r2,zero,49efc <___vfprintf_internal_r+0x18ac>
   49830:	d9002d17 	ldw	r4,180(sp)
   49834:	d9402917 	ldw	r5,164(sp)
   49838:	d8002785 	stb	zero,158(sp)
   4983c:	20800104 	addi	r2,r4,4
   49840:	24c00017 	ldw	r19,0(r4)
   49844:	002d883a 	mov	r22,zero
   49848:	2801b516 	blt	r5,zero,49f20 <___vfprintf_internal_r+0x18d0>
   4984c:	00ffdfc4 	movi	r3,-129
   49850:	d8802d15 	stw	r2,180(sp)
   49854:	90e4703a 	and	r18,r18,r3
   49858:	983d2726 	beq	r19,zero,48cf8 <__alt_data_end+0xfffe1bf8>
   4985c:	0039883a 	mov	fp,zero
   49860:	003d2a06 	br	48d0c <__alt_data_end+0xfffe1c0c>
   49864:	dc402617 	ldw	r17,152(sp)
   49868:	0441d30e 	bge	zero,r17,49fb8 <___vfprintf_internal_r+0x1968>
   4986c:	dc403217 	ldw	r17,200(sp)
   49870:	d8803317 	ldw	r2,204(sp)
   49874:	1440010e 	bge	r2,r17,4987c <___vfprintf_internal_r+0x122c>
   49878:	1023883a 	mov	r17,r2
   4987c:	04400a0e 	bge	zero,r17,498a8 <___vfprintf_internal_r+0x1258>
   49880:	d8801f17 	ldw	r2,124(sp)
   49884:	1c47883a 	add	r3,r3,r17
   49888:	44000015 	stw	r16,0(r8)
   4988c:	10800044 	addi	r2,r2,1
   49890:	44400115 	stw	r17,4(r8)
   49894:	d8c02015 	stw	r3,128(sp)
   49898:	d8801f15 	stw	r2,124(sp)
   4989c:	010001c4 	movi	r4,7
   498a0:	20826516 	blt	r4,r2,4a238 <___vfprintf_internal_r+0x1be8>
   498a4:	42000204 	addi	r8,r8,8
   498a8:	88026116 	blt	r17,zero,4a230 <___vfprintf_internal_r+0x1be0>
   498ac:	d9003217 	ldw	r4,200(sp)
   498b0:	2463c83a 	sub	r17,r4,r17
   498b4:	04407b0e 	bge	zero,r17,49aa4 <___vfprintf_internal_r+0x1454>
   498b8:	05800404 	movi	r22,16
   498bc:	d8801f17 	ldw	r2,124(sp)
   498c0:	b4419d0e 	bge	r22,r17,49f38 <___vfprintf_internal_r+0x18e8>
   498c4:	01000174 	movhi	r4,5
   498c8:	211a6584 	addi	r4,r4,27030
   498cc:	d9002b15 	stw	r4,172(sp)
   498d0:	070001c4 	movi	fp,7
   498d4:	dcc02c17 	ldw	r19,176(sp)
   498d8:	00000306 	br	498e8 <___vfprintf_internal_r+0x1298>
   498dc:	42000204 	addi	r8,r8,8
   498e0:	8c7ffc04 	addi	r17,r17,-16
   498e4:	b441970e 	bge	r22,r17,49f44 <___vfprintf_internal_r+0x18f4>
   498e8:	18c00404 	addi	r3,r3,16
   498ec:	10800044 	addi	r2,r2,1
   498f0:	45000015 	stw	r20,0(r8)
   498f4:	45800115 	stw	r22,4(r8)
   498f8:	d8c02015 	stw	r3,128(sp)
   498fc:	d8801f15 	stw	r2,124(sp)
   49900:	e0bff60e 	bge	fp,r2,498dc <__alt_data_end+0xfffe27dc>
   49904:	d9801e04 	addi	r6,sp,120
   49908:	b80b883a 	mov	r5,r23
   4990c:	9809883a 	mov	r4,r19
   49910:	004f1cc0 	call	4f1cc <__sprint_r>
   49914:	103c501e 	bne	r2,zero,48a58 <__alt_data_end+0xfffe1958>
   49918:	d8c02017 	ldw	r3,128(sp)
   4991c:	d8801f17 	ldw	r2,124(sp)
   49920:	da000404 	addi	r8,sp,16
   49924:	003fee06 	br	498e0 <__alt_data_end+0xfffe27e0>
   49928:	d9002c17 	ldw	r4,176(sp)
   4992c:	d9801e04 	addi	r6,sp,120
   49930:	b80b883a 	mov	r5,r23
   49934:	004f1cc0 	call	4f1cc <__sprint_r>
   49938:	103c471e 	bne	r2,zero,48a58 <__alt_data_end+0xfffe1958>
   4993c:	d8c02017 	ldw	r3,128(sp)
   49940:	df002787 	ldb	fp,158(sp)
   49944:	da000404 	addi	r8,sp,16
   49948:	003d5606 	br	48ea4 <__alt_data_end+0xfffe1da4>
   4994c:	9080040c 	andi	r2,r18,16
   49950:	10016126 	beq	r2,zero,49ed8 <___vfprintf_internal_r+0x1888>
   49954:	d8802d17 	ldw	r2,180(sp)
   49958:	14c00017 	ldw	r19,0(r2)
   4995c:	10800104 	addi	r2,r2,4
   49960:	d8802d15 	stw	r2,180(sp)
   49964:	982dd7fa 	srai	r22,r19,31
   49968:	b005883a 	mov	r2,r22
   4996c:	003c8206 	br	48b78 <__alt_data_end+0xfffe1a78>
   49970:	9080040c 	andi	r2,r18,16
   49974:	10003526 	beq	r2,zero,49a4c <___vfprintf_internal_r+0x13fc>
   49978:	d9402d17 	ldw	r5,180(sp)
   4997c:	d8c02917 	ldw	r3,164(sp)
   49980:	d8002785 	stb	zero,158(sp)
   49984:	28800104 	addi	r2,r5,4
   49988:	2cc00017 	ldw	r19,0(r5)
   4998c:	002d883a 	mov	r22,zero
   49990:	18003716 	blt	r3,zero,49a70 <___vfprintf_internal_r+0x1420>
   49994:	00ffdfc4 	movi	r3,-129
   49998:	d8802d15 	stw	r2,180(sp)
   4999c:	90e4703a 	and	r18,r18,r3
   499a0:	0039883a 	mov	fp,zero
   499a4:	983df326 	beq	r19,zero,49174 <__alt_data_end+0xfffe2074>
   499a8:	00800244 	movi	r2,9
   499ac:	14fc7b36 	bltu	r2,r19,48b9c <__alt_data_end+0xfffe1a9c>
   499b0:	d8c02817 	ldw	r3,160(sp)
   499b4:	dc001dc4 	addi	r16,sp,119
   499b8:	9cc00c04 	addi	r19,r19,48
   499bc:	1c07c83a 	sub	r3,r3,r16
   499c0:	dcc01dc5 	stb	r19,119(sp)
   499c4:	d8c02e15 	stw	r3,184(sp)
   499c8:	003ce806 	br	48d6c <__alt_data_end+0xfffe1c6c>
   499cc:	d8803317 	ldw	r2,204(sp)
   499d0:	143fffc4 	addi	r16,r2,-1
   499d4:	043f4d0e 	bge	zero,r16,4970c <__alt_data_end+0xfffe260c>
   499d8:	07000404 	movi	fp,16
   499dc:	e400810e 	bge	fp,r16,49be4 <___vfprintf_internal_r+0x1594>
   499e0:	01400174 	movhi	r5,5
   499e4:	295a6584 	addi	r5,r5,27030
   499e8:	d9402b15 	stw	r5,172(sp)
   499ec:	01c001c4 	movi	r7,7
   499f0:	dcc02c17 	ldw	r19,176(sp)
   499f4:	00000306 	br	49a04 <___vfprintf_internal_r+0x13b4>
   499f8:	b5800204 	addi	r22,r22,8
   499fc:	843ffc04 	addi	r16,r16,-16
   49a00:	e4007b0e 	bge	fp,r16,49bf0 <___vfprintf_internal_r+0x15a0>
   49a04:	18c00404 	addi	r3,r3,16
   49a08:	8c400044 	addi	r17,r17,1
   49a0c:	b5000015 	stw	r20,0(r22)
   49a10:	b7000115 	stw	fp,4(r22)
   49a14:	d8c02015 	stw	r3,128(sp)
   49a18:	dc401f15 	stw	r17,124(sp)
   49a1c:	3c7ff60e 	bge	r7,r17,499f8 <__alt_data_end+0xfffe28f8>
   49a20:	d9801e04 	addi	r6,sp,120
   49a24:	b80b883a 	mov	r5,r23
   49a28:	9809883a 	mov	r4,r19
   49a2c:	d9c03c15 	stw	r7,240(sp)
   49a30:	004f1cc0 	call	4f1cc <__sprint_r>
   49a34:	d9c03c17 	ldw	r7,240(sp)
   49a38:	103c071e 	bne	r2,zero,48a58 <__alt_data_end+0xfffe1958>
   49a3c:	d8c02017 	ldw	r3,128(sp)
   49a40:	dc401f17 	ldw	r17,124(sp)
   49a44:	dd800404 	addi	r22,sp,16
   49a48:	003fec06 	br	499fc <__alt_data_end+0xfffe28fc>
   49a4c:	9080100c 	andi	r2,r18,64
   49a50:	d8002785 	stb	zero,158(sp)
   49a54:	10010e26 	beq	r2,zero,49e90 <___vfprintf_internal_r+0x1840>
   49a58:	d9002d17 	ldw	r4,180(sp)
   49a5c:	d9402917 	ldw	r5,164(sp)
   49a60:	002d883a 	mov	r22,zero
   49a64:	20800104 	addi	r2,r4,4
   49a68:	24c0000b 	ldhu	r19,0(r4)
   49a6c:	283fc90e 	bge	r5,zero,49994 <__alt_data_end+0xfffe2894>
   49a70:	d8802d15 	stw	r2,180(sp)
   49a74:	0039883a 	mov	fp,zero
   49a78:	9d84b03a 	or	r2,r19,r22
   49a7c:	103c461e 	bne	r2,zero,48b98 <__alt_data_end+0xfffe1a98>
   49a80:	00800044 	movi	r2,1
   49a84:	003e6c06 	br	49438 <__alt_data_end+0xfffe2338>
   49a88:	d9002c17 	ldw	r4,176(sp)
   49a8c:	d9801e04 	addi	r6,sp,120
   49a90:	b80b883a 	mov	r5,r23
   49a94:	004f1cc0 	call	4f1cc <__sprint_r>
   49a98:	103bef1e 	bne	r2,zero,48a58 <__alt_data_end+0xfffe1958>
   49a9c:	d8c02017 	ldw	r3,128(sp)
   49aa0:	da000404 	addi	r8,sp,16
   49aa4:	d9003217 	ldw	r4,200(sp)
   49aa8:	d8802617 	ldw	r2,152(sp)
   49aac:	d9403317 	ldw	r5,204(sp)
   49ab0:	8123883a 	add	r17,r16,r4
   49ab4:	11400216 	blt	r2,r5,49ac0 <___vfprintf_internal_r+0x1470>
   49ab8:	9100004c 	andi	r4,r18,1
   49abc:	20000d26 	beq	r4,zero,49af4 <___vfprintf_internal_r+0x14a4>
   49ac0:	d9003717 	ldw	r4,220(sp)
   49ac4:	d9403417 	ldw	r5,208(sp)
   49ac8:	1907883a 	add	r3,r3,r4
   49acc:	d9001f17 	ldw	r4,124(sp)
   49ad0:	41400015 	stw	r5,0(r8)
   49ad4:	d9403717 	ldw	r5,220(sp)
   49ad8:	21000044 	addi	r4,r4,1
   49adc:	d8c02015 	stw	r3,128(sp)
   49ae0:	41400115 	stw	r5,4(r8)
   49ae4:	d9001f15 	stw	r4,124(sp)
   49ae8:	014001c4 	movi	r5,7
   49aec:	2901e816 	blt	r5,r4,4a290 <___vfprintf_internal_r+0x1c40>
   49af0:	42000204 	addi	r8,r8,8
   49af4:	d9003317 	ldw	r4,204(sp)
   49af8:	8121883a 	add	r16,r16,r4
   49afc:	2085c83a 	sub	r2,r4,r2
   49b00:	8461c83a 	sub	r16,r16,r17
   49b04:	1400010e 	bge	r2,r16,49b0c <___vfprintf_internal_r+0x14bc>
   49b08:	1021883a 	mov	r16,r2
   49b0c:	04000a0e 	bge	zero,r16,49b38 <___vfprintf_internal_r+0x14e8>
   49b10:	d9001f17 	ldw	r4,124(sp)
   49b14:	1c07883a 	add	r3,r3,r16
   49b18:	44400015 	stw	r17,0(r8)
   49b1c:	21000044 	addi	r4,r4,1
   49b20:	44000115 	stw	r16,4(r8)
   49b24:	d8c02015 	stw	r3,128(sp)
   49b28:	d9001f15 	stw	r4,124(sp)
   49b2c:	014001c4 	movi	r5,7
   49b30:	2901fb16 	blt	r5,r4,4a320 <___vfprintf_internal_r+0x1cd0>
   49b34:	42000204 	addi	r8,r8,8
   49b38:	8001f716 	blt	r16,zero,4a318 <___vfprintf_internal_r+0x1cc8>
   49b3c:	1421c83a 	sub	r16,r2,r16
   49b40:	043d380e 	bge	zero,r16,49024 <__alt_data_end+0xfffe1f24>
   49b44:	04400404 	movi	r17,16
   49b48:	d8801f17 	ldw	r2,124(sp)
   49b4c:	8c3efb0e 	bge	r17,r16,4973c <__alt_data_end+0xfffe263c>
   49b50:	01400174 	movhi	r5,5
   49b54:	295a6584 	addi	r5,r5,27030
   49b58:	d9402b15 	stw	r5,172(sp)
   49b5c:	058001c4 	movi	r22,7
   49b60:	dcc02c17 	ldw	r19,176(sp)
   49b64:	00000306 	br	49b74 <___vfprintf_internal_r+0x1524>
   49b68:	42000204 	addi	r8,r8,8
   49b6c:	843ffc04 	addi	r16,r16,-16
   49b70:	8c3ef50e 	bge	r17,r16,49748 <__alt_data_end+0xfffe2648>
   49b74:	18c00404 	addi	r3,r3,16
   49b78:	10800044 	addi	r2,r2,1
   49b7c:	45000015 	stw	r20,0(r8)
   49b80:	44400115 	stw	r17,4(r8)
   49b84:	d8c02015 	stw	r3,128(sp)
   49b88:	d8801f15 	stw	r2,124(sp)
   49b8c:	b0bff60e 	bge	r22,r2,49b68 <__alt_data_end+0xfffe2a68>
   49b90:	d9801e04 	addi	r6,sp,120
   49b94:	b80b883a 	mov	r5,r23
   49b98:	9809883a 	mov	r4,r19
   49b9c:	004f1cc0 	call	4f1cc <__sprint_r>
   49ba0:	103bad1e 	bne	r2,zero,48a58 <__alt_data_end+0xfffe1958>
   49ba4:	d8c02017 	ldw	r3,128(sp)
   49ba8:	d8801f17 	ldw	r2,124(sp)
   49bac:	da000404 	addi	r8,sp,16
   49bb0:	003fee06 	br	49b6c <__alt_data_end+0xfffe2a6c>
   49bb4:	9088703a 	and	r4,r18,r2
   49bb8:	203eab1e 	bne	r4,zero,49668 <__alt_data_end+0xfffe2568>
   49bbc:	dc401f17 	ldw	r17,124(sp)
   49bc0:	40800115 	stw	r2,4(r8)
   49bc4:	44000015 	stw	r16,0(r8)
   49bc8:	8c400044 	addi	r17,r17,1
   49bcc:	d8c02015 	stw	r3,128(sp)
   49bd0:	dc401f15 	stw	r17,124(sp)
   49bd4:	008001c4 	movi	r2,7
   49bd8:	14400e16 	blt	r2,r17,49c14 <___vfprintf_internal_r+0x15c4>
   49bdc:	45800204 	addi	r22,r8,8
   49be0:	003eca06 	br	4970c <__alt_data_end+0xfffe260c>
   49be4:	01000174 	movhi	r4,5
   49be8:	211a6584 	addi	r4,r4,27030
   49bec:	d9002b15 	stw	r4,172(sp)
   49bf0:	d8802b17 	ldw	r2,172(sp)
   49bf4:	1c07883a 	add	r3,r3,r16
   49bf8:	8c400044 	addi	r17,r17,1
   49bfc:	b0800015 	stw	r2,0(r22)
   49c00:	b4000115 	stw	r16,4(r22)
   49c04:	d8c02015 	stw	r3,128(sp)
   49c08:	dc401f15 	stw	r17,124(sp)
   49c0c:	008001c4 	movi	r2,7
   49c10:	147ebd0e 	bge	r2,r17,49708 <__alt_data_end+0xfffe2608>
   49c14:	d9002c17 	ldw	r4,176(sp)
   49c18:	d9801e04 	addi	r6,sp,120
   49c1c:	b80b883a 	mov	r5,r23
   49c20:	004f1cc0 	call	4f1cc <__sprint_r>
   49c24:	103b8c1e 	bne	r2,zero,48a58 <__alt_data_end+0xfffe1958>
   49c28:	d8c02017 	ldw	r3,128(sp)
   49c2c:	dc401f17 	ldw	r17,124(sp)
   49c30:	dd800404 	addi	r22,sp,16
   49c34:	003eb506 	br	4970c <__alt_data_end+0xfffe260c>
   49c38:	d9002c17 	ldw	r4,176(sp)
   49c3c:	d9801e04 	addi	r6,sp,120
   49c40:	b80b883a 	mov	r5,r23
   49c44:	004f1cc0 	call	4f1cc <__sprint_r>
   49c48:	103b831e 	bne	r2,zero,48a58 <__alt_data_end+0xfffe1958>
   49c4c:	d8c02017 	ldw	r3,128(sp)
   49c50:	dc401f17 	ldw	r17,124(sp)
   49c54:	da000404 	addi	r8,sp,16
   49c58:	003e8d06 	br	49690 <__alt_data_end+0xfffe2590>
   49c5c:	d9002c17 	ldw	r4,176(sp)
   49c60:	d9801e04 	addi	r6,sp,120
   49c64:	b80b883a 	mov	r5,r23
   49c68:	004f1cc0 	call	4f1cc <__sprint_r>
   49c6c:	103b7a1e 	bne	r2,zero,48a58 <__alt_data_end+0xfffe1958>
   49c70:	d8c02017 	ldw	r3,128(sp)
   49c74:	dc401f17 	ldw	r17,124(sp)
   49c78:	dd800404 	addi	r22,sp,16
   49c7c:	003e8f06 	br	496bc <__alt_data_end+0xfffe25bc>
   49c80:	0027883a 	mov	r19,zero
   49c84:	003f4a06 	br	499b0 <__alt_data_end+0xfffe28b0>
   49c88:	d9002c17 	ldw	r4,176(sp)
   49c8c:	d9801e04 	addi	r6,sp,120
   49c90:	b80b883a 	mov	r5,r23
   49c94:	004f1cc0 	call	4f1cc <__sprint_r>
   49c98:	103b6f1e 	bne	r2,zero,48a58 <__alt_data_end+0xfffe1958>
   49c9c:	d8c02017 	ldw	r3,128(sp)
   49ca0:	da000404 	addi	r8,sp,16
   49ca4:	003c9d06 	br	48f1c <__alt_data_end+0xfffe1e1c>
   49ca8:	04e7c83a 	sub	r19,zero,r19
   49cac:	9804c03a 	cmpne	r2,r19,zero
   49cb0:	05adc83a 	sub	r22,zero,r22
   49cb4:	b0adc83a 	sub	r22,r22,r2
   49cb8:	d8802917 	ldw	r2,164(sp)
   49cbc:	07000b44 	movi	fp,45
   49cc0:	df002785 	stb	fp,158(sp)
   49cc4:	10017b16 	blt	r2,zero,4a2b4 <___vfprintf_internal_r+0x1c64>
   49cc8:	00bfdfc4 	movi	r2,-129
   49ccc:	90a4703a 	and	r18,r18,r2
   49cd0:	003bb106 	br	48b98 <__alt_data_end+0xfffe1a98>
   49cd4:	d9003617 	ldw	r4,216(sp)
   49cd8:	d9403817 	ldw	r5,224(sp)
   49cdc:	da003d15 	stw	r8,244(sp)
   49ce0:	00430440 	call	43044 <__fpclassifyd>
   49ce4:	da003d17 	ldw	r8,244(sp)
   49ce8:	1000f026 	beq	r2,zero,4a0ac <___vfprintf_internal_r+0x1a5c>
   49cec:	d9002917 	ldw	r4,164(sp)
   49cf0:	05bff7c4 	movi	r22,-33
   49cf4:	00bfffc4 	movi	r2,-1
   49cf8:	8dac703a 	and	r22,r17,r22
   49cfc:	20820026 	beq	r4,r2,4a500 <___vfprintf_internal_r+0x1eb0>
   49d00:	008011c4 	movi	r2,71
   49d04:	b081f726 	beq	r22,r2,4a4e4 <___vfprintf_internal_r+0x1e94>
   49d08:	d9003817 	ldw	r4,224(sp)
   49d0c:	90c04014 	ori	r3,r18,256
   49d10:	d8c02b15 	stw	r3,172(sp)
   49d14:	20021516 	blt	r4,zero,4a56c <___vfprintf_internal_r+0x1f1c>
   49d18:	dcc03817 	ldw	r19,224(sp)
   49d1c:	d8002a05 	stb	zero,168(sp)
   49d20:	00801984 	movi	r2,102
   49d24:	8881f926 	beq	r17,r2,4a50c <___vfprintf_internal_r+0x1ebc>
   49d28:	00801184 	movi	r2,70
   49d2c:	88821c26 	beq	r17,r2,4a5a0 <___vfprintf_internal_r+0x1f50>
   49d30:	00801144 	movi	r2,69
   49d34:	b081ef26 	beq	r22,r2,4a4f4 <___vfprintf_internal_r+0x1ea4>
   49d38:	d8c02917 	ldw	r3,164(sp)
   49d3c:	d8802104 	addi	r2,sp,132
   49d40:	d8800315 	stw	r2,12(sp)
   49d44:	d9403617 	ldw	r5,216(sp)
   49d48:	d8802504 	addi	r2,sp,148
   49d4c:	d9002c17 	ldw	r4,176(sp)
   49d50:	d8800215 	stw	r2,8(sp)
   49d54:	d8802604 	addi	r2,sp,152
   49d58:	d8c00015 	stw	r3,0(sp)
   49d5c:	d8800115 	stw	r2,4(sp)
   49d60:	01c00084 	movi	r7,2
   49d64:	980d883a 	mov	r6,r19
   49d68:	d8c03c15 	stw	r3,240(sp)
   49d6c:	da003d15 	stw	r8,244(sp)
   49d70:	004ad280 	call	4ad28 <_dtoa_r>
   49d74:	1021883a 	mov	r16,r2
   49d78:	008019c4 	movi	r2,103
   49d7c:	d8c03c17 	ldw	r3,240(sp)
   49d80:	da003d17 	ldw	r8,244(sp)
   49d84:	88817126 	beq	r17,r2,4a34c <___vfprintf_internal_r+0x1cfc>
   49d88:	008011c4 	movi	r2,71
   49d8c:	88829226 	beq	r17,r2,4a7d8 <___vfprintf_internal_r+0x2188>
   49d90:	80f9883a 	add	fp,r16,r3
   49d94:	d9003617 	ldw	r4,216(sp)
   49d98:	000d883a 	mov	r6,zero
   49d9c:	000f883a 	mov	r7,zero
   49da0:	980b883a 	mov	r5,r19
   49da4:	da003d15 	stw	r8,244(sp)
   49da8:	00459740 	call	45974 <__eqdf2>
   49dac:	da003d17 	ldw	r8,244(sp)
   49db0:	10018d26 	beq	r2,zero,4a3e8 <___vfprintf_internal_r+0x1d98>
   49db4:	d8802117 	ldw	r2,132(sp)
   49db8:	1700062e 	bgeu	r2,fp,49dd4 <___vfprintf_internal_r+0x1784>
   49dbc:	01000c04 	movi	r4,48
   49dc0:	10c00044 	addi	r3,r2,1
   49dc4:	d8c02115 	stw	r3,132(sp)
   49dc8:	11000005 	stb	r4,0(r2)
   49dcc:	d8802117 	ldw	r2,132(sp)
   49dd0:	173ffb36 	bltu	r2,fp,49dc0 <__alt_data_end+0xfffe2cc0>
   49dd4:	1405c83a 	sub	r2,r2,r16
   49dd8:	d8803315 	stw	r2,204(sp)
   49ddc:	008011c4 	movi	r2,71
   49de0:	b0817626 	beq	r22,r2,4a3bc <___vfprintf_internal_r+0x1d6c>
   49de4:	00801944 	movi	r2,101
   49de8:	1442810e 	bge	r2,r17,4a7f0 <___vfprintf_internal_r+0x21a0>
   49dec:	d8c02617 	ldw	r3,152(sp)
   49df0:	00801984 	movi	r2,102
   49df4:	d8c03215 	stw	r3,200(sp)
   49df8:	8881fe26 	beq	r17,r2,4a5f4 <___vfprintf_internal_r+0x1fa4>
   49dfc:	d8c03217 	ldw	r3,200(sp)
   49e00:	d9003317 	ldw	r4,204(sp)
   49e04:	1901dd16 	blt	r3,r4,4a57c <___vfprintf_internal_r+0x1f2c>
   49e08:	9480004c 	andi	r18,r18,1
   49e0c:	90022b1e 	bne	r18,zero,4a6bc <___vfprintf_internal_r+0x206c>
   49e10:	1805883a 	mov	r2,r3
   49e14:	18028016 	blt	r3,zero,4a818 <___vfprintf_internal_r+0x21c8>
   49e18:	d8c03217 	ldw	r3,200(sp)
   49e1c:	044019c4 	movi	r17,103
   49e20:	d8c02e15 	stw	r3,184(sp)
   49e24:	df002a07 	ldb	fp,168(sp)
   49e28:	e001531e 	bne	fp,zero,4a378 <___vfprintf_internal_r+0x1d28>
   49e2c:	df002783 	ldbu	fp,158(sp)
   49e30:	d8802a15 	stw	r2,168(sp)
   49e34:	dc802b17 	ldw	r18,172(sp)
   49e38:	d8002915 	stw	zero,164(sp)
   49e3c:	003bd106 	br	48d84 <__alt_data_end+0xfffe1c84>
   49e40:	d8802d17 	ldw	r2,180(sp)
   49e44:	d8c02d17 	ldw	r3,180(sp)
   49e48:	d9002d17 	ldw	r4,180(sp)
   49e4c:	10800017 	ldw	r2,0(r2)
   49e50:	18c00117 	ldw	r3,4(r3)
   49e54:	21000204 	addi	r4,r4,8
   49e58:	d8803615 	stw	r2,216(sp)
   49e5c:	d8c03815 	stw	r3,224(sp)
   49e60:	d9002d15 	stw	r4,180(sp)
   49e64:	003b7506 	br	48c3c <__alt_data_end+0xfffe1b3c>
   49e68:	ac400007 	ldb	r17,0(r21)
   49e6c:	003a5906 	br	487d4 <__alt_data_end+0xfffe16d4>
   49e70:	9080100c 	andi	r2,r18,64
   49e74:	1000a826 	beq	r2,zero,4a118 <___vfprintf_internal_r+0x1ac8>
   49e78:	d9002d17 	ldw	r4,180(sp)
   49e7c:	002d883a 	mov	r22,zero
   49e80:	24c0000b 	ldhu	r19,0(r4)
   49e84:	21000104 	addi	r4,r4,4
   49e88:	d9002d15 	stw	r4,180(sp)
   49e8c:	003ccb06 	br	491bc <__alt_data_end+0xfffe20bc>
   49e90:	d8c02d17 	ldw	r3,180(sp)
   49e94:	d9002917 	ldw	r4,164(sp)
   49e98:	002d883a 	mov	r22,zero
   49e9c:	18800104 	addi	r2,r3,4
   49ea0:	1cc00017 	ldw	r19,0(r3)
   49ea4:	203ebb0e 	bge	r4,zero,49994 <__alt_data_end+0xfffe2894>
   49ea8:	003ef106 	br	49a70 <__alt_data_end+0xfffe2970>
   49eac:	9080040c 	andi	r2,r18,16
   49eb0:	1000921e 	bne	r2,zero,4a0fc <___vfprintf_internal_r+0x1aac>
   49eb4:	9480100c 	andi	r18,r18,64
   49eb8:	90013926 	beq	r18,zero,4a3a0 <___vfprintf_internal_r+0x1d50>
   49ebc:	d9002d17 	ldw	r4,180(sp)
   49ec0:	d9402f17 	ldw	r5,188(sp)
   49ec4:	20800017 	ldw	r2,0(r4)
   49ec8:	21000104 	addi	r4,r4,4
   49ecc:	d9002d15 	stw	r4,180(sp)
   49ed0:	1140000d 	sth	r5,0(r2)
   49ed4:	003a1606 	br	48730 <__alt_data_end+0xfffe1630>
   49ed8:	9080100c 	andi	r2,r18,64
   49edc:	10008026 	beq	r2,zero,4a0e0 <___vfprintf_internal_r+0x1a90>
   49ee0:	d8c02d17 	ldw	r3,180(sp)
   49ee4:	1cc0000f 	ldh	r19,0(r3)
   49ee8:	18c00104 	addi	r3,r3,4
   49eec:	d8c02d15 	stw	r3,180(sp)
   49ef0:	982dd7fa 	srai	r22,r19,31
   49ef4:	b005883a 	mov	r2,r22
   49ef8:	003b1f06 	br	48b78 <__alt_data_end+0xfffe1a78>
   49efc:	9080100c 	andi	r2,r18,64
   49f00:	d8002785 	stb	zero,158(sp)
   49f04:	10008a1e 	bne	r2,zero,4a130 <___vfprintf_internal_r+0x1ae0>
   49f08:	d9402d17 	ldw	r5,180(sp)
   49f0c:	d8c02917 	ldw	r3,164(sp)
   49f10:	002d883a 	mov	r22,zero
   49f14:	28800104 	addi	r2,r5,4
   49f18:	2cc00017 	ldw	r19,0(r5)
   49f1c:	183e4b0e 	bge	r3,zero,4984c <__alt_data_end+0xfffe274c>
   49f20:	9d86b03a 	or	r3,r19,r22
   49f24:	d8802d15 	stw	r2,180(sp)
   49f28:	183e4c1e 	bne	r3,zero,4985c <__alt_data_end+0xfffe275c>
   49f2c:	0039883a 	mov	fp,zero
   49f30:	0005883a 	mov	r2,zero
   49f34:	003d4006 	br	49438 <__alt_data_end+0xfffe2338>
   49f38:	01400174 	movhi	r5,5
   49f3c:	295a6584 	addi	r5,r5,27030
   49f40:	d9402b15 	stw	r5,172(sp)
   49f44:	d9402b17 	ldw	r5,172(sp)
   49f48:	1c47883a 	add	r3,r3,r17
   49f4c:	10800044 	addi	r2,r2,1
   49f50:	41400015 	stw	r5,0(r8)
   49f54:	44400115 	stw	r17,4(r8)
   49f58:	d8c02015 	stw	r3,128(sp)
   49f5c:	d8801f15 	stw	r2,124(sp)
   49f60:	010001c4 	movi	r4,7
   49f64:	20bec816 	blt	r4,r2,49a88 <__alt_data_end+0xfffe2988>
   49f68:	42000204 	addi	r8,r8,8
   49f6c:	003ecd06 	br	49aa4 <__alt_data_end+0xfffe29a4>
   49f70:	d9002917 	ldw	r4,164(sp)
   49f74:	d8002785 	stb	zero,158(sp)
   49f78:	203d2d16 	blt	r4,zero,49430 <__alt_data_end+0xfffe2330>
   49f7c:	00bfdfc4 	movi	r2,-129
   49f80:	90a4703a 	and	r18,r18,r2
   49f84:	003a9106 	br	489cc <__alt_data_end+0xfffe18cc>
   49f88:	01000174 	movhi	r4,5
   49f8c:	211a6584 	addi	r4,r4,27030
   49f90:	d9002b15 	stw	r4,172(sp)
   49f94:	003c0c06 	br	48fc8 <__alt_data_end+0xfffe1ec8>
   49f98:	d9002c17 	ldw	r4,176(sp)
   49f9c:	d9801e04 	addi	r6,sp,120
   49fa0:	b80b883a 	mov	r5,r23
   49fa4:	004f1cc0 	call	4f1cc <__sprint_r>
   49fa8:	103aab1e 	bne	r2,zero,48a58 <__alt_data_end+0xfffe1958>
   49fac:	d8c02017 	ldw	r3,128(sp)
   49fb0:	da000404 	addi	r8,sp,16
   49fb4:	003d4106 	br	494bc <__alt_data_end+0xfffe23bc>
   49fb8:	d8801f17 	ldw	r2,124(sp)
   49fbc:	01400174 	movhi	r5,5
   49fc0:	01000044 	movi	r4,1
   49fc4:	18c00044 	addi	r3,r3,1
   49fc8:	10800044 	addi	r2,r2,1
   49fcc:	295a6504 	addi	r5,r5,27028
   49fd0:	41000115 	stw	r4,4(r8)
   49fd4:	41400015 	stw	r5,0(r8)
   49fd8:	d8c02015 	stw	r3,128(sp)
   49fdc:	d8801f15 	stw	r2,124(sp)
   49fe0:	010001c4 	movi	r4,7
   49fe4:	20805c16 	blt	r4,r2,4a158 <___vfprintf_internal_r+0x1b08>
   49fe8:	42000204 	addi	r8,r8,8
   49fec:	8800041e 	bne	r17,zero,4a000 <___vfprintf_internal_r+0x19b0>
   49ff0:	d8803317 	ldw	r2,204(sp)
   49ff4:	1000021e 	bne	r2,zero,4a000 <___vfprintf_internal_r+0x19b0>
   49ff8:	9080004c 	andi	r2,r18,1
   49ffc:	103c0926 	beq	r2,zero,49024 <__alt_data_end+0xfffe1f24>
   4a000:	d9003717 	ldw	r4,220(sp)
   4a004:	d8801f17 	ldw	r2,124(sp)
   4a008:	d9403417 	ldw	r5,208(sp)
   4a00c:	20c7883a 	add	r3,r4,r3
   4a010:	10800044 	addi	r2,r2,1
   4a014:	41000115 	stw	r4,4(r8)
   4a018:	41400015 	stw	r5,0(r8)
   4a01c:	d8c02015 	stw	r3,128(sp)
   4a020:	d8801f15 	stw	r2,124(sp)
   4a024:	010001c4 	movi	r4,7
   4a028:	20812116 	blt	r4,r2,4a4b0 <___vfprintf_internal_r+0x1e60>
   4a02c:	42000204 	addi	r8,r8,8
   4a030:	0463c83a 	sub	r17,zero,r17
   4a034:	0440730e 	bge	zero,r17,4a204 <___vfprintf_internal_r+0x1bb4>
   4a038:	05800404 	movi	r22,16
   4a03c:	b440860e 	bge	r22,r17,4a258 <___vfprintf_internal_r+0x1c08>
   4a040:	01400174 	movhi	r5,5
   4a044:	295a6584 	addi	r5,r5,27030
   4a048:	d9402b15 	stw	r5,172(sp)
   4a04c:	070001c4 	movi	fp,7
   4a050:	dcc02c17 	ldw	r19,176(sp)
   4a054:	00000306 	br	4a064 <___vfprintf_internal_r+0x1a14>
   4a058:	42000204 	addi	r8,r8,8
   4a05c:	8c7ffc04 	addi	r17,r17,-16
   4a060:	b440800e 	bge	r22,r17,4a264 <___vfprintf_internal_r+0x1c14>
   4a064:	18c00404 	addi	r3,r3,16
   4a068:	10800044 	addi	r2,r2,1
   4a06c:	45000015 	stw	r20,0(r8)
   4a070:	45800115 	stw	r22,4(r8)
   4a074:	d8c02015 	stw	r3,128(sp)
   4a078:	d8801f15 	stw	r2,124(sp)
   4a07c:	e0bff60e 	bge	fp,r2,4a058 <__alt_data_end+0xfffe2f58>
   4a080:	d9801e04 	addi	r6,sp,120
   4a084:	b80b883a 	mov	r5,r23
   4a088:	9809883a 	mov	r4,r19
   4a08c:	004f1cc0 	call	4f1cc <__sprint_r>
   4a090:	103a711e 	bne	r2,zero,48a58 <__alt_data_end+0xfffe1958>
   4a094:	d8c02017 	ldw	r3,128(sp)
   4a098:	d8801f17 	ldw	r2,124(sp)
   4a09c:	da000404 	addi	r8,sp,16
   4a0a0:	003fee06 	br	4a05c <__alt_data_end+0xfffe2f5c>
   4a0a4:	00bfffc4 	movi	r2,-1
   4a0a8:	003a6f06 	br	48a68 <__alt_data_end+0xfffe1968>
   4a0ac:	008011c4 	movi	r2,71
   4a0b0:	1440b816 	blt	r2,r17,4a394 <___vfprintf_internal_r+0x1d44>
   4a0b4:	04000174 	movhi	r16,5
   4a0b8:	841a5704 	addi	r16,r16,26972
   4a0bc:	00c000c4 	movi	r3,3
   4a0c0:	00bfdfc4 	movi	r2,-129
   4a0c4:	d8c02a15 	stw	r3,168(sp)
   4a0c8:	90a4703a 	and	r18,r18,r2
   4a0cc:	df002783 	ldbu	fp,158(sp)
   4a0d0:	d8c02e15 	stw	r3,184(sp)
   4a0d4:	d8002915 	stw	zero,164(sp)
   4a0d8:	d8003215 	stw	zero,200(sp)
   4a0dc:	003b2906 	br	48d84 <__alt_data_end+0xfffe1c84>
   4a0e0:	d9002d17 	ldw	r4,180(sp)
   4a0e4:	24c00017 	ldw	r19,0(r4)
   4a0e8:	21000104 	addi	r4,r4,4
   4a0ec:	d9002d15 	stw	r4,180(sp)
   4a0f0:	982dd7fa 	srai	r22,r19,31
   4a0f4:	b005883a 	mov	r2,r22
   4a0f8:	003a9f06 	br	48b78 <__alt_data_end+0xfffe1a78>
   4a0fc:	d9402d17 	ldw	r5,180(sp)
   4a100:	d8c02f17 	ldw	r3,188(sp)
   4a104:	28800017 	ldw	r2,0(r5)
   4a108:	29400104 	addi	r5,r5,4
   4a10c:	d9402d15 	stw	r5,180(sp)
   4a110:	10c00015 	stw	r3,0(r2)
   4a114:	00398606 	br	48730 <__alt_data_end+0xfffe1630>
   4a118:	d9402d17 	ldw	r5,180(sp)
   4a11c:	002d883a 	mov	r22,zero
   4a120:	2cc00017 	ldw	r19,0(r5)
   4a124:	29400104 	addi	r5,r5,4
   4a128:	d9402d15 	stw	r5,180(sp)
   4a12c:	003c2306 	br	491bc <__alt_data_end+0xfffe20bc>
   4a130:	d8c02d17 	ldw	r3,180(sp)
   4a134:	d9002917 	ldw	r4,164(sp)
   4a138:	002d883a 	mov	r22,zero
   4a13c:	18800104 	addi	r2,r3,4
   4a140:	1cc0000b 	ldhu	r19,0(r3)
   4a144:	203dc10e 	bge	r4,zero,4984c <__alt_data_end+0xfffe274c>
   4a148:	003f7506 	br	49f20 <__alt_data_end+0xfffe2e20>
   4a14c:	04000174 	movhi	r16,5
   4a150:	841a5504 	addi	r16,r16,26964
   4a154:	003acc06 	br	48c88 <__alt_data_end+0xfffe1b88>
   4a158:	d9002c17 	ldw	r4,176(sp)
   4a15c:	d9801e04 	addi	r6,sp,120
   4a160:	b80b883a 	mov	r5,r23
   4a164:	004f1cc0 	call	4f1cc <__sprint_r>
   4a168:	103a3b1e 	bne	r2,zero,48a58 <__alt_data_end+0xfffe1958>
   4a16c:	dc402617 	ldw	r17,152(sp)
   4a170:	d8c02017 	ldw	r3,128(sp)
   4a174:	da000404 	addi	r8,sp,16
   4a178:	003f9c06 	br	49fec <__alt_data_end+0xfffe2eec>
   4a17c:	ac400043 	ldbu	r17,1(r21)
   4a180:	94800814 	ori	r18,r18,32
   4a184:	ad400044 	addi	r21,r21,1
   4a188:	8c403fcc 	andi	r17,r17,255
   4a18c:	8c40201c 	xori	r17,r17,128
   4a190:	8c7fe004 	addi	r17,r17,-128
   4a194:	00398f06 	br	487d4 <__alt_data_end+0xfffe16d4>
   4a198:	d8c02d15 	stw	r3,180(sp)
   4a19c:	0039883a 	mov	fp,zero
   4a1a0:	003e3506 	br	49a78 <__alt_data_end+0xfffe2978>
   4a1a4:	d9002c17 	ldw	r4,176(sp)
   4a1a8:	d9801e04 	addi	r6,sp,120
   4a1ac:	b80b883a 	mov	r5,r23
   4a1b0:	004f1cc0 	call	4f1cc <__sprint_r>
   4a1b4:	103a281e 	bne	r2,zero,48a58 <__alt_data_end+0xfffe1958>
   4a1b8:	d8c02017 	ldw	r3,128(sp)
   4a1bc:	da000404 	addi	r8,sp,16
   4a1c0:	003cd006 	br	49504 <__alt_data_end+0xfffe2404>
   4a1c4:	8009883a 	mov	r4,r16
   4a1c8:	da003d15 	stw	r8,244(sp)
   4a1cc:	00485b80 	call	485b8 <strlen>
   4a1d0:	d8802e15 	stw	r2,184(sp)
   4a1d4:	da003d17 	ldw	r8,244(sp)
   4a1d8:	103c340e 	bge	r2,zero,492ac <__alt_data_end+0xfffe21ac>
   4a1dc:	0005883a 	mov	r2,zero
   4a1e0:	003c3206 	br	492ac <__alt_data_end+0xfffe21ac>
   4a1e4:	d9002c17 	ldw	r4,176(sp)
   4a1e8:	d9801e04 	addi	r6,sp,120
   4a1ec:	b80b883a 	mov	r5,r23
   4a1f0:	004f1cc0 	call	4f1cc <__sprint_r>
   4a1f4:	103a181e 	bne	r2,zero,48a58 <__alt_data_end+0xfffe1958>
   4a1f8:	d8c02017 	ldw	r3,128(sp)
   4a1fc:	d8801f17 	ldw	r2,124(sp)
   4a200:	da000404 	addi	r8,sp,16
   4a204:	d9403317 	ldw	r5,204(sp)
   4a208:	10800044 	addi	r2,r2,1
   4a20c:	44000015 	stw	r16,0(r8)
   4a210:	28c7883a 	add	r3,r5,r3
   4a214:	003b7d06 	br	4900c <__alt_data_end+0xfffe1f0c>
   4a218:	01000174 	movhi	r4,5
   4a21c:	211a6984 	addi	r4,r4,27046
   4a220:	d9003515 	stw	r4,212(sp)
   4a224:	003b1406 	br	48e78 <__alt_data_end+0xfffe1d78>
   4a228:	013fffc4 	movi	r4,-1
   4a22c:	003a3506 	br	48b04 <__alt_data_end+0xfffe1a04>
   4a230:	0023883a 	mov	r17,zero
   4a234:	003d9d06 	br	498ac <__alt_data_end+0xfffe27ac>
   4a238:	d9002c17 	ldw	r4,176(sp)
   4a23c:	d9801e04 	addi	r6,sp,120
   4a240:	b80b883a 	mov	r5,r23
   4a244:	004f1cc0 	call	4f1cc <__sprint_r>
   4a248:	103a031e 	bne	r2,zero,48a58 <__alt_data_end+0xfffe1958>
   4a24c:	d8c02017 	ldw	r3,128(sp)
   4a250:	da000404 	addi	r8,sp,16
   4a254:	003d9406 	br	498a8 <__alt_data_end+0xfffe27a8>
   4a258:	01000174 	movhi	r4,5
   4a25c:	211a6584 	addi	r4,r4,27030
   4a260:	d9002b15 	stw	r4,172(sp)
   4a264:	d9002b17 	ldw	r4,172(sp)
   4a268:	1c47883a 	add	r3,r3,r17
   4a26c:	10800044 	addi	r2,r2,1
   4a270:	41000015 	stw	r4,0(r8)
   4a274:	44400115 	stw	r17,4(r8)
   4a278:	d8c02015 	stw	r3,128(sp)
   4a27c:	d8801f15 	stw	r2,124(sp)
   4a280:	010001c4 	movi	r4,7
   4a284:	20bfd716 	blt	r4,r2,4a1e4 <__alt_data_end+0xfffe30e4>
   4a288:	42000204 	addi	r8,r8,8
   4a28c:	003fdd06 	br	4a204 <__alt_data_end+0xfffe3104>
   4a290:	d9002c17 	ldw	r4,176(sp)
   4a294:	d9801e04 	addi	r6,sp,120
   4a298:	b80b883a 	mov	r5,r23
   4a29c:	004f1cc0 	call	4f1cc <__sprint_r>
   4a2a0:	1039ed1e 	bne	r2,zero,48a58 <__alt_data_end+0xfffe1958>
   4a2a4:	d8802617 	ldw	r2,152(sp)
   4a2a8:	d8c02017 	ldw	r3,128(sp)
   4a2ac:	da000404 	addi	r8,sp,16
   4a2b0:	003e1006 	br	49af4 <__alt_data_end+0xfffe29f4>
   4a2b4:	00800044 	movi	r2,1
   4a2b8:	10803fcc 	andi	r2,r2,255
   4a2bc:	00c00044 	movi	r3,1
   4a2c0:	10fa3526 	beq	r2,r3,48b98 <__alt_data_end+0xfffe1a98>
   4a2c4:	00c00084 	movi	r3,2
   4a2c8:	10fbcb26 	beq	r2,r3,491f8 <__alt_data_end+0xfffe20f8>
   4a2cc:	003a8f06 	br	48d0c <__alt_data_end+0xfffe1c0c>
   4a2d0:	01000174 	movhi	r4,5
   4a2d4:	211a6984 	addi	r4,r4,27046
   4a2d8:	d9003515 	stw	r4,212(sp)
   4a2dc:	003b7606 	br	490b8 <__alt_data_end+0xfffe1fb8>
   4a2e0:	d8802917 	ldw	r2,164(sp)
   4a2e4:	00c00184 	movi	r3,6
   4a2e8:	1880012e 	bgeu	r3,r2,4a2f0 <___vfprintf_internal_r+0x1ca0>
   4a2ec:	1805883a 	mov	r2,r3
   4a2f0:	d8802e15 	stw	r2,184(sp)
   4a2f4:	1000ef16 	blt	r2,zero,4a6b4 <___vfprintf_internal_r+0x2064>
   4a2f8:	04000174 	movhi	r16,5
   4a2fc:	d8802a15 	stw	r2,168(sp)
   4a300:	dcc02d15 	stw	r19,180(sp)
   4a304:	d8002915 	stw	zero,164(sp)
   4a308:	d8003215 	stw	zero,200(sp)
   4a30c:	841a6304 	addi	r16,r16,27020
   4a310:	0039883a 	mov	fp,zero
   4a314:	003aa206 	br	48da0 <__alt_data_end+0xfffe1ca0>
   4a318:	0021883a 	mov	r16,zero
   4a31c:	003e0706 	br	49b3c <__alt_data_end+0xfffe2a3c>
   4a320:	d9002c17 	ldw	r4,176(sp)
   4a324:	d9801e04 	addi	r6,sp,120
   4a328:	b80b883a 	mov	r5,r23
   4a32c:	004f1cc0 	call	4f1cc <__sprint_r>
   4a330:	1039c91e 	bne	r2,zero,48a58 <__alt_data_end+0xfffe1958>
   4a334:	d8802617 	ldw	r2,152(sp)
   4a338:	d9403317 	ldw	r5,204(sp)
   4a33c:	d8c02017 	ldw	r3,128(sp)
   4a340:	da000404 	addi	r8,sp,16
   4a344:	2885c83a 	sub	r2,r5,r2
   4a348:	003dfb06 	br	49b38 <__alt_data_end+0xfffe2a38>
   4a34c:	9080004c 	andi	r2,r18,1
   4a350:	103e8f1e 	bne	r2,zero,49d90 <__alt_data_end+0xfffe2c90>
   4a354:	d8802117 	ldw	r2,132(sp)
   4a358:	003e9e06 	br	49dd4 <__alt_data_end+0xfffe2cd4>
   4a35c:	1025883a 	mov	r18,r2
   4a360:	0039883a 	mov	fp,zero
   4a364:	00800084 	movi	r2,2
   4a368:	003fd306 	br	4a2b8 <__alt_data_end+0xfffe31b8>
   4a36c:	07000b44 	movi	fp,45
   4a370:	df002785 	stb	fp,158(sp)
   4a374:	003a4006 	br	48c78 <__alt_data_end+0xfffe1b78>
   4a378:	00c00b44 	movi	r3,45
   4a37c:	d8c02785 	stb	r3,158(sp)
   4a380:	d8802a15 	stw	r2,168(sp)
   4a384:	dc802b17 	ldw	r18,172(sp)
   4a388:	d8002915 	stw	zero,164(sp)
   4a38c:	07000b44 	movi	fp,45
   4a390:	003a8006 	br	48d94 <__alt_data_end+0xfffe1c94>
   4a394:	04000174 	movhi	r16,5
   4a398:	841a5804 	addi	r16,r16,26976
   4a39c:	003f4706 	br	4a0bc <__alt_data_end+0xfffe2fbc>
   4a3a0:	d8c02d17 	ldw	r3,180(sp)
   4a3a4:	d9002f17 	ldw	r4,188(sp)
   4a3a8:	18800017 	ldw	r2,0(r3)
   4a3ac:	18c00104 	addi	r3,r3,4
   4a3b0:	d8c02d15 	stw	r3,180(sp)
   4a3b4:	11000015 	stw	r4,0(r2)
   4a3b8:	0038dd06 	br	48730 <__alt_data_end+0xfffe1630>
   4a3bc:	dd802617 	ldw	r22,152(sp)
   4a3c0:	00bfff44 	movi	r2,-3
   4a3c4:	b0801c16 	blt	r22,r2,4a438 <___vfprintf_internal_r+0x1de8>
   4a3c8:	d9402917 	ldw	r5,164(sp)
   4a3cc:	2d801a16 	blt	r5,r22,4a438 <___vfprintf_internal_r+0x1de8>
   4a3d0:	dd803215 	stw	r22,200(sp)
   4a3d4:	003e8906 	br	49dfc <__alt_data_end+0xfffe2cfc>
   4a3d8:	01000174 	movhi	r4,5
   4a3dc:	211a6584 	addi	r4,r4,27030
   4a3e0:	d9002b15 	stw	r4,172(sp)
   4a3e4:	003c9106 	br	4962c <__alt_data_end+0xfffe252c>
   4a3e8:	e005883a 	mov	r2,fp
   4a3ec:	003e7906 	br	49dd4 <__alt_data_end+0xfffe2cd4>
   4a3f0:	d9402917 	ldw	r5,164(sp)
   4a3f4:	df002783 	ldbu	fp,158(sp)
   4a3f8:	dcc02d15 	stw	r19,180(sp)
   4a3fc:	d9402a15 	stw	r5,168(sp)
   4a400:	d9402e15 	stw	r5,184(sp)
   4a404:	d8002915 	stw	zero,164(sp)
   4a408:	d8003215 	stw	zero,200(sp)
   4a40c:	003a5d06 	br	48d84 <__alt_data_end+0xfffe1c84>
   4a410:	9080004c 	andi	r2,r18,1
   4a414:	0039883a 	mov	fp,zero
   4a418:	10000426 	beq	r2,zero,4a42c <___vfprintf_internal_r+0x1ddc>
   4a41c:	00800c04 	movi	r2,48
   4a420:	dc001dc4 	addi	r16,sp,119
   4a424:	d8801dc5 	stb	r2,119(sp)
   4a428:	003b8006 	br	4922c <__alt_data_end+0xfffe212c>
   4a42c:	d8002e15 	stw	zero,184(sp)
   4a430:	dc001e04 	addi	r16,sp,120
   4a434:	003a4d06 	br	48d6c <__alt_data_end+0xfffe1c6c>
   4a438:	8c7fff84 	addi	r17,r17,-2
   4a43c:	b5bfffc4 	addi	r22,r22,-1
   4a440:	dd802615 	stw	r22,152(sp)
   4a444:	dc4022c5 	stb	r17,139(sp)
   4a448:	b000bf16 	blt	r22,zero,4a748 <___vfprintf_internal_r+0x20f8>
   4a44c:	00800ac4 	movi	r2,43
   4a450:	d8802305 	stb	r2,140(sp)
   4a454:	00800244 	movi	r2,9
   4a458:	15807016 	blt	r2,r22,4a61c <___vfprintf_internal_r+0x1fcc>
   4a45c:	00800c04 	movi	r2,48
   4a460:	b5800c04 	addi	r22,r22,48
   4a464:	d8802345 	stb	r2,141(sp)
   4a468:	dd802385 	stb	r22,142(sp)
   4a46c:	d88023c4 	addi	r2,sp,143
   4a470:	df0022c4 	addi	fp,sp,139
   4a474:	d8c03317 	ldw	r3,204(sp)
   4a478:	1739c83a 	sub	fp,r2,fp
   4a47c:	d9003317 	ldw	r4,204(sp)
   4a480:	e0c7883a 	add	r3,fp,r3
   4a484:	df003a15 	stw	fp,232(sp)
   4a488:	d8c02e15 	stw	r3,184(sp)
   4a48c:	00800044 	movi	r2,1
   4a490:	1100b30e 	bge	r2,r4,4a760 <___vfprintf_internal_r+0x2110>
   4a494:	d8c02e17 	ldw	r3,184(sp)
   4a498:	18c00044 	addi	r3,r3,1
   4a49c:	d8c02e15 	stw	r3,184(sp)
   4a4a0:	1805883a 	mov	r2,r3
   4a4a4:	1800ac16 	blt	r3,zero,4a758 <___vfprintf_internal_r+0x2108>
   4a4a8:	d8003215 	stw	zero,200(sp)
   4a4ac:	003e5d06 	br	49e24 <__alt_data_end+0xfffe2d24>
   4a4b0:	d9002c17 	ldw	r4,176(sp)
   4a4b4:	d9801e04 	addi	r6,sp,120
   4a4b8:	b80b883a 	mov	r5,r23
   4a4bc:	004f1cc0 	call	4f1cc <__sprint_r>
   4a4c0:	1039651e 	bne	r2,zero,48a58 <__alt_data_end+0xfffe1958>
   4a4c4:	dc402617 	ldw	r17,152(sp)
   4a4c8:	d8c02017 	ldw	r3,128(sp)
   4a4cc:	d8801f17 	ldw	r2,124(sp)
   4a4d0:	da000404 	addi	r8,sp,16
   4a4d4:	003ed606 	br	4a030 <__alt_data_end+0xfffe2f30>
   4a4d8:	582b883a 	mov	r21,r11
   4a4dc:	d8002915 	stw	zero,164(sp)
   4a4e0:	0038bd06 	br	487d8 <__alt_data_end+0xfffe16d8>
   4a4e4:	d8802917 	ldw	r2,164(sp)
   4a4e8:	103e071e 	bne	r2,zero,49d08 <__alt_data_end+0xfffe2c08>
   4a4ec:	dc002915 	stw	r16,164(sp)
   4a4f0:	003e0506 	br	49d08 <__alt_data_end+0xfffe2c08>
   4a4f4:	d9002917 	ldw	r4,164(sp)
   4a4f8:	20c00044 	addi	r3,r4,1
   4a4fc:	003e0f06 	br	49d3c <__alt_data_end+0xfffe2c3c>
   4a500:	01400184 	movi	r5,6
   4a504:	d9402915 	stw	r5,164(sp)
   4a508:	003dff06 	br	49d08 <__alt_data_end+0xfffe2c08>
   4a50c:	d8802104 	addi	r2,sp,132
   4a510:	d8800315 	stw	r2,12(sp)
   4a514:	d8802504 	addi	r2,sp,148
   4a518:	d8800215 	stw	r2,8(sp)
   4a51c:	d8802604 	addi	r2,sp,152
   4a520:	d8800115 	stw	r2,4(sp)
   4a524:	d8802917 	ldw	r2,164(sp)
   4a528:	d9403617 	ldw	r5,216(sp)
   4a52c:	d9002c17 	ldw	r4,176(sp)
   4a530:	d8800015 	stw	r2,0(sp)
   4a534:	01c000c4 	movi	r7,3
   4a538:	980d883a 	mov	r6,r19
   4a53c:	da003d15 	stw	r8,244(sp)
   4a540:	004ad280 	call	4ad28 <_dtoa_r>
   4a544:	d8c02917 	ldw	r3,164(sp)
   4a548:	da003d17 	ldw	r8,244(sp)
   4a54c:	1021883a 	mov	r16,r2
   4a550:	10f9883a 	add	fp,r2,r3
   4a554:	81000007 	ldb	r4,0(r16)
   4a558:	00800c04 	movi	r2,48
   4a55c:	20805e26 	beq	r4,r2,4a6d8 <___vfprintf_internal_r+0x2088>
   4a560:	d8c02617 	ldw	r3,152(sp)
   4a564:	e0f9883a 	add	fp,fp,r3
   4a568:	003e0a06 	br	49d94 <__alt_data_end+0xfffe2c94>
   4a56c:	00c00b44 	movi	r3,45
   4a570:	24e0003c 	xorhi	r19,r4,32768
   4a574:	d8c02a05 	stb	r3,168(sp)
   4a578:	003de906 	br	49d20 <__alt_data_end+0xfffe2c20>
   4a57c:	d8c03217 	ldw	r3,200(sp)
   4a580:	00c07a0e 	bge	zero,r3,4a76c <___vfprintf_internal_r+0x211c>
   4a584:	00800044 	movi	r2,1
   4a588:	d9003317 	ldw	r4,204(sp)
   4a58c:	1105883a 	add	r2,r2,r4
   4a590:	d8802e15 	stw	r2,184(sp)
   4a594:	10004e16 	blt	r2,zero,4a6d0 <___vfprintf_internal_r+0x2080>
   4a598:	044019c4 	movi	r17,103
   4a59c:	003e2106 	br	49e24 <__alt_data_end+0xfffe2d24>
   4a5a0:	d9002917 	ldw	r4,164(sp)
   4a5a4:	d8802104 	addi	r2,sp,132
   4a5a8:	d8800315 	stw	r2,12(sp)
   4a5ac:	d9000015 	stw	r4,0(sp)
   4a5b0:	d8802504 	addi	r2,sp,148
   4a5b4:	d9403617 	ldw	r5,216(sp)
   4a5b8:	d9002c17 	ldw	r4,176(sp)
   4a5bc:	d8800215 	stw	r2,8(sp)
   4a5c0:	d8802604 	addi	r2,sp,152
   4a5c4:	d8800115 	stw	r2,4(sp)
   4a5c8:	01c000c4 	movi	r7,3
   4a5cc:	980d883a 	mov	r6,r19
   4a5d0:	da003d15 	stw	r8,244(sp)
   4a5d4:	004ad280 	call	4ad28 <_dtoa_r>
   4a5d8:	d8c02917 	ldw	r3,164(sp)
   4a5dc:	da003d17 	ldw	r8,244(sp)
   4a5e0:	1021883a 	mov	r16,r2
   4a5e4:	00801184 	movi	r2,70
   4a5e8:	80f9883a 	add	fp,r16,r3
   4a5ec:	88bfd926 	beq	r17,r2,4a554 <__alt_data_end+0xfffe3454>
   4a5f0:	003de806 	br	49d94 <__alt_data_end+0xfffe2c94>
   4a5f4:	d9002917 	ldw	r4,164(sp)
   4a5f8:	00c04d0e 	bge	zero,r3,4a730 <___vfprintf_internal_r+0x20e0>
   4a5fc:	2000441e 	bne	r4,zero,4a710 <___vfprintf_internal_r+0x20c0>
   4a600:	9480004c 	andi	r18,r18,1
   4a604:	9000421e 	bne	r18,zero,4a710 <___vfprintf_internal_r+0x20c0>
   4a608:	1805883a 	mov	r2,r3
   4a60c:	18007016 	blt	r3,zero,4a7d0 <___vfprintf_internal_r+0x2180>
   4a610:	d8c03217 	ldw	r3,200(sp)
   4a614:	d8c02e15 	stw	r3,184(sp)
   4a618:	003e0206 	br	49e24 <__alt_data_end+0xfffe2d24>
   4a61c:	df0022c4 	addi	fp,sp,139
   4a620:	dc002915 	stw	r16,164(sp)
   4a624:	4027883a 	mov	r19,r8
   4a628:	e021883a 	mov	r16,fp
   4a62c:	b009883a 	mov	r4,r22
   4a630:	01400284 	movi	r5,10
   4a634:	00431b00 	call	431b0 <__modsi3>
   4a638:	10800c04 	addi	r2,r2,48
   4a63c:	843fffc4 	addi	r16,r16,-1
   4a640:	b009883a 	mov	r4,r22
   4a644:	01400284 	movi	r5,10
   4a648:	80800005 	stb	r2,0(r16)
   4a64c:	004312c0 	call	4312c <__divsi3>
   4a650:	102d883a 	mov	r22,r2
   4a654:	00800244 	movi	r2,9
   4a658:	15bff416 	blt	r2,r22,4a62c <__alt_data_end+0xfffe352c>
   4a65c:	9811883a 	mov	r8,r19
   4a660:	b0800c04 	addi	r2,r22,48
   4a664:	8027883a 	mov	r19,r16
   4a668:	997fffc4 	addi	r5,r19,-1
   4a66c:	98bfffc5 	stb	r2,-1(r19)
   4a670:	dc002917 	ldw	r16,164(sp)
   4a674:	2f006a2e 	bgeu	r5,fp,4a820 <___vfprintf_internal_r+0x21d0>
   4a678:	d9c02384 	addi	r7,sp,142
   4a67c:	3ccfc83a 	sub	r7,r7,r19
   4a680:	d9002344 	addi	r4,sp,141
   4a684:	e1cf883a 	add	r7,fp,r7
   4a688:	00000106 	br	4a690 <___vfprintf_internal_r+0x2040>
   4a68c:	28800003 	ldbu	r2,0(r5)
   4a690:	20800005 	stb	r2,0(r4)
   4a694:	21000044 	addi	r4,r4,1
   4a698:	29400044 	addi	r5,r5,1
   4a69c:	393ffb1e 	bne	r7,r4,4a68c <__alt_data_end+0xfffe358c>
   4a6a0:	d8802304 	addi	r2,sp,140
   4a6a4:	14c5c83a 	sub	r2,r2,r19
   4a6a8:	d8c02344 	addi	r3,sp,141
   4a6ac:	1885883a 	add	r2,r3,r2
   4a6b0:	003f7006 	br	4a474 <__alt_data_end+0xfffe3374>
   4a6b4:	0005883a 	mov	r2,zero
   4a6b8:	003f0f06 	br	4a2f8 <__alt_data_end+0xfffe31f8>
   4a6bc:	d8c03217 	ldw	r3,200(sp)
   4a6c0:	18c00044 	addi	r3,r3,1
   4a6c4:	d8c02e15 	stw	r3,184(sp)
   4a6c8:	1805883a 	mov	r2,r3
   4a6cc:	183fb20e 	bge	r3,zero,4a598 <__alt_data_end+0xfffe3498>
   4a6d0:	0005883a 	mov	r2,zero
   4a6d4:	003fb006 	br	4a598 <__alt_data_end+0xfffe3498>
   4a6d8:	d9003617 	ldw	r4,216(sp)
   4a6dc:	000d883a 	mov	r6,zero
   4a6e0:	000f883a 	mov	r7,zero
   4a6e4:	980b883a 	mov	r5,r19
   4a6e8:	d8c03c15 	stw	r3,240(sp)
   4a6ec:	da003d15 	stw	r8,244(sp)
   4a6f0:	00459740 	call	45974 <__eqdf2>
   4a6f4:	d8c03c17 	ldw	r3,240(sp)
   4a6f8:	da003d17 	ldw	r8,244(sp)
   4a6fc:	103f9826 	beq	r2,zero,4a560 <__alt_data_end+0xfffe3460>
   4a700:	00800044 	movi	r2,1
   4a704:	10c7c83a 	sub	r3,r2,r3
   4a708:	d8c02615 	stw	r3,152(sp)
   4a70c:	003f9506 	br	4a564 <__alt_data_end+0xfffe3464>
   4a710:	d9002917 	ldw	r4,164(sp)
   4a714:	d8c03217 	ldw	r3,200(sp)
   4a718:	20800044 	addi	r2,r4,1
   4a71c:	1885883a 	add	r2,r3,r2
   4a720:	d8802e15 	stw	r2,184(sp)
   4a724:	103dbf0e 	bge	r2,zero,49e24 <__alt_data_end+0xfffe2d24>
   4a728:	0005883a 	mov	r2,zero
   4a72c:	003dbd06 	br	49e24 <__alt_data_end+0xfffe2d24>
   4a730:	2000211e 	bne	r4,zero,4a7b8 <___vfprintf_internal_r+0x2168>
   4a734:	9480004c 	andi	r18,r18,1
   4a738:	90001f1e 	bne	r18,zero,4a7b8 <___vfprintf_internal_r+0x2168>
   4a73c:	00800044 	movi	r2,1
   4a740:	d8802e15 	stw	r2,184(sp)
   4a744:	003db706 	br	49e24 <__alt_data_end+0xfffe2d24>
   4a748:	00800b44 	movi	r2,45
   4a74c:	05adc83a 	sub	r22,zero,r22
   4a750:	d8802305 	stb	r2,140(sp)
   4a754:	003f3f06 	br	4a454 <__alt_data_end+0xfffe3354>
   4a758:	0005883a 	mov	r2,zero
   4a75c:	003f5206 	br	4a4a8 <__alt_data_end+0xfffe33a8>
   4a760:	90a4703a 	and	r18,r18,r2
   4a764:	903f4e26 	beq	r18,zero,4a4a0 <__alt_data_end+0xfffe33a0>
   4a768:	003f4a06 	br	4a494 <__alt_data_end+0xfffe3394>
   4a76c:	00800084 	movi	r2,2
   4a770:	10c5c83a 	sub	r2,r2,r3
   4a774:	003f8406 	br	4a588 <__alt_data_end+0xfffe3488>
   4a778:	d8802d17 	ldw	r2,180(sp)
   4a77c:	d9002d17 	ldw	r4,180(sp)
   4a780:	ac400043 	ldbu	r17,1(r21)
   4a784:	10800017 	ldw	r2,0(r2)
   4a788:	582b883a 	mov	r21,r11
   4a78c:	d8802915 	stw	r2,164(sp)
   4a790:	20800104 	addi	r2,r4,4
   4a794:	d9002917 	ldw	r4,164(sp)
   4a798:	d8802d15 	stw	r2,180(sp)
   4a79c:	203e7a0e 	bge	r4,zero,4a188 <__alt_data_end+0xfffe3088>
   4a7a0:	8c403fcc 	andi	r17,r17,255
   4a7a4:	00bfffc4 	movi	r2,-1
   4a7a8:	8c40201c 	xori	r17,r17,128
   4a7ac:	d8802915 	stw	r2,164(sp)
   4a7b0:	8c7fe004 	addi	r17,r17,-128
   4a7b4:	00380706 	br	487d4 <__alt_data_end+0xfffe16d4>
   4a7b8:	d8c02917 	ldw	r3,164(sp)
   4a7bc:	18c00084 	addi	r3,r3,2
   4a7c0:	d8c02e15 	stw	r3,184(sp)
   4a7c4:	1805883a 	mov	r2,r3
   4a7c8:	183d960e 	bge	r3,zero,49e24 <__alt_data_end+0xfffe2d24>
   4a7cc:	003fd606 	br	4a728 <__alt_data_end+0xfffe3628>
   4a7d0:	0005883a 	mov	r2,zero
   4a7d4:	003f8e06 	br	4a610 <__alt_data_end+0xfffe3510>
   4a7d8:	9080004c 	andi	r2,r18,1
   4a7dc:	103f811e 	bne	r2,zero,4a5e4 <__alt_data_end+0xfffe34e4>
   4a7e0:	d8802117 	ldw	r2,132(sp)
   4a7e4:	1405c83a 	sub	r2,r2,r16
   4a7e8:	d8803315 	stw	r2,204(sp)
   4a7ec:	b47ef326 	beq	r22,r17,4a3bc <__alt_data_end+0xfffe32bc>
   4a7f0:	dd802617 	ldw	r22,152(sp)
   4a7f4:	003f1106 	br	4a43c <__alt_data_end+0xfffe333c>
   4a7f8:	d9c02785 	stb	r7,158(sp)
   4a7fc:	00390406 	br	48c10 <__alt_data_end+0xfffe1b10>
   4a800:	d9c02785 	stb	r7,158(sp)
   4a804:	0038d306 	br	48b54 <__alt_data_end+0xfffe1a54>
   4a808:	d9c02785 	stb	r7,158(sp)
   4a80c:	003a6106 	br	49194 <__alt_data_end+0xfffe2094>
   4a810:	d9c02785 	stb	r7,158(sp)
   4a814:	003af806 	br	493f8 <__alt_data_end+0xfffe22f8>
   4a818:	0005883a 	mov	r2,zero
   4a81c:	003d7e06 	br	49e18 <__alt_data_end+0xfffe2d18>
   4a820:	d8802344 	addi	r2,sp,141
   4a824:	003f1306 	br	4a474 <__alt_data_end+0xfffe3374>
   4a828:	d9c02785 	stb	r7,158(sp)
   4a82c:	00392306 	br	48cbc <__alt_data_end+0xfffe1bbc>
   4a830:	d9c02785 	stb	r7,158(sp)
   4a834:	003aa906 	br	492dc <__alt_data_end+0xfffe21dc>
   4a838:	d9c02785 	stb	r7,158(sp)
   4a83c:	003a3d06 	br	49134 <__alt_data_end+0xfffe2034>
   4a840:	d9c02785 	stb	r7,158(sp)
   4a844:	003aca06 	br	49370 <__alt_data_end+0xfffe2270>

0004a848 <__vfprintf_internal>:
   4a848:	008001b4 	movhi	r2,6
   4a84c:	10a1a804 	addi	r2,r2,-31072
   4a850:	300f883a 	mov	r7,r6
   4a854:	280d883a 	mov	r6,r5
   4a858:	200b883a 	mov	r5,r4
   4a85c:	11000017 	ldw	r4,0(r2)
   4a860:	00486501 	jmpi	48650 <___vfprintf_internal_r>

0004a864 <__sbprintf>:
   4a864:	2880030b 	ldhu	r2,12(r5)
   4a868:	2ac01917 	ldw	r11,100(r5)
   4a86c:	2a80038b 	ldhu	r10,14(r5)
   4a870:	2a400717 	ldw	r9,28(r5)
   4a874:	2a000917 	ldw	r8,36(r5)
   4a878:	defee204 	addi	sp,sp,-1144
   4a87c:	00c10004 	movi	r3,1024
   4a880:	dc011a15 	stw	r16,1128(sp)
   4a884:	10bfff4c 	andi	r2,r2,65533
   4a888:	2821883a 	mov	r16,r5
   4a88c:	d8cb883a 	add	r5,sp,r3
   4a890:	dc811c15 	stw	r18,1136(sp)
   4a894:	dc411b15 	stw	r17,1132(sp)
   4a898:	dfc11d15 	stw	ra,1140(sp)
   4a89c:	2025883a 	mov	r18,r4
   4a8a0:	d881030d 	sth	r2,1036(sp)
   4a8a4:	dac11915 	stw	r11,1124(sp)
   4a8a8:	da81038d 	sth	r10,1038(sp)
   4a8ac:	da410715 	stw	r9,1052(sp)
   4a8b0:	da010915 	stw	r8,1060(sp)
   4a8b4:	dec10015 	stw	sp,1024(sp)
   4a8b8:	dec10415 	stw	sp,1040(sp)
   4a8bc:	d8c10215 	stw	r3,1032(sp)
   4a8c0:	d8c10515 	stw	r3,1044(sp)
   4a8c4:	d8010615 	stw	zero,1048(sp)
   4a8c8:	00486500 	call	48650 <___vfprintf_internal_r>
   4a8cc:	1023883a 	mov	r17,r2
   4a8d0:	10000416 	blt	r2,zero,4a8e4 <__sbprintf+0x80>
   4a8d4:	d9410004 	addi	r5,sp,1024
   4a8d8:	9009883a 	mov	r4,r18
   4a8dc:	004c5cc0 	call	4c5cc <_fflush_r>
   4a8e0:	10000d1e 	bne	r2,zero,4a918 <__sbprintf+0xb4>
   4a8e4:	d881030b 	ldhu	r2,1036(sp)
   4a8e8:	1080100c 	andi	r2,r2,64
   4a8ec:	10000326 	beq	r2,zero,4a8fc <__sbprintf+0x98>
   4a8f0:	8080030b 	ldhu	r2,12(r16)
   4a8f4:	10801014 	ori	r2,r2,64
   4a8f8:	8080030d 	sth	r2,12(r16)
   4a8fc:	8805883a 	mov	r2,r17
   4a900:	dfc11d17 	ldw	ra,1140(sp)
   4a904:	dc811c17 	ldw	r18,1136(sp)
   4a908:	dc411b17 	ldw	r17,1132(sp)
   4a90c:	dc011a17 	ldw	r16,1128(sp)
   4a910:	dec11e04 	addi	sp,sp,1144
   4a914:	f800283a 	ret
   4a918:	047fffc4 	movi	r17,-1
   4a91c:	003ff106 	br	4a8e4 <__alt_data_end+0xfffe37e4>

0004a920 <_write_r>:
   4a920:	defffd04 	addi	sp,sp,-12
   4a924:	2805883a 	mov	r2,r5
   4a928:	dc000015 	stw	r16,0(sp)
   4a92c:	040001b4 	movhi	r16,6
   4a930:	dc400115 	stw	r17,4(sp)
   4a934:	300b883a 	mov	r5,r6
   4a938:	8428b704 	addi	r16,r16,-23844
   4a93c:	2023883a 	mov	r17,r4
   4a940:	380d883a 	mov	r6,r7
   4a944:	1009883a 	mov	r4,r2
   4a948:	dfc00215 	stw	ra,8(sp)
   4a94c:	80000015 	stw	zero,0(r16)
   4a950:	00525140 	call	52514 <write>
   4a954:	00ffffc4 	movi	r3,-1
   4a958:	10c00526 	beq	r2,r3,4a970 <_write_r+0x50>
   4a95c:	dfc00217 	ldw	ra,8(sp)
   4a960:	dc400117 	ldw	r17,4(sp)
   4a964:	dc000017 	ldw	r16,0(sp)
   4a968:	dec00304 	addi	sp,sp,12
   4a96c:	f800283a 	ret
   4a970:	80c00017 	ldw	r3,0(r16)
   4a974:	183ff926 	beq	r3,zero,4a95c <__alt_data_end+0xfffe385c>
   4a978:	88c00015 	stw	r3,0(r17)
   4a97c:	003ff706 	br	4a95c <__alt_data_end+0xfffe385c>

0004a980 <__swsetup_r>:
   4a980:	008001b4 	movhi	r2,6
   4a984:	defffd04 	addi	sp,sp,-12
   4a988:	10a1a804 	addi	r2,r2,-31072
   4a98c:	dc400115 	stw	r17,4(sp)
   4a990:	2023883a 	mov	r17,r4
   4a994:	11000017 	ldw	r4,0(r2)
   4a998:	dc000015 	stw	r16,0(sp)
   4a99c:	dfc00215 	stw	ra,8(sp)
   4a9a0:	2821883a 	mov	r16,r5
   4a9a4:	20000226 	beq	r4,zero,4a9b0 <__swsetup_r+0x30>
   4a9a8:	20800e17 	ldw	r2,56(r4)
   4a9ac:	10003126 	beq	r2,zero,4aa74 <__swsetup_r+0xf4>
   4a9b0:	8080030b 	ldhu	r2,12(r16)
   4a9b4:	10c0020c 	andi	r3,r2,8
   4a9b8:	1009883a 	mov	r4,r2
   4a9bc:	18000f26 	beq	r3,zero,4a9fc <__swsetup_r+0x7c>
   4a9c0:	80c00417 	ldw	r3,16(r16)
   4a9c4:	18001526 	beq	r3,zero,4aa1c <__swsetup_r+0x9c>
   4a9c8:	1100004c 	andi	r4,r2,1
   4a9cc:	20001c1e 	bne	r4,zero,4aa40 <__swsetup_r+0xc0>
   4a9d0:	1080008c 	andi	r2,r2,2
   4a9d4:	1000291e 	bne	r2,zero,4aa7c <__swsetup_r+0xfc>
   4a9d8:	80800517 	ldw	r2,20(r16)
   4a9dc:	80800215 	stw	r2,8(r16)
   4a9e0:	18001c26 	beq	r3,zero,4aa54 <__swsetup_r+0xd4>
   4a9e4:	0005883a 	mov	r2,zero
   4a9e8:	dfc00217 	ldw	ra,8(sp)
   4a9ec:	dc400117 	ldw	r17,4(sp)
   4a9f0:	dc000017 	ldw	r16,0(sp)
   4a9f4:	dec00304 	addi	sp,sp,12
   4a9f8:	f800283a 	ret
   4a9fc:	2080040c 	andi	r2,r4,16
   4aa00:	10002e26 	beq	r2,zero,4aabc <__swsetup_r+0x13c>
   4aa04:	2080010c 	andi	r2,r4,4
   4aa08:	10001e1e 	bne	r2,zero,4aa84 <__swsetup_r+0x104>
   4aa0c:	80c00417 	ldw	r3,16(r16)
   4aa10:	20800214 	ori	r2,r4,8
   4aa14:	8080030d 	sth	r2,12(r16)
   4aa18:	183feb1e 	bne	r3,zero,4a9c8 <__alt_data_end+0xfffe38c8>
   4aa1c:	1100a00c 	andi	r4,r2,640
   4aa20:	01408004 	movi	r5,512
   4aa24:	217fe826 	beq	r4,r5,4a9c8 <__alt_data_end+0xfffe38c8>
   4aa28:	800b883a 	mov	r5,r16
   4aa2c:	8809883a 	mov	r4,r17
   4aa30:	00475a80 	call	475a8 <__smakebuf_r>
   4aa34:	8080030b 	ldhu	r2,12(r16)
   4aa38:	80c00417 	ldw	r3,16(r16)
   4aa3c:	003fe206 	br	4a9c8 <__alt_data_end+0xfffe38c8>
   4aa40:	80800517 	ldw	r2,20(r16)
   4aa44:	80000215 	stw	zero,8(r16)
   4aa48:	0085c83a 	sub	r2,zero,r2
   4aa4c:	80800615 	stw	r2,24(r16)
   4aa50:	183fe41e 	bne	r3,zero,4a9e4 <__alt_data_end+0xfffe38e4>
   4aa54:	80c0030b 	ldhu	r3,12(r16)
   4aa58:	0005883a 	mov	r2,zero
   4aa5c:	1900200c 	andi	r4,r3,128
   4aa60:	203fe126 	beq	r4,zero,4a9e8 <__alt_data_end+0xfffe38e8>
   4aa64:	18c01014 	ori	r3,r3,64
   4aa68:	80c0030d 	sth	r3,12(r16)
   4aa6c:	00bfffc4 	movi	r2,-1
   4aa70:	003fdd06 	br	4a9e8 <__alt_data_end+0xfffe38e8>
   4aa74:	004c9a80 	call	4c9a8 <__sinit>
   4aa78:	003fcd06 	br	4a9b0 <__alt_data_end+0xfffe38b0>
   4aa7c:	0005883a 	mov	r2,zero
   4aa80:	003fd606 	br	4a9dc <__alt_data_end+0xfffe38dc>
   4aa84:	81400c17 	ldw	r5,48(r16)
   4aa88:	28000626 	beq	r5,zero,4aaa4 <__swsetup_r+0x124>
   4aa8c:	80801004 	addi	r2,r16,64
   4aa90:	28800326 	beq	r5,r2,4aaa0 <__swsetup_r+0x120>
   4aa94:	8809883a 	mov	r4,r17
   4aa98:	004cbc80 	call	4cbc8 <_free_r>
   4aa9c:	8100030b 	ldhu	r4,12(r16)
   4aaa0:	80000c15 	stw	zero,48(r16)
   4aaa4:	80c00417 	ldw	r3,16(r16)
   4aaa8:	00bff6c4 	movi	r2,-37
   4aaac:	1108703a 	and	r4,r2,r4
   4aab0:	80000115 	stw	zero,4(r16)
   4aab4:	80c00015 	stw	r3,0(r16)
   4aab8:	003fd506 	br	4aa10 <__alt_data_end+0xfffe3910>
   4aabc:	00800244 	movi	r2,9
   4aac0:	88800015 	stw	r2,0(r17)
   4aac4:	20801014 	ori	r2,r4,64
   4aac8:	8080030d 	sth	r2,12(r16)
   4aacc:	00bfffc4 	movi	r2,-1
   4aad0:	003fc506 	br	4a9e8 <__alt_data_end+0xfffe38e8>

0004aad4 <_close_r>:
   4aad4:	defffd04 	addi	sp,sp,-12
   4aad8:	dc000015 	stw	r16,0(sp)
   4aadc:	040001b4 	movhi	r16,6
   4aae0:	dc400115 	stw	r17,4(sp)
   4aae4:	8428b704 	addi	r16,r16,-23844
   4aae8:	2023883a 	mov	r17,r4
   4aaec:	2809883a 	mov	r4,r5
   4aaf0:	dfc00215 	stw	ra,8(sp)
   4aaf4:	80000015 	stw	zero,0(r16)
   4aaf8:	0051ab00 	call	51ab0 <close>
   4aafc:	00ffffc4 	movi	r3,-1
   4ab00:	10c00526 	beq	r2,r3,4ab18 <_close_r+0x44>
   4ab04:	dfc00217 	ldw	ra,8(sp)
   4ab08:	dc400117 	ldw	r17,4(sp)
   4ab0c:	dc000017 	ldw	r16,0(sp)
   4ab10:	dec00304 	addi	sp,sp,12
   4ab14:	f800283a 	ret
   4ab18:	80c00017 	ldw	r3,0(r16)
   4ab1c:	183ff926 	beq	r3,zero,4ab04 <__alt_data_end+0xfffe3a04>
   4ab20:	88c00015 	stw	r3,0(r17)
   4ab24:	003ff706 	br	4ab04 <__alt_data_end+0xfffe3a04>

0004ab28 <quorem>:
   4ab28:	defff704 	addi	sp,sp,-36
   4ab2c:	dc800215 	stw	r18,8(sp)
   4ab30:	20800417 	ldw	r2,16(r4)
   4ab34:	2c800417 	ldw	r18,16(r5)
   4ab38:	dfc00815 	stw	ra,32(sp)
   4ab3c:	ddc00715 	stw	r23,28(sp)
   4ab40:	dd800615 	stw	r22,24(sp)
   4ab44:	dd400515 	stw	r21,20(sp)
   4ab48:	dd000415 	stw	r20,16(sp)
   4ab4c:	dcc00315 	stw	r19,12(sp)
   4ab50:	dc400115 	stw	r17,4(sp)
   4ab54:	dc000015 	stw	r16,0(sp)
   4ab58:	14807116 	blt	r2,r18,4ad20 <quorem+0x1f8>
   4ab5c:	94bfffc4 	addi	r18,r18,-1
   4ab60:	94ad883a 	add	r22,r18,r18
   4ab64:	b5ad883a 	add	r22,r22,r22
   4ab68:	2c400504 	addi	r17,r5,20
   4ab6c:	8da9883a 	add	r20,r17,r22
   4ab70:	25400504 	addi	r21,r4,20
   4ab74:	282f883a 	mov	r23,r5
   4ab78:	adad883a 	add	r22,r21,r22
   4ab7c:	a1400017 	ldw	r5,0(r20)
   4ab80:	2021883a 	mov	r16,r4
   4ab84:	b1000017 	ldw	r4,0(r22)
   4ab88:	29400044 	addi	r5,r5,1
   4ab8c:	00432240 	call	43224 <__udivsi3>
   4ab90:	1027883a 	mov	r19,r2
   4ab94:	10002c26 	beq	r2,zero,4ac48 <quorem+0x120>
   4ab98:	a813883a 	mov	r9,r21
   4ab9c:	880b883a 	mov	r5,r17
   4aba0:	0009883a 	mov	r4,zero
   4aba4:	000d883a 	mov	r6,zero
   4aba8:	2a000017 	ldw	r8,0(r5)
   4abac:	49c00017 	ldw	r7,0(r9)
   4abb0:	29400104 	addi	r5,r5,4
   4abb4:	40bfffcc 	andi	r2,r8,65535
   4abb8:	14c5383a 	mul	r2,r2,r19
   4abbc:	4010d43a 	srli	r8,r8,16
   4abc0:	38ffffcc 	andi	r3,r7,65535
   4abc4:	1105883a 	add	r2,r2,r4
   4abc8:	1008d43a 	srli	r4,r2,16
   4abcc:	44d1383a 	mul	r8,r8,r19
   4abd0:	198d883a 	add	r6,r3,r6
   4abd4:	10ffffcc 	andi	r3,r2,65535
   4abd8:	30c7c83a 	sub	r3,r6,r3
   4abdc:	380ed43a 	srli	r7,r7,16
   4abe0:	4105883a 	add	r2,r8,r4
   4abe4:	180dd43a 	srai	r6,r3,16
   4abe8:	113fffcc 	andi	r4,r2,65535
   4abec:	390fc83a 	sub	r7,r7,r4
   4abf0:	398d883a 	add	r6,r7,r6
   4abf4:	300e943a 	slli	r7,r6,16
   4abf8:	18ffffcc 	andi	r3,r3,65535
   4abfc:	1008d43a 	srli	r4,r2,16
   4ac00:	38ceb03a 	or	r7,r7,r3
   4ac04:	49c00015 	stw	r7,0(r9)
   4ac08:	300dd43a 	srai	r6,r6,16
   4ac0c:	4a400104 	addi	r9,r9,4
   4ac10:	a17fe52e 	bgeu	r20,r5,4aba8 <__alt_data_end+0xfffe3aa8>
   4ac14:	b0800017 	ldw	r2,0(r22)
   4ac18:	10000b1e 	bne	r2,zero,4ac48 <quorem+0x120>
   4ac1c:	b0bfff04 	addi	r2,r22,-4
   4ac20:	a880082e 	bgeu	r21,r2,4ac44 <quorem+0x11c>
   4ac24:	b0ffff17 	ldw	r3,-4(r22)
   4ac28:	18000326 	beq	r3,zero,4ac38 <quorem+0x110>
   4ac2c:	00000506 	br	4ac44 <quorem+0x11c>
   4ac30:	10c00017 	ldw	r3,0(r2)
   4ac34:	1800031e 	bne	r3,zero,4ac44 <quorem+0x11c>
   4ac38:	10bfff04 	addi	r2,r2,-4
   4ac3c:	94bfffc4 	addi	r18,r18,-1
   4ac40:	a8bffb36 	bltu	r21,r2,4ac30 <__alt_data_end+0xfffe3b30>
   4ac44:	84800415 	stw	r18,16(r16)
   4ac48:	b80b883a 	mov	r5,r23
   4ac4c:	8009883a 	mov	r4,r16
   4ac50:	004e2fc0 	call	4e2fc <__mcmp>
   4ac54:	10002616 	blt	r2,zero,4acf0 <quorem+0x1c8>
   4ac58:	9cc00044 	addi	r19,r19,1
   4ac5c:	a805883a 	mov	r2,r21
   4ac60:	000b883a 	mov	r5,zero
   4ac64:	11000017 	ldw	r4,0(r2)
   4ac68:	89800017 	ldw	r6,0(r17)
   4ac6c:	10800104 	addi	r2,r2,4
   4ac70:	20ffffcc 	andi	r3,r4,65535
   4ac74:	194b883a 	add	r5,r3,r5
   4ac78:	30ffffcc 	andi	r3,r6,65535
   4ac7c:	28c7c83a 	sub	r3,r5,r3
   4ac80:	300cd43a 	srli	r6,r6,16
   4ac84:	2008d43a 	srli	r4,r4,16
   4ac88:	180bd43a 	srai	r5,r3,16
   4ac8c:	18ffffcc 	andi	r3,r3,65535
   4ac90:	2189c83a 	sub	r4,r4,r6
   4ac94:	2149883a 	add	r4,r4,r5
   4ac98:	200c943a 	slli	r6,r4,16
   4ac9c:	8c400104 	addi	r17,r17,4
   4aca0:	200bd43a 	srai	r5,r4,16
   4aca4:	30c6b03a 	or	r3,r6,r3
   4aca8:	10ffff15 	stw	r3,-4(r2)
   4acac:	a47fed2e 	bgeu	r20,r17,4ac64 <__alt_data_end+0xfffe3b64>
   4acb0:	9485883a 	add	r2,r18,r18
   4acb4:	1085883a 	add	r2,r2,r2
   4acb8:	a887883a 	add	r3,r21,r2
   4acbc:	18800017 	ldw	r2,0(r3)
   4acc0:	10000b1e 	bne	r2,zero,4acf0 <quorem+0x1c8>
   4acc4:	18bfff04 	addi	r2,r3,-4
   4acc8:	a880082e 	bgeu	r21,r2,4acec <quorem+0x1c4>
   4accc:	18ffff17 	ldw	r3,-4(r3)
   4acd0:	18000326 	beq	r3,zero,4ace0 <quorem+0x1b8>
   4acd4:	00000506 	br	4acec <quorem+0x1c4>
   4acd8:	10c00017 	ldw	r3,0(r2)
   4acdc:	1800031e 	bne	r3,zero,4acec <quorem+0x1c4>
   4ace0:	10bfff04 	addi	r2,r2,-4
   4ace4:	94bfffc4 	addi	r18,r18,-1
   4ace8:	a8bffb36 	bltu	r21,r2,4acd8 <__alt_data_end+0xfffe3bd8>
   4acec:	84800415 	stw	r18,16(r16)
   4acf0:	9805883a 	mov	r2,r19
   4acf4:	dfc00817 	ldw	ra,32(sp)
   4acf8:	ddc00717 	ldw	r23,28(sp)
   4acfc:	dd800617 	ldw	r22,24(sp)
   4ad00:	dd400517 	ldw	r21,20(sp)
   4ad04:	dd000417 	ldw	r20,16(sp)
   4ad08:	dcc00317 	ldw	r19,12(sp)
   4ad0c:	dc800217 	ldw	r18,8(sp)
   4ad10:	dc400117 	ldw	r17,4(sp)
   4ad14:	dc000017 	ldw	r16,0(sp)
   4ad18:	dec00904 	addi	sp,sp,36
   4ad1c:	f800283a 	ret
   4ad20:	0005883a 	mov	r2,zero
   4ad24:	003ff306 	br	4acf4 <__alt_data_end+0xfffe3bf4>

0004ad28 <_dtoa_r>:
   4ad28:	20801017 	ldw	r2,64(r4)
   4ad2c:	deffde04 	addi	sp,sp,-136
   4ad30:	df002015 	stw	fp,128(sp)
   4ad34:	dcc01b15 	stw	r19,108(sp)
   4ad38:	dc801a15 	stw	r18,104(sp)
   4ad3c:	dc401915 	stw	r17,100(sp)
   4ad40:	dc001815 	stw	r16,96(sp)
   4ad44:	dfc02115 	stw	ra,132(sp)
   4ad48:	ddc01f15 	stw	r23,124(sp)
   4ad4c:	dd801e15 	stw	r22,120(sp)
   4ad50:	dd401d15 	stw	r21,116(sp)
   4ad54:	dd001c15 	stw	r20,112(sp)
   4ad58:	d9c00315 	stw	r7,12(sp)
   4ad5c:	2039883a 	mov	fp,r4
   4ad60:	3023883a 	mov	r17,r6
   4ad64:	2825883a 	mov	r18,r5
   4ad68:	dc002417 	ldw	r16,144(sp)
   4ad6c:	3027883a 	mov	r19,r6
   4ad70:	10000826 	beq	r2,zero,4ad94 <_dtoa_r+0x6c>
   4ad74:	21801117 	ldw	r6,68(r4)
   4ad78:	00c00044 	movi	r3,1
   4ad7c:	100b883a 	mov	r5,r2
   4ad80:	1986983a 	sll	r3,r3,r6
   4ad84:	11800115 	stw	r6,4(r2)
   4ad88:	10c00215 	stw	r3,8(r2)
   4ad8c:	004dadc0 	call	4dadc <_Bfree>
   4ad90:	e0001015 	stw	zero,64(fp)
   4ad94:	88002e16 	blt	r17,zero,4ae50 <_dtoa_r+0x128>
   4ad98:	80000015 	stw	zero,0(r16)
   4ad9c:	889ffc2c 	andhi	r2,r17,32752
   4ada0:	00dffc34 	movhi	r3,32752
   4ada4:	10c01c26 	beq	r2,r3,4ae18 <_dtoa_r+0xf0>
   4ada8:	000d883a 	mov	r6,zero
   4adac:	000f883a 	mov	r7,zero
   4adb0:	9009883a 	mov	r4,r18
   4adb4:	980b883a 	mov	r5,r19
   4adb8:	00459740 	call	45974 <__eqdf2>
   4adbc:	10002b1e 	bne	r2,zero,4ae6c <_dtoa_r+0x144>
   4adc0:	d9c02317 	ldw	r7,140(sp)
   4adc4:	00800044 	movi	r2,1
   4adc8:	38800015 	stw	r2,0(r7)
   4adcc:	d8802517 	ldw	r2,148(sp)
   4add0:	10019e26 	beq	r2,zero,4b44c <_dtoa_r+0x724>
   4add4:	d8c02517 	ldw	r3,148(sp)
   4add8:	00800174 	movhi	r2,5
   4addc:	109a6544 	addi	r2,r2,27029
   4ade0:	18800015 	stw	r2,0(r3)
   4ade4:	10bfffc4 	addi	r2,r2,-1
   4ade8:	dfc02117 	ldw	ra,132(sp)
   4adec:	df002017 	ldw	fp,128(sp)
   4adf0:	ddc01f17 	ldw	r23,124(sp)
   4adf4:	dd801e17 	ldw	r22,120(sp)
   4adf8:	dd401d17 	ldw	r21,116(sp)
   4adfc:	dd001c17 	ldw	r20,112(sp)
   4ae00:	dcc01b17 	ldw	r19,108(sp)
   4ae04:	dc801a17 	ldw	r18,104(sp)
   4ae08:	dc401917 	ldw	r17,100(sp)
   4ae0c:	dc001817 	ldw	r16,96(sp)
   4ae10:	dec02204 	addi	sp,sp,136
   4ae14:	f800283a 	ret
   4ae18:	d8c02317 	ldw	r3,140(sp)
   4ae1c:	0089c3c4 	movi	r2,9999
   4ae20:	18800015 	stw	r2,0(r3)
   4ae24:	90017726 	beq	r18,zero,4b404 <_dtoa_r+0x6dc>
   4ae28:	00800174 	movhi	r2,5
   4ae2c:	109a7104 	addi	r2,r2,27076
   4ae30:	d9002517 	ldw	r4,148(sp)
   4ae34:	203fec26 	beq	r4,zero,4ade8 <__alt_data_end+0xfffe3ce8>
   4ae38:	10c000c7 	ldb	r3,3(r2)
   4ae3c:	1801781e 	bne	r3,zero,4b420 <_dtoa_r+0x6f8>
   4ae40:	10c000c4 	addi	r3,r2,3
   4ae44:	d9802517 	ldw	r6,148(sp)
   4ae48:	30c00015 	stw	r3,0(r6)
   4ae4c:	003fe606 	br	4ade8 <__alt_data_end+0xfffe3ce8>
   4ae50:	04e00034 	movhi	r19,32768
   4ae54:	9cffffc4 	addi	r19,r19,-1
   4ae58:	00800044 	movi	r2,1
   4ae5c:	8ce6703a 	and	r19,r17,r19
   4ae60:	80800015 	stw	r2,0(r16)
   4ae64:	9823883a 	mov	r17,r19
   4ae68:	003fcc06 	br	4ad9c <__alt_data_end+0xfffe3c9c>
   4ae6c:	d8800204 	addi	r2,sp,8
   4ae70:	d8800015 	stw	r2,0(sp)
   4ae74:	d9c00104 	addi	r7,sp,4
   4ae78:	900b883a 	mov	r5,r18
   4ae7c:	980d883a 	mov	r6,r19
   4ae80:	e009883a 	mov	r4,fp
   4ae84:	8820d53a 	srli	r16,r17,20
   4ae88:	004e6c80 	call	4e6c8 <__d2b>
   4ae8c:	d8800915 	stw	r2,36(sp)
   4ae90:	8001651e 	bne	r16,zero,4b428 <_dtoa_r+0x700>
   4ae94:	dd800217 	ldw	r22,8(sp)
   4ae98:	dc000117 	ldw	r16,4(sp)
   4ae9c:	00800804 	movi	r2,32
   4aea0:	b421883a 	add	r16,r22,r16
   4aea4:	80c10c84 	addi	r3,r16,1074
   4aea8:	10c2d10e 	bge	r2,r3,4b9f0 <_dtoa_r+0xcc8>
   4aeac:	00801004 	movi	r2,64
   4aeb0:	81010484 	addi	r4,r16,1042
   4aeb4:	10c7c83a 	sub	r3,r2,r3
   4aeb8:	9108d83a 	srl	r4,r18,r4
   4aebc:	88e2983a 	sll	r17,r17,r3
   4aec0:	2448b03a 	or	r4,r4,r17
   4aec4:	00519cc0 	call	519cc <__floatunsidf>
   4aec8:	017f8434 	movhi	r5,65040
   4aecc:	01800044 	movi	r6,1
   4aed0:	1009883a 	mov	r4,r2
   4aed4:	194b883a 	add	r5,r3,r5
   4aed8:	843fffc4 	addi	r16,r16,-1
   4aedc:	d9801115 	stw	r6,68(sp)
   4aee0:	000d883a 	mov	r6,zero
   4aee4:	01cffe34 	movhi	r7,16376
   4aee8:	00461f00 	call	461f0 <__subdf3>
   4aeec:	0198dbf4 	movhi	r6,25455
   4aef0:	01cff4f4 	movhi	r7,16339
   4aef4:	3190d844 	addi	r6,r6,17249
   4aef8:	39e1e9c4 	addi	r7,r7,-30809
   4aefc:	1009883a 	mov	r4,r2
   4af00:	180b883a 	mov	r5,r3
   4af04:	0045ad80 	call	45ad8 <__muldf3>
   4af08:	01a2d874 	movhi	r6,35681
   4af0c:	01cff1f4 	movhi	r7,16327
   4af10:	31b22cc4 	addi	r6,r6,-14157
   4af14:	39e28a04 	addi	r7,r7,-30168
   4af18:	180b883a 	mov	r5,r3
   4af1c:	1009883a 	mov	r4,r2
   4af20:	00447e00 	call	447e0 <__adddf3>
   4af24:	8009883a 	mov	r4,r16
   4af28:	1029883a 	mov	r20,r2
   4af2c:	1823883a 	mov	r17,r3
   4af30:	0046b6c0 	call	46b6c <__floatsidf>
   4af34:	019427f4 	movhi	r6,20639
   4af38:	01cff4f4 	movhi	r7,16339
   4af3c:	319e7ec4 	addi	r6,r6,31227
   4af40:	39d104c4 	addi	r7,r7,17427
   4af44:	1009883a 	mov	r4,r2
   4af48:	180b883a 	mov	r5,r3
   4af4c:	0045ad80 	call	45ad8 <__muldf3>
   4af50:	100d883a 	mov	r6,r2
   4af54:	180f883a 	mov	r7,r3
   4af58:	a009883a 	mov	r4,r20
   4af5c:	880b883a 	mov	r5,r17
   4af60:	00447e00 	call	447e0 <__adddf3>
   4af64:	1009883a 	mov	r4,r2
   4af68:	180b883a 	mov	r5,r3
   4af6c:	1029883a 	mov	r20,r2
   4af70:	1823883a 	mov	r17,r3
   4af74:	0046aec0 	call	46aec <__fixdfsi>
   4af78:	000d883a 	mov	r6,zero
   4af7c:	000f883a 	mov	r7,zero
   4af80:	a009883a 	mov	r4,r20
   4af84:	880b883a 	mov	r5,r17
   4af88:	d8800515 	stw	r2,20(sp)
   4af8c:	00518d80 	call	518d8 <__ledf2>
   4af90:	10028716 	blt	r2,zero,4b9b0 <_dtoa_r+0xc88>
   4af94:	d8c00517 	ldw	r3,20(sp)
   4af98:	00800584 	movi	r2,22
   4af9c:	10c27536 	bltu	r2,r3,4b974 <_dtoa_r+0xc4c>
   4afa0:	180490fa 	slli	r2,r3,3
   4afa4:	00c00174 	movhi	r3,5
   4afa8:	18da8c04 	addi	r3,r3,27184
   4afac:	1885883a 	add	r2,r3,r2
   4afb0:	11000017 	ldw	r4,0(r2)
   4afb4:	11400117 	ldw	r5,4(r2)
   4afb8:	900d883a 	mov	r6,r18
   4afbc:	980f883a 	mov	r7,r19
   4afc0:	00459fc0 	call	459fc <__gedf2>
   4afc4:	00828d0e 	bge	zero,r2,4b9fc <_dtoa_r+0xcd4>
   4afc8:	d9000517 	ldw	r4,20(sp)
   4afcc:	d8000e15 	stw	zero,56(sp)
   4afd0:	213fffc4 	addi	r4,r4,-1
   4afd4:	d9000515 	stw	r4,20(sp)
   4afd8:	b42dc83a 	sub	r22,r22,r16
   4afdc:	b5bfffc4 	addi	r22,r22,-1
   4afe0:	b0026f16 	blt	r22,zero,4b9a0 <_dtoa_r+0xc78>
   4afe4:	d8000815 	stw	zero,32(sp)
   4afe8:	d9c00517 	ldw	r7,20(sp)
   4afec:	38026416 	blt	r7,zero,4b980 <_dtoa_r+0xc58>
   4aff0:	b1ed883a 	add	r22,r22,r7
   4aff4:	d9c00d15 	stw	r7,52(sp)
   4aff8:	d8000a15 	stw	zero,40(sp)
   4affc:	d9800317 	ldw	r6,12(sp)
   4b000:	00800244 	movi	r2,9
   4b004:	11811436 	bltu	r2,r6,4b458 <_dtoa_r+0x730>
   4b008:	00800144 	movi	r2,5
   4b00c:	1184e10e 	bge	r2,r6,4c394 <_dtoa_r+0x166c>
   4b010:	31bfff04 	addi	r6,r6,-4
   4b014:	d9800315 	stw	r6,12(sp)
   4b018:	0023883a 	mov	r17,zero
   4b01c:	d9800317 	ldw	r6,12(sp)
   4b020:	008000c4 	movi	r2,3
   4b024:	30836726 	beq	r6,r2,4bdc4 <_dtoa_r+0x109c>
   4b028:	1183410e 	bge	r2,r6,4bd30 <_dtoa_r+0x1008>
   4b02c:	d9c00317 	ldw	r7,12(sp)
   4b030:	00800104 	movi	r2,4
   4b034:	38827c26 	beq	r7,r2,4ba28 <_dtoa_r+0xd00>
   4b038:	00800144 	movi	r2,5
   4b03c:	3884c41e 	bne	r7,r2,4c350 <_dtoa_r+0x1628>
   4b040:	00800044 	movi	r2,1
   4b044:	d8800b15 	stw	r2,44(sp)
   4b048:	d8c00517 	ldw	r3,20(sp)
   4b04c:	d9002217 	ldw	r4,136(sp)
   4b050:	1907883a 	add	r3,r3,r4
   4b054:	19800044 	addi	r6,r3,1
   4b058:	d8c00c15 	stw	r3,48(sp)
   4b05c:	d9800615 	stw	r6,24(sp)
   4b060:	0183a40e 	bge	zero,r6,4bef4 <_dtoa_r+0x11cc>
   4b064:	d9800617 	ldw	r6,24(sp)
   4b068:	3021883a 	mov	r16,r6
   4b06c:	e0001115 	stw	zero,68(fp)
   4b070:	008005c4 	movi	r2,23
   4b074:	1184c92e 	bgeu	r2,r6,4c39c <_dtoa_r+0x1674>
   4b078:	00c00044 	movi	r3,1
   4b07c:	00800104 	movi	r2,4
   4b080:	1085883a 	add	r2,r2,r2
   4b084:	11000504 	addi	r4,r2,20
   4b088:	180b883a 	mov	r5,r3
   4b08c:	18c00044 	addi	r3,r3,1
   4b090:	313ffb2e 	bgeu	r6,r4,4b080 <__alt_data_end+0xfffe3f80>
   4b094:	e1401115 	stw	r5,68(fp)
   4b098:	e009883a 	mov	r4,fp
   4b09c:	004da340 	call	4da34 <_Balloc>
   4b0a0:	d8800715 	stw	r2,28(sp)
   4b0a4:	e0801015 	stw	r2,64(fp)
   4b0a8:	00800384 	movi	r2,14
   4b0ac:	1400f736 	bltu	r2,r16,4b48c <_dtoa_r+0x764>
   4b0b0:	8800f626 	beq	r17,zero,4b48c <_dtoa_r+0x764>
   4b0b4:	d9c00517 	ldw	r7,20(sp)
   4b0b8:	01c39a0e 	bge	zero,r7,4bf24 <_dtoa_r+0x11fc>
   4b0bc:	388003cc 	andi	r2,r7,15
   4b0c0:	100490fa 	slli	r2,r2,3
   4b0c4:	382bd13a 	srai	r21,r7,4
   4b0c8:	00c00174 	movhi	r3,5
   4b0cc:	18da8c04 	addi	r3,r3,27184
   4b0d0:	1885883a 	add	r2,r3,r2
   4b0d4:	a8c0040c 	andi	r3,r21,16
   4b0d8:	12400017 	ldw	r9,0(r2)
   4b0dc:	12000117 	ldw	r8,4(r2)
   4b0e0:	18037926 	beq	r3,zero,4bec8 <_dtoa_r+0x11a0>
   4b0e4:	00800174 	movhi	r2,5
   4b0e8:	109a8204 	addi	r2,r2,27144
   4b0ec:	11800817 	ldw	r6,32(r2)
   4b0f0:	11c00917 	ldw	r7,36(r2)
   4b0f4:	9009883a 	mov	r4,r18
   4b0f8:	980b883a 	mov	r5,r19
   4b0fc:	da001715 	stw	r8,92(sp)
   4b100:	da401615 	stw	r9,88(sp)
   4b104:	004508c0 	call	4508c <__divdf3>
   4b108:	da001717 	ldw	r8,92(sp)
   4b10c:	da401617 	ldw	r9,88(sp)
   4b110:	ad4003cc 	andi	r21,r21,15
   4b114:	040000c4 	movi	r16,3
   4b118:	1023883a 	mov	r17,r2
   4b11c:	1829883a 	mov	r20,r3
   4b120:	a8001126 	beq	r21,zero,4b168 <_dtoa_r+0x440>
   4b124:	05c00174 	movhi	r23,5
   4b128:	bdda8204 	addi	r23,r23,27144
   4b12c:	4805883a 	mov	r2,r9
   4b130:	4007883a 	mov	r3,r8
   4b134:	a980004c 	andi	r6,r21,1
   4b138:	1009883a 	mov	r4,r2
   4b13c:	a82bd07a 	srai	r21,r21,1
   4b140:	180b883a 	mov	r5,r3
   4b144:	30000426 	beq	r6,zero,4b158 <_dtoa_r+0x430>
   4b148:	b9800017 	ldw	r6,0(r23)
   4b14c:	b9c00117 	ldw	r7,4(r23)
   4b150:	84000044 	addi	r16,r16,1
   4b154:	0045ad80 	call	45ad8 <__muldf3>
   4b158:	bdc00204 	addi	r23,r23,8
   4b15c:	a83ff51e 	bne	r21,zero,4b134 <__alt_data_end+0xfffe4034>
   4b160:	1013883a 	mov	r9,r2
   4b164:	1811883a 	mov	r8,r3
   4b168:	480d883a 	mov	r6,r9
   4b16c:	400f883a 	mov	r7,r8
   4b170:	8809883a 	mov	r4,r17
   4b174:	a00b883a 	mov	r5,r20
   4b178:	004508c0 	call	4508c <__divdf3>
   4b17c:	d8800f15 	stw	r2,60(sp)
   4b180:	d8c01015 	stw	r3,64(sp)
   4b184:	d8c00e17 	ldw	r3,56(sp)
   4b188:	18000626 	beq	r3,zero,4b1a4 <_dtoa_r+0x47c>
   4b18c:	d9000f17 	ldw	r4,60(sp)
   4b190:	d9401017 	ldw	r5,64(sp)
   4b194:	000d883a 	mov	r6,zero
   4b198:	01cffc34 	movhi	r7,16368
   4b19c:	00518d80 	call	518d8 <__ledf2>
   4b1a0:	10040b16 	blt	r2,zero,4c1d0 <_dtoa_r+0x14a8>
   4b1a4:	8009883a 	mov	r4,r16
   4b1a8:	0046b6c0 	call	46b6c <__floatsidf>
   4b1ac:	d9800f17 	ldw	r6,60(sp)
   4b1b0:	d9c01017 	ldw	r7,64(sp)
   4b1b4:	1009883a 	mov	r4,r2
   4b1b8:	180b883a 	mov	r5,r3
   4b1bc:	0045ad80 	call	45ad8 <__muldf3>
   4b1c0:	000d883a 	mov	r6,zero
   4b1c4:	01d00734 	movhi	r7,16412
   4b1c8:	1009883a 	mov	r4,r2
   4b1cc:	180b883a 	mov	r5,r3
   4b1d0:	00447e00 	call	447e0 <__adddf3>
   4b1d4:	1021883a 	mov	r16,r2
   4b1d8:	d8800617 	ldw	r2,24(sp)
   4b1dc:	047f3034 	movhi	r17,64704
   4b1e0:	1c63883a 	add	r17,r3,r17
   4b1e4:	10031826 	beq	r2,zero,4be48 <_dtoa_r+0x1120>
   4b1e8:	d8c00517 	ldw	r3,20(sp)
   4b1ec:	db000617 	ldw	r12,24(sp)
   4b1f0:	d8c01315 	stw	r3,76(sp)
   4b1f4:	d9000b17 	ldw	r4,44(sp)
   4b1f8:	20038f26 	beq	r4,zero,4c038 <_dtoa_r+0x1310>
   4b1fc:	60bfffc4 	addi	r2,r12,-1
   4b200:	100490fa 	slli	r2,r2,3
   4b204:	00c00174 	movhi	r3,5
   4b208:	18da8c04 	addi	r3,r3,27184
   4b20c:	1885883a 	add	r2,r3,r2
   4b210:	11800017 	ldw	r6,0(r2)
   4b214:	11c00117 	ldw	r7,4(r2)
   4b218:	d8800717 	ldw	r2,28(sp)
   4b21c:	0009883a 	mov	r4,zero
   4b220:	014ff834 	movhi	r5,16352
   4b224:	db001615 	stw	r12,88(sp)
   4b228:	15c00044 	addi	r23,r2,1
   4b22c:	004508c0 	call	4508c <__divdf3>
   4b230:	800d883a 	mov	r6,r16
   4b234:	880f883a 	mov	r7,r17
   4b238:	1009883a 	mov	r4,r2
   4b23c:	180b883a 	mov	r5,r3
   4b240:	00461f00 	call	461f0 <__subdf3>
   4b244:	d9401017 	ldw	r5,64(sp)
   4b248:	d9000f17 	ldw	r4,60(sp)
   4b24c:	102b883a 	mov	r21,r2
   4b250:	d8c01215 	stw	r3,72(sp)
   4b254:	0046aec0 	call	46aec <__fixdfsi>
   4b258:	1009883a 	mov	r4,r2
   4b25c:	1029883a 	mov	r20,r2
   4b260:	0046b6c0 	call	46b6c <__floatsidf>
   4b264:	d9000f17 	ldw	r4,60(sp)
   4b268:	d9401017 	ldw	r5,64(sp)
   4b26c:	100d883a 	mov	r6,r2
   4b270:	180f883a 	mov	r7,r3
   4b274:	00461f00 	call	461f0 <__subdf3>
   4b278:	1823883a 	mov	r17,r3
   4b27c:	d8c00717 	ldw	r3,28(sp)
   4b280:	d9401217 	ldw	r5,72(sp)
   4b284:	a2000c04 	addi	r8,r20,48
   4b288:	1021883a 	mov	r16,r2
   4b28c:	1a000005 	stb	r8,0(r3)
   4b290:	800d883a 	mov	r6,r16
   4b294:	880f883a 	mov	r7,r17
   4b298:	a809883a 	mov	r4,r21
   4b29c:	4029883a 	mov	r20,r8
   4b2a0:	00459fc0 	call	459fc <__gedf2>
   4b2a4:	00841d16 	blt	zero,r2,4c31c <_dtoa_r+0x15f4>
   4b2a8:	800d883a 	mov	r6,r16
   4b2ac:	880f883a 	mov	r7,r17
   4b2b0:	0009883a 	mov	r4,zero
   4b2b4:	014ffc34 	movhi	r5,16368
   4b2b8:	00461f00 	call	461f0 <__subdf3>
   4b2bc:	d9401217 	ldw	r5,72(sp)
   4b2c0:	100d883a 	mov	r6,r2
   4b2c4:	180f883a 	mov	r7,r3
   4b2c8:	a809883a 	mov	r4,r21
   4b2cc:	00459fc0 	call	459fc <__gedf2>
   4b2d0:	db001617 	ldw	r12,88(sp)
   4b2d4:	00840e16 	blt	zero,r2,4c310 <_dtoa_r+0x15e8>
   4b2d8:	00800044 	movi	r2,1
   4b2dc:	13006b0e 	bge	r2,r12,4b48c <_dtoa_r+0x764>
   4b2e0:	d9000717 	ldw	r4,28(sp)
   4b2e4:	dd800f15 	stw	r22,60(sp)
   4b2e8:	dcc01015 	stw	r19,64(sp)
   4b2ec:	2319883a 	add	r12,r4,r12
   4b2f0:	dcc01217 	ldw	r19,72(sp)
   4b2f4:	602d883a 	mov	r22,r12
   4b2f8:	dc801215 	stw	r18,72(sp)
   4b2fc:	b825883a 	mov	r18,r23
   4b300:	00000906 	br	4b328 <_dtoa_r+0x600>
   4b304:	00461f00 	call	461f0 <__subdf3>
   4b308:	a80d883a 	mov	r6,r21
   4b30c:	980f883a 	mov	r7,r19
   4b310:	1009883a 	mov	r4,r2
   4b314:	180b883a 	mov	r5,r3
   4b318:	00518d80 	call	518d8 <__ledf2>
   4b31c:	1003e816 	blt	r2,zero,4c2c0 <_dtoa_r+0x1598>
   4b320:	b825883a 	mov	r18,r23
   4b324:	bd83e926 	beq	r23,r22,4c2cc <_dtoa_r+0x15a4>
   4b328:	a809883a 	mov	r4,r21
   4b32c:	980b883a 	mov	r5,r19
   4b330:	000d883a 	mov	r6,zero
   4b334:	01d00934 	movhi	r7,16420
   4b338:	0045ad80 	call	45ad8 <__muldf3>
   4b33c:	000d883a 	mov	r6,zero
   4b340:	01d00934 	movhi	r7,16420
   4b344:	8009883a 	mov	r4,r16
   4b348:	880b883a 	mov	r5,r17
   4b34c:	102b883a 	mov	r21,r2
   4b350:	1827883a 	mov	r19,r3
   4b354:	0045ad80 	call	45ad8 <__muldf3>
   4b358:	180b883a 	mov	r5,r3
   4b35c:	1009883a 	mov	r4,r2
   4b360:	1821883a 	mov	r16,r3
   4b364:	1023883a 	mov	r17,r2
   4b368:	0046aec0 	call	46aec <__fixdfsi>
   4b36c:	1009883a 	mov	r4,r2
   4b370:	1029883a 	mov	r20,r2
   4b374:	0046b6c0 	call	46b6c <__floatsidf>
   4b378:	8809883a 	mov	r4,r17
   4b37c:	800b883a 	mov	r5,r16
   4b380:	100d883a 	mov	r6,r2
   4b384:	180f883a 	mov	r7,r3
   4b388:	00461f00 	call	461f0 <__subdf3>
   4b38c:	a5000c04 	addi	r20,r20,48
   4b390:	a80d883a 	mov	r6,r21
   4b394:	980f883a 	mov	r7,r19
   4b398:	1009883a 	mov	r4,r2
   4b39c:	180b883a 	mov	r5,r3
   4b3a0:	95000005 	stb	r20,0(r18)
   4b3a4:	1021883a 	mov	r16,r2
   4b3a8:	1823883a 	mov	r17,r3
   4b3ac:	00518d80 	call	518d8 <__ledf2>
   4b3b0:	bdc00044 	addi	r23,r23,1
   4b3b4:	800d883a 	mov	r6,r16
   4b3b8:	880f883a 	mov	r7,r17
   4b3bc:	0009883a 	mov	r4,zero
   4b3c0:	014ffc34 	movhi	r5,16368
   4b3c4:	103fcf0e 	bge	r2,zero,4b304 <__alt_data_end+0xfffe4204>
   4b3c8:	d8c01317 	ldw	r3,76(sp)
   4b3cc:	d8c00515 	stw	r3,20(sp)
   4b3d0:	d9400917 	ldw	r5,36(sp)
   4b3d4:	e009883a 	mov	r4,fp
   4b3d8:	004dadc0 	call	4dadc <_Bfree>
   4b3dc:	d9000517 	ldw	r4,20(sp)
   4b3e0:	d9802317 	ldw	r6,140(sp)
   4b3e4:	d9c02517 	ldw	r7,148(sp)
   4b3e8:	b8000005 	stb	zero,0(r23)
   4b3ec:	20800044 	addi	r2,r4,1
   4b3f0:	30800015 	stw	r2,0(r6)
   4b3f4:	3802aa26 	beq	r7,zero,4bea0 <_dtoa_r+0x1178>
   4b3f8:	3dc00015 	stw	r23,0(r7)
   4b3fc:	d8800717 	ldw	r2,28(sp)
   4b400:	003e7906 	br	4ade8 <__alt_data_end+0xfffe3ce8>
   4b404:	00800434 	movhi	r2,16
   4b408:	10bfffc4 	addi	r2,r2,-1
   4b40c:	88a2703a 	and	r17,r17,r2
   4b410:	883e851e 	bne	r17,zero,4ae28 <__alt_data_end+0xfffe3d28>
   4b414:	00800174 	movhi	r2,5
   4b418:	109a6e04 	addi	r2,r2,27064
   4b41c:	003e8406 	br	4ae30 <__alt_data_end+0xfffe3d30>
   4b420:	10c00204 	addi	r3,r2,8
   4b424:	003e8706 	br	4ae44 <__alt_data_end+0xfffe3d44>
   4b428:	01400434 	movhi	r5,16
   4b42c:	297fffc4 	addi	r5,r5,-1
   4b430:	994a703a 	and	r5,r19,r5
   4b434:	9009883a 	mov	r4,r18
   4b438:	843f0044 	addi	r16,r16,-1023
   4b43c:	294ffc34 	orhi	r5,r5,16368
   4b440:	dd800217 	ldw	r22,8(sp)
   4b444:	d8001115 	stw	zero,68(sp)
   4b448:	003ea506 	br	4aee0 <__alt_data_end+0xfffe3de0>
   4b44c:	00800174 	movhi	r2,5
   4b450:	109a6504 	addi	r2,r2,27028
   4b454:	003e6406 	br	4ade8 <__alt_data_end+0xfffe3ce8>
   4b458:	e0001115 	stw	zero,68(fp)
   4b45c:	000b883a 	mov	r5,zero
   4b460:	e009883a 	mov	r4,fp
   4b464:	004da340 	call	4da34 <_Balloc>
   4b468:	01bfffc4 	movi	r6,-1
   4b46c:	01c00044 	movi	r7,1
   4b470:	d8800715 	stw	r2,28(sp)
   4b474:	d9800c15 	stw	r6,48(sp)
   4b478:	e0801015 	stw	r2,64(fp)
   4b47c:	d8000315 	stw	zero,12(sp)
   4b480:	d9c00b15 	stw	r7,44(sp)
   4b484:	d9800615 	stw	r6,24(sp)
   4b488:	d8002215 	stw	zero,136(sp)
   4b48c:	d8800117 	ldw	r2,4(sp)
   4b490:	10008916 	blt	r2,zero,4b6b8 <_dtoa_r+0x990>
   4b494:	d9000517 	ldw	r4,20(sp)
   4b498:	00c00384 	movi	r3,14
   4b49c:	19008616 	blt	r3,r4,4b6b8 <_dtoa_r+0x990>
   4b4a0:	200490fa 	slli	r2,r4,3
   4b4a4:	00c00174 	movhi	r3,5
   4b4a8:	d9802217 	ldw	r6,136(sp)
   4b4ac:	18da8c04 	addi	r3,r3,27184
   4b4b0:	1885883a 	add	r2,r3,r2
   4b4b4:	14000017 	ldw	r16,0(r2)
   4b4b8:	14400117 	ldw	r17,4(r2)
   4b4bc:	30016316 	blt	r6,zero,4ba4c <_dtoa_r+0xd24>
   4b4c0:	800d883a 	mov	r6,r16
   4b4c4:	880f883a 	mov	r7,r17
   4b4c8:	9009883a 	mov	r4,r18
   4b4cc:	980b883a 	mov	r5,r19
   4b4d0:	004508c0 	call	4508c <__divdf3>
   4b4d4:	180b883a 	mov	r5,r3
   4b4d8:	1009883a 	mov	r4,r2
   4b4dc:	0046aec0 	call	46aec <__fixdfsi>
   4b4e0:	1009883a 	mov	r4,r2
   4b4e4:	102b883a 	mov	r21,r2
   4b4e8:	0046b6c0 	call	46b6c <__floatsidf>
   4b4ec:	800d883a 	mov	r6,r16
   4b4f0:	880f883a 	mov	r7,r17
   4b4f4:	1009883a 	mov	r4,r2
   4b4f8:	180b883a 	mov	r5,r3
   4b4fc:	0045ad80 	call	45ad8 <__muldf3>
   4b500:	100d883a 	mov	r6,r2
   4b504:	180f883a 	mov	r7,r3
   4b508:	9009883a 	mov	r4,r18
   4b50c:	980b883a 	mov	r5,r19
   4b510:	00461f00 	call	461f0 <__subdf3>
   4b514:	d9c00717 	ldw	r7,28(sp)
   4b518:	1009883a 	mov	r4,r2
   4b51c:	a8800c04 	addi	r2,r21,48
   4b520:	38800005 	stb	r2,0(r7)
   4b524:	3dc00044 	addi	r23,r7,1
   4b528:	d9c00617 	ldw	r7,24(sp)
   4b52c:	01800044 	movi	r6,1
   4b530:	180b883a 	mov	r5,r3
   4b534:	2005883a 	mov	r2,r4
   4b538:	39803826 	beq	r7,r6,4b61c <_dtoa_r+0x8f4>
   4b53c:	000d883a 	mov	r6,zero
   4b540:	01d00934 	movhi	r7,16420
   4b544:	0045ad80 	call	45ad8 <__muldf3>
   4b548:	000d883a 	mov	r6,zero
   4b54c:	000f883a 	mov	r7,zero
   4b550:	1009883a 	mov	r4,r2
   4b554:	180b883a 	mov	r5,r3
   4b558:	1025883a 	mov	r18,r2
   4b55c:	1827883a 	mov	r19,r3
   4b560:	00459740 	call	45974 <__eqdf2>
   4b564:	103f9a26 	beq	r2,zero,4b3d0 <__alt_data_end+0xfffe42d0>
   4b568:	d9c00617 	ldw	r7,24(sp)
   4b56c:	d8c00717 	ldw	r3,28(sp)
   4b570:	b829883a 	mov	r20,r23
   4b574:	38bfffc4 	addi	r2,r7,-1
   4b578:	18ad883a 	add	r22,r3,r2
   4b57c:	00000a06 	br	4b5a8 <_dtoa_r+0x880>
   4b580:	0045ad80 	call	45ad8 <__muldf3>
   4b584:	000d883a 	mov	r6,zero
   4b588:	000f883a 	mov	r7,zero
   4b58c:	1009883a 	mov	r4,r2
   4b590:	180b883a 	mov	r5,r3
   4b594:	1025883a 	mov	r18,r2
   4b598:	1827883a 	mov	r19,r3
   4b59c:	b829883a 	mov	r20,r23
   4b5a0:	00459740 	call	45974 <__eqdf2>
   4b5a4:	103f8a26 	beq	r2,zero,4b3d0 <__alt_data_end+0xfffe42d0>
   4b5a8:	800d883a 	mov	r6,r16
   4b5ac:	880f883a 	mov	r7,r17
   4b5b0:	9009883a 	mov	r4,r18
   4b5b4:	980b883a 	mov	r5,r19
   4b5b8:	004508c0 	call	4508c <__divdf3>
   4b5bc:	180b883a 	mov	r5,r3
   4b5c0:	1009883a 	mov	r4,r2
   4b5c4:	0046aec0 	call	46aec <__fixdfsi>
   4b5c8:	1009883a 	mov	r4,r2
   4b5cc:	102b883a 	mov	r21,r2
   4b5d0:	0046b6c0 	call	46b6c <__floatsidf>
   4b5d4:	800d883a 	mov	r6,r16
   4b5d8:	880f883a 	mov	r7,r17
   4b5dc:	1009883a 	mov	r4,r2
   4b5e0:	180b883a 	mov	r5,r3
   4b5e4:	0045ad80 	call	45ad8 <__muldf3>
   4b5e8:	100d883a 	mov	r6,r2
   4b5ec:	180f883a 	mov	r7,r3
   4b5f0:	9009883a 	mov	r4,r18
   4b5f4:	980b883a 	mov	r5,r19
   4b5f8:	00461f00 	call	461f0 <__subdf3>
   4b5fc:	aa000c04 	addi	r8,r21,48
   4b600:	a2000005 	stb	r8,0(r20)
   4b604:	000d883a 	mov	r6,zero
   4b608:	01d00934 	movhi	r7,16420
   4b60c:	1009883a 	mov	r4,r2
   4b610:	180b883a 	mov	r5,r3
   4b614:	a5c00044 	addi	r23,r20,1
   4b618:	b53fd91e 	bne	r22,r20,4b580 <__alt_data_end+0xfffe4480>
   4b61c:	100d883a 	mov	r6,r2
   4b620:	180f883a 	mov	r7,r3
   4b624:	1009883a 	mov	r4,r2
   4b628:	180b883a 	mov	r5,r3
   4b62c:	00447e00 	call	447e0 <__adddf3>
   4b630:	100d883a 	mov	r6,r2
   4b634:	180f883a 	mov	r7,r3
   4b638:	8009883a 	mov	r4,r16
   4b63c:	880b883a 	mov	r5,r17
   4b640:	1027883a 	mov	r19,r2
   4b644:	1825883a 	mov	r18,r3
   4b648:	00518d80 	call	518d8 <__ledf2>
   4b64c:	10000816 	blt	r2,zero,4b670 <_dtoa_r+0x948>
   4b650:	980d883a 	mov	r6,r19
   4b654:	900f883a 	mov	r7,r18
   4b658:	8009883a 	mov	r4,r16
   4b65c:	880b883a 	mov	r5,r17
   4b660:	00459740 	call	45974 <__eqdf2>
   4b664:	103f5a1e 	bne	r2,zero,4b3d0 <__alt_data_end+0xfffe42d0>
   4b668:	ad40004c 	andi	r21,r21,1
   4b66c:	a83f5826 	beq	r21,zero,4b3d0 <__alt_data_end+0xfffe42d0>
   4b670:	bd3fffc3 	ldbu	r20,-1(r23)
   4b674:	b8bfffc4 	addi	r2,r23,-1
   4b678:	1007883a 	mov	r3,r2
   4b67c:	01400e44 	movi	r5,57
   4b680:	d9800717 	ldw	r6,28(sp)
   4b684:	00000506 	br	4b69c <_dtoa_r+0x974>
   4b688:	18ffffc4 	addi	r3,r3,-1
   4b68c:	11824726 	beq	r2,r6,4bfac <_dtoa_r+0x1284>
   4b690:	1d000003 	ldbu	r20,0(r3)
   4b694:	102f883a 	mov	r23,r2
   4b698:	10bfffc4 	addi	r2,r2,-1
   4b69c:	a1003fcc 	andi	r4,r20,255
   4b6a0:	2100201c 	xori	r4,r4,128
   4b6a4:	213fe004 	addi	r4,r4,-128
   4b6a8:	217ff726 	beq	r4,r5,4b688 <__alt_data_end+0xfffe4588>
   4b6ac:	a2000044 	addi	r8,r20,1
   4b6b0:	12000005 	stb	r8,0(r2)
   4b6b4:	003f4606 	br	4b3d0 <__alt_data_end+0xfffe42d0>
   4b6b8:	d9000b17 	ldw	r4,44(sp)
   4b6bc:	2000c826 	beq	r4,zero,4b9e0 <_dtoa_r+0xcb8>
   4b6c0:	d9800317 	ldw	r6,12(sp)
   4b6c4:	00c00044 	movi	r3,1
   4b6c8:	1980f90e 	bge	r3,r6,4bab0 <_dtoa_r+0xd88>
   4b6cc:	d8800617 	ldw	r2,24(sp)
   4b6d0:	d8c00a17 	ldw	r3,40(sp)
   4b6d4:	157fffc4 	addi	r21,r2,-1
   4b6d8:	1d41f316 	blt	r3,r21,4bea8 <_dtoa_r+0x1180>
   4b6dc:	1d6bc83a 	sub	r21,r3,r21
   4b6e0:	d9c00617 	ldw	r7,24(sp)
   4b6e4:	3802aa16 	blt	r7,zero,4c190 <_dtoa_r+0x1468>
   4b6e8:	dd000817 	ldw	r20,32(sp)
   4b6ec:	d8800617 	ldw	r2,24(sp)
   4b6f0:	d8c00817 	ldw	r3,32(sp)
   4b6f4:	01400044 	movi	r5,1
   4b6f8:	e009883a 	mov	r4,fp
   4b6fc:	1887883a 	add	r3,r3,r2
   4b700:	d8c00815 	stw	r3,32(sp)
   4b704:	b0ad883a 	add	r22,r22,r2
   4b708:	004de400 	call	4de40 <__i2b>
   4b70c:	1023883a 	mov	r17,r2
   4b710:	a0000826 	beq	r20,zero,4b734 <_dtoa_r+0xa0c>
   4b714:	0580070e 	bge	zero,r22,4b734 <_dtoa_r+0xa0c>
   4b718:	a005883a 	mov	r2,r20
   4b71c:	b500b916 	blt	r22,r20,4ba04 <_dtoa_r+0xcdc>
   4b720:	d9000817 	ldw	r4,32(sp)
   4b724:	a0a9c83a 	sub	r20,r20,r2
   4b728:	b0adc83a 	sub	r22,r22,r2
   4b72c:	2089c83a 	sub	r4,r4,r2
   4b730:	d9000815 	stw	r4,32(sp)
   4b734:	d9800a17 	ldw	r6,40(sp)
   4b738:	0181810e 	bge	zero,r6,4bd40 <_dtoa_r+0x1018>
   4b73c:	d9c00b17 	ldw	r7,44(sp)
   4b740:	3800b326 	beq	r7,zero,4ba10 <_dtoa_r+0xce8>
   4b744:	a800b226 	beq	r21,zero,4ba10 <_dtoa_r+0xce8>
   4b748:	880b883a 	mov	r5,r17
   4b74c:	a80d883a 	mov	r6,r21
   4b750:	e009883a 	mov	r4,fp
   4b754:	004e0740 	call	4e074 <__pow5mult>
   4b758:	d9800917 	ldw	r6,36(sp)
   4b75c:	100b883a 	mov	r5,r2
   4b760:	e009883a 	mov	r4,fp
   4b764:	1023883a 	mov	r17,r2
   4b768:	004de7c0 	call	4de7c <__multiply>
   4b76c:	1021883a 	mov	r16,r2
   4b770:	d8800a17 	ldw	r2,40(sp)
   4b774:	d9400917 	ldw	r5,36(sp)
   4b778:	e009883a 	mov	r4,fp
   4b77c:	1545c83a 	sub	r2,r2,r21
   4b780:	d8800a15 	stw	r2,40(sp)
   4b784:	004dadc0 	call	4dadc <_Bfree>
   4b788:	d8c00a17 	ldw	r3,40(sp)
   4b78c:	18009f1e 	bne	r3,zero,4ba0c <_dtoa_r+0xce4>
   4b790:	05c00044 	movi	r23,1
   4b794:	e009883a 	mov	r4,fp
   4b798:	b80b883a 	mov	r5,r23
   4b79c:	004de400 	call	4de40 <__i2b>
   4b7a0:	d9000d17 	ldw	r4,52(sp)
   4b7a4:	102b883a 	mov	r21,r2
   4b7a8:	2000ce26 	beq	r4,zero,4bae4 <_dtoa_r+0xdbc>
   4b7ac:	200d883a 	mov	r6,r4
   4b7b0:	100b883a 	mov	r5,r2
   4b7b4:	e009883a 	mov	r4,fp
   4b7b8:	004e0740 	call	4e074 <__pow5mult>
   4b7bc:	d9800317 	ldw	r6,12(sp)
   4b7c0:	102b883a 	mov	r21,r2
   4b7c4:	b981810e 	bge	r23,r6,4bdcc <_dtoa_r+0x10a4>
   4b7c8:	0027883a 	mov	r19,zero
   4b7cc:	a8800417 	ldw	r2,16(r21)
   4b7d0:	05c00804 	movi	r23,32
   4b7d4:	10800104 	addi	r2,r2,4
   4b7d8:	1085883a 	add	r2,r2,r2
   4b7dc:	1085883a 	add	r2,r2,r2
   4b7e0:	a885883a 	add	r2,r21,r2
   4b7e4:	11000017 	ldw	r4,0(r2)
   4b7e8:	004dd280 	call	4dd28 <__hi0bits>
   4b7ec:	b885c83a 	sub	r2,r23,r2
   4b7f0:	1585883a 	add	r2,r2,r22
   4b7f4:	108007cc 	andi	r2,r2,31
   4b7f8:	1000b326 	beq	r2,zero,4bac8 <_dtoa_r+0xda0>
   4b7fc:	00c00804 	movi	r3,32
   4b800:	1887c83a 	sub	r3,r3,r2
   4b804:	01000104 	movi	r4,4
   4b808:	20c2cd0e 	bge	r4,r3,4c340 <_dtoa_r+0x1618>
   4b80c:	00c00704 	movi	r3,28
   4b810:	1885c83a 	sub	r2,r3,r2
   4b814:	d8c00817 	ldw	r3,32(sp)
   4b818:	a0a9883a 	add	r20,r20,r2
   4b81c:	b0ad883a 	add	r22,r22,r2
   4b820:	1887883a 	add	r3,r3,r2
   4b824:	d8c00815 	stw	r3,32(sp)
   4b828:	d9800817 	ldw	r6,32(sp)
   4b82c:	0180040e 	bge	zero,r6,4b840 <_dtoa_r+0xb18>
   4b830:	800b883a 	mov	r5,r16
   4b834:	e009883a 	mov	r4,fp
   4b838:	004e1b40 	call	4e1b4 <__lshift>
   4b83c:	1021883a 	mov	r16,r2
   4b840:	0580050e 	bge	zero,r22,4b858 <_dtoa_r+0xb30>
   4b844:	a80b883a 	mov	r5,r21
   4b848:	b00d883a 	mov	r6,r22
   4b84c:	e009883a 	mov	r4,fp
   4b850:	004e1b40 	call	4e1b4 <__lshift>
   4b854:	102b883a 	mov	r21,r2
   4b858:	d9c00e17 	ldw	r7,56(sp)
   4b85c:	3801211e 	bne	r7,zero,4bce4 <_dtoa_r+0xfbc>
   4b860:	d9800617 	ldw	r6,24(sp)
   4b864:	0181380e 	bge	zero,r6,4bd48 <_dtoa_r+0x1020>
   4b868:	d8c00b17 	ldw	r3,44(sp)
   4b86c:	1800ab1e 	bne	r3,zero,4bb1c <_dtoa_r+0xdf4>
   4b870:	dc800717 	ldw	r18,28(sp)
   4b874:	dcc00617 	ldw	r19,24(sp)
   4b878:	9029883a 	mov	r20,r18
   4b87c:	00000206 	br	4b888 <_dtoa_r+0xb60>
   4b880:	004db040 	call	4db04 <__multadd>
   4b884:	1021883a 	mov	r16,r2
   4b888:	a80b883a 	mov	r5,r21
   4b88c:	8009883a 	mov	r4,r16
   4b890:	004ab280 	call	4ab28 <quorem>
   4b894:	10800c04 	addi	r2,r2,48
   4b898:	90800005 	stb	r2,0(r18)
   4b89c:	94800044 	addi	r18,r18,1
   4b8a0:	9507c83a 	sub	r3,r18,r20
   4b8a4:	000f883a 	mov	r7,zero
   4b8a8:	01800284 	movi	r6,10
   4b8ac:	800b883a 	mov	r5,r16
   4b8b0:	e009883a 	mov	r4,fp
   4b8b4:	1cfff216 	blt	r3,r19,4b880 <__alt_data_end+0xfffe4780>
   4b8b8:	1011883a 	mov	r8,r2
   4b8bc:	d8800617 	ldw	r2,24(sp)
   4b8c0:	0082370e 	bge	zero,r2,4c1a0 <_dtoa_r+0x1478>
   4b8c4:	d9000717 	ldw	r4,28(sp)
   4b8c8:	0025883a 	mov	r18,zero
   4b8cc:	20af883a 	add	r23,r4,r2
   4b8d0:	01800044 	movi	r6,1
   4b8d4:	800b883a 	mov	r5,r16
   4b8d8:	e009883a 	mov	r4,fp
   4b8dc:	da001715 	stw	r8,92(sp)
   4b8e0:	004e1b40 	call	4e1b4 <__lshift>
   4b8e4:	a80b883a 	mov	r5,r21
   4b8e8:	1009883a 	mov	r4,r2
   4b8ec:	d8800915 	stw	r2,36(sp)
   4b8f0:	004e2fc0 	call	4e2fc <__mcmp>
   4b8f4:	da001717 	ldw	r8,92(sp)
   4b8f8:	0081800e 	bge	zero,r2,4befc <_dtoa_r+0x11d4>
   4b8fc:	b93fffc3 	ldbu	r4,-1(r23)
   4b900:	b8bfffc4 	addi	r2,r23,-1
   4b904:	1007883a 	mov	r3,r2
   4b908:	01800e44 	movi	r6,57
   4b90c:	d9c00717 	ldw	r7,28(sp)
   4b910:	00000506 	br	4b928 <_dtoa_r+0xc00>
   4b914:	18ffffc4 	addi	r3,r3,-1
   4b918:	11c12326 	beq	r2,r7,4bda8 <_dtoa_r+0x1080>
   4b91c:	19000003 	ldbu	r4,0(r3)
   4b920:	102f883a 	mov	r23,r2
   4b924:	10bfffc4 	addi	r2,r2,-1
   4b928:	21403fcc 	andi	r5,r4,255
   4b92c:	2940201c 	xori	r5,r5,128
   4b930:	297fe004 	addi	r5,r5,-128
   4b934:	29bff726 	beq	r5,r6,4b914 <__alt_data_end+0xfffe4814>
   4b938:	21000044 	addi	r4,r4,1
   4b93c:	11000005 	stb	r4,0(r2)
   4b940:	a80b883a 	mov	r5,r21
   4b944:	e009883a 	mov	r4,fp
   4b948:	004dadc0 	call	4dadc <_Bfree>
   4b94c:	883ea026 	beq	r17,zero,4b3d0 <__alt_data_end+0xfffe42d0>
   4b950:	90000426 	beq	r18,zero,4b964 <_dtoa_r+0xc3c>
   4b954:	94400326 	beq	r18,r17,4b964 <_dtoa_r+0xc3c>
   4b958:	900b883a 	mov	r5,r18
   4b95c:	e009883a 	mov	r4,fp
   4b960:	004dadc0 	call	4dadc <_Bfree>
   4b964:	880b883a 	mov	r5,r17
   4b968:	e009883a 	mov	r4,fp
   4b96c:	004dadc0 	call	4dadc <_Bfree>
   4b970:	003e9706 	br	4b3d0 <__alt_data_end+0xfffe42d0>
   4b974:	01800044 	movi	r6,1
   4b978:	d9800e15 	stw	r6,56(sp)
   4b97c:	003d9606 	br	4afd8 <__alt_data_end+0xfffe3ed8>
   4b980:	d8800817 	ldw	r2,32(sp)
   4b984:	d8c00517 	ldw	r3,20(sp)
   4b988:	d8000d15 	stw	zero,52(sp)
   4b98c:	10c5c83a 	sub	r2,r2,r3
   4b990:	00c9c83a 	sub	r4,zero,r3
   4b994:	d8800815 	stw	r2,32(sp)
   4b998:	d9000a15 	stw	r4,40(sp)
   4b99c:	003d9706 	br	4affc <__alt_data_end+0xfffe3efc>
   4b9a0:	05adc83a 	sub	r22,zero,r22
   4b9a4:	dd800815 	stw	r22,32(sp)
   4b9a8:	002d883a 	mov	r22,zero
   4b9ac:	003d8e06 	br	4afe8 <__alt_data_end+0xfffe3ee8>
   4b9b0:	d9000517 	ldw	r4,20(sp)
   4b9b4:	0046b6c0 	call	46b6c <__floatsidf>
   4b9b8:	100d883a 	mov	r6,r2
   4b9bc:	180f883a 	mov	r7,r3
   4b9c0:	a009883a 	mov	r4,r20
   4b9c4:	880b883a 	mov	r5,r17
   4b9c8:	00459740 	call	45974 <__eqdf2>
   4b9cc:	103d7126 	beq	r2,zero,4af94 <__alt_data_end+0xfffe3e94>
   4b9d0:	d9c00517 	ldw	r7,20(sp)
   4b9d4:	39ffffc4 	addi	r7,r7,-1
   4b9d8:	d9c00515 	stw	r7,20(sp)
   4b9dc:	003d6d06 	br	4af94 <__alt_data_end+0xfffe3e94>
   4b9e0:	dd400a17 	ldw	r21,40(sp)
   4b9e4:	dd000817 	ldw	r20,32(sp)
   4b9e8:	0023883a 	mov	r17,zero
   4b9ec:	003f4806 	br	4b710 <__alt_data_end+0xfffe4610>
   4b9f0:	10e3c83a 	sub	r17,r2,r3
   4b9f4:	9448983a 	sll	r4,r18,r17
   4b9f8:	003d3206 	br	4aec4 <__alt_data_end+0xfffe3dc4>
   4b9fc:	d8000e15 	stw	zero,56(sp)
   4ba00:	003d7506 	br	4afd8 <__alt_data_end+0xfffe3ed8>
   4ba04:	b005883a 	mov	r2,r22
   4ba08:	003f4506 	br	4b720 <__alt_data_end+0xfffe4620>
   4ba0c:	dc000915 	stw	r16,36(sp)
   4ba10:	d9800a17 	ldw	r6,40(sp)
   4ba14:	d9400917 	ldw	r5,36(sp)
   4ba18:	e009883a 	mov	r4,fp
   4ba1c:	004e0740 	call	4e074 <__pow5mult>
   4ba20:	1021883a 	mov	r16,r2
   4ba24:	003f5a06 	br	4b790 <__alt_data_end+0xfffe4690>
   4ba28:	01c00044 	movi	r7,1
   4ba2c:	d9c00b15 	stw	r7,44(sp)
   4ba30:	d8802217 	ldw	r2,136(sp)
   4ba34:	0081280e 	bge	zero,r2,4bed8 <_dtoa_r+0x11b0>
   4ba38:	100d883a 	mov	r6,r2
   4ba3c:	1021883a 	mov	r16,r2
   4ba40:	d8800c15 	stw	r2,48(sp)
   4ba44:	d8800615 	stw	r2,24(sp)
   4ba48:	003d8806 	br	4b06c <__alt_data_end+0xfffe3f6c>
   4ba4c:	d8800617 	ldw	r2,24(sp)
   4ba50:	00be9b16 	blt	zero,r2,4b4c0 <__alt_data_end+0xfffe43c0>
   4ba54:	10010f1e 	bne	r2,zero,4be94 <_dtoa_r+0x116c>
   4ba58:	880b883a 	mov	r5,r17
   4ba5c:	000d883a 	mov	r6,zero
   4ba60:	01d00534 	movhi	r7,16404
   4ba64:	8009883a 	mov	r4,r16
   4ba68:	0045ad80 	call	45ad8 <__muldf3>
   4ba6c:	900d883a 	mov	r6,r18
   4ba70:	980f883a 	mov	r7,r19
   4ba74:	1009883a 	mov	r4,r2
   4ba78:	180b883a 	mov	r5,r3
   4ba7c:	00459fc0 	call	459fc <__gedf2>
   4ba80:	002b883a 	mov	r21,zero
   4ba84:	0023883a 	mov	r17,zero
   4ba88:	1000bf16 	blt	r2,zero,4bd88 <_dtoa_r+0x1060>
   4ba8c:	d9802217 	ldw	r6,136(sp)
   4ba90:	ddc00717 	ldw	r23,28(sp)
   4ba94:	018c303a 	nor	r6,zero,r6
   4ba98:	d9800515 	stw	r6,20(sp)
   4ba9c:	a80b883a 	mov	r5,r21
   4baa0:	e009883a 	mov	r4,fp
   4baa4:	004dadc0 	call	4dadc <_Bfree>
   4baa8:	883e4926 	beq	r17,zero,4b3d0 <__alt_data_end+0xfffe42d0>
   4baac:	003fad06 	br	4b964 <__alt_data_end+0xfffe4864>
   4bab0:	d9c01117 	ldw	r7,68(sp)
   4bab4:	3801bc26 	beq	r7,zero,4c1a8 <_dtoa_r+0x1480>
   4bab8:	10810cc4 	addi	r2,r2,1075
   4babc:	dd400a17 	ldw	r21,40(sp)
   4bac0:	dd000817 	ldw	r20,32(sp)
   4bac4:	003f0a06 	br	4b6f0 <__alt_data_end+0xfffe45f0>
   4bac8:	00800704 	movi	r2,28
   4bacc:	d9000817 	ldw	r4,32(sp)
   4bad0:	a0a9883a 	add	r20,r20,r2
   4bad4:	b0ad883a 	add	r22,r22,r2
   4bad8:	2089883a 	add	r4,r4,r2
   4badc:	d9000815 	stw	r4,32(sp)
   4bae0:	003f5106 	br	4b828 <__alt_data_end+0xfffe4728>
   4bae4:	d8c00317 	ldw	r3,12(sp)
   4bae8:	b8c1fc0e 	bge	r23,r3,4c2dc <_dtoa_r+0x15b4>
   4baec:	0027883a 	mov	r19,zero
   4baf0:	b805883a 	mov	r2,r23
   4baf4:	003f3e06 	br	4b7f0 <__alt_data_end+0xfffe46f0>
   4baf8:	880b883a 	mov	r5,r17
   4bafc:	e009883a 	mov	r4,fp
   4bb00:	000f883a 	mov	r7,zero
   4bb04:	01800284 	movi	r6,10
   4bb08:	004db040 	call	4db04 <__multadd>
   4bb0c:	d9000c17 	ldw	r4,48(sp)
   4bb10:	1023883a 	mov	r17,r2
   4bb14:	0102040e 	bge	zero,r4,4c328 <_dtoa_r+0x1600>
   4bb18:	d9000615 	stw	r4,24(sp)
   4bb1c:	0500050e 	bge	zero,r20,4bb34 <_dtoa_r+0xe0c>
   4bb20:	880b883a 	mov	r5,r17
   4bb24:	a00d883a 	mov	r6,r20
   4bb28:	e009883a 	mov	r4,fp
   4bb2c:	004e1b40 	call	4e1b4 <__lshift>
   4bb30:	1023883a 	mov	r17,r2
   4bb34:	9801241e 	bne	r19,zero,4bfc8 <_dtoa_r+0x12a0>
   4bb38:	8829883a 	mov	r20,r17
   4bb3c:	d9000617 	ldw	r4,24(sp)
   4bb40:	dcc00717 	ldw	r19,28(sp)
   4bb44:	9480004c 	andi	r18,r18,1
   4bb48:	20bfffc4 	addi	r2,r4,-1
   4bb4c:	9885883a 	add	r2,r19,r2
   4bb50:	d8800415 	stw	r2,16(sp)
   4bb54:	dc800615 	stw	r18,24(sp)
   4bb58:	a80b883a 	mov	r5,r21
   4bb5c:	8009883a 	mov	r4,r16
   4bb60:	004ab280 	call	4ab28 <quorem>
   4bb64:	880b883a 	mov	r5,r17
   4bb68:	8009883a 	mov	r4,r16
   4bb6c:	102f883a 	mov	r23,r2
   4bb70:	004e2fc0 	call	4e2fc <__mcmp>
   4bb74:	a80b883a 	mov	r5,r21
   4bb78:	a00d883a 	mov	r6,r20
   4bb7c:	e009883a 	mov	r4,fp
   4bb80:	102d883a 	mov	r22,r2
   4bb84:	004e35c0 	call	4e35c <__mdiff>
   4bb88:	1007883a 	mov	r3,r2
   4bb8c:	10800317 	ldw	r2,12(r2)
   4bb90:	bc800c04 	addi	r18,r23,48
   4bb94:	180b883a 	mov	r5,r3
   4bb98:	10004e1e 	bne	r2,zero,4bcd4 <_dtoa_r+0xfac>
   4bb9c:	8009883a 	mov	r4,r16
   4bba0:	d8c01615 	stw	r3,88(sp)
   4bba4:	004e2fc0 	call	4e2fc <__mcmp>
   4bba8:	d8c01617 	ldw	r3,88(sp)
   4bbac:	e009883a 	mov	r4,fp
   4bbb0:	d8801615 	stw	r2,88(sp)
   4bbb4:	180b883a 	mov	r5,r3
   4bbb8:	004dadc0 	call	4dadc <_Bfree>
   4bbbc:	d8801617 	ldw	r2,88(sp)
   4bbc0:	1000041e 	bne	r2,zero,4bbd4 <_dtoa_r+0xeac>
   4bbc4:	d9800317 	ldw	r6,12(sp)
   4bbc8:	3000021e 	bne	r6,zero,4bbd4 <_dtoa_r+0xeac>
   4bbcc:	d8c00617 	ldw	r3,24(sp)
   4bbd0:	18003726 	beq	r3,zero,4bcb0 <_dtoa_r+0xf88>
   4bbd4:	b0002016 	blt	r22,zero,4bc58 <_dtoa_r+0xf30>
   4bbd8:	b000041e 	bne	r22,zero,4bbec <_dtoa_r+0xec4>
   4bbdc:	d9000317 	ldw	r4,12(sp)
   4bbe0:	2000021e 	bne	r4,zero,4bbec <_dtoa_r+0xec4>
   4bbe4:	d8c00617 	ldw	r3,24(sp)
   4bbe8:	18001b26 	beq	r3,zero,4bc58 <_dtoa_r+0xf30>
   4bbec:	00810716 	blt	zero,r2,4c00c <_dtoa_r+0x12e4>
   4bbf0:	d8c00417 	ldw	r3,16(sp)
   4bbf4:	9d800044 	addi	r22,r19,1
   4bbf8:	9c800005 	stb	r18,0(r19)
   4bbfc:	b02f883a 	mov	r23,r22
   4bc00:	98c10626 	beq	r19,r3,4c01c <_dtoa_r+0x12f4>
   4bc04:	800b883a 	mov	r5,r16
   4bc08:	000f883a 	mov	r7,zero
   4bc0c:	01800284 	movi	r6,10
   4bc10:	e009883a 	mov	r4,fp
   4bc14:	004db040 	call	4db04 <__multadd>
   4bc18:	1021883a 	mov	r16,r2
   4bc1c:	000f883a 	mov	r7,zero
   4bc20:	01800284 	movi	r6,10
   4bc24:	880b883a 	mov	r5,r17
   4bc28:	e009883a 	mov	r4,fp
   4bc2c:	8d002526 	beq	r17,r20,4bcc4 <_dtoa_r+0xf9c>
   4bc30:	004db040 	call	4db04 <__multadd>
   4bc34:	a00b883a 	mov	r5,r20
   4bc38:	000f883a 	mov	r7,zero
   4bc3c:	01800284 	movi	r6,10
   4bc40:	e009883a 	mov	r4,fp
   4bc44:	1023883a 	mov	r17,r2
   4bc48:	004db040 	call	4db04 <__multadd>
   4bc4c:	1029883a 	mov	r20,r2
   4bc50:	b027883a 	mov	r19,r22
   4bc54:	003fc006 	br	4bb58 <__alt_data_end+0xfffe4a58>
   4bc58:	9011883a 	mov	r8,r18
   4bc5c:	00800e0e 	bge	zero,r2,4bc98 <_dtoa_r+0xf70>
   4bc60:	800b883a 	mov	r5,r16
   4bc64:	01800044 	movi	r6,1
   4bc68:	e009883a 	mov	r4,fp
   4bc6c:	da001715 	stw	r8,92(sp)
   4bc70:	004e1b40 	call	4e1b4 <__lshift>
   4bc74:	a80b883a 	mov	r5,r21
   4bc78:	1009883a 	mov	r4,r2
   4bc7c:	1021883a 	mov	r16,r2
   4bc80:	004e2fc0 	call	4e2fc <__mcmp>
   4bc84:	da001717 	ldw	r8,92(sp)
   4bc88:	0081960e 	bge	zero,r2,4c2e4 <_dtoa_r+0x15bc>
   4bc8c:	00800e44 	movi	r2,57
   4bc90:	40817026 	beq	r8,r2,4c254 <_dtoa_r+0x152c>
   4bc94:	ba000c44 	addi	r8,r23,49
   4bc98:	8825883a 	mov	r18,r17
   4bc9c:	9dc00044 	addi	r23,r19,1
   4bca0:	9a000005 	stb	r8,0(r19)
   4bca4:	a023883a 	mov	r17,r20
   4bca8:	dc000915 	stw	r16,36(sp)
   4bcac:	003f2406 	br	4b940 <__alt_data_end+0xfffe4840>
   4bcb0:	00800e44 	movi	r2,57
   4bcb4:	9011883a 	mov	r8,r18
   4bcb8:	90816626 	beq	r18,r2,4c254 <_dtoa_r+0x152c>
   4bcbc:	05bff516 	blt	zero,r22,4bc94 <__alt_data_end+0xfffe4b94>
   4bcc0:	003ff506 	br	4bc98 <__alt_data_end+0xfffe4b98>
   4bcc4:	004db040 	call	4db04 <__multadd>
   4bcc8:	1023883a 	mov	r17,r2
   4bccc:	1029883a 	mov	r20,r2
   4bcd0:	003fdf06 	br	4bc50 <__alt_data_end+0xfffe4b50>
   4bcd4:	e009883a 	mov	r4,fp
   4bcd8:	004dadc0 	call	4dadc <_Bfree>
   4bcdc:	00800044 	movi	r2,1
   4bce0:	003fbc06 	br	4bbd4 <__alt_data_end+0xfffe4ad4>
   4bce4:	a80b883a 	mov	r5,r21
   4bce8:	8009883a 	mov	r4,r16
   4bcec:	004e2fc0 	call	4e2fc <__mcmp>
   4bcf0:	103edb0e 	bge	r2,zero,4b860 <__alt_data_end+0xfffe4760>
   4bcf4:	800b883a 	mov	r5,r16
   4bcf8:	000f883a 	mov	r7,zero
   4bcfc:	01800284 	movi	r6,10
   4bd00:	e009883a 	mov	r4,fp
   4bd04:	004db040 	call	4db04 <__multadd>
   4bd08:	1021883a 	mov	r16,r2
   4bd0c:	d8800517 	ldw	r2,20(sp)
   4bd10:	d8c00b17 	ldw	r3,44(sp)
   4bd14:	10bfffc4 	addi	r2,r2,-1
   4bd18:	d8800515 	stw	r2,20(sp)
   4bd1c:	183f761e 	bne	r3,zero,4baf8 <__alt_data_end+0xfffe49f8>
   4bd20:	d9000c17 	ldw	r4,48(sp)
   4bd24:	0101730e 	bge	zero,r4,4c2f4 <_dtoa_r+0x15cc>
   4bd28:	d9000615 	stw	r4,24(sp)
   4bd2c:	003ed006 	br	4b870 <__alt_data_end+0xfffe4770>
   4bd30:	00800084 	movi	r2,2
   4bd34:	3081861e 	bne	r6,r2,4c350 <_dtoa_r+0x1628>
   4bd38:	d8000b15 	stw	zero,44(sp)
   4bd3c:	003f3c06 	br	4ba30 <__alt_data_end+0xfffe4930>
   4bd40:	dc000917 	ldw	r16,36(sp)
   4bd44:	003e9206 	br	4b790 <__alt_data_end+0xfffe4690>
   4bd48:	d9c00317 	ldw	r7,12(sp)
   4bd4c:	00800084 	movi	r2,2
   4bd50:	11fec50e 	bge	r2,r7,4b868 <__alt_data_end+0xfffe4768>
   4bd54:	d9000617 	ldw	r4,24(sp)
   4bd58:	20013c1e 	bne	r4,zero,4c24c <_dtoa_r+0x1524>
   4bd5c:	a80b883a 	mov	r5,r21
   4bd60:	000f883a 	mov	r7,zero
   4bd64:	01800144 	movi	r6,5
   4bd68:	e009883a 	mov	r4,fp
   4bd6c:	004db040 	call	4db04 <__multadd>
   4bd70:	100b883a 	mov	r5,r2
   4bd74:	8009883a 	mov	r4,r16
   4bd78:	102b883a 	mov	r21,r2
   4bd7c:	004e2fc0 	call	4e2fc <__mcmp>
   4bd80:	dc000915 	stw	r16,36(sp)
   4bd84:	00bf410e 	bge	zero,r2,4ba8c <__alt_data_end+0xfffe498c>
   4bd88:	d9c00717 	ldw	r7,28(sp)
   4bd8c:	00800c44 	movi	r2,49
   4bd90:	38800005 	stb	r2,0(r7)
   4bd94:	d8800517 	ldw	r2,20(sp)
   4bd98:	3dc00044 	addi	r23,r7,1
   4bd9c:	10800044 	addi	r2,r2,1
   4bda0:	d8800515 	stw	r2,20(sp)
   4bda4:	003f3d06 	br	4ba9c <__alt_data_end+0xfffe499c>
   4bda8:	d9800517 	ldw	r6,20(sp)
   4bdac:	d9c00717 	ldw	r7,28(sp)
   4bdb0:	00800c44 	movi	r2,49
   4bdb4:	31800044 	addi	r6,r6,1
   4bdb8:	d9800515 	stw	r6,20(sp)
   4bdbc:	38800005 	stb	r2,0(r7)
   4bdc0:	003edf06 	br	4b940 <__alt_data_end+0xfffe4840>
   4bdc4:	d8000b15 	stw	zero,44(sp)
   4bdc8:	003c9f06 	br	4b048 <__alt_data_end+0xfffe3f48>
   4bdcc:	903e7e1e 	bne	r18,zero,4b7c8 <__alt_data_end+0xfffe46c8>
   4bdd0:	00800434 	movhi	r2,16
   4bdd4:	10bfffc4 	addi	r2,r2,-1
   4bdd8:	9884703a 	and	r2,r19,r2
   4bddc:	1000ea1e 	bne	r2,zero,4c188 <_dtoa_r+0x1460>
   4bde0:	9cdffc2c 	andhi	r19,r19,32752
   4bde4:	9800e826 	beq	r19,zero,4c188 <_dtoa_r+0x1460>
   4bde8:	d9c00817 	ldw	r7,32(sp)
   4bdec:	b5800044 	addi	r22,r22,1
   4bdf0:	04c00044 	movi	r19,1
   4bdf4:	39c00044 	addi	r7,r7,1
   4bdf8:	d9c00815 	stw	r7,32(sp)
   4bdfc:	d8800d17 	ldw	r2,52(sp)
   4be00:	103e721e 	bne	r2,zero,4b7cc <__alt_data_end+0xfffe46cc>
   4be04:	00800044 	movi	r2,1
   4be08:	003e7906 	br	4b7f0 <__alt_data_end+0xfffe46f0>
   4be0c:	8009883a 	mov	r4,r16
   4be10:	0046b6c0 	call	46b6c <__floatsidf>
   4be14:	d9800f17 	ldw	r6,60(sp)
   4be18:	d9c01017 	ldw	r7,64(sp)
   4be1c:	1009883a 	mov	r4,r2
   4be20:	180b883a 	mov	r5,r3
   4be24:	0045ad80 	call	45ad8 <__muldf3>
   4be28:	000d883a 	mov	r6,zero
   4be2c:	01d00734 	movhi	r7,16412
   4be30:	1009883a 	mov	r4,r2
   4be34:	180b883a 	mov	r5,r3
   4be38:	00447e00 	call	447e0 <__adddf3>
   4be3c:	047f3034 	movhi	r17,64704
   4be40:	1021883a 	mov	r16,r2
   4be44:	1c63883a 	add	r17,r3,r17
   4be48:	d9000f17 	ldw	r4,60(sp)
   4be4c:	d9401017 	ldw	r5,64(sp)
   4be50:	000d883a 	mov	r6,zero
   4be54:	01d00534 	movhi	r7,16404
   4be58:	00461f00 	call	461f0 <__subdf3>
   4be5c:	800d883a 	mov	r6,r16
   4be60:	880f883a 	mov	r7,r17
   4be64:	1009883a 	mov	r4,r2
   4be68:	180b883a 	mov	r5,r3
   4be6c:	102b883a 	mov	r21,r2
   4be70:	1829883a 	mov	r20,r3
   4be74:	00459fc0 	call	459fc <__gedf2>
   4be78:	00806c16 	blt	zero,r2,4c02c <_dtoa_r+0x1304>
   4be7c:	89e0003c 	xorhi	r7,r17,32768
   4be80:	800d883a 	mov	r6,r16
   4be84:	a809883a 	mov	r4,r21
   4be88:	a00b883a 	mov	r5,r20
   4be8c:	00518d80 	call	518d8 <__ledf2>
   4be90:	103d7e0e 	bge	r2,zero,4b48c <__alt_data_end+0xfffe438c>
   4be94:	002b883a 	mov	r21,zero
   4be98:	0023883a 	mov	r17,zero
   4be9c:	003efb06 	br	4ba8c <__alt_data_end+0xfffe498c>
   4bea0:	d8800717 	ldw	r2,28(sp)
   4bea4:	003bd006 	br	4ade8 <__alt_data_end+0xfffe3ce8>
   4bea8:	d9000a17 	ldw	r4,40(sp)
   4beac:	d9800d17 	ldw	r6,52(sp)
   4beb0:	dd400a15 	stw	r21,40(sp)
   4beb4:	a905c83a 	sub	r2,r21,r4
   4beb8:	308d883a 	add	r6,r6,r2
   4bebc:	d9800d15 	stw	r6,52(sp)
   4bec0:	002b883a 	mov	r21,zero
   4bec4:	003e0606 	br	4b6e0 <__alt_data_end+0xfffe45e0>
   4bec8:	9023883a 	mov	r17,r18
   4becc:	9829883a 	mov	r20,r19
   4bed0:	04000084 	movi	r16,2
   4bed4:	003c9206 	br	4b120 <__alt_data_end+0xfffe4020>
   4bed8:	04000044 	movi	r16,1
   4bedc:	dc000c15 	stw	r16,48(sp)
   4bee0:	dc000615 	stw	r16,24(sp)
   4bee4:	dc002215 	stw	r16,136(sp)
   4bee8:	e0001115 	stw	zero,68(fp)
   4beec:	000b883a 	mov	r5,zero
   4bef0:	003c6906 	br	4b098 <__alt_data_end+0xfffe3f98>
   4bef4:	3021883a 	mov	r16,r6
   4bef8:	003ffb06 	br	4bee8 <__alt_data_end+0xfffe4de8>
   4befc:	1000021e 	bne	r2,zero,4bf08 <_dtoa_r+0x11e0>
   4bf00:	4200004c 	andi	r8,r8,1
   4bf04:	403e7d1e 	bne	r8,zero,4b8fc <__alt_data_end+0xfffe47fc>
   4bf08:	01000c04 	movi	r4,48
   4bf0c:	00000106 	br	4bf14 <_dtoa_r+0x11ec>
   4bf10:	102f883a 	mov	r23,r2
   4bf14:	b8bfffc4 	addi	r2,r23,-1
   4bf18:	10c00007 	ldb	r3,0(r2)
   4bf1c:	193ffc26 	beq	r3,r4,4bf10 <__alt_data_end+0xfffe4e10>
   4bf20:	003e8706 	br	4b940 <__alt_data_end+0xfffe4840>
   4bf24:	d8800517 	ldw	r2,20(sp)
   4bf28:	00a3c83a 	sub	r17,zero,r2
   4bf2c:	8800a426 	beq	r17,zero,4c1c0 <_dtoa_r+0x1498>
   4bf30:	888003cc 	andi	r2,r17,15
   4bf34:	100490fa 	slli	r2,r2,3
   4bf38:	00c00174 	movhi	r3,5
   4bf3c:	18da8c04 	addi	r3,r3,27184
   4bf40:	1885883a 	add	r2,r3,r2
   4bf44:	11800017 	ldw	r6,0(r2)
   4bf48:	11c00117 	ldw	r7,4(r2)
   4bf4c:	9009883a 	mov	r4,r18
   4bf50:	980b883a 	mov	r5,r19
   4bf54:	8823d13a 	srai	r17,r17,4
   4bf58:	0045ad80 	call	45ad8 <__muldf3>
   4bf5c:	d8800f15 	stw	r2,60(sp)
   4bf60:	d8c01015 	stw	r3,64(sp)
   4bf64:	8800e826 	beq	r17,zero,4c308 <_dtoa_r+0x15e0>
   4bf68:	05000174 	movhi	r20,5
   4bf6c:	a51a8204 	addi	r20,r20,27144
   4bf70:	04000084 	movi	r16,2
   4bf74:	8980004c 	andi	r6,r17,1
   4bf78:	1009883a 	mov	r4,r2
   4bf7c:	8823d07a 	srai	r17,r17,1
   4bf80:	180b883a 	mov	r5,r3
   4bf84:	30000426 	beq	r6,zero,4bf98 <_dtoa_r+0x1270>
   4bf88:	a1800017 	ldw	r6,0(r20)
   4bf8c:	a1c00117 	ldw	r7,4(r20)
   4bf90:	84000044 	addi	r16,r16,1
   4bf94:	0045ad80 	call	45ad8 <__muldf3>
   4bf98:	a5000204 	addi	r20,r20,8
   4bf9c:	883ff51e 	bne	r17,zero,4bf74 <__alt_data_end+0xfffe4e74>
   4bfa0:	d8800f15 	stw	r2,60(sp)
   4bfa4:	d8c01015 	stw	r3,64(sp)
   4bfa8:	003c7606 	br	4b184 <__alt_data_end+0xfffe4084>
   4bfac:	00c00c04 	movi	r3,48
   4bfb0:	10c00005 	stb	r3,0(r2)
   4bfb4:	d8c00517 	ldw	r3,20(sp)
   4bfb8:	bd3fffc3 	ldbu	r20,-1(r23)
   4bfbc:	18c00044 	addi	r3,r3,1
   4bfc0:	d8c00515 	stw	r3,20(sp)
   4bfc4:	003db906 	br	4b6ac <__alt_data_end+0xfffe45ac>
   4bfc8:	89400117 	ldw	r5,4(r17)
   4bfcc:	e009883a 	mov	r4,fp
   4bfd0:	004da340 	call	4da34 <_Balloc>
   4bfd4:	89800417 	ldw	r6,16(r17)
   4bfd8:	89400304 	addi	r5,r17,12
   4bfdc:	11000304 	addi	r4,r2,12
   4bfe0:	31800084 	addi	r6,r6,2
   4bfe4:	318d883a 	add	r6,r6,r6
   4bfe8:	318d883a 	add	r6,r6,r6
   4bfec:	1027883a 	mov	r19,r2
   4bff0:	004d7900 	call	4d790 <memcpy>
   4bff4:	01800044 	movi	r6,1
   4bff8:	980b883a 	mov	r5,r19
   4bffc:	e009883a 	mov	r4,fp
   4c000:	004e1b40 	call	4e1b4 <__lshift>
   4c004:	1029883a 	mov	r20,r2
   4c008:	003ecc06 	br	4bb3c <__alt_data_end+0xfffe4a3c>
   4c00c:	00800e44 	movi	r2,57
   4c010:	90809026 	beq	r18,r2,4c254 <_dtoa_r+0x152c>
   4c014:	92000044 	addi	r8,r18,1
   4c018:	003f1f06 	br	4bc98 <__alt_data_end+0xfffe4b98>
   4c01c:	9011883a 	mov	r8,r18
   4c020:	8825883a 	mov	r18,r17
   4c024:	a023883a 	mov	r17,r20
   4c028:	003e2906 	br	4b8d0 <__alt_data_end+0xfffe47d0>
   4c02c:	002b883a 	mov	r21,zero
   4c030:	0023883a 	mov	r17,zero
   4c034:	003f5406 	br	4bd88 <__alt_data_end+0xfffe4c88>
   4c038:	61bfffc4 	addi	r6,r12,-1
   4c03c:	300490fa 	slli	r2,r6,3
   4c040:	00c00174 	movhi	r3,5
   4c044:	18da8c04 	addi	r3,r3,27184
   4c048:	1885883a 	add	r2,r3,r2
   4c04c:	11000017 	ldw	r4,0(r2)
   4c050:	11400117 	ldw	r5,4(r2)
   4c054:	d8800717 	ldw	r2,28(sp)
   4c058:	880f883a 	mov	r7,r17
   4c05c:	d9801215 	stw	r6,72(sp)
   4c060:	800d883a 	mov	r6,r16
   4c064:	db001615 	stw	r12,88(sp)
   4c068:	15c00044 	addi	r23,r2,1
   4c06c:	0045ad80 	call	45ad8 <__muldf3>
   4c070:	d9401017 	ldw	r5,64(sp)
   4c074:	d9000f17 	ldw	r4,60(sp)
   4c078:	d8c01515 	stw	r3,84(sp)
   4c07c:	d8801415 	stw	r2,80(sp)
   4c080:	0046aec0 	call	46aec <__fixdfsi>
   4c084:	1009883a 	mov	r4,r2
   4c088:	1021883a 	mov	r16,r2
   4c08c:	0046b6c0 	call	46b6c <__floatsidf>
   4c090:	d9000f17 	ldw	r4,60(sp)
   4c094:	d9401017 	ldw	r5,64(sp)
   4c098:	100d883a 	mov	r6,r2
   4c09c:	180f883a 	mov	r7,r3
   4c0a0:	00461f00 	call	461f0 <__subdf3>
   4c0a4:	1829883a 	mov	r20,r3
   4c0a8:	d8c00717 	ldw	r3,28(sp)
   4c0ac:	84000c04 	addi	r16,r16,48
   4c0b0:	1023883a 	mov	r17,r2
   4c0b4:	1c000005 	stb	r16,0(r3)
   4c0b8:	db001617 	ldw	r12,88(sp)
   4c0bc:	00800044 	movi	r2,1
   4c0c0:	60802226 	beq	r12,r2,4c14c <_dtoa_r+0x1424>
   4c0c4:	d9c00717 	ldw	r7,28(sp)
   4c0c8:	8805883a 	mov	r2,r17
   4c0cc:	b82b883a 	mov	r21,r23
   4c0d0:	3b19883a 	add	r12,r7,r12
   4c0d4:	6023883a 	mov	r17,r12
   4c0d8:	a007883a 	mov	r3,r20
   4c0dc:	dc800f15 	stw	r18,60(sp)
   4c0e0:	000d883a 	mov	r6,zero
   4c0e4:	01d00934 	movhi	r7,16420
   4c0e8:	1009883a 	mov	r4,r2
   4c0ec:	180b883a 	mov	r5,r3
   4c0f0:	0045ad80 	call	45ad8 <__muldf3>
   4c0f4:	180b883a 	mov	r5,r3
   4c0f8:	1009883a 	mov	r4,r2
   4c0fc:	1829883a 	mov	r20,r3
   4c100:	1025883a 	mov	r18,r2
   4c104:	0046aec0 	call	46aec <__fixdfsi>
   4c108:	1009883a 	mov	r4,r2
   4c10c:	1021883a 	mov	r16,r2
   4c110:	0046b6c0 	call	46b6c <__floatsidf>
   4c114:	100d883a 	mov	r6,r2
   4c118:	180f883a 	mov	r7,r3
   4c11c:	9009883a 	mov	r4,r18
   4c120:	a00b883a 	mov	r5,r20
   4c124:	84000c04 	addi	r16,r16,48
   4c128:	00461f00 	call	461f0 <__subdf3>
   4c12c:	ad400044 	addi	r21,r21,1
   4c130:	ac3fffc5 	stb	r16,-1(r21)
   4c134:	ac7fea1e 	bne	r21,r17,4c0e0 <__alt_data_end+0xfffe4fe0>
   4c138:	1023883a 	mov	r17,r2
   4c13c:	d8801217 	ldw	r2,72(sp)
   4c140:	dc800f17 	ldw	r18,60(sp)
   4c144:	1829883a 	mov	r20,r3
   4c148:	b8af883a 	add	r23,r23,r2
   4c14c:	d9001417 	ldw	r4,80(sp)
   4c150:	d9401517 	ldw	r5,84(sp)
   4c154:	000d883a 	mov	r6,zero
   4c158:	01cff834 	movhi	r7,16352
   4c15c:	00447e00 	call	447e0 <__adddf3>
   4c160:	880d883a 	mov	r6,r17
   4c164:	a00f883a 	mov	r7,r20
   4c168:	1009883a 	mov	r4,r2
   4c16c:	180b883a 	mov	r5,r3
   4c170:	00518d80 	call	518d8 <__ledf2>
   4c174:	10003e0e 	bge	r2,zero,4c270 <_dtoa_r+0x1548>
   4c178:	d9001317 	ldw	r4,76(sp)
   4c17c:	bd3fffc3 	ldbu	r20,-1(r23)
   4c180:	d9000515 	stw	r4,20(sp)
   4c184:	003d3b06 	br	4b674 <__alt_data_end+0xfffe4574>
   4c188:	0027883a 	mov	r19,zero
   4c18c:	003f1b06 	br	4bdfc <__alt_data_end+0xfffe4cfc>
   4c190:	d8800817 	ldw	r2,32(sp)
   4c194:	11e9c83a 	sub	r20,r2,r7
   4c198:	0005883a 	mov	r2,zero
   4c19c:	003d5406 	br	4b6f0 <__alt_data_end+0xfffe45f0>
   4c1a0:	00800044 	movi	r2,1
   4c1a4:	003dc706 	br	4b8c4 <__alt_data_end+0xfffe47c4>
   4c1a8:	d8c00217 	ldw	r3,8(sp)
   4c1ac:	00800d84 	movi	r2,54
   4c1b0:	dd400a17 	ldw	r21,40(sp)
   4c1b4:	10c5c83a 	sub	r2,r2,r3
   4c1b8:	dd000817 	ldw	r20,32(sp)
   4c1bc:	003d4c06 	br	4b6f0 <__alt_data_end+0xfffe45f0>
   4c1c0:	dc800f15 	stw	r18,60(sp)
   4c1c4:	dcc01015 	stw	r19,64(sp)
   4c1c8:	04000084 	movi	r16,2
   4c1cc:	003bed06 	br	4b184 <__alt_data_end+0xfffe4084>
   4c1d0:	d9000617 	ldw	r4,24(sp)
   4c1d4:	203f0d26 	beq	r4,zero,4be0c <__alt_data_end+0xfffe4d0c>
   4c1d8:	d9800c17 	ldw	r6,48(sp)
   4c1dc:	01bcab0e 	bge	zero,r6,4b48c <__alt_data_end+0xfffe438c>
   4c1e0:	d9401017 	ldw	r5,64(sp)
   4c1e4:	d9000f17 	ldw	r4,60(sp)
   4c1e8:	000d883a 	mov	r6,zero
   4c1ec:	01d00934 	movhi	r7,16420
   4c1f0:	0045ad80 	call	45ad8 <__muldf3>
   4c1f4:	81000044 	addi	r4,r16,1
   4c1f8:	d8800f15 	stw	r2,60(sp)
   4c1fc:	d8c01015 	stw	r3,64(sp)
   4c200:	0046b6c0 	call	46b6c <__floatsidf>
   4c204:	d9800f17 	ldw	r6,60(sp)
   4c208:	d9c01017 	ldw	r7,64(sp)
   4c20c:	1009883a 	mov	r4,r2
   4c210:	180b883a 	mov	r5,r3
   4c214:	0045ad80 	call	45ad8 <__muldf3>
   4c218:	01d00734 	movhi	r7,16412
   4c21c:	000d883a 	mov	r6,zero
   4c220:	1009883a 	mov	r4,r2
   4c224:	180b883a 	mov	r5,r3
   4c228:	00447e00 	call	447e0 <__adddf3>
   4c22c:	d9c00517 	ldw	r7,20(sp)
   4c230:	047f3034 	movhi	r17,64704
   4c234:	1021883a 	mov	r16,r2
   4c238:	39ffffc4 	addi	r7,r7,-1
   4c23c:	d9c01315 	stw	r7,76(sp)
   4c240:	1c63883a 	add	r17,r3,r17
   4c244:	db000c17 	ldw	r12,48(sp)
   4c248:	003bea06 	br	4b1f4 <__alt_data_end+0xfffe40f4>
   4c24c:	dc000915 	stw	r16,36(sp)
   4c250:	003e0e06 	br	4ba8c <__alt_data_end+0xfffe498c>
   4c254:	01000e44 	movi	r4,57
   4c258:	8825883a 	mov	r18,r17
   4c25c:	9dc00044 	addi	r23,r19,1
   4c260:	99000005 	stb	r4,0(r19)
   4c264:	a023883a 	mov	r17,r20
   4c268:	dc000915 	stw	r16,36(sp)
   4c26c:	003da406 	br	4b900 <__alt_data_end+0xfffe4800>
   4c270:	d9801417 	ldw	r6,80(sp)
   4c274:	d9c01517 	ldw	r7,84(sp)
   4c278:	0009883a 	mov	r4,zero
   4c27c:	014ff834 	movhi	r5,16352
   4c280:	00461f00 	call	461f0 <__subdf3>
   4c284:	880d883a 	mov	r6,r17
   4c288:	a00f883a 	mov	r7,r20
   4c28c:	1009883a 	mov	r4,r2
   4c290:	180b883a 	mov	r5,r3
   4c294:	00459fc0 	call	459fc <__gedf2>
   4c298:	00bc7c0e 	bge	zero,r2,4b48c <__alt_data_end+0xfffe438c>
   4c29c:	01000c04 	movi	r4,48
   4c2a0:	00000106 	br	4c2a8 <_dtoa_r+0x1580>
   4c2a4:	102f883a 	mov	r23,r2
   4c2a8:	b8bfffc4 	addi	r2,r23,-1
   4c2ac:	10c00007 	ldb	r3,0(r2)
   4c2b0:	193ffc26 	beq	r3,r4,4c2a4 <__alt_data_end+0xfffe51a4>
   4c2b4:	d9801317 	ldw	r6,76(sp)
   4c2b8:	d9800515 	stw	r6,20(sp)
   4c2bc:	003c4406 	br	4b3d0 <__alt_data_end+0xfffe42d0>
   4c2c0:	d9801317 	ldw	r6,76(sp)
   4c2c4:	d9800515 	stw	r6,20(sp)
   4c2c8:	003cea06 	br	4b674 <__alt_data_end+0xfffe4574>
   4c2cc:	dd800f17 	ldw	r22,60(sp)
   4c2d0:	dcc01017 	ldw	r19,64(sp)
   4c2d4:	dc801217 	ldw	r18,72(sp)
   4c2d8:	003c6c06 	br	4b48c <__alt_data_end+0xfffe438c>
   4c2dc:	903e031e 	bne	r18,zero,4baec <__alt_data_end+0xfffe49ec>
   4c2e0:	003ebb06 	br	4bdd0 <__alt_data_end+0xfffe4cd0>
   4c2e4:	103e6c1e 	bne	r2,zero,4bc98 <__alt_data_end+0xfffe4b98>
   4c2e8:	4080004c 	andi	r2,r8,1
   4c2ec:	103e6a26 	beq	r2,zero,4bc98 <__alt_data_end+0xfffe4b98>
   4c2f0:	003e6606 	br	4bc8c <__alt_data_end+0xfffe4b8c>
   4c2f4:	d8c00317 	ldw	r3,12(sp)
   4c2f8:	00800084 	movi	r2,2
   4c2fc:	10c02916 	blt	r2,r3,4c3a4 <_dtoa_r+0x167c>
   4c300:	d9000c17 	ldw	r4,48(sp)
   4c304:	003e8806 	br	4bd28 <__alt_data_end+0xfffe4c28>
   4c308:	04000084 	movi	r16,2
   4c30c:	003b9d06 	br	4b184 <__alt_data_end+0xfffe4084>
   4c310:	d9001317 	ldw	r4,76(sp)
   4c314:	d9000515 	stw	r4,20(sp)
   4c318:	003cd606 	br	4b674 <__alt_data_end+0xfffe4574>
   4c31c:	d8801317 	ldw	r2,76(sp)
   4c320:	d8800515 	stw	r2,20(sp)
   4c324:	003c2a06 	br	4b3d0 <__alt_data_end+0xfffe42d0>
   4c328:	d9800317 	ldw	r6,12(sp)
   4c32c:	00800084 	movi	r2,2
   4c330:	11801516 	blt	r2,r6,4c388 <_dtoa_r+0x1660>
   4c334:	d9c00c17 	ldw	r7,48(sp)
   4c338:	d9c00615 	stw	r7,24(sp)
   4c33c:	003df706 	br	4bb1c <__alt_data_end+0xfffe4a1c>
   4c340:	193d3926 	beq	r3,r4,4b828 <__alt_data_end+0xfffe4728>
   4c344:	00c00f04 	movi	r3,60
   4c348:	1885c83a 	sub	r2,r3,r2
   4c34c:	003ddf06 	br	4bacc <__alt_data_end+0xfffe49cc>
   4c350:	e009883a 	mov	r4,fp
   4c354:	e0001115 	stw	zero,68(fp)
   4c358:	000b883a 	mov	r5,zero
   4c35c:	004da340 	call	4da34 <_Balloc>
   4c360:	d8800715 	stw	r2,28(sp)
   4c364:	d8c00717 	ldw	r3,28(sp)
   4c368:	00bfffc4 	movi	r2,-1
   4c36c:	01000044 	movi	r4,1
   4c370:	d8800c15 	stw	r2,48(sp)
   4c374:	e0c01015 	stw	r3,64(fp)
   4c378:	d9000b15 	stw	r4,44(sp)
   4c37c:	d8800615 	stw	r2,24(sp)
   4c380:	d8002215 	stw	zero,136(sp)
   4c384:	003c4106 	br	4b48c <__alt_data_end+0xfffe438c>
   4c388:	d8c00c17 	ldw	r3,48(sp)
   4c38c:	d8c00615 	stw	r3,24(sp)
   4c390:	003e7006 	br	4bd54 <__alt_data_end+0xfffe4c54>
   4c394:	04400044 	movi	r17,1
   4c398:	003b2006 	br	4b01c <__alt_data_end+0xfffe3f1c>
   4c39c:	000b883a 	mov	r5,zero
   4c3a0:	003b3d06 	br	4b098 <__alt_data_end+0xfffe3f98>
   4c3a4:	d8800c17 	ldw	r2,48(sp)
   4c3a8:	d8800615 	stw	r2,24(sp)
   4c3ac:	003e6906 	br	4bd54 <__alt_data_end+0xfffe4c54>

0004c3b0 <__sflush_r>:
   4c3b0:	2880030b 	ldhu	r2,12(r5)
   4c3b4:	defffb04 	addi	sp,sp,-20
   4c3b8:	dcc00315 	stw	r19,12(sp)
   4c3bc:	dc400115 	stw	r17,4(sp)
   4c3c0:	dfc00415 	stw	ra,16(sp)
   4c3c4:	dc800215 	stw	r18,8(sp)
   4c3c8:	dc000015 	stw	r16,0(sp)
   4c3cc:	10c0020c 	andi	r3,r2,8
   4c3d0:	2823883a 	mov	r17,r5
   4c3d4:	2027883a 	mov	r19,r4
   4c3d8:	1800311e 	bne	r3,zero,4c4a0 <__sflush_r+0xf0>
   4c3dc:	28c00117 	ldw	r3,4(r5)
   4c3e0:	10820014 	ori	r2,r2,2048
   4c3e4:	2880030d 	sth	r2,12(r5)
   4c3e8:	00c04b0e 	bge	zero,r3,4c518 <__sflush_r+0x168>
   4c3ec:	8a000a17 	ldw	r8,40(r17)
   4c3f0:	40002326 	beq	r8,zero,4c480 <__sflush_r+0xd0>
   4c3f4:	9c000017 	ldw	r16,0(r19)
   4c3f8:	10c4000c 	andi	r3,r2,4096
   4c3fc:	98000015 	stw	zero,0(r19)
   4c400:	18004826 	beq	r3,zero,4c524 <__sflush_r+0x174>
   4c404:	89801417 	ldw	r6,80(r17)
   4c408:	10c0010c 	andi	r3,r2,4
   4c40c:	18000626 	beq	r3,zero,4c428 <__sflush_r+0x78>
   4c410:	88c00117 	ldw	r3,4(r17)
   4c414:	88800c17 	ldw	r2,48(r17)
   4c418:	30cdc83a 	sub	r6,r6,r3
   4c41c:	10000226 	beq	r2,zero,4c428 <__sflush_r+0x78>
   4c420:	88800f17 	ldw	r2,60(r17)
   4c424:	308dc83a 	sub	r6,r6,r2
   4c428:	89400717 	ldw	r5,28(r17)
   4c42c:	000f883a 	mov	r7,zero
   4c430:	9809883a 	mov	r4,r19
   4c434:	403ee83a 	callr	r8
   4c438:	00ffffc4 	movi	r3,-1
   4c43c:	10c04426 	beq	r2,r3,4c550 <__sflush_r+0x1a0>
   4c440:	88c0030b 	ldhu	r3,12(r17)
   4c444:	89000417 	ldw	r4,16(r17)
   4c448:	88000115 	stw	zero,4(r17)
   4c44c:	197dffcc 	andi	r5,r3,63487
   4c450:	8940030d 	sth	r5,12(r17)
   4c454:	89000015 	stw	r4,0(r17)
   4c458:	18c4000c 	andi	r3,r3,4096
   4c45c:	18002c1e 	bne	r3,zero,4c510 <__sflush_r+0x160>
   4c460:	89400c17 	ldw	r5,48(r17)
   4c464:	9c000015 	stw	r16,0(r19)
   4c468:	28000526 	beq	r5,zero,4c480 <__sflush_r+0xd0>
   4c46c:	88801004 	addi	r2,r17,64
   4c470:	28800226 	beq	r5,r2,4c47c <__sflush_r+0xcc>
   4c474:	9809883a 	mov	r4,r19
   4c478:	004cbc80 	call	4cbc8 <_free_r>
   4c47c:	88000c15 	stw	zero,48(r17)
   4c480:	0005883a 	mov	r2,zero
   4c484:	dfc00417 	ldw	ra,16(sp)
   4c488:	dcc00317 	ldw	r19,12(sp)
   4c48c:	dc800217 	ldw	r18,8(sp)
   4c490:	dc400117 	ldw	r17,4(sp)
   4c494:	dc000017 	ldw	r16,0(sp)
   4c498:	dec00504 	addi	sp,sp,20
   4c49c:	f800283a 	ret
   4c4a0:	2c800417 	ldw	r18,16(r5)
   4c4a4:	903ff626 	beq	r18,zero,4c480 <__alt_data_end+0xfffe5380>
   4c4a8:	2c000017 	ldw	r16,0(r5)
   4c4ac:	108000cc 	andi	r2,r2,3
   4c4b0:	2c800015 	stw	r18,0(r5)
   4c4b4:	84a1c83a 	sub	r16,r16,r18
   4c4b8:	1000131e 	bne	r2,zero,4c508 <__sflush_r+0x158>
   4c4bc:	28800517 	ldw	r2,20(r5)
   4c4c0:	88800215 	stw	r2,8(r17)
   4c4c4:	04000316 	blt	zero,r16,4c4d4 <__sflush_r+0x124>
   4c4c8:	003fed06 	br	4c480 <__alt_data_end+0xfffe5380>
   4c4cc:	90a5883a 	add	r18,r18,r2
   4c4d0:	043feb0e 	bge	zero,r16,4c480 <__alt_data_end+0xfffe5380>
   4c4d4:	88800917 	ldw	r2,36(r17)
   4c4d8:	89400717 	ldw	r5,28(r17)
   4c4dc:	800f883a 	mov	r7,r16
   4c4e0:	900d883a 	mov	r6,r18
   4c4e4:	9809883a 	mov	r4,r19
   4c4e8:	103ee83a 	callr	r2
   4c4ec:	80a1c83a 	sub	r16,r16,r2
   4c4f0:	00bff616 	blt	zero,r2,4c4cc <__alt_data_end+0xfffe53cc>
   4c4f4:	88c0030b 	ldhu	r3,12(r17)
   4c4f8:	00bfffc4 	movi	r2,-1
   4c4fc:	18c01014 	ori	r3,r3,64
   4c500:	88c0030d 	sth	r3,12(r17)
   4c504:	003fdf06 	br	4c484 <__alt_data_end+0xfffe5384>
   4c508:	0005883a 	mov	r2,zero
   4c50c:	003fec06 	br	4c4c0 <__alt_data_end+0xfffe53c0>
   4c510:	88801415 	stw	r2,80(r17)
   4c514:	003fd206 	br	4c460 <__alt_data_end+0xfffe5360>
   4c518:	28c00f17 	ldw	r3,60(r5)
   4c51c:	00ffb316 	blt	zero,r3,4c3ec <__alt_data_end+0xfffe52ec>
   4c520:	003fd706 	br	4c480 <__alt_data_end+0xfffe5380>
   4c524:	89400717 	ldw	r5,28(r17)
   4c528:	000d883a 	mov	r6,zero
   4c52c:	01c00044 	movi	r7,1
   4c530:	9809883a 	mov	r4,r19
   4c534:	403ee83a 	callr	r8
   4c538:	100d883a 	mov	r6,r2
   4c53c:	00bfffc4 	movi	r2,-1
   4c540:	30801426 	beq	r6,r2,4c594 <__sflush_r+0x1e4>
   4c544:	8880030b 	ldhu	r2,12(r17)
   4c548:	8a000a17 	ldw	r8,40(r17)
   4c54c:	003fae06 	br	4c408 <__alt_data_end+0xfffe5308>
   4c550:	98c00017 	ldw	r3,0(r19)
   4c554:	183fba26 	beq	r3,zero,4c440 <__alt_data_end+0xfffe5340>
   4c558:	01000744 	movi	r4,29
   4c55c:	19000626 	beq	r3,r4,4c578 <__sflush_r+0x1c8>
   4c560:	01000584 	movi	r4,22
   4c564:	19000426 	beq	r3,r4,4c578 <__sflush_r+0x1c8>
   4c568:	88c0030b 	ldhu	r3,12(r17)
   4c56c:	18c01014 	ori	r3,r3,64
   4c570:	88c0030d 	sth	r3,12(r17)
   4c574:	003fc306 	br	4c484 <__alt_data_end+0xfffe5384>
   4c578:	8880030b 	ldhu	r2,12(r17)
   4c57c:	88c00417 	ldw	r3,16(r17)
   4c580:	88000115 	stw	zero,4(r17)
   4c584:	10bdffcc 	andi	r2,r2,63487
   4c588:	8880030d 	sth	r2,12(r17)
   4c58c:	88c00015 	stw	r3,0(r17)
   4c590:	003fb306 	br	4c460 <__alt_data_end+0xfffe5360>
   4c594:	98800017 	ldw	r2,0(r19)
   4c598:	103fea26 	beq	r2,zero,4c544 <__alt_data_end+0xfffe5444>
   4c59c:	00c00744 	movi	r3,29
   4c5a0:	10c00226 	beq	r2,r3,4c5ac <__sflush_r+0x1fc>
   4c5a4:	00c00584 	movi	r3,22
   4c5a8:	10c0031e 	bne	r2,r3,4c5b8 <__sflush_r+0x208>
   4c5ac:	9c000015 	stw	r16,0(r19)
   4c5b0:	0005883a 	mov	r2,zero
   4c5b4:	003fb306 	br	4c484 <__alt_data_end+0xfffe5384>
   4c5b8:	88c0030b 	ldhu	r3,12(r17)
   4c5bc:	3005883a 	mov	r2,r6
   4c5c0:	18c01014 	ori	r3,r3,64
   4c5c4:	88c0030d 	sth	r3,12(r17)
   4c5c8:	003fae06 	br	4c484 <__alt_data_end+0xfffe5384>

0004c5cc <_fflush_r>:
   4c5cc:	defffd04 	addi	sp,sp,-12
   4c5d0:	dc000115 	stw	r16,4(sp)
   4c5d4:	dfc00215 	stw	ra,8(sp)
   4c5d8:	2021883a 	mov	r16,r4
   4c5dc:	20000226 	beq	r4,zero,4c5e8 <_fflush_r+0x1c>
   4c5e0:	20800e17 	ldw	r2,56(r4)
   4c5e4:	10000c26 	beq	r2,zero,4c618 <_fflush_r+0x4c>
   4c5e8:	2880030f 	ldh	r2,12(r5)
   4c5ec:	1000051e 	bne	r2,zero,4c604 <_fflush_r+0x38>
   4c5f0:	0005883a 	mov	r2,zero
   4c5f4:	dfc00217 	ldw	ra,8(sp)
   4c5f8:	dc000117 	ldw	r16,4(sp)
   4c5fc:	dec00304 	addi	sp,sp,12
   4c600:	f800283a 	ret
   4c604:	8009883a 	mov	r4,r16
   4c608:	dfc00217 	ldw	ra,8(sp)
   4c60c:	dc000117 	ldw	r16,4(sp)
   4c610:	dec00304 	addi	sp,sp,12
   4c614:	004c3b01 	jmpi	4c3b0 <__sflush_r>
   4c618:	d9400015 	stw	r5,0(sp)
   4c61c:	004c9a80 	call	4c9a8 <__sinit>
   4c620:	d9400017 	ldw	r5,0(sp)
   4c624:	003ff006 	br	4c5e8 <__alt_data_end+0xfffe54e8>

0004c628 <fflush>:
   4c628:	20000526 	beq	r4,zero,4c640 <fflush+0x18>
   4c62c:	008001b4 	movhi	r2,6
   4c630:	10a1a804 	addi	r2,r2,-31072
   4c634:	200b883a 	mov	r5,r4
   4c638:	11000017 	ldw	r4,0(r2)
   4c63c:	004c5cc1 	jmpi	4c5cc <_fflush_r>
   4c640:	008001b4 	movhi	r2,6
   4c644:	10a1a704 	addi	r2,r2,-31076
   4c648:	11000017 	ldw	r4,0(r2)
   4c64c:	01400174 	movhi	r5,5
   4c650:	29717304 	addi	r5,r5,-14900
   4c654:	004d4581 	jmpi	4d458 <_fwalk_reent>

0004c658 <__fp_unlock>:
   4c658:	0005883a 	mov	r2,zero
   4c65c:	f800283a 	ret

0004c660 <_cleanup_r>:
   4c660:	01400174 	movhi	r5,5
   4c664:	2941f704 	addi	r5,r5,2012
   4c668:	004d4581 	jmpi	4d458 <_fwalk_reent>

0004c66c <__sinit.part.1>:
   4c66c:	defff704 	addi	sp,sp,-36
   4c670:	00c00174 	movhi	r3,5
   4c674:	dfc00815 	stw	ra,32(sp)
   4c678:	ddc00715 	stw	r23,28(sp)
   4c67c:	dd800615 	stw	r22,24(sp)
   4c680:	dd400515 	stw	r21,20(sp)
   4c684:	dd000415 	stw	r20,16(sp)
   4c688:	dcc00315 	stw	r19,12(sp)
   4c68c:	dc800215 	stw	r18,8(sp)
   4c690:	dc400115 	stw	r17,4(sp)
   4c694:	dc000015 	stw	r16,0(sp)
   4c698:	18f19804 	addi	r3,r3,-14752
   4c69c:	24000117 	ldw	r16,4(r4)
   4c6a0:	20c00f15 	stw	r3,60(r4)
   4c6a4:	2080bb04 	addi	r2,r4,748
   4c6a8:	00c000c4 	movi	r3,3
   4c6ac:	20c0b915 	stw	r3,740(r4)
   4c6b0:	2080ba15 	stw	r2,744(r4)
   4c6b4:	2000b815 	stw	zero,736(r4)
   4c6b8:	05c00204 	movi	r23,8
   4c6bc:	00800104 	movi	r2,4
   4c6c0:	2025883a 	mov	r18,r4
   4c6c4:	b80d883a 	mov	r6,r23
   4c6c8:	81001704 	addi	r4,r16,92
   4c6cc:	000b883a 	mov	r5,zero
   4c6d0:	80000015 	stw	zero,0(r16)
   4c6d4:	80000115 	stw	zero,4(r16)
   4c6d8:	80000215 	stw	zero,8(r16)
   4c6dc:	8080030d 	sth	r2,12(r16)
   4c6e0:	80001915 	stw	zero,100(r16)
   4c6e4:	8000038d 	sth	zero,14(r16)
   4c6e8:	80000415 	stw	zero,16(r16)
   4c6ec:	80000515 	stw	zero,20(r16)
   4c6f0:	80000615 	stw	zero,24(r16)
   4c6f4:	0047f700 	call	47f70 <memset>
   4c6f8:	05800174 	movhi	r22,5
   4c6fc:	94400217 	ldw	r17,8(r18)
   4c700:	05400174 	movhi	r21,5
   4c704:	05000174 	movhi	r20,5
   4c708:	04c00174 	movhi	r19,5
   4c70c:	b5a11f04 	addi	r22,r22,-31620
   4c710:	ad613604 	addi	r21,r21,-31528
   4c714:	a5215504 	addi	r20,r20,-31404
   4c718:	9ce16c04 	addi	r19,r19,-31312
   4c71c:	85800815 	stw	r22,32(r16)
   4c720:	85400915 	stw	r21,36(r16)
   4c724:	85000a15 	stw	r20,40(r16)
   4c728:	84c00b15 	stw	r19,44(r16)
   4c72c:	84000715 	stw	r16,28(r16)
   4c730:	00800284 	movi	r2,10
   4c734:	8880030d 	sth	r2,12(r17)
   4c738:	00800044 	movi	r2,1
   4c73c:	b80d883a 	mov	r6,r23
   4c740:	89001704 	addi	r4,r17,92
   4c744:	000b883a 	mov	r5,zero
   4c748:	88000015 	stw	zero,0(r17)
   4c74c:	88000115 	stw	zero,4(r17)
   4c750:	88000215 	stw	zero,8(r17)
   4c754:	88001915 	stw	zero,100(r17)
   4c758:	8880038d 	sth	r2,14(r17)
   4c75c:	88000415 	stw	zero,16(r17)
   4c760:	88000515 	stw	zero,20(r17)
   4c764:	88000615 	stw	zero,24(r17)
   4c768:	0047f700 	call	47f70 <memset>
   4c76c:	94000317 	ldw	r16,12(r18)
   4c770:	00800484 	movi	r2,18
   4c774:	8c400715 	stw	r17,28(r17)
   4c778:	8d800815 	stw	r22,32(r17)
   4c77c:	8d400915 	stw	r21,36(r17)
   4c780:	8d000a15 	stw	r20,40(r17)
   4c784:	8cc00b15 	stw	r19,44(r17)
   4c788:	8080030d 	sth	r2,12(r16)
   4c78c:	00800084 	movi	r2,2
   4c790:	80000015 	stw	zero,0(r16)
   4c794:	80000115 	stw	zero,4(r16)
   4c798:	80000215 	stw	zero,8(r16)
   4c79c:	80001915 	stw	zero,100(r16)
   4c7a0:	8080038d 	sth	r2,14(r16)
   4c7a4:	80000415 	stw	zero,16(r16)
   4c7a8:	80000515 	stw	zero,20(r16)
   4c7ac:	80000615 	stw	zero,24(r16)
   4c7b0:	b80d883a 	mov	r6,r23
   4c7b4:	000b883a 	mov	r5,zero
   4c7b8:	81001704 	addi	r4,r16,92
   4c7bc:	0047f700 	call	47f70 <memset>
   4c7c0:	00800044 	movi	r2,1
   4c7c4:	84000715 	stw	r16,28(r16)
   4c7c8:	85800815 	stw	r22,32(r16)
   4c7cc:	85400915 	stw	r21,36(r16)
   4c7d0:	85000a15 	stw	r20,40(r16)
   4c7d4:	84c00b15 	stw	r19,44(r16)
   4c7d8:	90800e15 	stw	r2,56(r18)
   4c7dc:	dfc00817 	ldw	ra,32(sp)
   4c7e0:	ddc00717 	ldw	r23,28(sp)
   4c7e4:	dd800617 	ldw	r22,24(sp)
   4c7e8:	dd400517 	ldw	r21,20(sp)
   4c7ec:	dd000417 	ldw	r20,16(sp)
   4c7f0:	dcc00317 	ldw	r19,12(sp)
   4c7f4:	dc800217 	ldw	r18,8(sp)
   4c7f8:	dc400117 	ldw	r17,4(sp)
   4c7fc:	dc000017 	ldw	r16,0(sp)
   4c800:	dec00904 	addi	sp,sp,36
   4c804:	f800283a 	ret

0004c808 <__fp_lock>:
   4c808:	0005883a 	mov	r2,zero
   4c80c:	f800283a 	ret

0004c810 <__sfmoreglue>:
   4c810:	defffc04 	addi	sp,sp,-16
   4c814:	dc400115 	stw	r17,4(sp)
   4c818:	2c7fffc4 	addi	r17,r5,-1
   4c81c:	8c401a24 	muli	r17,r17,104
   4c820:	dc800215 	stw	r18,8(sp)
   4c824:	2825883a 	mov	r18,r5
   4c828:	89401d04 	addi	r5,r17,116
   4c82c:	dc000015 	stw	r16,0(sp)
   4c830:	dfc00315 	stw	ra,12(sp)
   4c834:	00477640 	call	47764 <_malloc_r>
   4c838:	1021883a 	mov	r16,r2
   4c83c:	10000726 	beq	r2,zero,4c85c <__sfmoreglue+0x4c>
   4c840:	11000304 	addi	r4,r2,12
   4c844:	10000015 	stw	zero,0(r2)
   4c848:	14800115 	stw	r18,4(r2)
   4c84c:	11000215 	stw	r4,8(r2)
   4c850:	89801a04 	addi	r6,r17,104
   4c854:	000b883a 	mov	r5,zero
   4c858:	0047f700 	call	47f70 <memset>
   4c85c:	8005883a 	mov	r2,r16
   4c860:	dfc00317 	ldw	ra,12(sp)
   4c864:	dc800217 	ldw	r18,8(sp)
   4c868:	dc400117 	ldw	r17,4(sp)
   4c86c:	dc000017 	ldw	r16,0(sp)
   4c870:	dec00404 	addi	sp,sp,16
   4c874:	f800283a 	ret

0004c878 <__sfp>:
   4c878:	defffb04 	addi	sp,sp,-20
   4c87c:	dc000015 	stw	r16,0(sp)
   4c880:	040001b4 	movhi	r16,6
   4c884:	8421a704 	addi	r16,r16,-31076
   4c888:	dcc00315 	stw	r19,12(sp)
   4c88c:	2027883a 	mov	r19,r4
   4c890:	81000017 	ldw	r4,0(r16)
   4c894:	dfc00415 	stw	ra,16(sp)
   4c898:	dc800215 	stw	r18,8(sp)
   4c89c:	20800e17 	ldw	r2,56(r4)
   4c8a0:	dc400115 	stw	r17,4(sp)
   4c8a4:	1000021e 	bne	r2,zero,4c8b0 <__sfp+0x38>
   4c8a8:	004c66c0 	call	4c66c <__sinit.part.1>
   4c8ac:	81000017 	ldw	r4,0(r16)
   4c8b0:	2480b804 	addi	r18,r4,736
   4c8b4:	047fffc4 	movi	r17,-1
   4c8b8:	91000117 	ldw	r4,4(r18)
   4c8bc:	94000217 	ldw	r16,8(r18)
   4c8c0:	213fffc4 	addi	r4,r4,-1
   4c8c4:	20000a16 	blt	r4,zero,4c8f0 <__sfp+0x78>
   4c8c8:	8080030f 	ldh	r2,12(r16)
   4c8cc:	10000c26 	beq	r2,zero,4c900 <__sfp+0x88>
   4c8d0:	80c01d04 	addi	r3,r16,116
   4c8d4:	00000206 	br	4c8e0 <__sfp+0x68>
   4c8d8:	18bfe60f 	ldh	r2,-104(r3)
   4c8dc:	10000826 	beq	r2,zero,4c900 <__sfp+0x88>
   4c8e0:	213fffc4 	addi	r4,r4,-1
   4c8e4:	1c3ffd04 	addi	r16,r3,-12
   4c8e8:	18c01a04 	addi	r3,r3,104
   4c8ec:	247ffa1e 	bne	r4,r17,4c8d8 <__alt_data_end+0xfffe57d8>
   4c8f0:	90800017 	ldw	r2,0(r18)
   4c8f4:	10001d26 	beq	r2,zero,4c96c <__sfp+0xf4>
   4c8f8:	1025883a 	mov	r18,r2
   4c8fc:	003fee06 	br	4c8b8 <__alt_data_end+0xfffe57b8>
   4c900:	00bfffc4 	movi	r2,-1
   4c904:	8080038d 	sth	r2,14(r16)
   4c908:	00800044 	movi	r2,1
   4c90c:	8080030d 	sth	r2,12(r16)
   4c910:	80001915 	stw	zero,100(r16)
   4c914:	80000015 	stw	zero,0(r16)
   4c918:	80000215 	stw	zero,8(r16)
   4c91c:	80000115 	stw	zero,4(r16)
   4c920:	80000415 	stw	zero,16(r16)
   4c924:	80000515 	stw	zero,20(r16)
   4c928:	80000615 	stw	zero,24(r16)
   4c92c:	01800204 	movi	r6,8
   4c930:	000b883a 	mov	r5,zero
   4c934:	81001704 	addi	r4,r16,92
   4c938:	0047f700 	call	47f70 <memset>
   4c93c:	8005883a 	mov	r2,r16
   4c940:	80000c15 	stw	zero,48(r16)
   4c944:	80000d15 	stw	zero,52(r16)
   4c948:	80001115 	stw	zero,68(r16)
   4c94c:	80001215 	stw	zero,72(r16)
   4c950:	dfc00417 	ldw	ra,16(sp)
   4c954:	dcc00317 	ldw	r19,12(sp)
   4c958:	dc800217 	ldw	r18,8(sp)
   4c95c:	dc400117 	ldw	r17,4(sp)
   4c960:	dc000017 	ldw	r16,0(sp)
   4c964:	dec00504 	addi	sp,sp,20
   4c968:	f800283a 	ret
   4c96c:	01400104 	movi	r5,4
   4c970:	9809883a 	mov	r4,r19
   4c974:	004c8100 	call	4c810 <__sfmoreglue>
   4c978:	90800015 	stw	r2,0(r18)
   4c97c:	103fde1e 	bne	r2,zero,4c8f8 <__alt_data_end+0xfffe57f8>
   4c980:	00800304 	movi	r2,12
   4c984:	98800015 	stw	r2,0(r19)
   4c988:	0005883a 	mov	r2,zero
   4c98c:	003ff006 	br	4c950 <__alt_data_end+0xfffe5850>

0004c990 <_cleanup>:
   4c990:	008001b4 	movhi	r2,6
   4c994:	10a1a704 	addi	r2,r2,-31076
   4c998:	11000017 	ldw	r4,0(r2)
   4c99c:	01400174 	movhi	r5,5
   4c9a0:	2941f704 	addi	r5,r5,2012
   4c9a4:	004d4581 	jmpi	4d458 <_fwalk_reent>

0004c9a8 <__sinit>:
   4c9a8:	20800e17 	ldw	r2,56(r4)
   4c9ac:	10000126 	beq	r2,zero,4c9b4 <__sinit+0xc>
   4c9b0:	f800283a 	ret
   4c9b4:	004c66c1 	jmpi	4c66c <__sinit.part.1>

0004c9b8 <__sfp_lock_acquire>:
   4c9b8:	f800283a 	ret

0004c9bc <__sfp_lock_release>:
   4c9bc:	f800283a 	ret

0004c9c0 <__sinit_lock_acquire>:
   4c9c0:	f800283a 	ret

0004c9c4 <__sinit_lock_release>:
   4c9c4:	f800283a 	ret

0004c9c8 <__fp_lock_all>:
   4c9c8:	008001b4 	movhi	r2,6
   4c9cc:	10a1a804 	addi	r2,r2,-31072
   4c9d0:	11000017 	ldw	r4,0(r2)
   4c9d4:	01400174 	movhi	r5,5
   4c9d8:	29720204 	addi	r5,r5,-14328
   4c9dc:	004d3941 	jmpi	4d394 <_fwalk>

0004c9e0 <__fp_unlock_all>:
   4c9e0:	008001b4 	movhi	r2,6
   4c9e4:	10a1a804 	addi	r2,r2,-31072
   4c9e8:	11000017 	ldw	r4,0(r2)
   4c9ec:	01400174 	movhi	r5,5
   4c9f0:	29719604 	addi	r5,r5,-14760
   4c9f4:	004d3941 	jmpi	4d394 <_fwalk>

0004c9f8 <__sflags>:
   4c9f8:	28800007 	ldb	r2,0(r5)
   4c9fc:	00c01c84 	movi	r3,114
   4ca00:	10c02426 	beq	r2,r3,4ca94 <__sflags+0x9c>
   4ca04:	00c01dc4 	movi	r3,119
   4ca08:	10c01e26 	beq	r2,r3,4ca84 <__sflags+0x8c>
   4ca0c:	00c01844 	movi	r3,97
   4ca10:	10c00426 	beq	r2,r3,4ca24 <__sflags+0x2c>
   4ca14:	00800584 	movi	r2,22
   4ca18:	20800015 	stw	r2,0(r4)
   4ca1c:	0005883a 	mov	r2,zero
   4ca20:	f800283a 	ret
   4ca24:	02c08204 	movi	r11,520
   4ca28:	01000044 	movi	r4,1
   4ca2c:	00804204 	movi	r2,264
   4ca30:	01c00ac4 	movi	r7,43
   4ca34:	02bff8c4 	movi	r10,-29
   4ca38:	027fff04 	movi	r9,-4
   4ca3c:	02001e04 	movi	r8,120
   4ca40:	29400044 	addi	r5,r5,1
   4ca44:	28c00007 	ldb	r3,0(r5)
   4ca48:	18000626 	beq	r3,zero,4ca64 <__sflags+0x6c>
   4ca4c:	19c00826 	beq	r3,r7,4ca70 <__sflags+0x78>
   4ca50:	1a3ffb1e 	bne	r3,r8,4ca40 <__alt_data_end+0xfffe5940>
   4ca54:	29400044 	addi	r5,r5,1
   4ca58:	28c00007 	ldb	r3,0(r5)
   4ca5c:	21020014 	ori	r4,r4,2048
   4ca60:	183ffa1e 	bne	r3,zero,4ca4c <__alt_data_end+0xfffe594c>
   4ca64:	22c8b03a 	or	r4,r4,r11
   4ca68:	31000015 	stw	r4,0(r6)
   4ca6c:	f800283a 	ret
   4ca70:	1284703a 	and	r2,r2,r10
   4ca74:	2248703a 	and	r4,r4,r9
   4ca78:	10800414 	ori	r2,r2,16
   4ca7c:	21000094 	ori	r4,r4,2
   4ca80:	003fef06 	br	4ca40 <__alt_data_end+0xfffe5940>
   4ca84:	02c18004 	movi	r11,1536
   4ca88:	01000044 	movi	r4,1
   4ca8c:	00800204 	movi	r2,8
   4ca90:	003fe706 	br	4ca30 <__alt_data_end+0xfffe5930>
   4ca94:	0017883a 	mov	r11,zero
   4ca98:	0009883a 	mov	r4,zero
   4ca9c:	00800104 	movi	r2,4
   4caa0:	003fe306 	br	4ca30 <__alt_data_end+0xfffe5930>

0004caa4 <_malloc_trim_r>:
   4caa4:	defffb04 	addi	sp,sp,-20
   4caa8:	dcc00315 	stw	r19,12(sp)
   4caac:	04c00174 	movhi	r19,5
   4cab0:	dc800215 	stw	r18,8(sp)
   4cab4:	dc400115 	stw	r17,4(sp)
   4cab8:	dc000015 	stw	r16,0(sp)
   4cabc:	dfc00415 	stw	ra,16(sp)
   4cac0:	2821883a 	mov	r16,r5
   4cac4:	9cdbe904 	addi	r19,r19,28580
   4cac8:	2025883a 	mov	r18,r4
   4cacc:	0051ff00 	call	51ff0 <__malloc_lock>
   4cad0:	98800217 	ldw	r2,8(r19)
   4cad4:	14400117 	ldw	r17,4(r2)
   4cad8:	00bfff04 	movi	r2,-4
   4cadc:	88a2703a 	and	r17,r17,r2
   4cae0:	8c21c83a 	sub	r16,r17,r16
   4cae4:	8403fbc4 	addi	r16,r16,4079
   4cae8:	8020d33a 	srli	r16,r16,12
   4caec:	0083ffc4 	movi	r2,4095
   4caf0:	843fffc4 	addi	r16,r16,-1
   4caf4:	8020933a 	slli	r16,r16,12
   4caf8:	1400060e 	bge	r2,r16,4cb14 <_malloc_trim_r+0x70>
   4cafc:	000b883a 	mov	r5,zero
   4cb00:	9009883a 	mov	r4,r18
   4cb04:	00484280 	call	48428 <_sbrk_r>
   4cb08:	98c00217 	ldw	r3,8(r19)
   4cb0c:	1c47883a 	add	r3,r3,r17
   4cb10:	10c00a26 	beq	r2,r3,4cb3c <_malloc_trim_r+0x98>
   4cb14:	9009883a 	mov	r4,r18
   4cb18:	00520140 	call	52014 <__malloc_unlock>
   4cb1c:	0005883a 	mov	r2,zero
   4cb20:	dfc00417 	ldw	ra,16(sp)
   4cb24:	dcc00317 	ldw	r19,12(sp)
   4cb28:	dc800217 	ldw	r18,8(sp)
   4cb2c:	dc400117 	ldw	r17,4(sp)
   4cb30:	dc000017 	ldw	r16,0(sp)
   4cb34:	dec00504 	addi	sp,sp,20
   4cb38:	f800283a 	ret
   4cb3c:	040bc83a 	sub	r5,zero,r16
   4cb40:	9009883a 	mov	r4,r18
   4cb44:	00484280 	call	48428 <_sbrk_r>
   4cb48:	00ffffc4 	movi	r3,-1
   4cb4c:	10c00d26 	beq	r2,r3,4cb84 <_malloc_trim_r+0xe0>
   4cb50:	00c001b4 	movhi	r3,6
   4cb54:	18e8c504 	addi	r3,r3,-23788
   4cb58:	18800017 	ldw	r2,0(r3)
   4cb5c:	99000217 	ldw	r4,8(r19)
   4cb60:	8c23c83a 	sub	r17,r17,r16
   4cb64:	8c400054 	ori	r17,r17,1
   4cb68:	1421c83a 	sub	r16,r2,r16
   4cb6c:	24400115 	stw	r17,4(r4)
   4cb70:	9009883a 	mov	r4,r18
   4cb74:	1c000015 	stw	r16,0(r3)
   4cb78:	00520140 	call	52014 <__malloc_unlock>
   4cb7c:	00800044 	movi	r2,1
   4cb80:	003fe706 	br	4cb20 <__alt_data_end+0xfffe5a20>
   4cb84:	000b883a 	mov	r5,zero
   4cb88:	9009883a 	mov	r4,r18
   4cb8c:	00484280 	call	48428 <_sbrk_r>
   4cb90:	99000217 	ldw	r4,8(r19)
   4cb94:	014003c4 	movi	r5,15
   4cb98:	1107c83a 	sub	r3,r2,r4
   4cb9c:	28ffdd0e 	bge	r5,r3,4cb14 <__alt_data_end+0xfffe5a14>
   4cba0:	014001b4 	movhi	r5,6
   4cba4:	2961a904 	addi	r5,r5,-31068
   4cba8:	29400017 	ldw	r5,0(r5)
   4cbac:	18c00054 	ori	r3,r3,1
   4cbb0:	20c00115 	stw	r3,4(r4)
   4cbb4:	00c001b4 	movhi	r3,6
   4cbb8:	1145c83a 	sub	r2,r2,r5
   4cbbc:	18e8c504 	addi	r3,r3,-23788
   4cbc0:	18800015 	stw	r2,0(r3)
   4cbc4:	003fd306 	br	4cb14 <__alt_data_end+0xfffe5a14>

0004cbc8 <_free_r>:
   4cbc8:	28004126 	beq	r5,zero,4ccd0 <_free_r+0x108>
   4cbcc:	defffd04 	addi	sp,sp,-12
   4cbd0:	dc400115 	stw	r17,4(sp)
   4cbd4:	dc000015 	stw	r16,0(sp)
   4cbd8:	2023883a 	mov	r17,r4
   4cbdc:	2821883a 	mov	r16,r5
   4cbe0:	dfc00215 	stw	ra,8(sp)
   4cbe4:	0051ff00 	call	51ff0 <__malloc_lock>
   4cbe8:	81ffff17 	ldw	r7,-4(r16)
   4cbec:	00bfff84 	movi	r2,-2
   4cbf0:	01000174 	movhi	r4,5
   4cbf4:	81bffe04 	addi	r6,r16,-8
   4cbf8:	3884703a 	and	r2,r7,r2
   4cbfc:	211be904 	addi	r4,r4,28580
   4cc00:	308b883a 	add	r5,r6,r2
   4cc04:	2a400117 	ldw	r9,4(r5)
   4cc08:	22000217 	ldw	r8,8(r4)
   4cc0c:	00ffff04 	movi	r3,-4
   4cc10:	48c6703a 	and	r3,r9,r3
   4cc14:	2a005726 	beq	r5,r8,4cd74 <_free_r+0x1ac>
   4cc18:	28c00115 	stw	r3,4(r5)
   4cc1c:	39c0004c 	andi	r7,r7,1
   4cc20:	3800091e 	bne	r7,zero,4cc48 <_free_r+0x80>
   4cc24:	823ffe17 	ldw	r8,-8(r16)
   4cc28:	22400204 	addi	r9,r4,8
   4cc2c:	320dc83a 	sub	r6,r6,r8
   4cc30:	31c00217 	ldw	r7,8(r6)
   4cc34:	1205883a 	add	r2,r2,r8
   4cc38:	3a406526 	beq	r7,r9,4cdd0 <_free_r+0x208>
   4cc3c:	32000317 	ldw	r8,12(r6)
   4cc40:	3a000315 	stw	r8,12(r7)
   4cc44:	41c00215 	stw	r7,8(r8)
   4cc48:	28cf883a 	add	r7,r5,r3
   4cc4c:	39c00117 	ldw	r7,4(r7)
   4cc50:	39c0004c 	andi	r7,r7,1
   4cc54:	38003a26 	beq	r7,zero,4cd40 <_free_r+0x178>
   4cc58:	10c00054 	ori	r3,r2,1
   4cc5c:	30c00115 	stw	r3,4(r6)
   4cc60:	3087883a 	add	r3,r6,r2
   4cc64:	18800015 	stw	r2,0(r3)
   4cc68:	00c07fc4 	movi	r3,511
   4cc6c:	18801936 	bltu	r3,r2,4ccd4 <_free_r+0x10c>
   4cc70:	1004d0fa 	srli	r2,r2,3
   4cc74:	01c00044 	movi	r7,1
   4cc78:	21400117 	ldw	r5,4(r4)
   4cc7c:	10c00044 	addi	r3,r2,1
   4cc80:	18c7883a 	add	r3,r3,r3
   4cc84:	1005d0ba 	srai	r2,r2,2
   4cc88:	18c7883a 	add	r3,r3,r3
   4cc8c:	18c7883a 	add	r3,r3,r3
   4cc90:	1907883a 	add	r3,r3,r4
   4cc94:	3884983a 	sll	r2,r7,r2
   4cc98:	19c00017 	ldw	r7,0(r3)
   4cc9c:	1a3ffe04 	addi	r8,r3,-8
   4cca0:	1144b03a 	or	r2,r2,r5
   4cca4:	32000315 	stw	r8,12(r6)
   4cca8:	31c00215 	stw	r7,8(r6)
   4ccac:	20800115 	stw	r2,4(r4)
   4ccb0:	19800015 	stw	r6,0(r3)
   4ccb4:	39800315 	stw	r6,12(r7)
   4ccb8:	8809883a 	mov	r4,r17
   4ccbc:	dfc00217 	ldw	ra,8(sp)
   4ccc0:	dc400117 	ldw	r17,4(sp)
   4ccc4:	dc000017 	ldw	r16,0(sp)
   4ccc8:	dec00304 	addi	sp,sp,12
   4cccc:	00520141 	jmpi	52014 <__malloc_unlock>
   4ccd0:	f800283a 	ret
   4ccd4:	100ad27a 	srli	r5,r2,9
   4ccd8:	00c00104 	movi	r3,4
   4ccdc:	19404a36 	bltu	r3,r5,4ce08 <_free_r+0x240>
   4cce0:	100ad1ba 	srli	r5,r2,6
   4cce4:	28c00e44 	addi	r3,r5,57
   4cce8:	18c7883a 	add	r3,r3,r3
   4ccec:	29400e04 	addi	r5,r5,56
   4ccf0:	18c7883a 	add	r3,r3,r3
   4ccf4:	18c7883a 	add	r3,r3,r3
   4ccf8:	1909883a 	add	r4,r3,r4
   4ccfc:	20c00017 	ldw	r3,0(r4)
   4cd00:	01c00174 	movhi	r7,5
   4cd04:	213ffe04 	addi	r4,r4,-8
   4cd08:	39dbe904 	addi	r7,r7,28580
   4cd0c:	20c04426 	beq	r4,r3,4ce20 <_free_r+0x258>
   4cd10:	01ffff04 	movi	r7,-4
   4cd14:	19400117 	ldw	r5,4(r3)
   4cd18:	29ca703a 	and	r5,r5,r7
   4cd1c:	1140022e 	bgeu	r2,r5,4cd28 <_free_r+0x160>
   4cd20:	18c00217 	ldw	r3,8(r3)
   4cd24:	20fffb1e 	bne	r4,r3,4cd14 <__alt_data_end+0xfffe5c14>
   4cd28:	19000317 	ldw	r4,12(r3)
   4cd2c:	31000315 	stw	r4,12(r6)
   4cd30:	30c00215 	stw	r3,8(r6)
   4cd34:	21800215 	stw	r6,8(r4)
   4cd38:	19800315 	stw	r6,12(r3)
   4cd3c:	003fde06 	br	4ccb8 <__alt_data_end+0xfffe5bb8>
   4cd40:	29c00217 	ldw	r7,8(r5)
   4cd44:	10c5883a 	add	r2,r2,r3
   4cd48:	00c00174 	movhi	r3,5
   4cd4c:	18dbeb04 	addi	r3,r3,28588
   4cd50:	38c03b26 	beq	r7,r3,4ce40 <_free_r+0x278>
   4cd54:	2a000317 	ldw	r8,12(r5)
   4cd58:	11400054 	ori	r5,r2,1
   4cd5c:	3087883a 	add	r3,r6,r2
   4cd60:	3a000315 	stw	r8,12(r7)
   4cd64:	41c00215 	stw	r7,8(r8)
   4cd68:	31400115 	stw	r5,4(r6)
   4cd6c:	18800015 	stw	r2,0(r3)
   4cd70:	003fbd06 	br	4cc68 <__alt_data_end+0xfffe5b68>
   4cd74:	39c0004c 	andi	r7,r7,1
   4cd78:	10c5883a 	add	r2,r2,r3
   4cd7c:	3800071e 	bne	r7,zero,4cd9c <_free_r+0x1d4>
   4cd80:	81fffe17 	ldw	r7,-8(r16)
   4cd84:	31cdc83a 	sub	r6,r6,r7
   4cd88:	30c00317 	ldw	r3,12(r6)
   4cd8c:	31400217 	ldw	r5,8(r6)
   4cd90:	11c5883a 	add	r2,r2,r7
   4cd94:	28c00315 	stw	r3,12(r5)
   4cd98:	19400215 	stw	r5,8(r3)
   4cd9c:	10c00054 	ori	r3,r2,1
   4cda0:	30c00115 	stw	r3,4(r6)
   4cda4:	00c001b4 	movhi	r3,6
   4cda8:	18e1aa04 	addi	r3,r3,-31064
   4cdac:	18c00017 	ldw	r3,0(r3)
   4cdb0:	21800215 	stw	r6,8(r4)
   4cdb4:	10ffc036 	bltu	r2,r3,4ccb8 <__alt_data_end+0xfffe5bb8>
   4cdb8:	008001b4 	movhi	r2,6
   4cdbc:	10a8ba04 	addi	r2,r2,-23832
   4cdc0:	11400017 	ldw	r5,0(r2)
   4cdc4:	8809883a 	mov	r4,r17
   4cdc8:	004caa40 	call	4caa4 <_malloc_trim_r>
   4cdcc:	003fba06 	br	4ccb8 <__alt_data_end+0xfffe5bb8>
   4cdd0:	28c9883a 	add	r4,r5,r3
   4cdd4:	21000117 	ldw	r4,4(r4)
   4cdd8:	2100004c 	andi	r4,r4,1
   4cddc:	2000391e 	bne	r4,zero,4cec4 <_free_r+0x2fc>
   4cde0:	29c00217 	ldw	r7,8(r5)
   4cde4:	29000317 	ldw	r4,12(r5)
   4cde8:	1885883a 	add	r2,r3,r2
   4cdec:	10c00054 	ori	r3,r2,1
   4cdf0:	39000315 	stw	r4,12(r7)
   4cdf4:	21c00215 	stw	r7,8(r4)
   4cdf8:	30c00115 	stw	r3,4(r6)
   4cdfc:	308d883a 	add	r6,r6,r2
   4ce00:	30800015 	stw	r2,0(r6)
   4ce04:	003fac06 	br	4ccb8 <__alt_data_end+0xfffe5bb8>
   4ce08:	00c00504 	movi	r3,20
   4ce0c:	19401536 	bltu	r3,r5,4ce64 <_free_r+0x29c>
   4ce10:	28c01704 	addi	r3,r5,92
   4ce14:	18c7883a 	add	r3,r3,r3
   4ce18:	294016c4 	addi	r5,r5,91
   4ce1c:	003fb406 	br	4ccf0 <__alt_data_end+0xfffe5bf0>
   4ce20:	280bd0ba 	srai	r5,r5,2
   4ce24:	00c00044 	movi	r3,1
   4ce28:	38800117 	ldw	r2,4(r7)
   4ce2c:	194a983a 	sll	r5,r3,r5
   4ce30:	2007883a 	mov	r3,r4
   4ce34:	2884b03a 	or	r2,r5,r2
   4ce38:	38800115 	stw	r2,4(r7)
   4ce3c:	003fbb06 	br	4cd2c <__alt_data_end+0xfffe5c2c>
   4ce40:	21800515 	stw	r6,20(r4)
   4ce44:	21800415 	stw	r6,16(r4)
   4ce48:	10c00054 	ori	r3,r2,1
   4ce4c:	31c00315 	stw	r7,12(r6)
   4ce50:	31c00215 	stw	r7,8(r6)
   4ce54:	30c00115 	stw	r3,4(r6)
   4ce58:	308d883a 	add	r6,r6,r2
   4ce5c:	30800015 	stw	r2,0(r6)
   4ce60:	003f9506 	br	4ccb8 <__alt_data_end+0xfffe5bb8>
   4ce64:	00c01504 	movi	r3,84
   4ce68:	19400536 	bltu	r3,r5,4ce80 <_free_r+0x2b8>
   4ce6c:	100ad33a 	srli	r5,r2,12
   4ce70:	28c01bc4 	addi	r3,r5,111
   4ce74:	18c7883a 	add	r3,r3,r3
   4ce78:	29401b84 	addi	r5,r5,110
   4ce7c:	003f9c06 	br	4ccf0 <__alt_data_end+0xfffe5bf0>
   4ce80:	00c05504 	movi	r3,340
   4ce84:	19400536 	bltu	r3,r5,4ce9c <_free_r+0x2d4>
   4ce88:	100ad3fa 	srli	r5,r2,15
   4ce8c:	28c01e04 	addi	r3,r5,120
   4ce90:	18c7883a 	add	r3,r3,r3
   4ce94:	29401dc4 	addi	r5,r5,119
   4ce98:	003f9506 	br	4ccf0 <__alt_data_end+0xfffe5bf0>
   4ce9c:	00c15504 	movi	r3,1364
   4cea0:	19400536 	bltu	r3,r5,4ceb8 <_free_r+0x2f0>
   4cea4:	100ad4ba 	srli	r5,r2,18
   4cea8:	28c01f44 	addi	r3,r5,125
   4ceac:	18c7883a 	add	r3,r3,r3
   4ceb0:	29401f04 	addi	r5,r5,124
   4ceb4:	003f8e06 	br	4ccf0 <__alt_data_end+0xfffe5bf0>
   4ceb8:	00c03f84 	movi	r3,254
   4cebc:	01401f84 	movi	r5,126
   4cec0:	003f8b06 	br	4ccf0 <__alt_data_end+0xfffe5bf0>
   4cec4:	10c00054 	ori	r3,r2,1
   4cec8:	30c00115 	stw	r3,4(r6)
   4cecc:	308d883a 	add	r6,r6,r2
   4ced0:	30800015 	stw	r2,0(r6)
   4ced4:	003f7806 	br	4ccb8 <__alt_data_end+0xfffe5bb8>

0004ced8 <__sfvwrite_r>:
   4ced8:	30800217 	ldw	r2,8(r6)
   4cedc:	10006726 	beq	r2,zero,4d07c <__sfvwrite_r+0x1a4>
   4cee0:	28c0030b 	ldhu	r3,12(r5)
   4cee4:	defff404 	addi	sp,sp,-48
   4cee8:	dd400715 	stw	r21,28(sp)
   4ceec:	dd000615 	stw	r20,24(sp)
   4cef0:	dc000215 	stw	r16,8(sp)
   4cef4:	dfc00b15 	stw	ra,44(sp)
   4cef8:	df000a15 	stw	fp,40(sp)
   4cefc:	ddc00915 	stw	r23,36(sp)
   4cf00:	dd800815 	stw	r22,32(sp)
   4cf04:	dcc00515 	stw	r19,20(sp)
   4cf08:	dc800415 	stw	r18,16(sp)
   4cf0c:	dc400315 	stw	r17,12(sp)
   4cf10:	1880020c 	andi	r2,r3,8
   4cf14:	2821883a 	mov	r16,r5
   4cf18:	202b883a 	mov	r21,r4
   4cf1c:	3029883a 	mov	r20,r6
   4cf20:	10002726 	beq	r2,zero,4cfc0 <__sfvwrite_r+0xe8>
   4cf24:	28800417 	ldw	r2,16(r5)
   4cf28:	10002526 	beq	r2,zero,4cfc0 <__sfvwrite_r+0xe8>
   4cf2c:	1880008c 	andi	r2,r3,2
   4cf30:	a4400017 	ldw	r17,0(r20)
   4cf34:	10002a26 	beq	r2,zero,4cfe0 <__sfvwrite_r+0x108>
   4cf38:	05a00034 	movhi	r22,32768
   4cf3c:	0027883a 	mov	r19,zero
   4cf40:	0025883a 	mov	r18,zero
   4cf44:	b5bf0004 	addi	r22,r22,-1024
   4cf48:	980d883a 	mov	r6,r19
   4cf4c:	a809883a 	mov	r4,r21
   4cf50:	90004626 	beq	r18,zero,4d06c <__sfvwrite_r+0x194>
   4cf54:	900f883a 	mov	r7,r18
   4cf58:	b480022e 	bgeu	r22,r18,4cf64 <__sfvwrite_r+0x8c>
   4cf5c:	01e00034 	movhi	r7,32768
   4cf60:	39ff0004 	addi	r7,r7,-1024
   4cf64:	80800917 	ldw	r2,36(r16)
   4cf68:	81400717 	ldw	r5,28(r16)
   4cf6c:	103ee83a 	callr	r2
   4cf70:	0080570e 	bge	zero,r2,4d0d0 <__sfvwrite_r+0x1f8>
   4cf74:	a0c00217 	ldw	r3,8(r20)
   4cf78:	98a7883a 	add	r19,r19,r2
   4cf7c:	90a5c83a 	sub	r18,r18,r2
   4cf80:	1885c83a 	sub	r2,r3,r2
   4cf84:	a0800215 	stw	r2,8(r20)
   4cf88:	103fef1e 	bne	r2,zero,4cf48 <__alt_data_end+0xfffe5e48>
   4cf8c:	0005883a 	mov	r2,zero
   4cf90:	dfc00b17 	ldw	ra,44(sp)
   4cf94:	df000a17 	ldw	fp,40(sp)
   4cf98:	ddc00917 	ldw	r23,36(sp)
   4cf9c:	dd800817 	ldw	r22,32(sp)
   4cfa0:	dd400717 	ldw	r21,28(sp)
   4cfa4:	dd000617 	ldw	r20,24(sp)
   4cfa8:	dcc00517 	ldw	r19,20(sp)
   4cfac:	dc800417 	ldw	r18,16(sp)
   4cfb0:	dc400317 	ldw	r17,12(sp)
   4cfb4:	dc000217 	ldw	r16,8(sp)
   4cfb8:	dec00c04 	addi	sp,sp,48
   4cfbc:	f800283a 	ret
   4cfc0:	800b883a 	mov	r5,r16
   4cfc4:	a809883a 	mov	r4,r21
   4cfc8:	004a9800 	call	4a980 <__swsetup_r>
   4cfcc:	1000eb1e 	bne	r2,zero,4d37c <__sfvwrite_r+0x4a4>
   4cfd0:	80c0030b 	ldhu	r3,12(r16)
   4cfd4:	a4400017 	ldw	r17,0(r20)
   4cfd8:	1880008c 	andi	r2,r3,2
   4cfdc:	103fd61e 	bne	r2,zero,4cf38 <__alt_data_end+0xfffe5e38>
   4cfe0:	1880004c 	andi	r2,r3,1
   4cfe4:	10003f1e 	bne	r2,zero,4d0e4 <__sfvwrite_r+0x20c>
   4cfe8:	0039883a 	mov	fp,zero
   4cfec:	0025883a 	mov	r18,zero
   4cff0:	90001a26 	beq	r18,zero,4d05c <__sfvwrite_r+0x184>
   4cff4:	1880800c 	andi	r2,r3,512
   4cff8:	84c00217 	ldw	r19,8(r16)
   4cffc:	10002126 	beq	r2,zero,4d084 <__sfvwrite_r+0x1ac>
   4d000:	982f883a 	mov	r23,r19
   4d004:	94c09336 	bltu	r18,r19,4d254 <__sfvwrite_r+0x37c>
   4d008:	1881200c 	andi	r2,r3,1152
   4d00c:	10009e1e 	bne	r2,zero,4d288 <__sfvwrite_r+0x3b0>
   4d010:	81000017 	ldw	r4,0(r16)
   4d014:	b80d883a 	mov	r6,r23
   4d018:	e00b883a 	mov	r5,fp
   4d01c:	004d8d80 	call	4d8d8 <memmove>
   4d020:	80c00217 	ldw	r3,8(r16)
   4d024:	81000017 	ldw	r4,0(r16)
   4d028:	9005883a 	mov	r2,r18
   4d02c:	1ce7c83a 	sub	r19,r3,r19
   4d030:	25cf883a 	add	r7,r4,r23
   4d034:	84c00215 	stw	r19,8(r16)
   4d038:	81c00015 	stw	r7,0(r16)
   4d03c:	a0c00217 	ldw	r3,8(r20)
   4d040:	e0b9883a 	add	fp,fp,r2
   4d044:	90a5c83a 	sub	r18,r18,r2
   4d048:	18a7c83a 	sub	r19,r3,r2
   4d04c:	a4c00215 	stw	r19,8(r20)
   4d050:	983fce26 	beq	r19,zero,4cf8c <__alt_data_end+0xfffe5e8c>
   4d054:	80c0030b 	ldhu	r3,12(r16)
   4d058:	903fe61e 	bne	r18,zero,4cff4 <__alt_data_end+0xfffe5ef4>
   4d05c:	8f000017 	ldw	fp,0(r17)
   4d060:	8c800117 	ldw	r18,4(r17)
   4d064:	8c400204 	addi	r17,r17,8
   4d068:	003fe106 	br	4cff0 <__alt_data_end+0xfffe5ef0>
   4d06c:	8cc00017 	ldw	r19,0(r17)
   4d070:	8c800117 	ldw	r18,4(r17)
   4d074:	8c400204 	addi	r17,r17,8
   4d078:	003fb306 	br	4cf48 <__alt_data_end+0xfffe5e48>
   4d07c:	0005883a 	mov	r2,zero
   4d080:	f800283a 	ret
   4d084:	81000017 	ldw	r4,0(r16)
   4d088:	80800417 	ldw	r2,16(r16)
   4d08c:	11005736 	bltu	r2,r4,4d1ec <__sfvwrite_r+0x314>
   4d090:	85c00517 	ldw	r23,20(r16)
   4d094:	95c05536 	bltu	r18,r23,4d1ec <__sfvwrite_r+0x314>
   4d098:	00a00034 	movhi	r2,32768
   4d09c:	10bfffc4 	addi	r2,r2,-1
   4d0a0:	9009883a 	mov	r4,r18
   4d0a4:	1480012e 	bgeu	r2,r18,4d0ac <__sfvwrite_r+0x1d4>
   4d0a8:	1009883a 	mov	r4,r2
   4d0ac:	b80b883a 	mov	r5,r23
   4d0b0:	004312c0 	call	4312c <__divsi3>
   4d0b4:	15cf383a 	mul	r7,r2,r23
   4d0b8:	81400717 	ldw	r5,28(r16)
   4d0bc:	80800917 	ldw	r2,36(r16)
   4d0c0:	e00d883a 	mov	r6,fp
   4d0c4:	a809883a 	mov	r4,r21
   4d0c8:	103ee83a 	callr	r2
   4d0cc:	00bfdb16 	blt	zero,r2,4d03c <__alt_data_end+0xfffe5f3c>
   4d0d0:	8080030b 	ldhu	r2,12(r16)
   4d0d4:	10801014 	ori	r2,r2,64
   4d0d8:	8080030d 	sth	r2,12(r16)
   4d0dc:	00bfffc4 	movi	r2,-1
   4d0e0:	003fab06 	br	4cf90 <__alt_data_end+0xfffe5e90>
   4d0e4:	0027883a 	mov	r19,zero
   4d0e8:	0011883a 	mov	r8,zero
   4d0ec:	0039883a 	mov	fp,zero
   4d0f0:	0025883a 	mov	r18,zero
   4d0f4:	90001f26 	beq	r18,zero,4d174 <__sfvwrite_r+0x29c>
   4d0f8:	40005a26 	beq	r8,zero,4d264 <__sfvwrite_r+0x38c>
   4d0fc:	982d883a 	mov	r22,r19
   4d100:	94c0012e 	bgeu	r18,r19,4d108 <__sfvwrite_r+0x230>
   4d104:	902d883a 	mov	r22,r18
   4d108:	81000017 	ldw	r4,0(r16)
   4d10c:	80800417 	ldw	r2,16(r16)
   4d110:	b02f883a 	mov	r23,r22
   4d114:	81c00517 	ldw	r7,20(r16)
   4d118:	1100032e 	bgeu	r2,r4,4d128 <__sfvwrite_r+0x250>
   4d11c:	80c00217 	ldw	r3,8(r16)
   4d120:	38c7883a 	add	r3,r7,r3
   4d124:	1d801816 	blt	r3,r22,4d188 <__sfvwrite_r+0x2b0>
   4d128:	b1c03e16 	blt	r22,r7,4d224 <__sfvwrite_r+0x34c>
   4d12c:	80800917 	ldw	r2,36(r16)
   4d130:	81400717 	ldw	r5,28(r16)
   4d134:	e00d883a 	mov	r6,fp
   4d138:	da000115 	stw	r8,4(sp)
   4d13c:	a809883a 	mov	r4,r21
   4d140:	103ee83a 	callr	r2
   4d144:	102f883a 	mov	r23,r2
   4d148:	da000117 	ldw	r8,4(sp)
   4d14c:	00bfe00e 	bge	zero,r2,4d0d0 <__alt_data_end+0xfffe5fd0>
   4d150:	9de7c83a 	sub	r19,r19,r23
   4d154:	98001f26 	beq	r19,zero,4d1d4 <__sfvwrite_r+0x2fc>
   4d158:	a0800217 	ldw	r2,8(r20)
   4d15c:	e5f9883a 	add	fp,fp,r23
   4d160:	95e5c83a 	sub	r18,r18,r23
   4d164:	15efc83a 	sub	r23,r2,r23
   4d168:	a5c00215 	stw	r23,8(r20)
   4d16c:	b83f8726 	beq	r23,zero,4cf8c <__alt_data_end+0xfffe5e8c>
   4d170:	903fe11e 	bne	r18,zero,4d0f8 <__alt_data_end+0xfffe5ff8>
   4d174:	8f000017 	ldw	fp,0(r17)
   4d178:	8c800117 	ldw	r18,4(r17)
   4d17c:	0011883a 	mov	r8,zero
   4d180:	8c400204 	addi	r17,r17,8
   4d184:	003fdb06 	br	4d0f4 <__alt_data_end+0xfffe5ff4>
   4d188:	180d883a 	mov	r6,r3
   4d18c:	e00b883a 	mov	r5,fp
   4d190:	da000115 	stw	r8,4(sp)
   4d194:	d8c00015 	stw	r3,0(sp)
   4d198:	004d8d80 	call	4d8d8 <memmove>
   4d19c:	d8c00017 	ldw	r3,0(sp)
   4d1a0:	80800017 	ldw	r2,0(r16)
   4d1a4:	800b883a 	mov	r5,r16
   4d1a8:	a809883a 	mov	r4,r21
   4d1ac:	10c5883a 	add	r2,r2,r3
   4d1b0:	80800015 	stw	r2,0(r16)
   4d1b4:	d8c00015 	stw	r3,0(sp)
   4d1b8:	004c5cc0 	call	4c5cc <_fflush_r>
   4d1bc:	d8c00017 	ldw	r3,0(sp)
   4d1c0:	da000117 	ldw	r8,4(sp)
   4d1c4:	103fc21e 	bne	r2,zero,4d0d0 <__alt_data_end+0xfffe5fd0>
   4d1c8:	182f883a 	mov	r23,r3
   4d1cc:	9de7c83a 	sub	r19,r19,r23
   4d1d0:	983fe11e 	bne	r19,zero,4d158 <__alt_data_end+0xfffe6058>
   4d1d4:	800b883a 	mov	r5,r16
   4d1d8:	a809883a 	mov	r4,r21
   4d1dc:	004c5cc0 	call	4c5cc <_fflush_r>
   4d1e0:	103fbb1e 	bne	r2,zero,4d0d0 <__alt_data_end+0xfffe5fd0>
   4d1e4:	0011883a 	mov	r8,zero
   4d1e8:	003fdb06 	br	4d158 <__alt_data_end+0xfffe6058>
   4d1ec:	94c0012e 	bgeu	r18,r19,4d1f4 <__sfvwrite_r+0x31c>
   4d1f0:	9027883a 	mov	r19,r18
   4d1f4:	980d883a 	mov	r6,r19
   4d1f8:	e00b883a 	mov	r5,fp
   4d1fc:	004d8d80 	call	4d8d8 <memmove>
   4d200:	80800217 	ldw	r2,8(r16)
   4d204:	80c00017 	ldw	r3,0(r16)
   4d208:	14c5c83a 	sub	r2,r2,r19
   4d20c:	1cc7883a 	add	r3,r3,r19
   4d210:	80800215 	stw	r2,8(r16)
   4d214:	80c00015 	stw	r3,0(r16)
   4d218:	10004326 	beq	r2,zero,4d328 <__sfvwrite_r+0x450>
   4d21c:	9805883a 	mov	r2,r19
   4d220:	003f8606 	br	4d03c <__alt_data_end+0xfffe5f3c>
   4d224:	b00d883a 	mov	r6,r22
   4d228:	e00b883a 	mov	r5,fp
   4d22c:	da000115 	stw	r8,4(sp)
   4d230:	004d8d80 	call	4d8d8 <memmove>
   4d234:	80800217 	ldw	r2,8(r16)
   4d238:	80c00017 	ldw	r3,0(r16)
   4d23c:	da000117 	ldw	r8,4(sp)
   4d240:	1585c83a 	sub	r2,r2,r22
   4d244:	1dad883a 	add	r22,r3,r22
   4d248:	80800215 	stw	r2,8(r16)
   4d24c:	85800015 	stw	r22,0(r16)
   4d250:	003fbf06 	br	4d150 <__alt_data_end+0xfffe6050>
   4d254:	81000017 	ldw	r4,0(r16)
   4d258:	9027883a 	mov	r19,r18
   4d25c:	902f883a 	mov	r23,r18
   4d260:	003f6c06 	br	4d014 <__alt_data_end+0xfffe5f14>
   4d264:	900d883a 	mov	r6,r18
   4d268:	01400284 	movi	r5,10
   4d26c:	e009883a 	mov	r4,fp
   4d270:	004d6ac0 	call	4d6ac <memchr>
   4d274:	10003e26 	beq	r2,zero,4d370 <__sfvwrite_r+0x498>
   4d278:	10800044 	addi	r2,r2,1
   4d27c:	1727c83a 	sub	r19,r2,fp
   4d280:	02000044 	movi	r8,1
   4d284:	003f9d06 	br	4d0fc <__alt_data_end+0xfffe5ffc>
   4d288:	80800517 	ldw	r2,20(r16)
   4d28c:	81400417 	ldw	r5,16(r16)
   4d290:	81c00017 	ldw	r7,0(r16)
   4d294:	10a7883a 	add	r19,r2,r2
   4d298:	9885883a 	add	r2,r19,r2
   4d29c:	1026d7fa 	srli	r19,r2,31
   4d2a0:	396dc83a 	sub	r22,r7,r5
   4d2a4:	b1000044 	addi	r4,r22,1
   4d2a8:	9885883a 	add	r2,r19,r2
   4d2ac:	1027d07a 	srai	r19,r2,1
   4d2b0:	2485883a 	add	r2,r4,r18
   4d2b4:	980d883a 	mov	r6,r19
   4d2b8:	9880022e 	bgeu	r19,r2,4d2c4 <__sfvwrite_r+0x3ec>
   4d2bc:	1027883a 	mov	r19,r2
   4d2c0:	100d883a 	mov	r6,r2
   4d2c4:	18c1000c 	andi	r3,r3,1024
   4d2c8:	18001c26 	beq	r3,zero,4d33c <__sfvwrite_r+0x464>
   4d2cc:	300b883a 	mov	r5,r6
   4d2d0:	a809883a 	mov	r4,r21
   4d2d4:	00477640 	call	47764 <_malloc_r>
   4d2d8:	102f883a 	mov	r23,r2
   4d2dc:	10002926 	beq	r2,zero,4d384 <__sfvwrite_r+0x4ac>
   4d2e0:	81400417 	ldw	r5,16(r16)
   4d2e4:	b00d883a 	mov	r6,r22
   4d2e8:	1009883a 	mov	r4,r2
   4d2ec:	004d7900 	call	4d790 <memcpy>
   4d2f0:	8080030b 	ldhu	r2,12(r16)
   4d2f4:	00fedfc4 	movi	r3,-1153
   4d2f8:	10c4703a 	and	r2,r2,r3
   4d2fc:	10802014 	ori	r2,r2,128
   4d300:	8080030d 	sth	r2,12(r16)
   4d304:	bd89883a 	add	r4,r23,r22
   4d308:	9d8fc83a 	sub	r7,r19,r22
   4d30c:	85c00415 	stw	r23,16(r16)
   4d310:	84c00515 	stw	r19,20(r16)
   4d314:	81000015 	stw	r4,0(r16)
   4d318:	9027883a 	mov	r19,r18
   4d31c:	81c00215 	stw	r7,8(r16)
   4d320:	902f883a 	mov	r23,r18
   4d324:	003f3b06 	br	4d014 <__alt_data_end+0xfffe5f14>
   4d328:	800b883a 	mov	r5,r16
   4d32c:	a809883a 	mov	r4,r21
   4d330:	004c5cc0 	call	4c5cc <_fflush_r>
   4d334:	103fb926 	beq	r2,zero,4d21c <__alt_data_end+0xfffe611c>
   4d338:	003f6506 	br	4d0d0 <__alt_data_end+0xfffe5fd0>
   4d33c:	a809883a 	mov	r4,r21
   4d340:	004ea900 	call	4ea90 <_realloc_r>
   4d344:	102f883a 	mov	r23,r2
   4d348:	103fee1e 	bne	r2,zero,4d304 <__alt_data_end+0xfffe6204>
   4d34c:	81400417 	ldw	r5,16(r16)
   4d350:	a809883a 	mov	r4,r21
   4d354:	004cbc80 	call	4cbc8 <_free_r>
   4d358:	8080030b 	ldhu	r2,12(r16)
   4d35c:	00ffdfc4 	movi	r3,-129
   4d360:	1884703a 	and	r2,r3,r2
   4d364:	00c00304 	movi	r3,12
   4d368:	a8c00015 	stw	r3,0(r21)
   4d36c:	003f5906 	br	4d0d4 <__alt_data_end+0xfffe5fd4>
   4d370:	94c00044 	addi	r19,r18,1
   4d374:	02000044 	movi	r8,1
   4d378:	003f6006 	br	4d0fc <__alt_data_end+0xfffe5ffc>
   4d37c:	00bfffc4 	movi	r2,-1
   4d380:	003f0306 	br	4cf90 <__alt_data_end+0xfffe5e90>
   4d384:	00800304 	movi	r2,12
   4d388:	a8800015 	stw	r2,0(r21)
   4d38c:	8080030b 	ldhu	r2,12(r16)
   4d390:	003f5006 	br	4d0d4 <__alt_data_end+0xfffe5fd4>

0004d394 <_fwalk>:
   4d394:	defff704 	addi	sp,sp,-36
   4d398:	dd000415 	stw	r20,16(sp)
   4d39c:	dfc00815 	stw	ra,32(sp)
   4d3a0:	ddc00715 	stw	r23,28(sp)
   4d3a4:	dd800615 	stw	r22,24(sp)
   4d3a8:	dd400515 	stw	r21,20(sp)
   4d3ac:	dcc00315 	stw	r19,12(sp)
   4d3b0:	dc800215 	stw	r18,8(sp)
   4d3b4:	dc400115 	stw	r17,4(sp)
   4d3b8:	dc000015 	stw	r16,0(sp)
   4d3bc:	2500b804 	addi	r20,r4,736
   4d3c0:	a0002326 	beq	r20,zero,4d450 <_fwalk+0xbc>
   4d3c4:	282b883a 	mov	r21,r5
   4d3c8:	002f883a 	mov	r23,zero
   4d3cc:	05800044 	movi	r22,1
   4d3d0:	04ffffc4 	movi	r19,-1
   4d3d4:	a4400117 	ldw	r17,4(r20)
   4d3d8:	a4800217 	ldw	r18,8(r20)
   4d3dc:	8c7fffc4 	addi	r17,r17,-1
   4d3e0:	88000d16 	blt	r17,zero,4d418 <_fwalk+0x84>
   4d3e4:	94000304 	addi	r16,r18,12
   4d3e8:	94800384 	addi	r18,r18,14
   4d3ec:	8080000b 	ldhu	r2,0(r16)
   4d3f0:	8c7fffc4 	addi	r17,r17,-1
   4d3f4:	813ffd04 	addi	r4,r16,-12
   4d3f8:	b080042e 	bgeu	r22,r2,4d40c <_fwalk+0x78>
   4d3fc:	9080000f 	ldh	r2,0(r18)
   4d400:	14c00226 	beq	r2,r19,4d40c <_fwalk+0x78>
   4d404:	a83ee83a 	callr	r21
   4d408:	b8aeb03a 	or	r23,r23,r2
   4d40c:	84001a04 	addi	r16,r16,104
   4d410:	94801a04 	addi	r18,r18,104
   4d414:	8cfff51e 	bne	r17,r19,4d3ec <__alt_data_end+0xfffe62ec>
   4d418:	a5000017 	ldw	r20,0(r20)
   4d41c:	a03fed1e 	bne	r20,zero,4d3d4 <__alt_data_end+0xfffe62d4>
   4d420:	b805883a 	mov	r2,r23
   4d424:	dfc00817 	ldw	ra,32(sp)
   4d428:	ddc00717 	ldw	r23,28(sp)
   4d42c:	dd800617 	ldw	r22,24(sp)
   4d430:	dd400517 	ldw	r21,20(sp)
   4d434:	dd000417 	ldw	r20,16(sp)
   4d438:	dcc00317 	ldw	r19,12(sp)
   4d43c:	dc800217 	ldw	r18,8(sp)
   4d440:	dc400117 	ldw	r17,4(sp)
   4d444:	dc000017 	ldw	r16,0(sp)
   4d448:	dec00904 	addi	sp,sp,36
   4d44c:	f800283a 	ret
   4d450:	002f883a 	mov	r23,zero
   4d454:	003ff206 	br	4d420 <__alt_data_end+0xfffe6320>

0004d458 <_fwalk_reent>:
   4d458:	defff704 	addi	sp,sp,-36
   4d45c:	dd000415 	stw	r20,16(sp)
   4d460:	dfc00815 	stw	ra,32(sp)
   4d464:	ddc00715 	stw	r23,28(sp)
   4d468:	dd800615 	stw	r22,24(sp)
   4d46c:	dd400515 	stw	r21,20(sp)
   4d470:	dcc00315 	stw	r19,12(sp)
   4d474:	dc800215 	stw	r18,8(sp)
   4d478:	dc400115 	stw	r17,4(sp)
   4d47c:	dc000015 	stw	r16,0(sp)
   4d480:	2500b804 	addi	r20,r4,736
   4d484:	a0002326 	beq	r20,zero,4d514 <_fwalk_reent+0xbc>
   4d488:	282b883a 	mov	r21,r5
   4d48c:	2027883a 	mov	r19,r4
   4d490:	002f883a 	mov	r23,zero
   4d494:	05800044 	movi	r22,1
   4d498:	04bfffc4 	movi	r18,-1
   4d49c:	a4400117 	ldw	r17,4(r20)
   4d4a0:	a4000217 	ldw	r16,8(r20)
   4d4a4:	8c7fffc4 	addi	r17,r17,-1
   4d4a8:	88000c16 	blt	r17,zero,4d4dc <_fwalk_reent+0x84>
   4d4ac:	84000304 	addi	r16,r16,12
   4d4b0:	8080000b 	ldhu	r2,0(r16)
   4d4b4:	8c7fffc4 	addi	r17,r17,-1
   4d4b8:	817ffd04 	addi	r5,r16,-12
   4d4bc:	b080052e 	bgeu	r22,r2,4d4d4 <_fwalk_reent+0x7c>
   4d4c0:	8080008f 	ldh	r2,2(r16)
   4d4c4:	9809883a 	mov	r4,r19
   4d4c8:	14800226 	beq	r2,r18,4d4d4 <_fwalk_reent+0x7c>
   4d4cc:	a83ee83a 	callr	r21
   4d4d0:	b8aeb03a 	or	r23,r23,r2
   4d4d4:	84001a04 	addi	r16,r16,104
   4d4d8:	8cbff51e 	bne	r17,r18,4d4b0 <__alt_data_end+0xfffe63b0>
   4d4dc:	a5000017 	ldw	r20,0(r20)
   4d4e0:	a03fee1e 	bne	r20,zero,4d49c <__alt_data_end+0xfffe639c>
   4d4e4:	b805883a 	mov	r2,r23
   4d4e8:	dfc00817 	ldw	ra,32(sp)
   4d4ec:	ddc00717 	ldw	r23,28(sp)
   4d4f0:	dd800617 	ldw	r22,24(sp)
   4d4f4:	dd400517 	ldw	r21,20(sp)
   4d4f8:	dd000417 	ldw	r20,16(sp)
   4d4fc:	dcc00317 	ldw	r19,12(sp)
   4d500:	dc800217 	ldw	r18,8(sp)
   4d504:	dc400117 	ldw	r17,4(sp)
   4d508:	dc000017 	ldw	r16,0(sp)
   4d50c:	dec00904 	addi	sp,sp,36
   4d510:	f800283a 	ret
   4d514:	002f883a 	mov	r23,zero
   4d518:	003ff206 	br	4d4e4 <__alt_data_end+0xfffe63e4>

0004d51c <_isatty_r>:
   4d51c:	defffd04 	addi	sp,sp,-12
   4d520:	dc000015 	stw	r16,0(sp)
   4d524:	040001b4 	movhi	r16,6
   4d528:	dc400115 	stw	r17,4(sp)
   4d52c:	8428b704 	addi	r16,r16,-23844
   4d530:	2023883a 	mov	r17,r4
   4d534:	2809883a 	mov	r4,r5
   4d538:	dfc00215 	stw	ra,8(sp)
   4d53c:	80000015 	stw	zero,0(r16)
   4d540:	0051cd40 	call	51cd4 <isatty>
   4d544:	00ffffc4 	movi	r3,-1
   4d548:	10c00526 	beq	r2,r3,4d560 <_isatty_r+0x44>
   4d54c:	dfc00217 	ldw	ra,8(sp)
   4d550:	dc400117 	ldw	r17,4(sp)
   4d554:	dc000017 	ldw	r16,0(sp)
   4d558:	dec00304 	addi	sp,sp,12
   4d55c:	f800283a 	ret
   4d560:	80c00017 	ldw	r3,0(r16)
   4d564:	183ff926 	beq	r3,zero,4d54c <__alt_data_end+0xfffe644c>
   4d568:	88c00015 	stw	r3,0(r17)
   4d56c:	003ff706 	br	4d54c <__alt_data_end+0xfffe644c>

0004d570 <_setlocale_r>:
   4d570:	30001b26 	beq	r6,zero,4d5e0 <_setlocale_r+0x70>
   4d574:	01400174 	movhi	r5,5
   4d578:	defffe04 	addi	sp,sp,-8
   4d57c:	295a7204 	addi	r5,r5,27080
   4d580:	3009883a 	mov	r4,r6
   4d584:	dc000015 	stw	r16,0(sp)
   4d588:	dfc00115 	stw	ra,4(sp)
   4d58c:	3021883a 	mov	r16,r6
   4d590:	004eff40 	call	4eff4 <strcmp>
   4d594:	1000061e 	bne	r2,zero,4d5b0 <_setlocale_r+0x40>
   4d598:	00800174 	movhi	r2,5
   4d59c:	109a5304 	addi	r2,r2,26956
   4d5a0:	dfc00117 	ldw	ra,4(sp)
   4d5a4:	dc000017 	ldw	r16,0(sp)
   4d5a8:	dec00204 	addi	sp,sp,8
   4d5ac:	f800283a 	ret
   4d5b0:	01400174 	movhi	r5,5
   4d5b4:	295a5304 	addi	r5,r5,26956
   4d5b8:	8009883a 	mov	r4,r16
   4d5bc:	004eff40 	call	4eff4 <strcmp>
   4d5c0:	103ff526 	beq	r2,zero,4d598 <__alt_data_end+0xfffe6498>
   4d5c4:	01400174 	movhi	r5,5
   4d5c8:	295a5d04 	addi	r5,r5,26996
   4d5cc:	8009883a 	mov	r4,r16
   4d5d0:	004eff40 	call	4eff4 <strcmp>
   4d5d4:	103ff026 	beq	r2,zero,4d598 <__alt_data_end+0xfffe6498>
   4d5d8:	0005883a 	mov	r2,zero
   4d5dc:	003ff006 	br	4d5a0 <__alt_data_end+0xfffe64a0>
   4d5e0:	00800174 	movhi	r2,5
   4d5e4:	109a5304 	addi	r2,r2,26956
   4d5e8:	f800283a 	ret

0004d5ec <__locale_charset>:
   4d5ec:	00800174 	movhi	r2,5
   4d5f0:	109cf304 	addi	r2,r2,29644
   4d5f4:	f800283a 	ret

0004d5f8 <__locale_mb_cur_max>:
   4d5f8:	008001b4 	movhi	r2,6
   4d5fc:	10a1ab04 	addi	r2,r2,-31060
   4d600:	10800017 	ldw	r2,0(r2)
   4d604:	f800283a 	ret

0004d608 <__locale_msgcharset>:
   4d608:	00800174 	movhi	r2,5
   4d60c:	109ceb04 	addi	r2,r2,29612
   4d610:	f800283a 	ret

0004d614 <__locale_cjk_lang>:
   4d614:	0005883a 	mov	r2,zero
   4d618:	f800283a 	ret

0004d61c <_localeconv_r>:
   4d61c:	00800174 	movhi	r2,5
   4d620:	109cfb04 	addi	r2,r2,29676
   4d624:	f800283a 	ret

0004d628 <setlocale>:
   4d628:	008001b4 	movhi	r2,6
   4d62c:	10a1a804 	addi	r2,r2,-31072
   4d630:	280d883a 	mov	r6,r5
   4d634:	200b883a 	mov	r5,r4
   4d638:	11000017 	ldw	r4,0(r2)
   4d63c:	004d5701 	jmpi	4d570 <_setlocale_r>

0004d640 <localeconv>:
   4d640:	00800174 	movhi	r2,5
   4d644:	109cfb04 	addi	r2,r2,29676
   4d648:	f800283a 	ret

0004d64c <_lseek_r>:
   4d64c:	defffd04 	addi	sp,sp,-12
   4d650:	2805883a 	mov	r2,r5
   4d654:	dc000015 	stw	r16,0(sp)
   4d658:	040001b4 	movhi	r16,6
   4d65c:	dc400115 	stw	r17,4(sp)
   4d660:	300b883a 	mov	r5,r6
   4d664:	8428b704 	addi	r16,r16,-23844
   4d668:	2023883a 	mov	r17,r4
   4d66c:	380d883a 	mov	r6,r7
   4d670:	1009883a 	mov	r4,r2
   4d674:	dfc00215 	stw	ra,8(sp)
   4d678:	80000015 	stw	zero,0(r16)
   4d67c:	0051ea00 	call	51ea0 <lseek>
   4d680:	00ffffc4 	movi	r3,-1
   4d684:	10c00526 	beq	r2,r3,4d69c <_lseek_r+0x50>
   4d688:	dfc00217 	ldw	ra,8(sp)
   4d68c:	dc400117 	ldw	r17,4(sp)
   4d690:	dc000017 	ldw	r16,0(sp)
   4d694:	dec00304 	addi	sp,sp,12
   4d698:	f800283a 	ret
   4d69c:	80c00017 	ldw	r3,0(r16)
   4d6a0:	183ff926 	beq	r3,zero,4d688 <__alt_data_end+0xfffe6588>
   4d6a4:	88c00015 	stw	r3,0(r17)
   4d6a8:	003ff706 	br	4d688 <__alt_data_end+0xfffe6588>

0004d6ac <memchr>:
   4d6ac:	208000cc 	andi	r2,r4,3
   4d6b0:	280f883a 	mov	r7,r5
   4d6b4:	10003426 	beq	r2,zero,4d788 <memchr+0xdc>
   4d6b8:	30bfffc4 	addi	r2,r6,-1
   4d6bc:	30001a26 	beq	r6,zero,4d728 <memchr+0x7c>
   4d6c0:	20c00003 	ldbu	r3,0(r4)
   4d6c4:	29803fcc 	andi	r6,r5,255
   4d6c8:	30c0051e 	bne	r6,r3,4d6e0 <memchr+0x34>
   4d6cc:	00001806 	br	4d730 <memchr+0x84>
   4d6d0:	10001526 	beq	r2,zero,4d728 <memchr+0x7c>
   4d6d4:	20c00003 	ldbu	r3,0(r4)
   4d6d8:	10bfffc4 	addi	r2,r2,-1
   4d6dc:	30c01426 	beq	r6,r3,4d730 <memchr+0x84>
   4d6e0:	21000044 	addi	r4,r4,1
   4d6e4:	20c000cc 	andi	r3,r4,3
   4d6e8:	183ff91e 	bne	r3,zero,4d6d0 <__alt_data_end+0xfffe65d0>
   4d6ec:	020000c4 	movi	r8,3
   4d6f0:	40801136 	bltu	r8,r2,4d738 <memchr+0x8c>
   4d6f4:	10000c26 	beq	r2,zero,4d728 <memchr+0x7c>
   4d6f8:	20c00003 	ldbu	r3,0(r4)
   4d6fc:	29403fcc 	andi	r5,r5,255
   4d700:	28c00b26 	beq	r5,r3,4d730 <memchr+0x84>
   4d704:	20c00044 	addi	r3,r4,1
   4d708:	39803fcc 	andi	r6,r7,255
   4d70c:	2089883a 	add	r4,r4,r2
   4d710:	00000306 	br	4d720 <memchr+0x74>
   4d714:	18c00044 	addi	r3,r3,1
   4d718:	197fffc3 	ldbu	r5,-1(r3)
   4d71c:	31400526 	beq	r6,r5,4d734 <memchr+0x88>
   4d720:	1805883a 	mov	r2,r3
   4d724:	20fffb1e 	bne	r4,r3,4d714 <__alt_data_end+0xfffe6614>
   4d728:	0005883a 	mov	r2,zero
   4d72c:	f800283a 	ret
   4d730:	2005883a 	mov	r2,r4
   4d734:	f800283a 	ret
   4d738:	28c03fcc 	andi	r3,r5,255
   4d73c:	1812923a 	slli	r9,r3,8
   4d740:	02ffbff4 	movhi	r11,65279
   4d744:	02a02074 	movhi	r10,32897
   4d748:	48d2b03a 	or	r9,r9,r3
   4d74c:	4806943a 	slli	r3,r9,16
   4d750:	5affbfc4 	addi	r11,r11,-257
   4d754:	52a02004 	addi	r10,r10,-32640
   4d758:	48d2b03a 	or	r9,r9,r3
   4d75c:	20c00017 	ldw	r3,0(r4)
   4d760:	48c6f03a 	xor	r3,r9,r3
   4d764:	1acd883a 	add	r6,r3,r11
   4d768:	00c6303a 	nor	r3,zero,r3
   4d76c:	30c6703a 	and	r3,r6,r3
   4d770:	1a86703a 	and	r3,r3,r10
   4d774:	183fe01e 	bne	r3,zero,4d6f8 <__alt_data_end+0xfffe65f8>
   4d778:	10bfff04 	addi	r2,r2,-4
   4d77c:	21000104 	addi	r4,r4,4
   4d780:	40bff636 	bltu	r8,r2,4d75c <__alt_data_end+0xfffe665c>
   4d784:	003fdb06 	br	4d6f4 <__alt_data_end+0xfffe65f4>
   4d788:	3005883a 	mov	r2,r6
   4d78c:	003fd706 	br	4d6ec <__alt_data_end+0xfffe65ec>

0004d790 <memcpy>:
   4d790:	defffd04 	addi	sp,sp,-12
   4d794:	dfc00215 	stw	ra,8(sp)
   4d798:	dc400115 	stw	r17,4(sp)
   4d79c:	dc000015 	stw	r16,0(sp)
   4d7a0:	00c003c4 	movi	r3,15
   4d7a4:	2005883a 	mov	r2,r4
   4d7a8:	1980452e 	bgeu	r3,r6,4d8c0 <memcpy+0x130>
   4d7ac:	2906b03a 	or	r3,r5,r4
   4d7b0:	18c000cc 	andi	r3,r3,3
   4d7b4:	1800441e 	bne	r3,zero,4d8c8 <memcpy+0x138>
   4d7b8:	347ffc04 	addi	r17,r6,-16
   4d7bc:	8822d13a 	srli	r17,r17,4
   4d7c0:	28c00104 	addi	r3,r5,4
   4d7c4:	23400104 	addi	r13,r4,4
   4d7c8:	8820913a 	slli	r16,r17,4
   4d7cc:	2b000204 	addi	r12,r5,8
   4d7d0:	22c00204 	addi	r11,r4,8
   4d7d4:	84000504 	addi	r16,r16,20
   4d7d8:	2a800304 	addi	r10,r5,12
   4d7dc:	22400304 	addi	r9,r4,12
   4d7e0:	2c21883a 	add	r16,r5,r16
   4d7e4:	2811883a 	mov	r8,r5
   4d7e8:	200f883a 	mov	r7,r4
   4d7ec:	41000017 	ldw	r4,0(r8)
   4d7f0:	1fc00017 	ldw	ra,0(r3)
   4d7f4:	63c00017 	ldw	r15,0(r12)
   4d7f8:	39000015 	stw	r4,0(r7)
   4d7fc:	53800017 	ldw	r14,0(r10)
   4d800:	6fc00015 	stw	ra,0(r13)
   4d804:	5bc00015 	stw	r15,0(r11)
   4d808:	4b800015 	stw	r14,0(r9)
   4d80c:	18c00404 	addi	r3,r3,16
   4d810:	39c00404 	addi	r7,r7,16
   4d814:	42000404 	addi	r8,r8,16
   4d818:	6b400404 	addi	r13,r13,16
   4d81c:	63000404 	addi	r12,r12,16
   4d820:	5ac00404 	addi	r11,r11,16
   4d824:	52800404 	addi	r10,r10,16
   4d828:	4a400404 	addi	r9,r9,16
   4d82c:	1c3fef1e 	bne	r3,r16,4d7ec <__alt_data_end+0xfffe66ec>
   4d830:	89c00044 	addi	r7,r17,1
   4d834:	380e913a 	slli	r7,r7,4
   4d838:	310003cc 	andi	r4,r6,15
   4d83c:	02c000c4 	movi	r11,3
   4d840:	11c7883a 	add	r3,r2,r7
   4d844:	29cb883a 	add	r5,r5,r7
   4d848:	5900212e 	bgeu	r11,r4,4d8d0 <memcpy+0x140>
   4d84c:	1813883a 	mov	r9,r3
   4d850:	2811883a 	mov	r8,r5
   4d854:	200f883a 	mov	r7,r4
   4d858:	42800017 	ldw	r10,0(r8)
   4d85c:	4a400104 	addi	r9,r9,4
   4d860:	39ffff04 	addi	r7,r7,-4
   4d864:	4abfff15 	stw	r10,-4(r9)
   4d868:	42000104 	addi	r8,r8,4
   4d86c:	59fffa36 	bltu	r11,r7,4d858 <__alt_data_end+0xfffe6758>
   4d870:	213fff04 	addi	r4,r4,-4
   4d874:	2008d0ba 	srli	r4,r4,2
   4d878:	318000cc 	andi	r6,r6,3
   4d87c:	21000044 	addi	r4,r4,1
   4d880:	2109883a 	add	r4,r4,r4
   4d884:	2109883a 	add	r4,r4,r4
   4d888:	1907883a 	add	r3,r3,r4
   4d88c:	290b883a 	add	r5,r5,r4
   4d890:	30000626 	beq	r6,zero,4d8ac <memcpy+0x11c>
   4d894:	198d883a 	add	r6,r3,r6
   4d898:	29c00003 	ldbu	r7,0(r5)
   4d89c:	18c00044 	addi	r3,r3,1
   4d8a0:	29400044 	addi	r5,r5,1
   4d8a4:	19ffffc5 	stb	r7,-1(r3)
   4d8a8:	19bffb1e 	bne	r3,r6,4d898 <__alt_data_end+0xfffe6798>
   4d8ac:	dfc00217 	ldw	ra,8(sp)
   4d8b0:	dc400117 	ldw	r17,4(sp)
   4d8b4:	dc000017 	ldw	r16,0(sp)
   4d8b8:	dec00304 	addi	sp,sp,12
   4d8bc:	f800283a 	ret
   4d8c0:	2007883a 	mov	r3,r4
   4d8c4:	003ff206 	br	4d890 <__alt_data_end+0xfffe6790>
   4d8c8:	2007883a 	mov	r3,r4
   4d8cc:	003ff106 	br	4d894 <__alt_data_end+0xfffe6794>
   4d8d0:	200d883a 	mov	r6,r4
   4d8d4:	003fee06 	br	4d890 <__alt_data_end+0xfffe6790>

0004d8d8 <memmove>:
   4d8d8:	2005883a 	mov	r2,r4
   4d8dc:	29000b2e 	bgeu	r5,r4,4d90c <memmove+0x34>
   4d8e0:	298f883a 	add	r7,r5,r6
   4d8e4:	21c0092e 	bgeu	r4,r7,4d90c <memmove+0x34>
   4d8e8:	2187883a 	add	r3,r4,r6
   4d8ec:	198bc83a 	sub	r5,r3,r6
   4d8f0:	30004826 	beq	r6,zero,4da14 <memmove+0x13c>
   4d8f4:	39ffffc4 	addi	r7,r7,-1
   4d8f8:	39000003 	ldbu	r4,0(r7)
   4d8fc:	18ffffc4 	addi	r3,r3,-1
   4d900:	19000005 	stb	r4,0(r3)
   4d904:	28fffb1e 	bne	r5,r3,4d8f4 <__alt_data_end+0xfffe67f4>
   4d908:	f800283a 	ret
   4d90c:	00c003c4 	movi	r3,15
   4d910:	1980412e 	bgeu	r3,r6,4da18 <memmove+0x140>
   4d914:	2886b03a 	or	r3,r5,r2
   4d918:	18c000cc 	andi	r3,r3,3
   4d91c:	1800401e 	bne	r3,zero,4da20 <memmove+0x148>
   4d920:	33fffc04 	addi	r15,r6,-16
   4d924:	781ed13a 	srli	r15,r15,4
   4d928:	28c00104 	addi	r3,r5,4
   4d92c:	13400104 	addi	r13,r2,4
   4d930:	781c913a 	slli	r14,r15,4
   4d934:	2b000204 	addi	r12,r5,8
   4d938:	12c00204 	addi	r11,r2,8
   4d93c:	73800504 	addi	r14,r14,20
   4d940:	2a800304 	addi	r10,r5,12
   4d944:	12400304 	addi	r9,r2,12
   4d948:	2b9d883a 	add	r14,r5,r14
   4d94c:	2811883a 	mov	r8,r5
   4d950:	100f883a 	mov	r7,r2
   4d954:	41000017 	ldw	r4,0(r8)
   4d958:	39c00404 	addi	r7,r7,16
   4d95c:	18c00404 	addi	r3,r3,16
   4d960:	393ffc15 	stw	r4,-16(r7)
   4d964:	193ffc17 	ldw	r4,-16(r3)
   4d968:	6b400404 	addi	r13,r13,16
   4d96c:	5ac00404 	addi	r11,r11,16
   4d970:	693ffc15 	stw	r4,-16(r13)
   4d974:	61000017 	ldw	r4,0(r12)
   4d978:	4a400404 	addi	r9,r9,16
   4d97c:	42000404 	addi	r8,r8,16
   4d980:	593ffc15 	stw	r4,-16(r11)
   4d984:	51000017 	ldw	r4,0(r10)
   4d988:	63000404 	addi	r12,r12,16
   4d98c:	52800404 	addi	r10,r10,16
   4d990:	493ffc15 	stw	r4,-16(r9)
   4d994:	1bbfef1e 	bne	r3,r14,4d954 <__alt_data_end+0xfffe6854>
   4d998:	79000044 	addi	r4,r15,1
   4d99c:	2008913a 	slli	r4,r4,4
   4d9a0:	328003cc 	andi	r10,r6,15
   4d9a4:	02c000c4 	movi	r11,3
   4d9a8:	1107883a 	add	r3,r2,r4
   4d9ac:	290b883a 	add	r5,r5,r4
   4d9b0:	5a801e2e 	bgeu	r11,r10,4da2c <memmove+0x154>
   4d9b4:	1813883a 	mov	r9,r3
   4d9b8:	2811883a 	mov	r8,r5
   4d9bc:	500f883a 	mov	r7,r10
   4d9c0:	41000017 	ldw	r4,0(r8)
   4d9c4:	4a400104 	addi	r9,r9,4
   4d9c8:	39ffff04 	addi	r7,r7,-4
   4d9cc:	493fff15 	stw	r4,-4(r9)
   4d9d0:	42000104 	addi	r8,r8,4
   4d9d4:	59fffa36 	bltu	r11,r7,4d9c0 <__alt_data_end+0xfffe68c0>
   4d9d8:	513fff04 	addi	r4,r10,-4
   4d9dc:	2008d0ba 	srli	r4,r4,2
   4d9e0:	318000cc 	andi	r6,r6,3
   4d9e4:	21000044 	addi	r4,r4,1
   4d9e8:	2109883a 	add	r4,r4,r4
   4d9ec:	2109883a 	add	r4,r4,r4
   4d9f0:	1907883a 	add	r3,r3,r4
   4d9f4:	290b883a 	add	r5,r5,r4
   4d9f8:	30000b26 	beq	r6,zero,4da28 <memmove+0x150>
   4d9fc:	198d883a 	add	r6,r3,r6
   4da00:	29c00003 	ldbu	r7,0(r5)
   4da04:	18c00044 	addi	r3,r3,1
   4da08:	29400044 	addi	r5,r5,1
   4da0c:	19ffffc5 	stb	r7,-1(r3)
   4da10:	19bffb1e 	bne	r3,r6,4da00 <__alt_data_end+0xfffe6900>
   4da14:	f800283a 	ret
   4da18:	1007883a 	mov	r3,r2
   4da1c:	003ff606 	br	4d9f8 <__alt_data_end+0xfffe68f8>
   4da20:	1007883a 	mov	r3,r2
   4da24:	003ff506 	br	4d9fc <__alt_data_end+0xfffe68fc>
   4da28:	f800283a 	ret
   4da2c:	500d883a 	mov	r6,r10
   4da30:	003ff106 	br	4d9f8 <__alt_data_end+0xfffe68f8>

0004da34 <_Balloc>:
   4da34:	20801317 	ldw	r2,76(r4)
   4da38:	defffc04 	addi	sp,sp,-16
   4da3c:	dc400115 	stw	r17,4(sp)
   4da40:	dc000015 	stw	r16,0(sp)
   4da44:	dfc00315 	stw	ra,12(sp)
   4da48:	dc800215 	stw	r18,8(sp)
   4da4c:	2023883a 	mov	r17,r4
   4da50:	2821883a 	mov	r16,r5
   4da54:	10000f26 	beq	r2,zero,4da94 <_Balloc+0x60>
   4da58:	8407883a 	add	r3,r16,r16
   4da5c:	18c7883a 	add	r3,r3,r3
   4da60:	10c7883a 	add	r3,r2,r3
   4da64:	18800017 	ldw	r2,0(r3)
   4da68:	10001126 	beq	r2,zero,4dab0 <_Balloc+0x7c>
   4da6c:	11000017 	ldw	r4,0(r2)
   4da70:	19000015 	stw	r4,0(r3)
   4da74:	10000415 	stw	zero,16(r2)
   4da78:	10000315 	stw	zero,12(r2)
   4da7c:	dfc00317 	ldw	ra,12(sp)
   4da80:	dc800217 	ldw	r18,8(sp)
   4da84:	dc400117 	ldw	r17,4(sp)
   4da88:	dc000017 	ldw	r16,0(sp)
   4da8c:	dec00404 	addi	sp,sp,16
   4da90:	f800283a 	ret
   4da94:	01800844 	movi	r6,33
   4da98:	01400104 	movi	r5,4
   4da9c:	00507180 	call	50718 <_calloc_r>
   4daa0:	88801315 	stw	r2,76(r17)
   4daa4:	103fec1e 	bne	r2,zero,4da58 <__alt_data_end+0xfffe6958>
   4daa8:	0005883a 	mov	r2,zero
   4daac:	003ff306 	br	4da7c <__alt_data_end+0xfffe697c>
   4dab0:	01400044 	movi	r5,1
   4dab4:	2c24983a 	sll	r18,r5,r16
   4dab8:	8809883a 	mov	r4,r17
   4dabc:	91800144 	addi	r6,r18,5
   4dac0:	318d883a 	add	r6,r6,r6
   4dac4:	318d883a 	add	r6,r6,r6
   4dac8:	00507180 	call	50718 <_calloc_r>
   4dacc:	103ff626 	beq	r2,zero,4daa8 <__alt_data_end+0xfffe69a8>
   4dad0:	14000115 	stw	r16,4(r2)
   4dad4:	14800215 	stw	r18,8(r2)
   4dad8:	003fe606 	br	4da74 <__alt_data_end+0xfffe6974>

0004dadc <_Bfree>:
   4dadc:	28000826 	beq	r5,zero,4db00 <_Bfree+0x24>
   4dae0:	28c00117 	ldw	r3,4(r5)
   4dae4:	20801317 	ldw	r2,76(r4)
   4dae8:	18c7883a 	add	r3,r3,r3
   4daec:	18c7883a 	add	r3,r3,r3
   4daf0:	10c5883a 	add	r2,r2,r3
   4daf4:	10c00017 	ldw	r3,0(r2)
   4daf8:	28c00015 	stw	r3,0(r5)
   4dafc:	11400015 	stw	r5,0(r2)
   4db00:	f800283a 	ret

0004db04 <__multadd>:
   4db04:	defffa04 	addi	sp,sp,-24
   4db08:	dc800315 	stw	r18,12(sp)
   4db0c:	dc400215 	stw	r17,8(sp)
   4db10:	dc000115 	stw	r16,4(sp)
   4db14:	2823883a 	mov	r17,r5
   4db18:	2c000417 	ldw	r16,16(r5)
   4db1c:	dfc00515 	stw	ra,20(sp)
   4db20:	dcc00415 	stw	r19,16(sp)
   4db24:	2025883a 	mov	r18,r4
   4db28:	29400504 	addi	r5,r5,20
   4db2c:	0011883a 	mov	r8,zero
   4db30:	28c00017 	ldw	r3,0(r5)
   4db34:	29400104 	addi	r5,r5,4
   4db38:	42000044 	addi	r8,r8,1
   4db3c:	18bfffcc 	andi	r2,r3,65535
   4db40:	1185383a 	mul	r2,r2,r6
   4db44:	1806d43a 	srli	r3,r3,16
   4db48:	11cf883a 	add	r7,r2,r7
   4db4c:	3808d43a 	srli	r4,r7,16
   4db50:	1987383a 	mul	r3,r3,r6
   4db54:	38bfffcc 	andi	r2,r7,65535
   4db58:	1907883a 	add	r3,r3,r4
   4db5c:	1808943a 	slli	r4,r3,16
   4db60:	180ed43a 	srli	r7,r3,16
   4db64:	2085883a 	add	r2,r4,r2
   4db68:	28bfff15 	stw	r2,-4(r5)
   4db6c:	443ff016 	blt	r8,r16,4db30 <__alt_data_end+0xfffe6a30>
   4db70:	38000926 	beq	r7,zero,4db98 <__multadd+0x94>
   4db74:	88800217 	ldw	r2,8(r17)
   4db78:	80800f0e 	bge	r16,r2,4dbb8 <__multadd+0xb4>
   4db7c:	80800144 	addi	r2,r16,5
   4db80:	1085883a 	add	r2,r2,r2
   4db84:	1085883a 	add	r2,r2,r2
   4db88:	8885883a 	add	r2,r17,r2
   4db8c:	11c00015 	stw	r7,0(r2)
   4db90:	84000044 	addi	r16,r16,1
   4db94:	8c000415 	stw	r16,16(r17)
   4db98:	8805883a 	mov	r2,r17
   4db9c:	dfc00517 	ldw	ra,20(sp)
   4dba0:	dcc00417 	ldw	r19,16(sp)
   4dba4:	dc800317 	ldw	r18,12(sp)
   4dba8:	dc400217 	ldw	r17,8(sp)
   4dbac:	dc000117 	ldw	r16,4(sp)
   4dbb0:	dec00604 	addi	sp,sp,24
   4dbb4:	f800283a 	ret
   4dbb8:	89400117 	ldw	r5,4(r17)
   4dbbc:	9009883a 	mov	r4,r18
   4dbc0:	d9c00015 	stw	r7,0(sp)
   4dbc4:	29400044 	addi	r5,r5,1
   4dbc8:	004da340 	call	4da34 <_Balloc>
   4dbcc:	89800417 	ldw	r6,16(r17)
   4dbd0:	89400304 	addi	r5,r17,12
   4dbd4:	11000304 	addi	r4,r2,12
   4dbd8:	31800084 	addi	r6,r6,2
   4dbdc:	318d883a 	add	r6,r6,r6
   4dbe0:	318d883a 	add	r6,r6,r6
   4dbe4:	1027883a 	mov	r19,r2
   4dbe8:	004d7900 	call	4d790 <memcpy>
   4dbec:	d9c00017 	ldw	r7,0(sp)
   4dbf0:	88000a26 	beq	r17,zero,4dc1c <__multadd+0x118>
   4dbf4:	88c00117 	ldw	r3,4(r17)
   4dbf8:	90801317 	ldw	r2,76(r18)
   4dbfc:	18c7883a 	add	r3,r3,r3
   4dc00:	18c7883a 	add	r3,r3,r3
   4dc04:	10c5883a 	add	r2,r2,r3
   4dc08:	10c00017 	ldw	r3,0(r2)
   4dc0c:	88c00015 	stw	r3,0(r17)
   4dc10:	14400015 	stw	r17,0(r2)
   4dc14:	9823883a 	mov	r17,r19
   4dc18:	003fd806 	br	4db7c <__alt_data_end+0xfffe6a7c>
   4dc1c:	9823883a 	mov	r17,r19
   4dc20:	003fd606 	br	4db7c <__alt_data_end+0xfffe6a7c>

0004dc24 <__s2b>:
   4dc24:	defff904 	addi	sp,sp,-28
   4dc28:	dc400115 	stw	r17,4(sp)
   4dc2c:	dc000015 	stw	r16,0(sp)
   4dc30:	2023883a 	mov	r17,r4
   4dc34:	2821883a 	mov	r16,r5
   4dc38:	39000204 	addi	r4,r7,8
   4dc3c:	01400244 	movi	r5,9
   4dc40:	dcc00315 	stw	r19,12(sp)
   4dc44:	dc800215 	stw	r18,8(sp)
   4dc48:	dfc00615 	stw	ra,24(sp)
   4dc4c:	dd400515 	stw	r21,20(sp)
   4dc50:	dd000415 	stw	r20,16(sp)
   4dc54:	3825883a 	mov	r18,r7
   4dc58:	3027883a 	mov	r19,r6
   4dc5c:	004312c0 	call	4312c <__divsi3>
   4dc60:	00c00044 	movi	r3,1
   4dc64:	000b883a 	mov	r5,zero
   4dc68:	1880030e 	bge	r3,r2,4dc78 <__s2b+0x54>
   4dc6c:	18c7883a 	add	r3,r3,r3
   4dc70:	29400044 	addi	r5,r5,1
   4dc74:	18bffd16 	blt	r3,r2,4dc6c <__alt_data_end+0xfffe6b6c>
   4dc78:	8809883a 	mov	r4,r17
   4dc7c:	004da340 	call	4da34 <_Balloc>
   4dc80:	d8c00717 	ldw	r3,28(sp)
   4dc84:	10c00515 	stw	r3,20(r2)
   4dc88:	00c00044 	movi	r3,1
   4dc8c:	10c00415 	stw	r3,16(r2)
   4dc90:	00c00244 	movi	r3,9
   4dc94:	1cc0210e 	bge	r3,r19,4dd1c <__s2b+0xf8>
   4dc98:	80eb883a 	add	r21,r16,r3
   4dc9c:	a829883a 	mov	r20,r21
   4dca0:	84e1883a 	add	r16,r16,r19
   4dca4:	a1c00007 	ldb	r7,0(r20)
   4dca8:	01800284 	movi	r6,10
   4dcac:	a5000044 	addi	r20,r20,1
   4dcb0:	100b883a 	mov	r5,r2
   4dcb4:	39fff404 	addi	r7,r7,-48
   4dcb8:	8809883a 	mov	r4,r17
   4dcbc:	004db040 	call	4db04 <__multadd>
   4dcc0:	a43ff81e 	bne	r20,r16,4dca4 <__alt_data_end+0xfffe6ba4>
   4dcc4:	ace1883a 	add	r16,r21,r19
   4dcc8:	843ffe04 	addi	r16,r16,-8
   4dccc:	9c800a0e 	bge	r19,r18,4dcf8 <__s2b+0xd4>
   4dcd0:	94e5c83a 	sub	r18,r18,r19
   4dcd4:	84a5883a 	add	r18,r16,r18
   4dcd8:	81c00007 	ldb	r7,0(r16)
   4dcdc:	01800284 	movi	r6,10
   4dce0:	84000044 	addi	r16,r16,1
   4dce4:	100b883a 	mov	r5,r2
   4dce8:	39fff404 	addi	r7,r7,-48
   4dcec:	8809883a 	mov	r4,r17
   4dcf0:	004db040 	call	4db04 <__multadd>
   4dcf4:	84bff81e 	bne	r16,r18,4dcd8 <__alt_data_end+0xfffe6bd8>
   4dcf8:	dfc00617 	ldw	ra,24(sp)
   4dcfc:	dd400517 	ldw	r21,20(sp)
   4dd00:	dd000417 	ldw	r20,16(sp)
   4dd04:	dcc00317 	ldw	r19,12(sp)
   4dd08:	dc800217 	ldw	r18,8(sp)
   4dd0c:	dc400117 	ldw	r17,4(sp)
   4dd10:	dc000017 	ldw	r16,0(sp)
   4dd14:	dec00704 	addi	sp,sp,28
   4dd18:	f800283a 	ret
   4dd1c:	84000284 	addi	r16,r16,10
   4dd20:	1827883a 	mov	r19,r3
   4dd24:	003fe906 	br	4dccc <__alt_data_end+0xfffe6bcc>

0004dd28 <__hi0bits>:
   4dd28:	20bfffec 	andhi	r2,r4,65535
   4dd2c:	1000141e 	bne	r2,zero,4dd80 <__hi0bits+0x58>
   4dd30:	2008943a 	slli	r4,r4,16
   4dd34:	00800404 	movi	r2,16
   4dd38:	20ffc02c 	andhi	r3,r4,65280
   4dd3c:	1800021e 	bne	r3,zero,4dd48 <__hi0bits+0x20>
   4dd40:	2008923a 	slli	r4,r4,8
   4dd44:	10800204 	addi	r2,r2,8
   4dd48:	20fc002c 	andhi	r3,r4,61440
   4dd4c:	1800021e 	bne	r3,zero,4dd58 <__hi0bits+0x30>
   4dd50:	2008913a 	slli	r4,r4,4
   4dd54:	10800104 	addi	r2,r2,4
   4dd58:	20f0002c 	andhi	r3,r4,49152
   4dd5c:	1800031e 	bne	r3,zero,4dd6c <__hi0bits+0x44>
   4dd60:	2109883a 	add	r4,r4,r4
   4dd64:	10800084 	addi	r2,r2,2
   4dd68:	2109883a 	add	r4,r4,r4
   4dd6c:	20000316 	blt	r4,zero,4dd7c <__hi0bits+0x54>
   4dd70:	2110002c 	andhi	r4,r4,16384
   4dd74:	2000041e 	bne	r4,zero,4dd88 <__hi0bits+0x60>
   4dd78:	00800804 	movi	r2,32
   4dd7c:	f800283a 	ret
   4dd80:	0005883a 	mov	r2,zero
   4dd84:	003fec06 	br	4dd38 <__alt_data_end+0xfffe6c38>
   4dd88:	10800044 	addi	r2,r2,1
   4dd8c:	f800283a 	ret

0004dd90 <__lo0bits>:
   4dd90:	20c00017 	ldw	r3,0(r4)
   4dd94:	188001cc 	andi	r2,r3,7
   4dd98:	10000826 	beq	r2,zero,4ddbc <__lo0bits+0x2c>
   4dd9c:	1880004c 	andi	r2,r3,1
   4dda0:	1000211e 	bne	r2,zero,4de28 <__lo0bits+0x98>
   4dda4:	1880008c 	andi	r2,r3,2
   4dda8:	1000211e 	bne	r2,zero,4de30 <__lo0bits+0xa0>
   4ddac:	1806d0ba 	srli	r3,r3,2
   4ddb0:	00800084 	movi	r2,2
   4ddb4:	20c00015 	stw	r3,0(r4)
   4ddb8:	f800283a 	ret
   4ddbc:	18bfffcc 	andi	r2,r3,65535
   4ddc0:	10001326 	beq	r2,zero,4de10 <__lo0bits+0x80>
   4ddc4:	0005883a 	mov	r2,zero
   4ddc8:	19403fcc 	andi	r5,r3,255
   4ddcc:	2800021e 	bne	r5,zero,4ddd8 <__lo0bits+0x48>
   4ddd0:	1806d23a 	srli	r3,r3,8
   4ddd4:	10800204 	addi	r2,r2,8
   4ddd8:	194003cc 	andi	r5,r3,15
   4dddc:	2800021e 	bne	r5,zero,4dde8 <__lo0bits+0x58>
   4dde0:	1806d13a 	srli	r3,r3,4
   4dde4:	10800104 	addi	r2,r2,4
   4dde8:	194000cc 	andi	r5,r3,3
   4ddec:	2800021e 	bne	r5,zero,4ddf8 <__lo0bits+0x68>
   4ddf0:	1806d0ba 	srli	r3,r3,2
   4ddf4:	10800084 	addi	r2,r2,2
   4ddf8:	1940004c 	andi	r5,r3,1
   4ddfc:	2800081e 	bne	r5,zero,4de20 <__lo0bits+0x90>
   4de00:	1806d07a 	srli	r3,r3,1
   4de04:	1800051e 	bne	r3,zero,4de1c <__lo0bits+0x8c>
   4de08:	00800804 	movi	r2,32
   4de0c:	f800283a 	ret
   4de10:	1806d43a 	srli	r3,r3,16
   4de14:	00800404 	movi	r2,16
   4de18:	003feb06 	br	4ddc8 <__alt_data_end+0xfffe6cc8>
   4de1c:	10800044 	addi	r2,r2,1
   4de20:	20c00015 	stw	r3,0(r4)
   4de24:	f800283a 	ret
   4de28:	0005883a 	mov	r2,zero
   4de2c:	f800283a 	ret
   4de30:	1806d07a 	srli	r3,r3,1
   4de34:	00800044 	movi	r2,1
   4de38:	20c00015 	stw	r3,0(r4)
   4de3c:	f800283a 	ret

0004de40 <__i2b>:
   4de40:	defffd04 	addi	sp,sp,-12
   4de44:	dc000015 	stw	r16,0(sp)
   4de48:	04000044 	movi	r16,1
   4de4c:	dc400115 	stw	r17,4(sp)
   4de50:	2823883a 	mov	r17,r5
   4de54:	800b883a 	mov	r5,r16
   4de58:	dfc00215 	stw	ra,8(sp)
   4de5c:	004da340 	call	4da34 <_Balloc>
   4de60:	14400515 	stw	r17,20(r2)
   4de64:	14000415 	stw	r16,16(r2)
   4de68:	dfc00217 	ldw	ra,8(sp)
   4de6c:	dc400117 	ldw	r17,4(sp)
   4de70:	dc000017 	ldw	r16,0(sp)
   4de74:	dec00304 	addi	sp,sp,12
   4de78:	f800283a 	ret

0004de7c <__multiply>:
   4de7c:	defffa04 	addi	sp,sp,-24
   4de80:	dcc00315 	stw	r19,12(sp)
   4de84:	dc800215 	stw	r18,8(sp)
   4de88:	34c00417 	ldw	r19,16(r6)
   4de8c:	2c800417 	ldw	r18,16(r5)
   4de90:	dd000415 	stw	r20,16(sp)
   4de94:	dc400115 	stw	r17,4(sp)
   4de98:	dfc00515 	stw	ra,20(sp)
   4de9c:	dc000015 	stw	r16,0(sp)
   4dea0:	2829883a 	mov	r20,r5
   4dea4:	3023883a 	mov	r17,r6
   4dea8:	94c0050e 	bge	r18,r19,4dec0 <__multiply+0x44>
   4deac:	9007883a 	mov	r3,r18
   4deb0:	3029883a 	mov	r20,r6
   4deb4:	9825883a 	mov	r18,r19
   4deb8:	2823883a 	mov	r17,r5
   4debc:	1827883a 	mov	r19,r3
   4dec0:	a0800217 	ldw	r2,8(r20)
   4dec4:	94e1883a 	add	r16,r18,r19
   4dec8:	a1400117 	ldw	r5,4(r20)
   4decc:	1400010e 	bge	r2,r16,4ded4 <__multiply+0x58>
   4ded0:	29400044 	addi	r5,r5,1
   4ded4:	004da340 	call	4da34 <_Balloc>
   4ded8:	8415883a 	add	r10,r16,r16
   4dedc:	12c00504 	addi	r11,r2,20
   4dee0:	5295883a 	add	r10,r10,r10
   4dee4:	5a95883a 	add	r10,r11,r10
   4dee8:	5807883a 	mov	r3,r11
   4deec:	5a80032e 	bgeu	r11,r10,4defc <__multiply+0x80>
   4def0:	18000015 	stw	zero,0(r3)
   4def4:	18c00104 	addi	r3,r3,4
   4def8:	1abffd36 	bltu	r3,r10,4def0 <__alt_data_end+0xfffe6df0>
   4defc:	9ce7883a 	add	r19,r19,r19
   4df00:	94a5883a 	add	r18,r18,r18
   4df04:	89800504 	addi	r6,r17,20
   4df08:	9ce7883a 	add	r19,r19,r19
   4df0c:	a3400504 	addi	r13,r20,20
   4df10:	94a5883a 	add	r18,r18,r18
   4df14:	34d9883a 	add	r12,r6,r19
   4df18:	6c93883a 	add	r9,r13,r18
   4df1c:	3300422e 	bgeu	r6,r12,4e028 <__multiply+0x1ac>
   4df20:	37c00017 	ldw	ra,0(r6)
   4df24:	fbffffcc 	andi	r15,ra,65535
   4df28:	78001b26 	beq	r15,zero,4df98 <__multiply+0x11c>
   4df2c:	5811883a 	mov	r8,r11
   4df30:	681d883a 	mov	r14,r13
   4df34:	000f883a 	mov	r7,zero
   4df38:	71000017 	ldw	r4,0(r14)
   4df3c:	40c00017 	ldw	r3,0(r8)
   4df40:	73800104 	addi	r14,r14,4
   4df44:	217fffcc 	andi	r5,r4,65535
   4df48:	2bcb383a 	mul	r5,r5,r15
   4df4c:	2008d43a 	srli	r4,r4,16
   4df50:	1c7fffcc 	andi	r17,r3,65535
   4df54:	2c4b883a 	add	r5,r5,r17
   4df58:	29cb883a 	add	r5,r5,r7
   4df5c:	23c9383a 	mul	r4,r4,r15
   4df60:	1806d43a 	srli	r3,r3,16
   4df64:	280ed43a 	srli	r7,r5,16
   4df68:	297fffcc 	andi	r5,r5,65535
   4df6c:	20c7883a 	add	r3,r4,r3
   4df70:	19c7883a 	add	r3,r3,r7
   4df74:	1808943a 	slli	r4,r3,16
   4df78:	4023883a 	mov	r17,r8
   4df7c:	180ed43a 	srli	r7,r3,16
   4df80:	214ab03a 	or	r5,r4,r5
   4df84:	41400015 	stw	r5,0(r8)
   4df88:	42000104 	addi	r8,r8,4
   4df8c:	727fea36 	bltu	r14,r9,4df38 <__alt_data_end+0xfffe6e38>
   4df90:	89c00115 	stw	r7,4(r17)
   4df94:	37c00017 	ldw	ra,0(r6)
   4df98:	f83ed43a 	srli	ra,ra,16
   4df9c:	f8001f26 	beq	ra,zero,4e01c <__multiply+0x1a0>
   4dfa0:	58c00017 	ldw	r3,0(r11)
   4dfa4:	681d883a 	mov	r14,r13
   4dfa8:	581f883a 	mov	r15,r11
   4dfac:	1811883a 	mov	r8,r3
   4dfb0:	5825883a 	mov	r18,r11
   4dfb4:	000f883a 	mov	r7,zero
   4dfb8:	00000106 	br	4dfc0 <__multiply+0x144>
   4dfbc:	8825883a 	mov	r18,r17
   4dfc0:	7140000b 	ldhu	r5,0(r14)
   4dfc4:	4010d43a 	srli	r8,r8,16
   4dfc8:	193fffcc 	andi	r4,r3,65535
   4dfcc:	2fcb383a 	mul	r5,r5,ra
   4dfd0:	7bc00104 	addi	r15,r15,4
   4dfd4:	73800104 	addi	r14,r14,4
   4dfd8:	2a0b883a 	add	r5,r5,r8
   4dfdc:	29cb883a 	add	r5,r5,r7
   4dfe0:	2806943a 	slli	r3,r5,16
   4dfe4:	94400104 	addi	r17,r18,4
   4dfe8:	280ad43a 	srli	r5,r5,16
   4dfec:	1908b03a 	or	r4,r3,r4
   4dff0:	793fff15 	stw	r4,-4(r15)
   4dff4:	70ffff17 	ldw	r3,-4(r14)
   4dff8:	8a000017 	ldw	r8,0(r17)
   4dffc:	1806d43a 	srli	r3,r3,16
   4e000:	413fffcc 	andi	r4,r8,65535
   4e004:	1fc7383a 	mul	r3,r3,ra
   4e008:	1907883a 	add	r3,r3,r4
   4e00c:	1947883a 	add	r3,r3,r5
   4e010:	180ed43a 	srli	r7,r3,16
   4e014:	727fe936 	bltu	r14,r9,4dfbc <__alt_data_end+0xfffe6ebc>
   4e018:	90c00115 	stw	r3,4(r18)
   4e01c:	31800104 	addi	r6,r6,4
   4e020:	5ac00104 	addi	r11,r11,4
   4e024:	333fbe36 	bltu	r6,r12,4df20 <__alt_data_end+0xfffe6e20>
   4e028:	0400090e 	bge	zero,r16,4e050 <__multiply+0x1d4>
   4e02c:	50ffff17 	ldw	r3,-4(r10)
   4e030:	52bfff04 	addi	r10,r10,-4
   4e034:	18000326 	beq	r3,zero,4e044 <__multiply+0x1c8>
   4e038:	00000506 	br	4e050 <__multiply+0x1d4>
   4e03c:	50c00017 	ldw	r3,0(r10)
   4e040:	1800031e 	bne	r3,zero,4e050 <__multiply+0x1d4>
   4e044:	843fffc4 	addi	r16,r16,-1
   4e048:	52bfff04 	addi	r10,r10,-4
   4e04c:	803ffb1e 	bne	r16,zero,4e03c <__alt_data_end+0xfffe6f3c>
   4e050:	14000415 	stw	r16,16(r2)
   4e054:	dfc00517 	ldw	ra,20(sp)
   4e058:	dd000417 	ldw	r20,16(sp)
   4e05c:	dcc00317 	ldw	r19,12(sp)
   4e060:	dc800217 	ldw	r18,8(sp)
   4e064:	dc400117 	ldw	r17,4(sp)
   4e068:	dc000017 	ldw	r16,0(sp)
   4e06c:	dec00604 	addi	sp,sp,24
   4e070:	f800283a 	ret

0004e074 <__pow5mult>:
   4e074:	defffa04 	addi	sp,sp,-24
   4e078:	dcc00315 	stw	r19,12(sp)
   4e07c:	dc000015 	stw	r16,0(sp)
   4e080:	dfc00515 	stw	ra,20(sp)
   4e084:	dd000415 	stw	r20,16(sp)
   4e088:	dc800215 	stw	r18,8(sp)
   4e08c:	dc400115 	stw	r17,4(sp)
   4e090:	308000cc 	andi	r2,r6,3
   4e094:	3021883a 	mov	r16,r6
   4e098:	2027883a 	mov	r19,r4
   4e09c:	10002f1e 	bne	r2,zero,4e15c <__pow5mult+0xe8>
   4e0a0:	2825883a 	mov	r18,r5
   4e0a4:	8021d0ba 	srai	r16,r16,2
   4e0a8:	80001a26 	beq	r16,zero,4e114 <__pow5mult+0xa0>
   4e0ac:	9c401217 	ldw	r17,72(r19)
   4e0b0:	8800061e 	bne	r17,zero,4e0cc <__pow5mult+0x58>
   4e0b4:	00003406 	br	4e188 <__pow5mult+0x114>
   4e0b8:	8021d07a 	srai	r16,r16,1
   4e0bc:	80001526 	beq	r16,zero,4e114 <__pow5mult+0xa0>
   4e0c0:	88800017 	ldw	r2,0(r17)
   4e0c4:	10001c26 	beq	r2,zero,4e138 <__pow5mult+0xc4>
   4e0c8:	1023883a 	mov	r17,r2
   4e0cc:	8080004c 	andi	r2,r16,1
   4e0d0:	103ff926 	beq	r2,zero,4e0b8 <__alt_data_end+0xfffe6fb8>
   4e0d4:	880d883a 	mov	r6,r17
   4e0d8:	900b883a 	mov	r5,r18
   4e0dc:	9809883a 	mov	r4,r19
   4e0e0:	004de7c0 	call	4de7c <__multiply>
   4e0e4:	90001b26 	beq	r18,zero,4e154 <__pow5mult+0xe0>
   4e0e8:	91000117 	ldw	r4,4(r18)
   4e0ec:	98c01317 	ldw	r3,76(r19)
   4e0f0:	8021d07a 	srai	r16,r16,1
   4e0f4:	2109883a 	add	r4,r4,r4
   4e0f8:	2109883a 	add	r4,r4,r4
   4e0fc:	1907883a 	add	r3,r3,r4
   4e100:	19000017 	ldw	r4,0(r3)
   4e104:	91000015 	stw	r4,0(r18)
   4e108:	1c800015 	stw	r18,0(r3)
   4e10c:	1025883a 	mov	r18,r2
   4e110:	803feb1e 	bne	r16,zero,4e0c0 <__alt_data_end+0xfffe6fc0>
   4e114:	9005883a 	mov	r2,r18
   4e118:	dfc00517 	ldw	ra,20(sp)
   4e11c:	dd000417 	ldw	r20,16(sp)
   4e120:	dcc00317 	ldw	r19,12(sp)
   4e124:	dc800217 	ldw	r18,8(sp)
   4e128:	dc400117 	ldw	r17,4(sp)
   4e12c:	dc000017 	ldw	r16,0(sp)
   4e130:	dec00604 	addi	sp,sp,24
   4e134:	f800283a 	ret
   4e138:	880d883a 	mov	r6,r17
   4e13c:	880b883a 	mov	r5,r17
   4e140:	9809883a 	mov	r4,r19
   4e144:	004de7c0 	call	4de7c <__multiply>
   4e148:	88800015 	stw	r2,0(r17)
   4e14c:	10000015 	stw	zero,0(r2)
   4e150:	003fdd06 	br	4e0c8 <__alt_data_end+0xfffe6fc8>
   4e154:	1025883a 	mov	r18,r2
   4e158:	003fd706 	br	4e0b8 <__alt_data_end+0xfffe6fb8>
   4e15c:	10bfffc4 	addi	r2,r2,-1
   4e160:	1085883a 	add	r2,r2,r2
   4e164:	00c00174 	movhi	r3,5
   4e168:	18da7504 	addi	r3,r3,27092
   4e16c:	1085883a 	add	r2,r2,r2
   4e170:	1885883a 	add	r2,r3,r2
   4e174:	11800017 	ldw	r6,0(r2)
   4e178:	000f883a 	mov	r7,zero
   4e17c:	004db040 	call	4db04 <__multadd>
   4e180:	1025883a 	mov	r18,r2
   4e184:	003fc706 	br	4e0a4 <__alt_data_end+0xfffe6fa4>
   4e188:	05000044 	movi	r20,1
   4e18c:	a00b883a 	mov	r5,r20
   4e190:	9809883a 	mov	r4,r19
   4e194:	004da340 	call	4da34 <_Balloc>
   4e198:	1023883a 	mov	r17,r2
   4e19c:	00809c44 	movi	r2,625
   4e1a0:	88800515 	stw	r2,20(r17)
   4e1a4:	8d000415 	stw	r20,16(r17)
   4e1a8:	9c401215 	stw	r17,72(r19)
   4e1ac:	88000015 	stw	zero,0(r17)
   4e1b0:	003fc606 	br	4e0cc <__alt_data_end+0xfffe6fcc>

0004e1b4 <__lshift>:
   4e1b4:	defff904 	addi	sp,sp,-28
   4e1b8:	dd400515 	stw	r21,20(sp)
   4e1bc:	dcc00315 	stw	r19,12(sp)
   4e1c0:	302bd17a 	srai	r21,r6,5
   4e1c4:	2cc00417 	ldw	r19,16(r5)
   4e1c8:	28800217 	ldw	r2,8(r5)
   4e1cc:	dd000415 	stw	r20,16(sp)
   4e1d0:	ace7883a 	add	r19,r21,r19
   4e1d4:	dc800215 	stw	r18,8(sp)
   4e1d8:	dc400115 	stw	r17,4(sp)
   4e1dc:	dc000015 	stw	r16,0(sp)
   4e1e0:	dfc00615 	stw	ra,24(sp)
   4e1e4:	9c000044 	addi	r16,r19,1
   4e1e8:	2823883a 	mov	r17,r5
   4e1ec:	3029883a 	mov	r20,r6
   4e1f0:	2025883a 	mov	r18,r4
   4e1f4:	29400117 	ldw	r5,4(r5)
   4e1f8:	1400030e 	bge	r2,r16,4e208 <__lshift+0x54>
   4e1fc:	1085883a 	add	r2,r2,r2
   4e200:	29400044 	addi	r5,r5,1
   4e204:	143ffd16 	blt	r2,r16,4e1fc <__alt_data_end+0xfffe70fc>
   4e208:	9009883a 	mov	r4,r18
   4e20c:	004da340 	call	4da34 <_Balloc>
   4e210:	10c00504 	addi	r3,r2,20
   4e214:	0540070e 	bge	zero,r21,4e234 <__lshift+0x80>
   4e218:	ad6b883a 	add	r21,r21,r21
   4e21c:	ad6b883a 	add	r21,r21,r21
   4e220:	1809883a 	mov	r4,r3
   4e224:	1d47883a 	add	r3,r3,r21
   4e228:	20000015 	stw	zero,0(r4)
   4e22c:	21000104 	addi	r4,r4,4
   4e230:	193ffd1e 	bne	r3,r4,4e228 <__alt_data_end+0xfffe7128>
   4e234:	8a000417 	ldw	r8,16(r17)
   4e238:	89000504 	addi	r4,r17,20
   4e23c:	a18007cc 	andi	r6,r20,31
   4e240:	4211883a 	add	r8,r8,r8
   4e244:	4211883a 	add	r8,r8,r8
   4e248:	2211883a 	add	r8,r4,r8
   4e24c:	30002326 	beq	r6,zero,4e2dc <__lshift+0x128>
   4e250:	02400804 	movi	r9,32
   4e254:	4993c83a 	sub	r9,r9,r6
   4e258:	000b883a 	mov	r5,zero
   4e25c:	21c00017 	ldw	r7,0(r4)
   4e260:	1815883a 	mov	r10,r3
   4e264:	18c00104 	addi	r3,r3,4
   4e268:	398e983a 	sll	r7,r7,r6
   4e26c:	21000104 	addi	r4,r4,4
   4e270:	394ab03a 	or	r5,r7,r5
   4e274:	197fff15 	stw	r5,-4(r3)
   4e278:	217fff17 	ldw	r5,-4(r4)
   4e27c:	2a4ad83a 	srl	r5,r5,r9
   4e280:	223ff636 	bltu	r4,r8,4e25c <__alt_data_end+0xfffe715c>
   4e284:	51400115 	stw	r5,4(r10)
   4e288:	28001a1e 	bne	r5,zero,4e2f4 <__lshift+0x140>
   4e28c:	843fffc4 	addi	r16,r16,-1
   4e290:	14000415 	stw	r16,16(r2)
   4e294:	88000826 	beq	r17,zero,4e2b8 <__lshift+0x104>
   4e298:	89000117 	ldw	r4,4(r17)
   4e29c:	90c01317 	ldw	r3,76(r18)
   4e2a0:	2109883a 	add	r4,r4,r4
   4e2a4:	2109883a 	add	r4,r4,r4
   4e2a8:	1907883a 	add	r3,r3,r4
   4e2ac:	19000017 	ldw	r4,0(r3)
   4e2b0:	89000015 	stw	r4,0(r17)
   4e2b4:	1c400015 	stw	r17,0(r3)
   4e2b8:	dfc00617 	ldw	ra,24(sp)
   4e2bc:	dd400517 	ldw	r21,20(sp)
   4e2c0:	dd000417 	ldw	r20,16(sp)
   4e2c4:	dcc00317 	ldw	r19,12(sp)
   4e2c8:	dc800217 	ldw	r18,8(sp)
   4e2cc:	dc400117 	ldw	r17,4(sp)
   4e2d0:	dc000017 	ldw	r16,0(sp)
   4e2d4:	dec00704 	addi	sp,sp,28
   4e2d8:	f800283a 	ret
   4e2dc:	21400017 	ldw	r5,0(r4)
   4e2e0:	18c00104 	addi	r3,r3,4
   4e2e4:	21000104 	addi	r4,r4,4
   4e2e8:	197fff15 	stw	r5,-4(r3)
   4e2ec:	223ffb36 	bltu	r4,r8,4e2dc <__alt_data_end+0xfffe71dc>
   4e2f0:	003fe606 	br	4e28c <__alt_data_end+0xfffe718c>
   4e2f4:	9c000084 	addi	r16,r19,2
   4e2f8:	003fe406 	br	4e28c <__alt_data_end+0xfffe718c>

0004e2fc <__mcmp>:
   4e2fc:	20800417 	ldw	r2,16(r4)
   4e300:	28c00417 	ldw	r3,16(r5)
   4e304:	10c5c83a 	sub	r2,r2,r3
   4e308:	1000111e 	bne	r2,zero,4e350 <__mcmp+0x54>
   4e30c:	18c7883a 	add	r3,r3,r3
   4e310:	18c7883a 	add	r3,r3,r3
   4e314:	21000504 	addi	r4,r4,20
   4e318:	29400504 	addi	r5,r5,20
   4e31c:	20c5883a 	add	r2,r4,r3
   4e320:	28cb883a 	add	r5,r5,r3
   4e324:	00000106 	br	4e32c <__mcmp+0x30>
   4e328:	20800a2e 	bgeu	r4,r2,4e354 <__mcmp+0x58>
   4e32c:	10bfff04 	addi	r2,r2,-4
   4e330:	297fff04 	addi	r5,r5,-4
   4e334:	11800017 	ldw	r6,0(r2)
   4e338:	28c00017 	ldw	r3,0(r5)
   4e33c:	30fffa26 	beq	r6,r3,4e328 <__alt_data_end+0xfffe7228>
   4e340:	30c00236 	bltu	r6,r3,4e34c <__mcmp+0x50>
   4e344:	00800044 	movi	r2,1
   4e348:	f800283a 	ret
   4e34c:	00bfffc4 	movi	r2,-1
   4e350:	f800283a 	ret
   4e354:	0005883a 	mov	r2,zero
   4e358:	f800283a 	ret

0004e35c <__mdiff>:
   4e35c:	28c00417 	ldw	r3,16(r5)
   4e360:	30800417 	ldw	r2,16(r6)
   4e364:	defffa04 	addi	sp,sp,-24
   4e368:	dcc00315 	stw	r19,12(sp)
   4e36c:	dc800215 	stw	r18,8(sp)
   4e370:	dfc00515 	stw	ra,20(sp)
   4e374:	dd000415 	stw	r20,16(sp)
   4e378:	dc400115 	stw	r17,4(sp)
   4e37c:	dc000015 	stw	r16,0(sp)
   4e380:	1887c83a 	sub	r3,r3,r2
   4e384:	2825883a 	mov	r18,r5
   4e388:	3027883a 	mov	r19,r6
   4e38c:	1800141e 	bne	r3,zero,4e3e0 <__mdiff+0x84>
   4e390:	1085883a 	add	r2,r2,r2
   4e394:	1085883a 	add	r2,r2,r2
   4e398:	2a000504 	addi	r8,r5,20
   4e39c:	34000504 	addi	r16,r6,20
   4e3a0:	4087883a 	add	r3,r8,r2
   4e3a4:	8085883a 	add	r2,r16,r2
   4e3a8:	00000106 	br	4e3b0 <__mdiff+0x54>
   4e3ac:	40c0592e 	bgeu	r8,r3,4e514 <__mdiff+0x1b8>
   4e3b0:	18ffff04 	addi	r3,r3,-4
   4e3b4:	10bfff04 	addi	r2,r2,-4
   4e3b8:	19c00017 	ldw	r7,0(r3)
   4e3bc:	11400017 	ldw	r5,0(r2)
   4e3c0:	397ffa26 	beq	r7,r5,4e3ac <__alt_data_end+0xfffe72ac>
   4e3c4:	3940592e 	bgeu	r7,r5,4e52c <__mdiff+0x1d0>
   4e3c8:	9005883a 	mov	r2,r18
   4e3cc:	4023883a 	mov	r17,r8
   4e3d0:	9825883a 	mov	r18,r19
   4e3d4:	05000044 	movi	r20,1
   4e3d8:	1027883a 	mov	r19,r2
   4e3dc:	00000406 	br	4e3f0 <__mdiff+0x94>
   4e3e0:	18005616 	blt	r3,zero,4e53c <__mdiff+0x1e0>
   4e3e4:	34400504 	addi	r17,r6,20
   4e3e8:	2c000504 	addi	r16,r5,20
   4e3ec:	0029883a 	mov	r20,zero
   4e3f0:	91400117 	ldw	r5,4(r18)
   4e3f4:	004da340 	call	4da34 <_Balloc>
   4e3f8:	92400417 	ldw	r9,16(r18)
   4e3fc:	9b000417 	ldw	r12,16(r19)
   4e400:	12c00504 	addi	r11,r2,20
   4e404:	4a51883a 	add	r8,r9,r9
   4e408:	6319883a 	add	r12,r12,r12
   4e40c:	4211883a 	add	r8,r8,r8
   4e410:	6319883a 	add	r12,r12,r12
   4e414:	15000315 	stw	r20,12(r2)
   4e418:	8211883a 	add	r8,r16,r8
   4e41c:	8b19883a 	add	r12,r17,r12
   4e420:	0007883a 	mov	r3,zero
   4e424:	81400017 	ldw	r5,0(r16)
   4e428:	89c00017 	ldw	r7,0(r17)
   4e42c:	59800104 	addi	r6,r11,4
   4e430:	293fffcc 	andi	r4,r5,65535
   4e434:	20c7883a 	add	r3,r4,r3
   4e438:	393fffcc 	andi	r4,r7,65535
   4e43c:	1909c83a 	sub	r4,r3,r4
   4e440:	280ad43a 	srli	r5,r5,16
   4e444:	380ed43a 	srli	r7,r7,16
   4e448:	2007d43a 	srai	r3,r4,16
   4e44c:	213fffcc 	andi	r4,r4,65535
   4e450:	29cbc83a 	sub	r5,r5,r7
   4e454:	28c7883a 	add	r3,r5,r3
   4e458:	180a943a 	slli	r5,r3,16
   4e45c:	8c400104 	addi	r17,r17,4
   4e460:	84000104 	addi	r16,r16,4
   4e464:	2908b03a 	or	r4,r5,r4
   4e468:	59000015 	stw	r4,0(r11)
   4e46c:	1807d43a 	srai	r3,r3,16
   4e470:	3015883a 	mov	r10,r6
   4e474:	3017883a 	mov	r11,r6
   4e478:	8b3fea36 	bltu	r17,r12,4e424 <__alt_data_end+0xfffe7324>
   4e47c:	8200162e 	bgeu	r16,r8,4e4d8 <__mdiff+0x17c>
   4e480:	8017883a 	mov	r11,r16
   4e484:	59400017 	ldw	r5,0(r11)
   4e488:	31800104 	addi	r6,r6,4
   4e48c:	5ac00104 	addi	r11,r11,4
   4e490:	293fffcc 	andi	r4,r5,65535
   4e494:	20c7883a 	add	r3,r4,r3
   4e498:	280ed43a 	srli	r7,r5,16
   4e49c:	180bd43a 	srai	r5,r3,16
   4e4a0:	193fffcc 	andi	r4,r3,65535
   4e4a4:	3947883a 	add	r3,r7,r5
   4e4a8:	180a943a 	slli	r5,r3,16
   4e4ac:	1807d43a 	srai	r3,r3,16
   4e4b0:	2908b03a 	or	r4,r5,r4
   4e4b4:	313fff15 	stw	r4,-4(r6)
   4e4b8:	5a3ff236 	bltu	r11,r8,4e484 <__alt_data_end+0xfffe7384>
   4e4bc:	0406303a 	nor	r3,zero,r16
   4e4c0:	1a07883a 	add	r3,r3,r8
   4e4c4:	1806d0ba 	srli	r3,r3,2
   4e4c8:	18c00044 	addi	r3,r3,1
   4e4cc:	18c7883a 	add	r3,r3,r3
   4e4d0:	18c7883a 	add	r3,r3,r3
   4e4d4:	50d5883a 	add	r10,r10,r3
   4e4d8:	50ffff04 	addi	r3,r10,-4
   4e4dc:	2000041e 	bne	r4,zero,4e4f0 <__mdiff+0x194>
   4e4e0:	18ffff04 	addi	r3,r3,-4
   4e4e4:	19000017 	ldw	r4,0(r3)
   4e4e8:	4a7fffc4 	addi	r9,r9,-1
   4e4ec:	203ffc26 	beq	r4,zero,4e4e0 <__alt_data_end+0xfffe73e0>
   4e4f0:	12400415 	stw	r9,16(r2)
   4e4f4:	dfc00517 	ldw	ra,20(sp)
   4e4f8:	dd000417 	ldw	r20,16(sp)
   4e4fc:	dcc00317 	ldw	r19,12(sp)
   4e500:	dc800217 	ldw	r18,8(sp)
   4e504:	dc400117 	ldw	r17,4(sp)
   4e508:	dc000017 	ldw	r16,0(sp)
   4e50c:	dec00604 	addi	sp,sp,24
   4e510:	f800283a 	ret
   4e514:	000b883a 	mov	r5,zero
   4e518:	004da340 	call	4da34 <_Balloc>
   4e51c:	00c00044 	movi	r3,1
   4e520:	10c00415 	stw	r3,16(r2)
   4e524:	10000515 	stw	zero,20(r2)
   4e528:	003ff206 	br	4e4f4 <__alt_data_end+0xfffe73f4>
   4e52c:	8023883a 	mov	r17,r16
   4e530:	0029883a 	mov	r20,zero
   4e534:	4021883a 	mov	r16,r8
   4e538:	003fad06 	br	4e3f0 <__alt_data_end+0xfffe72f0>
   4e53c:	9005883a 	mov	r2,r18
   4e540:	94400504 	addi	r17,r18,20
   4e544:	9c000504 	addi	r16,r19,20
   4e548:	9825883a 	mov	r18,r19
   4e54c:	05000044 	movi	r20,1
   4e550:	1027883a 	mov	r19,r2
   4e554:	003fa606 	br	4e3f0 <__alt_data_end+0xfffe72f0>

0004e558 <__ulp>:
   4e558:	295ffc2c 	andhi	r5,r5,32752
   4e55c:	00bf3034 	movhi	r2,64704
   4e560:	2887883a 	add	r3,r5,r2
   4e564:	00c0020e 	bge	zero,r3,4e570 <__ulp+0x18>
   4e568:	0005883a 	mov	r2,zero
   4e56c:	f800283a 	ret
   4e570:	00c7c83a 	sub	r3,zero,r3
   4e574:	1807d53a 	srai	r3,r3,20
   4e578:	008004c4 	movi	r2,19
   4e57c:	10c00b0e 	bge	r2,r3,4e5ac <__ulp+0x54>
   4e580:	18bffb04 	addi	r2,r3,-20
   4e584:	01000784 	movi	r4,30
   4e588:	0007883a 	mov	r3,zero
   4e58c:	20800516 	blt	r4,r2,4e5a4 <__ulp+0x4c>
   4e590:	010007c4 	movi	r4,31
   4e594:	2089c83a 	sub	r4,r4,r2
   4e598:	00800044 	movi	r2,1
   4e59c:	1104983a 	sll	r2,r2,r4
   4e5a0:	f800283a 	ret
   4e5a4:	00800044 	movi	r2,1
   4e5a8:	f800283a 	ret
   4e5ac:	01400234 	movhi	r5,8
   4e5b0:	28c7d83a 	sra	r3,r5,r3
   4e5b4:	0005883a 	mov	r2,zero
   4e5b8:	f800283a 	ret

0004e5bc <__b2d>:
   4e5bc:	defffa04 	addi	sp,sp,-24
   4e5c0:	dc000015 	stw	r16,0(sp)
   4e5c4:	24000417 	ldw	r16,16(r4)
   4e5c8:	dc400115 	stw	r17,4(sp)
   4e5cc:	24400504 	addi	r17,r4,20
   4e5d0:	8421883a 	add	r16,r16,r16
   4e5d4:	8421883a 	add	r16,r16,r16
   4e5d8:	8c21883a 	add	r16,r17,r16
   4e5dc:	dc800215 	stw	r18,8(sp)
   4e5e0:	84bfff17 	ldw	r18,-4(r16)
   4e5e4:	dd000415 	stw	r20,16(sp)
   4e5e8:	dcc00315 	stw	r19,12(sp)
   4e5ec:	9009883a 	mov	r4,r18
   4e5f0:	2829883a 	mov	r20,r5
   4e5f4:	dfc00515 	stw	ra,20(sp)
   4e5f8:	004dd280 	call	4dd28 <__hi0bits>
   4e5fc:	00c00804 	movi	r3,32
   4e600:	1889c83a 	sub	r4,r3,r2
   4e604:	a1000015 	stw	r4,0(r20)
   4e608:	01000284 	movi	r4,10
   4e60c:	84ffff04 	addi	r19,r16,-4
   4e610:	20801216 	blt	r4,r2,4e65c <__b2d+0xa0>
   4e614:	018002c4 	movi	r6,11
   4e618:	308dc83a 	sub	r6,r6,r2
   4e61c:	9186d83a 	srl	r3,r18,r6
   4e620:	18cffc34 	orhi	r3,r3,16368
   4e624:	8cc0212e 	bgeu	r17,r19,4e6ac <__b2d+0xf0>
   4e628:	813ffe17 	ldw	r4,-8(r16)
   4e62c:	218cd83a 	srl	r6,r4,r6
   4e630:	10800544 	addi	r2,r2,21
   4e634:	9084983a 	sll	r2,r18,r2
   4e638:	1184b03a 	or	r2,r2,r6
   4e63c:	dfc00517 	ldw	ra,20(sp)
   4e640:	dd000417 	ldw	r20,16(sp)
   4e644:	dcc00317 	ldw	r19,12(sp)
   4e648:	dc800217 	ldw	r18,8(sp)
   4e64c:	dc400117 	ldw	r17,4(sp)
   4e650:	dc000017 	ldw	r16,0(sp)
   4e654:	dec00604 	addi	sp,sp,24
   4e658:	f800283a 	ret
   4e65c:	8cc00f2e 	bgeu	r17,r19,4e69c <__b2d+0xe0>
   4e660:	117ffd44 	addi	r5,r2,-11
   4e664:	80bffe17 	ldw	r2,-8(r16)
   4e668:	28000e26 	beq	r5,zero,4e6a4 <__b2d+0xe8>
   4e66c:	1949c83a 	sub	r4,r3,r5
   4e670:	9164983a 	sll	r18,r18,r5
   4e674:	1106d83a 	srl	r3,r2,r4
   4e678:	81bffe04 	addi	r6,r16,-8
   4e67c:	948ffc34 	orhi	r18,r18,16368
   4e680:	90c6b03a 	or	r3,r18,r3
   4e684:	89800e2e 	bgeu	r17,r6,4e6c0 <__b2d+0x104>
   4e688:	81bffd17 	ldw	r6,-12(r16)
   4e68c:	1144983a 	sll	r2,r2,r5
   4e690:	310ad83a 	srl	r5,r6,r4
   4e694:	2884b03a 	or	r2,r5,r2
   4e698:	003fe806 	br	4e63c <__alt_data_end+0xfffe753c>
   4e69c:	10bffd44 	addi	r2,r2,-11
   4e6a0:	1000041e 	bne	r2,zero,4e6b4 <__b2d+0xf8>
   4e6a4:	90cffc34 	orhi	r3,r18,16368
   4e6a8:	003fe406 	br	4e63c <__alt_data_end+0xfffe753c>
   4e6ac:	000d883a 	mov	r6,zero
   4e6b0:	003fdf06 	br	4e630 <__alt_data_end+0xfffe7530>
   4e6b4:	90a4983a 	sll	r18,r18,r2
   4e6b8:	0005883a 	mov	r2,zero
   4e6bc:	003ff906 	br	4e6a4 <__alt_data_end+0xfffe75a4>
   4e6c0:	1144983a 	sll	r2,r2,r5
   4e6c4:	003fdd06 	br	4e63c <__alt_data_end+0xfffe753c>

0004e6c8 <__d2b>:
   4e6c8:	defff804 	addi	sp,sp,-32
   4e6cc:	dc000215 	stw	r16,8(sp)
   4e6d0:	3021883a 	mov	r16,r6
   4e6d4:	dc400315 	stw	r17,12(sp)
   4e6d8:	8022907a 	slli	r17,r16,1
   4e6dc:	dd000615 	stw	r20,24(sp)
   4e6e0:	2829883a 	mov	r20,r5
   4e6e4:	01400044 	movi	r5,1
   4e6e8:	dcc00515 	stw	r19,20(sp)
   4e6ec:	dc800415 	stw	r18,16(sp)
   4e6f0:	dfc00715 	stw	ra,28(sp)
   4e6f4:	3825883a 	mov	r18,r7
   4e6f8:	8822d57a 	srli	r17,r17,21
   4e6fc:	004da340 	call	4da34 <_Balloc>
   4e700:	1027883a 	mov	r19,r2
   4e704:	00800434 	movhi	r2,16
   4e708:	10bfffc4 	addi	r2,r2,-1
   4e70c:	808c703a 	and	r6,r16,r2
   4e710:	88000126 	beq	r17,zero,4e718 <__d2b+0x50>
   4e714:	31800434 	orhi	r6,r6,16
   4e718:	d9800015 	stw	r6,0(sp)
   4e71c:	a0002426 	beq	r20,zero,4e7b0 <__d2b+0xe8>
   4e720:	d9000104 	addi	r4,sp,4
   4e724:	dd000115 	stw	r20,4(sp)
   4e728:	004dd900 	call	4dd90 <__lo0bits>
   4e72c:	d8c00017 	ldw	r3,0(sp)
   4e730:	10002f1e 	bne	r2,zero,4e7f0 <__d2b+0x128>
   4e734:	d9000117 	ldw	r4,4(sp)
   4e738:	99000515 	stw	r4,20(r19)
   4e73c:	1821003a 	cmpeq	r16,r3,zero
   4e740:	01000084 	movi	r4,2
   4e744:	2421c83a 	sub	r16,r4,r16
   4e748:	98c00615 	stw	r3,24(r19)
   4e74c:	9c000415 	stw	r16,16(r19)
   4e750:	88001f1e 	bne	r17,zero,4e7d0 <__d2b+0x108>
   4e754:	10bef384 	addi	r2,r2,-1074
   4e758:	90800015 	stw	r2,0(r18)
   4e75c:	00900034 	movhi	r2,16384
   4e760:	10bfffc4 	addi	r2,r2,-1
   4e764:	8085883a 	add	r2,r16,r2
   4e768:	1085883a 	add	r2,r2,r2
   4e76c:	1085883a 	add	r2,r2,r2
   4e770:	9885883a 	add	r2,r19,r2
   4e774:	11000517 	ldw	r4,20(r2)
   4e778:	8020917a 	slli	r16,r16,5
   4e77c:	004dd280 	call	4dd28 <__hi0bits>
   4e780:	d8c00817 	ldw	r3,32(sp)
   4e784:	8085c83a 	sub	r2,r16,r2
   4e788:	18800015 	stw	r2,0(r3)
   4e78c:	9805883a 	mov	r2,r19
   4e790:	dfc00717 	ldw	ra,28(sp)
   4e794:	dd000617 	ldw	r20,24(sp)
   4e798:	dcc00517 	ldw	r19,20(sp)
   4e79c:	dc800417 	ldw	r18,16(sp)
   4e7a0:	dc400317 	ldw	r17,12(sp)
   4e7a4:	dc000217 	ldw	r16,8(sp)
   4e7a8:	dec00804 	addi	sp,sp,32
   4e7ac:	f800283a 	ret
   4e7b0:	d809883a 	mov	r4,sp
   4e7b4:	004dd900 	call	4dd90 <__lo0bits>
   4e7b8:	d8c00017 	ldw	r3,0(sp)
   4e7bc:	04000044 	movi	r16,1
   4e7c0:	9c000415 	stw	r16,16(r19)
   4e7c4:	98c00515 	stw	r3,20(r19)
   4e7c8:	10800804 	addi	r2,r2,32
   4e7cc:	883fe126 	beq	r17,zero,4e754 <__alt_data_end+0xfffe7654>
   4e7d0:	00c00d44 	movi	r3,53
   4e7d4:	8c7ef344 	addi	r17,r17,-1075
   4e7d8:	88a3883a 	add	r17,r17,r2
   4e7dc:	1885c83a 	sub	r2,r3,r2
   4e7e0:	d8c00817 	ldw	r3,32(sp)
   4e7e4:	94400015 	stw	r17,0(r18)
   4e7e8:	18800015 	stw	r2,0(r3)
   4e7ec:	003fe706 	br	4e78c <__alt_data_end+0xfffe768c>
   4e7f0:	01000804 	movi	r4,32
   4e7f4:	2089c83a 	sub	r4,r4,r2
   4e7f8:	1908983a 	sll	r4,r3,r4
   4e7fc:	d9400117 	ldw	r5,4(sp)
   4e800:	1886d83a 	srl	r3,r3,r2
   4e804:	2148b03a 	or	r4,r4,r5
   4e808:	99000515 	stw	r4,20(r19)
   4e80c:	d8c00015 	stw	r3,0(sp)
   4e810:	003fca06 	br	4e73c <__alt_data_end+0xfffe763c>

0004e814 <__ratio>:
   4e814:	defff904 	addi	sp,sp,-28
   4e818:	dc400315 	stw	r17,12(sp)
   4e81c:	2823883a 	mov	r17,r5
   4e820:	d9400104 	addi	r5,sp,4
   4e824:	dfc00615 	stw	ra,24(sp)
   4e828:	dcc00515 	stw	r19,20(sp)
   4e82c:	dc800415 	stw	r18,16(sp)
   4e830:	2027883a 	mov	r19,r4
   4e834:	dc000215 	stw	r16,8(sp)
   4e838:	004e5bc0 	call	4e5bc <__b2d>
   4e83c:	d80b883a 	mov	r5,sp
   4e840:	8809883a 	mov	r4,r17
   4e844:	1025883a 	mov	r18,r2
   4e848:	1821883a 	mov	r16,r3
   4e84c:	004e5bc0 	call	4e5bc <__b2d>
   4e850:	8a000417 	ldw	r8,16(r17)
   4e854:	99000417 	ldw	r4,16(r19)
   4e858:	d9400117 	ldw	r5,4(sp)
   4e85c:	2209c83a 	sub	r4,r4,r8
   4e860:	2010917a 	slli	r8,r4,5
   4e864:	d9000017 	ldw	r4,0(sp)
   4e868:	2909c83a 	sub	r4,r5,r4
   4e86c:	4109883a 	add	r4,r8,r4
   4e870:	01000e0e 	bge	zero,r4,4e8ac <__ratio+0x98>
   4e874:	2008953a 	slli	r4,r4,20
   4e878:	2421883a 	add	r16,r4,r16
   4e87c:	100d883a 	mov	r6,r2
   4e880:	180f883a 	mov	r7,r3
   4e884:	9009883a 	mov	r4,r18
   4e888:	800b883a 	mov	r5,r16
   4e88c:	004508c0 	call	4508c <__divdf3>
   4e890:	dfc00617 	ldw	ra,24(sp)
   4e894:	dcc00517 	ldw	r19,20(sp)
   4e898:	dc800417 	ldw	r18,16(sp)
   4e89c:	dc400317 	ldw	r17,12(sp)
   4e8a0:	dc000217 	ldw	r16,8(sp)
   4e8a4:	dec00704 	addi	sp,sp,28
   4e8a8:	f800283a 	ret
   4e8ac:	2008953a 	slli	r4,r4,20
   4e8b0:	1907c83a 	sub	r3,r3,r4
   4e8b4:	003ff106 	br	4e87c <__alt_data_end+0xfffe777c>

0004e8b8 <_mprec_log10>:
   4e8b8:	defffe04 	addi	sp,sp,-8
   4e8bc:	dc000015 	stw	r16,0(sp)
   4e8c0:	dfc00115 	stw	ra,4(sp)
   4e8c4:	008005c4 	movi	r2,23
   4e8c8:	2021883a 	mov	r16,r4
   4e8cc:	11000d0e 	bge	r2,r4,4e904 <_mprec_log10+0x4c>
   4e8d0:	0005883a 	mov	r2,zero
   4e8d4:	00cffc34 	movhi	r3,16368
   4e8d8:	843fffc4 	addi	r16,r16,-1
   4e8dc:	000d883a 	mov	r6,zero
   4e8e0:	01d00934 	movhi	r7,16420
   4e8e4:	1009883a 	mov	r4,r2
   4e8e8:	180b883a 	mov	r5,r3
   4e8ec:	0045ad80 	call	45ad8 <__muldf3>
   4e8f0:	803ff91e 	bne	r16,zero,4e8d8 <__alt_data_end+0xfffe77d8>
   4e8f4:	dfc00117 	ldw	ra,4(sp)
   4e8f8:	dc000017 	ldw	r16,0(sp)
   4e8fc:	dec00204 	addi	sp,sp,8
   4e900:	f800283a 	ret
   4e904:	202090fa 	slli	r16,r4,3
   4e908:	00800174 	movhi	r2,5
   4e90c:	109a8c04 	addi	r2,r2,27184
   4e910:	1421883a 	add	r16,r2,r16
   4e914:	80800017 	ldw	r2,0(r16)
   4e918:	80c00117 	ldw	r3,4(r16)
   4e91c:	dfc00117 	ldw	ra,4(sp)
   4e920:	dc000017 	ldw	r16,0(sp)
   4e924:	dec00204 	addi	sp,sp,8
   4e928:	f800283a 	ret

0004e92c <__copybits>:
   4e92c:	297fffc4 	addi	r5,r5,-1
   4e930:	280fd17a 	srai	r7,r5,5
   4e934:	30c00417 	ldw	r3,16(r6)
   4e938:	30800504 	addi	r2,r6,20
   4e93c:	39c00044 	addi	r7,r7,1
   4e940:	18c7883a 	add	r3,r3,r3
   4e944:	39cf883a 	add	r7,r7,r7
   4e948:	18c7883a 	add	r3,r3,r3
   4e94c:	39cf883a 	add	r7,r7,r7
   4e950:	10c7883a 	add	r3,r2,r3
   4e954:	21cf883a 	add	r7,r4,r7
   4e958:	10c00d2e 	bgeu	r2,r3,4e990 <__copybits+0x64>
   4e95c:	200b883a 	mov	r5,r4
   4e960:	12000017 	ldw	r8,0(r2)
   4e964:	29400104 	addi	r5,r5,4
   4e968:	10800104 	addi	r2,r2,4
   4e96c:	2a3fff15 	stw	r8,-4(r5)
   4e970:	10fffb36 	bltu	r2,r3,4e960 <__alt_data_end+0xfffe7860>
   4e974:	1985c83a 	sub	r2,r3,r6
   4e978:	10bffac4 	addi	r2,r2,-21
   4e97c:	1004d0ba 	srli	r2,r2,2
   4e980:	10800044 	addi	r2,r2,1
   4e984:	1085883a 	add	r2,r2,r2
   4e988:	1085883a 	add	r2,r2,r2
   4e98c:	2089883a 	add	r4,r4,r2
   4e990:	21c0032e 	bgeu	r4,r7,4e9a0 <__copybits+0x74>
   4e994:	20000015 	stw	zero,0(r4)
   4e998:	21000104 	addi	r4,r4,4
   4e99c:	21fffd36 	bltu	r4,r7,4e994 <__alt_data_end+0xfffe7894>
   4e9a0:	f800283a 	ret

0004e9a4 <__any_on>:
   4e9a4:	20c00417 	ldw	r3,16(r4)
   4e9a8:	2805d17a 	srai	r2,r5,5
   4e9ac:	21000504 	addi	r4,r4,20
   4e9b0:	18800d0e 	bge	r3,r2,4e9e8 <__any_on+0x44>
   4e9b4:	18c7883a 	add	r3,r3,r3
   4e9b8:	18c7883a 	add	r3,r3,r3
   4e9bc:	20c7883a 	add	r3,r4,r3
   4e9c0:	20c0192e 	bgeu	r4,r3,4ea28 <__any_on+0x84>
   4e9c4:	18bfff17 	ldw	r2,-4(r3)
   4e9c8:	18ffff04 	addi	r3,r3,-4
   4e9cc:	1000041e 	bne	r2,zero,4e9e0 <__any_on+0x3c>
   4e9d0:	20c0142e 	bgeu	r4,r3,4ea24 <__any_on+0x80>
   4e9d4:	18ffff04 	addi	r3,r3,-4
   4e9d8:	19400017 	ldw	r5,0(r3)
   4e9dc:	283ffc26 	beq	r5,zero,4e9d0 <__alt_data_end+0xfffe78d0>
   4e9e0:	00800044 	movi	r2,1
   4e9e4:	f800283a 	ret
   4e9e8:	10c00a0e 	bge	r2,r3,4ea14 <__any_on+0x70>
   4e9ec:	1085883a 	add	r2,r2,r2
   4e9f0:	1085883a 	add	r2,r2,r2
   4e9f4:	294007cc 	andi	r5,r5,31
   4e9f8:	2087883a 	add	r3,r4,r2
   4e9fc:	283ff026 	beq	r5,zero,4e9c0 <__alt_data_end+0xfffe78c0>
   4ea00:	19800017 	ldw	r6,0(r3)
   4ea04:	3144d83a 	srl	r2,r6,r5
   4ea08:	114a983a 	sll	r5,r2,r5
   4ea0c:	317ff41e 	bne	r6,r5,4e9e0 <__alt_data_end+0xfffe78e0>
   4ea10:	003feb06 	br	4e9c0 <__alt_data_end+0xfffe78c0>
   4ea14:	1085883a 	add	r2,r2,r2
   4ea18:	1085883a 	add	r2,r2,r2
   4ea1c:	2087883a 	add	r3,r4,r2
   4ea20:	003fe706 	br	4e9c0 <__alt_data_end+0xfffe78c0>
   4ea24:	f800283a 	ret
   4ea28:	0005883a 	mov	r2,zero
   4ea2c:	f800283a 	ret

0004ea30 <_read_r>:
   4ea30:	defffd04 	addi	sp,sp,-12
   4ea34:	2805883a 	mov	r2,r5
   4ea38:	dc000015 	stw	r16,0(sp)
   4ea3c:	040001b4 	movhi	r16,6
   4ea40:	dc400115 	stw	r17,4(sp)
   4ea44:	300b883a 	mov	r5,r6
   4ea48:	8428b704 	addi	r16,r16,-23844
   4ea4c:	2023883a 	mov	r17,r4
   4ea50:	380d883a 	mov	r6,r7
   4ea54:	1009883a 	mov	r4,r2
   4ea58:	dfc00215 	stw	ra,8(sp)
   4ea5c:	80000015 	stw	zero,0(r16)
   4ea60:	00522c80 	call	522c8 <read>
   4ea64:	00ffffc4 	movi	r3,-1
   4ea68:	10c00526 	beq	r2,r3,4ea80 <_read_r+0x50>
   4ea6c:	dfc00217 	ldw	ra,8(sp)
   4ea70:	dc400117 	ldw	r17,4(sp)
   4ea74:	dc000017 	ldw	r16,0(sp)
   4ea78:	dec00304 	addi	sp,sp,12
   4ea7c:	f800283a 	ret
   4ea80:	80c00017 	ldw	r3,0(r16)
   4ea84:	183ff926 	beq	r3,zero,4ea6c <__alt_data_end+0xfffe796c>
   4ea88:	88c00015 	stw	r3,0(r17)
   4ea8c:	003ff706 	br	4ea6c <__alt_data_end+0xfffe796c>

0004ea90 <_realloc_r>:
   4ea90:	defff604 	addi	sp,sp,-40
   4ea94:	dc800215 	stw	r18,8(sp)
   4ea98:	dfc00915 	stw	ra,36(sp)
   4ea9c:	df000815 	stw	fp,32(sp)
   4eaa0:	ddc00715 	stw	r23,28(sp)
   4eaa4:	dd800615 	stw	r22,24(sp)
   4eaa8:	dd400515 	stw	r21,20(sp)
   4eaac:	dd000415 	stw	r20,16(sp)
   4eab0:	dcc00315 	stw	r19,12(sp)
   4eab4:	dc400115 	stw	r17,4(sp)
   4eab8:	dc000015 	stw	r16,0(sp)
   4eabc:	3025883a 	mov	r18,r6
   4eac0:	2800b726 	beq	r5,zero,4eda0 <_realloc_r+0x310>
   4eac4:	282b883a 	mov	r21,r5
   4eac8:	2029883a 	mov	r20,r4
   4eacc:	0051ff00 	call	51ff0 <__malloc_lock>
   4ead0:	a8bfff17 	ldw	r2,-4(r21)
   4ead4:	043fff04 	movi	r16,-4
   4ead8:	90c002c4 	addi	r3,r18,11
   4eadc:	01000584 	movi	r4,22
   4eae0:	acfffe04 	addi	r19,r21,-8
   4eae4:	1420703a 	and	r16,r2,r16
   4eae8:	20c0332e 	bgeu	r4,r3,4ebb8 <_realloc_r+0x128>
   4eaec:	047ffe04 	movi	r17,-8
   4eaf0:	1c62703a 	and	r17,r3,r17
   4eaf4:	8807883a 	mov	r3,r17
   4eaf8:	88005816 	blt	r17,zero,4ec5c <_realloc_r+0x1cc>
   4eafc:	8c805736 	bltu	r17,r18,4ec5c <_realloc_r+0x1cc>
   4eb00:	80c0300e 	bge	r16,r3,4ebc4 <_realloc_r+0x134>
   4eb04:	07000174 	movhi	fp,5
   4eb08:	e71be904 	addi	fp,fp,28580
   4eb0c:	e1c00217 	ldw	r7,8(fp)
   4eb10:	9c09883a 	add	r4,r19,r16
   4eb14:	22000117 	ldw	r8,4(r4)
   4eb18:	21c06326 	beq	r4,r7,4eca8 <_realloc_r+0x218>
   4eb1c:	017fff84 	movi	r5,-2
   4eb20:	414a703a 	and	r5,r8,r5
   4eb24:	214b883a 	add	r5,r4,r5
   4eb28:	29800117 	ldw	r6,4(r5)
   4eb2c:	3180004c 	andi	r6,r6,1
   4eb30:	30003f26 	beq	r6,zero,4ec30 <_realloc_r+0x1a0>
   4eb34:	1080004c 	andi	r2,r2,1
   4eb38:	10008326 	beq	r2,zero,4ed48 <_realloc_r+0x2b8>
   4eb3c:	900b883a 	mov	r5,r18
   4eb40:	a009883a 	mov	r4,r20
   4eb44:	00477640 	call	47764 <_malloc_r>
   4eb48:	1025883a 	mov	r18,r2
   4eb4c:	10011e26 	beq	r2,zero,4efc8 <_realloc_r+0x538>
   4eb50:	a93fff17 	ldw	r4,-4(r21)
   4eb54:	10fffe04 	addi	r3,r2,-8
   4eb58:	00bfff84 	movi	r2,-2
   4eb5c:	2084703a 	and	r2,r4,r2
   4eb60:	9885883a 	add	r2,r19,r2
   4eb64:	1880ee26 	beq	r3,r2,4ef20 <_realloc_r+0x490>
   4eb68:	81bfff04 	addi	r6,r16,-4
   4eb6c:	00800904 	movi	r2,36
   4eb70:	1180b836 	bltu	r2,r6,4ee54 <_realloc_r+0x3c4>
   4eb74:	00c004c4 	movi	r3,19
   4eb78:	19809636 	bltu	r3,r6,4edd4 <_realloc_r+0x344>
   4eb7c:	9005883a 	mov	r2,r18
   4eb80:	a807883a 	mov	r3,r21
   4eb84:	19000017 	ldw	r4,0(r3)
   4eb88:	11000015 	stw	r4,0(r2)
   4eb8c:	19000117 	ldw	r4,4(r3)
   4eb90:	11000115 	stw	r4,4(r2)
   4eb94:	18c00217 	ldw	r3,8(r3)
   4eb98:	10c00215 	stw	r3,8(r2)
   4eb9c:	a80b883a 	mov	r5,r21
   4eba0:	a009883a 	mov	r4,r20
   4eba4:	004cbc80 	call	4cbc8 <_free_r>
   4eba8:	a009883a 	mov	r4,r20
   4ebac:	00520140 	call	52014 <__malloc_unlock>
   4ebb0:	9005883a 	mov	r2,r18
   4ebb4:	00001206 	br	4ec00 <_realloc_r+0x170>
   4ebb8:	00c00404 	movi	r3,16
   4ebbc:	1823883a 	mov	r17,r3
   4ebc0:	003fce06 	br	4eafc <__alt_data_end+0xfffe79fc>
   4ebc4:	a825883a 	mov	r18,r21
   4ebc8:	8445c83a 	sub	r2,r16,r17
   4ebcc:	00c003c4 	movi	r3,15
   4ebd0:	18802636 	bltu	r3,r2,4ec6c <_realloc_r+0x1dc>
   4ebd4:	99800117 	ldw	r6,4(r19)
   4ebd8:	9c07883a 	add	r3,r19,r16
   4ebdc:	3180004c 	andi	r6,r6,1
   4ebe0:	3420b03a 	or	r16,r6,r16
   4ebe4:	9c000115 	stw	r16,4(r19)
   4ebe8:	18800117 	ldw	r2,4(r3)
   4ebec:	10800054 	ori	r2,r2,1
   4ebf0:	18800115 	stw	r2,4(r3)
   4ebf4:	a009883a 	mov	r4,r20
   4ebf8:	00520140 	call	52014 <__malloc_unlock>
   4ebfc:	9005883a 	mov	r2,r18
   4ec00:	dfc00917 	ldw	ra,36(sp)
   4ec04:	df000817 	ldw	fp,32(sp)
   4ec08:	ddc00717 	ldw	r23,28(sp)
   4ec0c:	dd800617 	ldw	r22,24(sp)
   4ec10:	dd400517 	ldw	r21,20(sp)
   4ec14:	dd000417 	ldw	r20,16(sp)
   4ec18:	dcc00317 	ldw	r19,12(sp)
   4ec1c:	dc800217 	ldw	r18,8(sp)
   4ec20:	dc400117 	ldw	r17,4(sp)
   4ec24:	dc000017 	ldw	r16,0(sp)
   4ec28:	dec00a04 	addi	sp,sp,40
   4ec2c:	f800283a 	ret
   4ec30:	017fff04 	movi	r5,-4
   4ec34:	414a703a 	and	r5,r8,r5
   4ec38:	814d883a 	add	r6,r16,r5
   4ec3c:	30c01f16 	blt	r6,r3,4ecbc <_realloc_r+0x22c>
   4ec40:	20800317 	ldw	r2,12(r4)
   4ec44:	20c00217 	ldw	r3,8(r4)
   4ec48:	a825883a 	mov	r18,r21
   4ec4c:	3021883a 	mov	r16,r6
   4ec50:	18800315 	stw	r2,12(r3)
   4ec54:	10c00215 	stw	r3,8(r2)
   4ec58:	003fdb06 	br	4ebc8 <__alt_data_end+0xfffe7ac8>
   4ec5c:	00800304 	movi	r2,12
   4ec60:	a0800015 	stw	r2,0(r20)
   4ec64:	0005883a 	mov	r2,zero
   4ec68:	003fe506 	br	4ec00 <__alt_data_end+0xfffe7b00>
   4ec6c:	98c00117 	ldw	r3,4(r19)
   4ec70:	9c4b883a 	add	r5,r19,r17
   4ec74:	11000054 	ori	r4,r2,1
   4ec78:	18c0004c 	andi	r3,r3,1
   4ec7c:	1c62b03a 	or	r17,r3,r17
   4ec80:	9c400115 	stw	r17,4(r19)
   4ec84:	29000115 	stw	r4,4(r5)
   4ec88:	2885883a 	add	r2,r5,r2
   4ec8c:	10c00117 	ldw	r3,4(r2)
   4ec90:	29400204 	addi	r5,r5,8
   4ec94:	a009883a 	mov	r4,r20
   4ec98:	18c00054 	ori	r3,r3,1
   4ec9c:	10c00115 	stw	r3,4(r2)
   4eca0:	004cbc80 	call	4cbc8 <_free_r>
   4eca4:	003fd306 	br	4ebf4 <__alt_data_end+0xfffe7af4>
   4eca8:	017fff04 	movi	r5,-4
   4ecac:	414a703a 	and	r5,r8,r5
   4ecb0:	89800404 	addi	r6,r17,16
   4ecb4:	8151883a 	add	r8,r16,r5
   4ecb8:	4180590e 	bge	r8,r6,4ee20 <_realloc_r+0x390>
   4ecbc:	1080004c 	andi	r2,r2,1
   4ecc0:	103f9e1e 	bne	r2,zero,4eb3c <__alt_data_end+0xfffe7a3c>
   4ecc4:	adbffe17 	ldw	r22,-8(r21)
   4ecc8:	00bfff04 	movi	r2,-4
   4eccc:	9dadc83a 	sub	r22,r19,r22
   4ecd0:	b1800117 	ldw	r6,4(r22)
   4ecd4:	3084703a 	and	r2,r6,r2
   4ecd8:	20002026 	beq	r4,zero,4ed5c <_realloc_r+0x2cc>
   4ecdc:	80af883a 	add	r23,r16,r2
   4ece0:	b96f883a 	add	r23,r23,r5
   4ece4:	21c05f26 	beq	r4,r7,4ee64 <_realloc_r+0x3d4>
   4ece8:	b8c01c16 	blt	r23,r3,4ed5c <_realloc_r+0x2cc>
   4ecec:	20800317 	ldw	r2,12(r4)
   4ecf0:	20c00217 	ldw	r3,8(r4)
   4ecf4:	81bfff04 	addi	r6,r16,-4
   4ecf8:	01000904 	movi	r4,36
   4ecfc:	18800315 	stw	r2,12(r3)
   4ed00:	10c00215 	stw	r3,8(r2)
   4ed04:	b0c00217 	ldw	r3,8(r22)
   4ed08:	b0800317 	ldw	r2,12(r22)
   4ed0c:	b4800204 	addi	r18,r22,8
   4ed10:	18800315 	stw	r2,12(r3)
   4ed14:	10c00215 	stw	r3,8(r2)
   4ed18:	21801b36 	bltu	r4,r6,4ed88 <_realloc_r+0x2f8>
   4ed1c:	008004c4 	movi	r2,19
   4ed20:	1180352e 	bgeu	r2,r6,4edf8 <_realloc_r+0x368>
   4ed24:	a8800017 	ldw	r2,0(r21)
   4ed28:	b0800215 	stw	r2,8(r22)
   4ed2c:	a8800117 	ldw	r2,4(r21)
   4ed30:	b0800315 	stw	r2,12(r22)
   4ed34:	008006c4 	movi	r2,27
   4ed38:	11807f36 	bltu	r2,r6,4ef38 <_realloc_r+0x4a8>
   4ed3c:	b0800404 	addi	r2,r22,16
   4ed40:	ad400204 	addi	r21,r21,8
   4ed44:	00002d06 	br	4edfc <_realloc_r+0x36c>
   4ed48:	adbffe17 	ldw	r22,-8(r21)
   4ed4c:	00bfff04 	movi	r2,-4
   4ed50:	9dadc83a 	sub	r22,r19,r22
   4ed54:	b1000117 	ldw	r4,4(r22)
   4ed58:	2084703a 	and	r2,r4,r2
   4ed5c:	b03f7726 	beq	r22,zero,4eb3c <__alt_data_end+0xfffe7a3c>
   4ed60:	80af883a 	add	r23,r16,r2
   4ed64:	b8ff7516 	blt	r23,r3,4eb3c <__alt_data_end+0xfffe7a3c>
   4ed68:	b0800317 	ldw	r2,12(r22)
   4ed6c:	b0c00217 	ldw	r3,8(r22)
   4ed70:	81bfff04 	addi	r6,r16,-4
   4ed74:	01000904 	movi	r4,36
   4ed78:	18800315 	stw	r2,12(r3)
   4ed7c:	10c00215 	stw	r3,8(r2)
   4ed80:	b4800204 	addi	r18,r22,8
   4ed84:	21bfe52e 	bgeu	r4,r6,4ed1c <__alt_data_end+0xfffe7c1c>
   4ed88:	a80b883a 	mov	r5,r21
   4ed8c:	9009883a 	mov	r4,r18
   4ed90:	004d8d80 	call	4d8d8 <memmove>
   4ed94:	b821883a 	mov	r16,r23
   4ed98:	b027883a 	mov	r19,r22
   4ed9c:	003f8a06 	br	4ebc8 <__alt_data_end+0xfffe7ac8>
   4eda0:	300b883a 	mov	r5,r6
   4eda4:	dfc00917 	ldw	ra,36(sp)
   4eda8:	df000817 	ldw	fp,32(sp)
   4edac:	ddc00717 	ldw	r23,28(sp)
   4edb0:	dd800617 	ldw	r22,24(sp)
   4edb4:	dd400517 	ldw	r21,20(sp)
   4edb8:	dd000417 	ldw	r20,16(sp)
   4edbc:	dcc00317 	ldw	r19,12(sp)
   4edc0:	dc800217 	ldw	r18,8(sp)
   4edc4:	dc400117 	ldw	r17,4(sp)
   4edc8:	dc000017 	ldw	r16,0(sp)
   4edcc:	dec00a04 	addi	sp,sp,40
   4edd0:	00477641 	jmpi	47764 <_malloc_r>
   4edd4:	a8c00017 	ldw	r3,0(r21)
   4edd8:	90c00015 	stw	r3,0(r18)
   4eddc:	a8c00117 	ldw	r3,4(r21)
   4ede0:	90c00115 	stw	r3,4(r18)
   4ede4:	00c006c4 	movi	r3,27
   4ede8:	19804536 	bltu	r3,r6,4ef00 <_realloc_r+0x470>
   4edec:	90800204 	addi	r2,r18,8
   4edf0:	a8c00204 	addi	r3,r21,8
   4edf4:	003f6306 	br	4eb84 <__alt_data_end+0xfffe7a84>
   4edf8:	9005883a 	mov	r2,r18
   4edfc:	a8c00017 	ldw	r3,0(r21)
   4ee00:	b821883a 	mov	r16,r23
   4ee04:	b027883a 	mov	r19,r22
   4ee08:	10c00015 	stw	r3,0(r2)
   4ee0c:	a8c00117 	ldw	r3,4(r21)
   4ee10:	10c00115 	stw	r3,4(r2)
   4ee14:	a8c00217 	ldw	r3,8(r21)
   4ee18:	10c00215 	stw	r3,8(r2)
   4ee1c:	003f6a06 	br	4ebc8 <__alt_data_end+0xfffe7ac8>
   4ee20:	9c67883a 	add	r19,r19,r17
   4ee24:	4445c83a 	sub	r2,r8,r17
   4ee28:	e4c00215 	stw	r19,8(fp)
   4ee2c:	10800054 	ori	r2,r2,1
   4ee30:	98800115 	stw	r2,4(r19)
   4ee34:	a8bfff17 	ldw	r2,-4(r21)
   4ee38:	a009883a 	mov	r4,r20
   4ee3c:	1080004c 	andi	r2,r2,1
   4ee40:	1462b03a 	or	r17,r2,r17
   4ee44:	ac7fff15 	stw	r17,-4(r21)
   4ee48:	00520140 	call	52014 <__malloc_unlock>
   4ee4c:	a805883a 	mov	r2,r21
   4ee50:	003f6b06 	br	4ec00 <__alt_data_end+0xfffe7b00>
   4ee54:	a80b883a 	mov	r5,r21
   4ee58:	9009883a 	mov	r4,r18
   4ee5c:	004d8d80 	call	4d8d8 <memmove>
   4ee60:	003f4e06 	br	4eb9c <__alt_data_end+0xfffe7a9c>
   4ee64:	89000404 	addi	r4,r17,16
   4ee68:	b93fbc16 	blt	r23,r4,4ed5c <__alt_data_end+0xfffe7c5c>
   4ee6c:	b0800317 	ldw	r2,12(r22)
   4ee70:	b0c00217 	ldw	r3,8(r22)
   4ee74:	81bfff04 	addi	r6,r16,-4
   4ee78:	01000904 	movi	r4,36
   4ee7c:	18800315 	stw	r2,12(r3)
   4ee80:	10c00215 	stw	r3,8(r2)
   4ee84:	b4800204 	addi	r18,r22,8
   4ee88:	21804336 	bltu	r4,r6,4ef98 <_realloc_r+0x508>
   4ee8c:	008004c4 	movi	r2,19
   4ee90:	11803f2e 	bgeu	r2,r6,4ef90 <_realloc_r+0x500>
   4ee94:	a8800017 	ldw	r2,0(r21)
   4ee98:	b0800215 	stw	r2,8(r22)
   4ee9c:	a8800117 	ldw	r2,4(r21)
   4eea0:	b0800315 	stw	r2,12(r22)
   4eea4:	008006c4 	movi	r2,27
   4eea8:	11803f36 	bltu	r2,r6,4efa8 <_realloc_r+0x518>
   4eeac:	b0800404 	addi	r2,r22,16
   4eeb0:	ad400204 	addi	r21,r21,8
   4eeb4:	a8c00017 	ldw	r3,0(r21)
   4eeb8:	10c00015 	stw	r3,0(r2)
   4eebc:	a8c00117 	ldw	r3,4(r21)
   4eec0:	10c00115 	stw	r3,4(r2)
   4eec4:	a8c00217 	ldw	r3,8(r21)
   4eec8:	10c00215 	stw	r3,8(r2)
   4eecc:	b447883a 	add	r3,r22,r17
   4eed0:	bc45c83a 	sub	r2,r23,r17
   4eed4:	e0c00215 	stw	r3,8(fp)
   4eed8:	10800054 	ori	r2,r2,1
   4eedc:	18800115 	stw	r2,4(r3)
   4eee0:	b0800117 	ldw	r2,4(r22)
   4eee4:	a009883a 	mov	r4,r20
   4eee8:	1080004c 	andi	r2,r2,1
   4eeec:	1462b03a 	or	r17,r2,r17
   4eef0:	b4400115 	stw	r17,4(r22)
   4eef4:	00520140 	call	52014 <__malloc_unlock>
   4eef8:	9005883a 	mov	r2,r18
   4eefc:	003f4006 	br	4ec00 <__alt_data_end+0xfffe7b00>
   4ef00:	a8c00217 	ldw	r3,8(r21)
   4ef04:	90c00215 	stw	r3,8(r18)
   4ef08:	a8c00317 	ldw	r3,12(r21)
   4ef0c:	90c00315 	stw	r3,12(r18)
   4ef10:	30801126 	beq	r6,r2,4ef58 <_realloc_r+0x4c8>
   4ef14:	90800404 	addi	r2,r18,16
   4ef18:	a8c00404 	addi	r3,r21,16
   4ef1c:	003f1906 	br	4eb84 <__alt_data_end+0xfffe7a84>
   4ef20:	90ffff17 	ldw	r3,-4(r18)
   4ef24:	00bfff04 	movi	r2,-4
   4ef28:	a825883a 	mov	r18,r21
   4ef2c:	1884703a 	and	r2,r3,r2
   4ef30:	80a1883a 	add	r16,r16,r2
   4ef34:	003f2406 	br	4ebc8 <__alt_data_end+0xfffe7ac8>
   4ef38:	a8800217 	ldw	r2,8(r21)
   4ef3c:	b0800415 	stw	r2,16(r22)
   4ef40:	a8800317 	ldw	r2,12(r21)
   4ef44:	b0800515 	stw	r2,20(r22)
   4ef48:	31000a26 	beq	r6,r4,4ef74 <_realloc_r+0x4e4>
   4ef4c:	b0800604 	addi	r2,r22,24
   4ef50:	ad400404 	addi	r21,r21,16
   4ef54:	003fa906 	br	4edfc <__alt_data_end+0xfffe7cfc>
   4ef58:	a9000417 	ldw	r4,16(r21)
   4ef5c:	90800604 	addi	r2,r18,24
   4ef60:	a8c00604 	addi	r3,r21,24
   4ef64:	91000415 	stw	r4,16(r18)
   4ef68:	a9000517 	ldw	r4,20(r21)
   4ef6c:	91000515 	stw	r4,20(r18)
   4ef70:	003f0406 	br	4eb84 <__alt_data_end+0xfffe7a84>
   4ef74:	a8c00417 	ldw	r3,16(r21)
   4ef78:	ad400604 	addi	r21,r21,24
   4ef7c:	b0800804 	addi	r2,r22,32
   4ef80:	b0c00615 	stw	r3,24(r22)
   4ef84:	a8ffff17 	ldw	r3,-4(r21)
   4ef88:	b0c00715 	stw	r3,28(r22)
   4ef8c:	003f9b06 	br	4edfc <__alt_data_end+0xfffe7cfc>
   4ef90:	9005883a 	mov	r2,r18
   4ef94:	003fc706 	br	4eeb4 <__alt_data_end+0xfffe7db4>
   4ef98:	a80b883a 	mov	r5,r21
   4ef9c:	9009883a 	mov	r4,r18
   4efa0:	004d8d80 	call	4d8d8 <memmove>
   4efa4:	003fc906 	br	4eecc <__alt_data_end+0xfffe7dcc>
   4efa8:	a8800217 	ldw	r2,8(r21)
   4efac:	b0800415 	stw	r2,16(r22)
   4efb0:	a8800317 	ldw	r2,12(r21)
   4efb4:	b0800515 	stw	r2,20(r22)
   4efb8:	31000726 	beq	r6,r4,4efd8 <_realloc_r+0x548>
   4efbc:	b0800604 	addi	r2,r22,24
   4efc0:	ad400404 	addi	r21,r21,16
   4efc4:	003fbb06 	br	4eeb4 <__alt_data_end+0xfffe7db4>
   4efc8:	a009883a 	mov	r4,r20
   4efcc:	00520140 	call	52014 <__malloc_unlock>
   4efd0:	0005883a 	mov	r2,zero
   4efd4:	003f0a06 	br	4ec00 <__alt_data_end+0xfffe7b00>
   4efd8:	a8c00417 	ldw	r3,16(r21)
   4efdc:	ad400604 	addi	r21,r21,24
   4efe0:	b0800804 	addi	r2,r22,32
   4efe4:	b0c00615 	stw	r3,24(r22)
   4efe8:	a8ffff17 	ldw	r3,-4(r21)
   4efec:	b0c00715 	stw	r3,28(r22)
   4eff0:	003fb006 	br	4eeb4 <__alt_data_end+0xfffe7db4>

0004eff4 <strcmp>:
   4eff4:	2144b03a 	or	r2,r4,r5
   4eff8:	108000cc 	andi	r2,r2,3
   4effc:	1000171e 	bne	r2,zero,4f05c <strcmp+0x68>
   4f000:	20800017 	ldw	r2,0(r4)
   4f004:	28c00017 	ldw	r3,0(r5)
   4f008:	10c0141e 	bne	r2,r3,4f05c <strcmp+0x68>
   4f00c:	027fbff4 	movhi	r9,65279
   4f010:	4a7fbfc4 	addi	r9,r9,-257
   4f014:	0086303a 	nor	r3,zero,r2
   4f018:	02202074 	movhi	r8,32897
   4f01c:	1245883a 	add	r2,r2,r9
   4f020:	42202004 	addi	r8,r8,-32640
   4f024:	10c4703a 	and	r2,r2,r3
   4f028:	1204703a 	and	r2,r2,r8
   4f02c:	10000226 	beq	r2,zero,4f038 <strcmp+0x44>
   4f030:	00002306 	br	4f0c0 <strcmp+0xcc>
   4f034:	1000221e 	bne	r2,zero,4f0c0 <strcmp+0xcc>
   4f038:	21000104 	addi	r4,r4,4
   4f03c:	20c00017 	ldw	r3,0(r4)
   4f040:	29400104 	addi	r5,r5,4
   4f044:	29800017 	ldw	r6,0(r5)
   4f048:	1a4f883a 	add	r7,r3,r9
   4f04c:	00c4303a 	nor	r2,zero,r3
   4f050:	3884703a 	and	r2,r7,r2
   4f054:	1204703a 	and	r2,r2,r8
   4f058:	19bff626 	beq	r3,r6,4f034 <__alt_data_end+0xfffe7f34>
   4f05c:	20800003 	ldbu	r2,0(r4)
   4f060:	10c03fcc 	andi	r3,r2,255
   4f064:	18c0201c 	xori	r3,r3,128
   4f068:	18ffe004 	addi	r3,r3,-128
   4f06c:	18000c26 	beq	r3,zero,4f0a0 <strcmp+0xac>
   4f070:	29800007 	ldb	r6,0(r5)
   4f074:	19800326 	beq	r3,r6,4f084 <strcmp+0x90>
   4f078:	00001306 	br	4f0c8 <strcmp+0xd4>
   4f07c:	29800007 	ldb	r6,0(r5)
   4f080:	11800b1e 	bne	r2,r6,4f0b0 <strcmp+0xbc>
   4f084:	21000044 	addi	r4,r4,1
   4f088:	20c00003 	ldbu	r3,0(r4)
   4f08c:	29400044 	addi	r5,r5,1
   4f090:	18803fcc 	andi	r2,r3,255
   4f094:	1080201c 	xori	r2,r2,128
   4f098:	10bfe004 	addi	r2,r2,-128
   4f09c:	103ff71e 	bne	r2,zero,4f07c <__alt_data_end+0xfffe7f7c>
   4f0a0:	0007883a 	mov	r3,zero
   4f0a4:	28800003 	ldbu	r2,0(r5)
   4f0a8:	1885c83a 	sub	r2,r3,r2
   4f0ac:	f800283a 	ret
   4f0b0:	28800003 	ldbu	r2,0(r5)
   4f0b4:	18c03fcc 	andi	r3,r3,255
   4f0b8:	1885c83a 	sub	r2,r3,r2
   4f0bc:	f800283a 	ret
   4f0c0:	0005883a 	mov	r2,zero
   4f0c4:	f800283a 	ret
   4f0c8:	10c03fcc 	andi	r3,r2,255
   4f0cc:	003ff506 	br	4f0a4 <__alt_data_end+0xfffe7fa4>

0004f0d0 <__sprint_r.part.0>:
   4f0d0:	28801917 	ldw	r2,100(r5)
   4f0d4:	defff604 	addi	sp,sp,-40
   4f0d8:	dd400515 	stw	r21,20(sp)
   4f0dc:	dfc00915 	stw	ra,36(sp)
   4f0e0:	df000815 	stw	fp,32(sp)
   4f0e4:	ddc00715 	stw	r23,28(sp)
   4f0e8:	dd800615 	stw	r22,24(sp)
   4f0ec:	dd000415 	stw	r20,16(sp)
   4f0f0:	dcc00315 	stw	r19,12(sp)
   4f0f4:	dc800215 	stw	r18,8(sp)
   4f0f8:	dc400115 	stw	r17,4(sp)
   4f0fc:	dc000015 	stw	r16,0(sp)
   4f100:	1088000c 	andi	r2,r2,8192
   4f104:	302b883a 	mov	r21,r6
   4f108:	10002e26 	beq	r2,zero,4f1c4 <__sprint_r.part.0+0xf4>
   4f10c:	30800217 	ldw	r2,8(r6)
   4f110:	35800017 	ldw	r22,0(r6)
   4f114:	10002926 	beq	r2,zero,4f1bc <__sprint_r.part.0+0xec>
   4f118:	2827883a 	mov	r19,r5
   4f11c:	2029883a 	mov	r20,r4
   4f120:	b5c00104 	addi	r23,r22,4
   4f124:	04bfffc4 	movi	r18,-1
   4f128:	bc400017 	ldw	r17,0(r23)
   4f12c:	b4000017 	ldw	r16,0(r22)
   4f130:	0039883a 	mov	fp,zero
   4f134:	8822d0ba 	srli	r17,r17,2
   4f138:	8800031e 	bne	r17,zero,4f148 <__sprint_r.part.0+0x78>
   4f13c:	00001806 	br	4f1a0 <__sprint_r.part.0+0xd0>
   4f140:	84000104 	addi	r16,r16,4
   4f144:	8f001526 	beq	r17,fp,4f19c <__sprint_r.part.0+0xcc>
   4f148:	81400017 	ldw	r5,0(r16)
   4f14c:	980d883a 	mov	r6,r19
   4f150:	a009883a 	mov	r4,r20
   4f154:	0050a440 	call	50a44 <_fputwc_r>
   4f158:	e7000044 	addi	fp,fp,1
   4f15c:	14bff81e 	bne	r2,r18,4f140 <__alt_data_end+0xfffe8040>
   4f160:	9005883a 	mov	r2,r18
   4f164:	a8000215 	stw	zero,8(r21)
   4f168:	a8000115 	stw	zero,4(r21)
   4f16c:	dfc00917 	ldw	ra,36(sp)
   4f170:	df000817 	ldw	fp,32(sp)
   4f174:	ddc00717 	ldw	r23,28(sp)
   4f178:	dd800617 	ldw	r22,24(sp)
   4f17c:	dd400517 	ldw	r21,20(sp)
   4f180:	dd000417 	ldw	r20,16(sp)
   4f184:	dcc00317 	ldw	r19,12(sp)
   4f188:	dc800217 	ldw	r18,8(sp)
   4f18c:	dc400117 	ldw	r17,4(sp)
   4f190:	dc000017 	ldw	r16,0(sp)
   4f194:	dec00a04 	addi	sp,sp,40
   4f198:	f800283a 	ret
   4f19c:	a8800217 	ldw	r2,8(r21)
   4f1a0:	8c63883a 	add	r17,r17,r17
   4f1a4:	8c63883a 	add	r17,r17,r17
   4f1a8:	1445c83a 	sub	r2,r2,r17
   4f1ac:	a8800215 	stw	r2,8(r21)
   4f1b0:	b5800204 	addi	r22,r22,8
   4f1b4:	bdc00204 	addi	r23,r23,8
   4f1b8:	103fdb1e 	bne	r2,zero,4f128 <__alt_data_end+0xfffe8028>
   4f1bc:	0005883a 	mov	r2,zero
   4f1c0:	003fe806 	br	4f164 <__alt_data_end+0xfffe8064>
   4f1c4:	004ced80 	call	4ced8 <__sfvwrite_r>
   4f1c8:	003fe606 	br	4f164 <__alt_data_end+0xfffe8064>

0004f1cc <__sprint_r>:
   4f1cc:	30c00217 	ldw	r3,8(r6)
   4f1d0:	18000126 	beq	r3,zero,4f1d8 <__sprint_r+0xc>
   4f1d4:	004f0d01 	jmpi	4f0d0 <__sprint_r.part.0>
   4f1d8:	30000115 	stw	zero,4(r6)
   4f1dc:	0005883a 	mov	r2,zero
   4f1e0:	f800283a 	ret

0004f1e4 <___vfiprintf_internal_r>:
   4f1e4:	deffc904 	addi	sp,sp,-220
   4f1e8:	df003515 	stw	fp,212(sp)
   4f1ec:	dd003115 	stw	r20,196(sp)
   4f1f0:	dfc03615 	stw	ra,216(sp)
   4f1f4:	ddc03415 	stw	r23,208(sp)
   4f1f8:	dd803315 	stw	r22,204(sp)
   4f1fc:	dd403215 	stw	r21,200(sp)
   4f200:	dcc03015 	stw	r19,192(sp)
   4f204:	dc802f15 	stw	r18,188(sp)
   4f208:	dc402e15 	stw	r17,184(sp)
   4f20c:	dc002d15 	stw	r16,180(sp)
   4f210:	d9002015 	stw	r4,128(sp)
   4f214:	d9c02215 	stw	r7,136(sp)
   4f218:	2829883a 	mov	r20,r5
   4f21c:	3039883a 	mov	fp,r6
   4f220:	20000226 	beq	r4,zero,4f22c <___vfiprintf_internal_r+0x48>
   4f224:	20800e17 	ldw	r2,56(r4)
   4f228:	1000cf26 	beq	r2,zero,4f568 <___vfiprintf_internal_r+0x384>
   4f22c:	a080030b 	ldhu	r2,12(r20)
   4f230:	10c8000c 	andi	r3,r2,8192
   4f234:	1800061e 	bne	r3,zero,4f250 <___vfiprintf_internal_r+0x6c>
   4f238:	a1001917 	ldw	r4,100(r20)
   4f23c:	00f7ffc4 	movi	r3,-8193
   4f240:	10880014 	ori	r2,r2,8192
   4f244:	20c6703a 	and	r3,r4,r3
   4f248:	a080030d 	sth	r2,12(r20)
   4f24c:	a0c01915 	stw	r3,100(r20)
   4f250:	10c0020c 	andi	r3,r2,8
   4f254:	1800a926 	beq	r3,zero,4f4fc <___vfiprintf_internal_r+0x318>
   4f258:	a0c00417 	ldw	r3,16(r20)
   4f25c:	1800a726 	beq	r3,zero,4f4fc <___vfiprintf_internal_r+0x318>
   4f260:	1080068c 	andi	r2,r2,26
   4f264:	00c00284 	movi	r3,10
   4f268:	10c0ac26 	beq	r2,r3,4f51c <___vfiprintf_internal_r+0x338>
   4f26c:	da801a04 	addi	r10,sp,104
   4f270:	da801e15 	stw	r10,120(sp)
   4f274:	d8801e17 	ldw	r2,120(sp)
   4f278:	da8019c4 	addi	r10,sp,103
   4f27c:	05800174 	movhi	r22,5
   4f280:	05c00174 	movhi	r23,5
   4f284:	da801f15 	stw	r10,124(sp)
   4f288:	1295c83a 	sub	r10,r2,r10
   4f28c:	b59ac204 	addi	r22,r22,27400
   4f290:	bddabe04 	addi	r23,r23,27384
   4f294:	dec01a15 	stw	sp,104(sp)
   4f298:	d8001c15 	stw	zero,112(sp)
   4f29c:	d8001b15 	stw	zero,108(sp)
   4f2a0:	d8002615 	stw	zero,152(sp)
   4f2a4:	d8002315 	stw	zero,140(sp)
   4f2a8:	da802715 	stw	r10,156(sp)
   4f2ac:	d811883a 	mov	r8,sp
   4f2b0:	dd002115 	stw	r20,132(sp)
   4f2b4:	e021883a 	mov	r16,fp
   4f2b8:	80800007 	ldb	r2,0(r16)
   4f2bc:	1003ea26 	beq	r2,zero,50268 <___vfiprintf_internal_r+0x1084>
   4f2c0:	00c00944 	movi	r3,37
   4f2c4:	8025883a 	mov	r18,r16
   4f2c8:	10c0021e 	bne	r2,r3,4f2d4 <___vfiprintf_internal_r+0xf0>
   4f2cc:	00001606 	br	4f328 <___vfiprintf_internal_r+0x144>
   4f2d0:	10c00326 	beq	r2,r3,4f2e0 <___vfiprintf_internal_r+0xfc>
   4f2d4:	94800044 	addi	r18,r18,1
   4f2d8:	90800007 	ldb	r2,0(r18)
   4f2dc:	103ffc1e 	bne	r2,zero,4f2d0 <__alt_data_end+0xfffe81d0>
   4f2e0:	9423c83a 	sub	r17,r18,r16
   4f2e4:	88001026 	beq	r17,zero,4f328 <___vfiprintf_internal_r+0x144>
   4f2e8:	d8c01c17 	ldw	r3,112(sp)
   4f2ec:	d8801b17 	ldw	r2,108(sp)
   4f2f0:	44000015 	stw	r16,0(r8)
   4f2f4:	88c7883a 	add	r3,r17,r3
   4f2f8:	10800044 	addi	r2,r2,1
   4f2fc:	44400115 	stw	r17,4(r8)
   4f300:	d8c01c15 	stw	r3,112(sp)
   4f304:	d8801b15 	stw	r2,108(sp)
   4f308:	010001c4 	movi	r4,7
   4f30c:	2080760e 	bge	r4,r2,4f4e8 <___vfiprintf_internal_r+0x304>
   4f310:	1803821e 	bne	r3,zero,5011c <___vfiprintf_internal_r+0xf38>
   4f314:	da802317 	ldw	r10,140(sp)
   4f318:	d8001b15 	stw	zero,108(sp)
   4f31c:	d811883a 	mov	r8,sp
   4f320:	5455883a 	add	r10,r10,r17
   4f324:	da802315 	stw	r10,140(sp)
   4f328:	90800007 	ldb	r2,0(r18)
   4f32c:	10044626 	beq	r2,zero,50448 <___vfiprintf_internal_r+0x1264>
   4f330:	90c00047 	ldb	r3,1(r18)
   4f334:	94000044 	addi	r16,r18,1
   4f338:	d8001d85 	stb	zero,118(sp)
   4f33c:	0009883a 	mov	r4,zero
   4f340:	000f883a 	mov	r7,zero
   4f344:	027fffc4 	movi	r9,-1
   4f348:	0023883a 	mov	r17,zero
   4f34c:	0029883a 	mov	r20,zero
   4f350:	01401604 	movi	r5,88
   4f354:	01800244 	movi	r6,9
   4f358:	03400a84 	movi	r13,42
   4f35c:	03001b04 	movi	r12,108
   4f360:	84000044 	addi	r16,r16,1
   4f364:	18bff804 	addi	r2,r3,-32
   4f368:	28827336 	bltu	r5,r2,4fd38 <___vfiprintf_internal_r+0xb54>
   4f36c:	100490ba 	slli	r2,r2,2
   4f370:	02800174 	movhi	r10,5
   4f374:	52bce104 	addi	r10,r10,-3196
   4f378:	1285883a 	add	r2,r2,r10
   4f37c:	10800017 	ldw	r2,0(r2)
   4f380:	1000683a 	jmp	r2
   4f384:	0004fa6c 	andhi	zero,zero,5097
   4f388:	0004fd38 	rdprs	zero,zero,5108
   4f38c:	0004fd38 	rdprs	zero,zero,5108
   4f390:	0004fa8c 	andi	zero,zero,5098
   4f394:	0004fd38 	rdprs	zero,zero,5108
   4f398:	0004fd38 	rdprs	zero,zero,5108
   4f39c:	0004fd38 	rdprs	zero,zero,5108
   4f3a0:	0004fd38 	rdprs	zero,zero,5108
   4f3a4:	0004fd38 	rdprs	zero,zero,5108
   4f3a8:	0004fd38 	rdprs	zero,zero,5108
   4f3ac:	0004fc74 	movhi	zero,5105
   4f3b0:	0004fc90 	cmplti	zero,zero,5106
   4f3b4:	0004fd38 	rdprs	zero,zero,5108
   4f3b8:	0004f578 	rdprs	zero,zero,5077
   4f3bc:	0004fca0 	cmpeqi	zero,zero,5106
   4f3c0:	0004fd38 	rdprs	zero,zero,5108
   4f3c4:	0004fa98 	cmpnei	zero,zero,5098
   4f3c8:	0004faa4 	muli	zero,zero,5098
   4f3cc:	0004faa4 	muli	zero,zero,5098
   4f3d0:	0004faa4 	muli	zero,zero,5098
   4f3d4:	0004faa4 	muli	zero,zero,5098
   4f3d8:	0004faa4 	muli	zero,zero,5098
   4f3dc:	0004faa4 	muli	zero,zero,5098
   4f3e0:	0004faa4 	muli	zero,zero,5098
   4f3e4:	0004faa4 	muli	zero,zero,5098
   4f3e8:	0004faa4 	muli	zero,zero,5098
   4f3ec:	0004fd38 	rdprs	zero,zero,5108
   4f3f0:	0004fd38 	rdprs	zero,zero,5108
   4f3f4:	0004fd38 	rdprs	zero,zero,5108
   4f3f8:	0004fd38 	rdprs	zero,zero,5108
   4f3fc:	0004fd38 	rdprs	zero,zero,5108
   4f400:	0004fd38 	rdprs	zero,zero,5108
   4f404:	0004fd38 	rdprs	zero,zero,5108
   4f408:	0004fd38 	rdprs	zero,zero,5108
   4f40c:	0004fd38 	rdprs	zero,zero,5108
   4f410:	0004fd38 	rdprs	zero,zero,5108
   4f414:	0004fad0 	cmplti	zero,zero,5099
   4f418:	0004fd38 	rdprs	zero,zero,5108
   4f41c:	0004fd38 	rdprs	zero,zero,5108
   4f420:	0004fd38 	rdprs	zero,zero,5108
   4f424:	0004fd38 	rdprs	zero,zero,5108
   4f428:	0004fd38 	rdprs	zero,zero,5108
   4f42c:	0004fd38 	rdprs	zero,zero,5108
   4f430:	0004fd38 	rdprs	zero,zero,5108
   4f434:	0004fd38 	rdprs	zero,zero,5108
   4f438:	0004fd38 	rdprs	zero,zero,5108
   4f43c:	0004fd38 	rdprs	zero,zero,5108
   4f440:	0004fb08 	cmpgei	zero,zero,5100
   4f444:	0004fd38 	rdprs	zero,zero,5108
   4f448:	0004fd38 	rdprs	zero,zero,5108
   4f44c:	0004fd38 	rdprs	zero,zero,5108
   4f450:	0004fd38 	rdprs	zero,zero,5108
   4f454:	0004fd38 	rdprs	zero,zero,5108
   4f458:	0004fb60 	cmpeqi	zero,zero,5101
   4f45c:	0004fd38 	rdprs	zero,zero,5108
   4f460:	0004fd38 	rdprs	zero,zero,5108
   4f464:	0004fbd0 	cmplti	zero,zero,5103
   4f468:	0004fd38 	rdprs	zero,zero,5108
   4f46c:	0004fd38 	rdprs	zero,zero,5108
   4f470:	0004fd38 	rdprs	zero,zero,5108
   4f474:	0004fd38 	rdprs	zero,zero,5108
   4f478:	0004fd38 	rdprs	zero,zero,5108
   4f47c:	0004fd38 	rdprs	zero,zero,5108
   4f480:	0004fd38 	rdprs	zero,zero,5108
   4f484:	0004fd38 	rdprs	zero,zero,5108
   4f488:	0004fd38 	rdprs	zero,zero,5108
   4f48c:	0004fd38 	rdprs	zero,zero,5108
   4f490:	0004f97c 	xorhi	zero,zero,5093
   4f494:	0004f9a8 	cmpgeui	zero,zero,5094
   4f498:	0004fd38 	rdprs	zero,zero,5108
   4f49c:	0004fd38 	rdprs	zero,zero,5108
   4f4a0:	0004fd38 	rdprs	zero,zero,5108
   4f4a4:	0004fce0 	cmpeqi	zero,zero,5107
   4f4a8:	0004f9a8 	cmpgeui	zero,zero,5094
   4f4ac:	0004fd38 	rdprs	zero,zero,5108
   4f4b0:	0004fd38 	rdprs	zero,zero,5108
   4f4b4:	0004f83c 	xorhi	zero,zero,5088
   4f4b8:	0004fd38 	rdprs	zero,zero,5108
   4f4bc:	0004f84c 	andi	zero,zero,5089
   4f4c0:	0004f888 	cmpgei	zero,zero,5090
   4f4c4:	0004f584 	movi	zero,5078
   4f4c8:	0004f830 	cmpltui	zero,zero,5088
   4f4cc:	0004fd38 	rdprs	zero,zero,5108
   4f4d0:	0004fc0c 	andi	zero,zero,5104
   4f4d4:	0004fd38 	rdprs	zero,zero,5108
   4f4d8:	0004fc64 	muli	zero,zero,5105
   4f4dc:	0004fd38 	rdprs	zero,zero,5108
   4f4e0:	0004fd38 	rdprs	zero,zero,5108
   4f4e4:	0004f928 	cmpgeui	zero,zero,5092
   4f4e8:	42000204 	addi	r8,r8,8
   4f4ec:	da802317 	ldw	r10,140(sp)
   4f4f0:	5455883a 	add	r10,r10,r17
   4f4f4:	da802315 	stw	r10,140(sp)
   4f4f8:	003f8b06 	br	4f328 <__alt_data_end+0xfffe8228>
   4f4fc:	d9002017 	ldw	r4,128(sp)
   4f500:	a00b883a 	mov	r5,r20
   4f504:	004a9800 	call	4a980 <__swsetup_r>
   4f508:	1003b11e 	bne	r2,zero,503d0 <___vfiprintf_internal_r+0x11ec>
   4f50c:	a080030b 	ldhu	r2,12(r20)
   4f510:	00c00284 	movi	r3,10
   4f514:	1080068c 	andi	r2,r2,26
   4f518:	10ff541e 	bne	r2,r3,4f26c <__alt_data_end+0xfffe816c>
   4f51c:	a080038f 	ldh	r2,14(r20)
   4f520:	103f5216 	blt	r2,zero,4f26c <__alt_data_end+0xfffe816c>
   4f524:	d9c02217 	ldw	r7,136(sp)
   4f528:	d9002017 	ldw	r4,128(sp)
   4f52c:	e00d883a 	mov	r6,fp
   4f530:	a00b883a 	mov	r5,r20
   4f534:	005065c0 	call	5065c <__sbprintf>
   4f538:	dfc03617 	ldw	ra,216(sp)
   4f53c:	df003517 	ldw	fp,212(sp)
   4f540:	ddc03417 	ldw	r23,208(sp)
   4f544:	dd803317 	ldw	r22,204(sp)
   4f548:	dd403217 	ldw	r21,200(sp)
   4f54c:	dd003117 	ldw	r20,196(sp)
   4f550:	dcc03017 	ldw	r19,192(sp)
   4f554:	dc802f17 	ldw	r18,188(sp)
   4f558:	dc402e17 	ldw	r17,184(sp)
   4f55c:	dc002d17 	ldw	r16,180(sp)
   4f560:	dec03704 	addi	sp,sp,220
   4f564:	f800283a 	ret
   4f568:	004c9a80 	call	4c9a8 <__sinit>
   4f56c:	003f2f06 	br	4f22c <__alt_data_end+0xfffe812c>
   4f570:	0463c83a 	sub	r17,zero,r17
   4f574:	d8802215 	stw	r2,136(sp)
   4f578:	a5000114 	ori	r20,r20,4
   4f57c:	80c00007 	ldb	r3,0(r16)
   4f580:	003f7706 	br	4f360 <__alt_data_end+0xfffe8260>
   4f584:	00800c04 	movi	r2,48
   4f588:	da802217 	ldw	r10,136(sp)
   4f58c:	d8801d05 	stb	r2,116(sp)
   4f590:	00801e04 	movi	r2,120
   4f594:	d8801d45 	stb	r2,117(sp)
   4f598:	d8001d85 	stb	zero,118(sp)
   4f59c:	50c00104 	addi	r3,r10,4
   4f5a0:	54800017 	ldw	r18,0(r10)
   4f5a4:	0027883a 	mov	r19,zero
   4f5a8:	a0800094 	ori	r2,r20,2
   4f5ac:	48030b16 	blt	r9,zero,501dc <___vfiprintf_internal_r+0xff8>
   4f5b0:	00bfdfc4 	movi	r2,-129
   4f5b4:	a096703a 	and	r11,r20,r2
   4f5b8:	d8c02215 	stw	r3,136(sp)
   4f5bc:	5d000094 	ori	r20,r11,2
   4f5c0:	90032b1e 	bne	r18,zero,50270 <___vfiprintf_internal_r+0x108c>
   4f5c4:	00800174 	movhi	r2,5
   4f5c8:	109a5e04 	addi	r2,r2,27000
   4f5cc:	d8802615 	stw	r2,152(sp)
   4f5d0:	0039883a 	mov	fp,zero
   4f5d4:	48017b1e 	bne	r9,zero,4fbc4 <___vfiprintf_internal_r+0x9e0>
   4f5d8:	0013883a 	mov	r9,zero
   4f5dc:	0027883a 	mov	r19,zero
   4f5e0:	dd401a04 	addi	r21,sp,104
   4f5e4:	4825883a 	mov	r18,r9
   4f5e8:	4cc0010e 	bge	r9,r19,4f5f0 <___vfiprintf_internal_r+0x40c>
   4f5ec:	9825883a 	mov	r18,r19
   4f5f0:	e7003fcc 	andi	fp,fp,255
   4f5f4:	e700201c 	xori	fp,fp,128
   4f5f8:	e73fe004 	addi	fp,fp,-128
   4f5fc:	e0000126 	beq	fp,zero,4f604 <___vfiprintf_internal_r+0x420>
   4f600:	94800044 	addi	r18,r18,1
   4f604:	a380008c 	andi	r14,r20,2
   4f608:	70000126 	beq	r14,zero,4f610 <___vfiprintf_internal_r+0x42c>
   4f60c:	94800084 	addi	r18,r18,2
   4f610:	a700210c 	andi	fp,r20,132
   4f614:	e001df1e 	bne	fp,zero,4fd94 <___vfiprintf_internal_r+0xbb0>
   4f618:	8c87c83a 	sub	r3,r17,r18
   4f61c:	00c1dd0e 	bge	zero,r3,4fd94 <___vfiprintf_internal_r+0xbb0>
   4f620:	01c00404 	movi	r7,16
   4f624:	d8801c17 	ldw	r2,112(sp)
   4f628:	38c3ad0e 	bge	r7,r3,504e0 <___vfiprintf_internal_r+0x12fc>
   4f62c:	02800174 	movhi	r10,5
   4f630:	529ac204 	addi	r10,r10,27400
   4f634:	dc002915 	stw	r16,164(sp)
   4f638:	d9801b17 	ldw	r6,108(sp)
   4f63c:	da802415 	stw	r10,144(sp)
   4f640:	03c001c4 	movi	r15,7
   4f644:	da402515 	stw	r9,148(sp)
   4f648:	db802815 	stw	r14,160(sp)
   4f64c:	1821883a 	mov	r16,r3
   4f650:	00000506 	br	4f668 <___vfiprintf_internal_r+0x484>
   4f654:	31400084 	addi	r5,r6,2
   4f658:	42000204 	addi	r8,r8,8
   4f65c:	200d883a 	mov	r6,r4
   4f660:	843ffc04 	addi	r16,r16,-16
   4f664:	3c000d0e 	bge	r7,r16,4f69c <___vfiprintf_internal_r+0x4b8>
   4f668:	10800404 	addi	r2,r2,16
   4f66c:	31000044 	addi	r4,r6,1
   4f670:	45800015 	stw	r22,0(r8)
   4f674:	41c00115 	stw	r7,4(r8)
   4f678:	d8801c15 	stw	r2,112(sp)
   4f67c:	d9001b15 	stw	r4,108(sp)
   4f680:	793ff40e 	bge	r15,r4,4f654 <__alt_data_end+0xfffe8554>
   4f684:	1001b51e 	bne	r2,zero,4fd5c <___vfiprintf_internal_r+0xb78>
   4f688:	843ffc04 	addi	r16,r16,-16
   4f68c:	000d883a 	mov	r6,zero
   4f690:	01400044 	movi	r5,1
   4f694:	d811883a 	mov	r8,sp
   4f698:	3c3ff316 	blt	r7,r16,4f668 <__alt_data_end+0xfffe8568>
   4f69c:	8007883a 	mov	r3,r16
   4f6a0:	da402517 	ldw	r9,148(sp)
   4f6a4:	db802817 	ldw	r14,160(sp)
   4f6a8:	dc002917 	ldw	r16,164(sp)
   4f6ac:	da802417 	ldw	r10,144(sp)
   4f6b0:	1885883a 	add	r2,r3,r2
   4f6b4:	40c00115 	stw	r3,4(r8)
   4f6b8:	42800015 	stw	r10,0(r8)
   4f6bc:	d8801c15 	stw	r2,112(sp)
   4f6c0:	d9401b15 	stw	r5,108(sp)
   4f6c4:	00c001c4 	movi	r3,7
   4f6c8:	19426016 	blt	r3,r5,5004c <___vfiprintf_internal_r+0xe68>
   4f6cc:	d8c01d87 	ldb	r3,118(sp)
   4f6d0:	42000204 	addi	r8,r8,8
   4f6d4:	29000044 	addi	r4,r5,1
   4f6d8:	1801b31e 	bne	r3,zero,4fda8 <___vfiprintf_internal_r+0xbc4>
   4f6dc:	7001c026 	beq	r14,zero,4fde0 <___vfiprintf_internal_r+0xbfc>
   4f6e0:	d8c01d04 	addi	r3,sp,116
   4f6e4:	10800084 	addi	r2,r2,2
   4f6e8:	40c00015 	stw	r3,0(r8)
   4f6ec:	00c00084 	movi	r3,2
   4f6f0:	40c00115 	stw	r3,4(r8)
   4f6f4:	d8801c15 	stw	r2,112(sp)
   4f6f8:	d9001b15 	stw	r4,108(sp)
   4f6fc:	00c001c4 	movi	r3,7
   4f700:	1902650e 	bge	r3,r4,50098 <___vfiprintf_internal_r+0xeb4>
   4f704:	10029a1e 	bne	r2,zero,50170 <___vfiprintf_internal_r+0xf8c>
   4f708:	00c02004 	movi	r3,128
   4f70c:	01000044 	movi	r4,1
   4f710:	000b883a 	mov	r5,zero
   4f714:	d811883a 	mov	r8,sp
   4f718:	e0c1b31e 	bne	fp,r3,4fde8 <___vfiprintf_internal_r+0xc04>
   4f71c:	8cb9c83a 	sub	fp,r17,r18
   4f720:	0701b10e 	bge	zero,fp,4fde8 <___vfiprintf_internal_r+0xc04>
   4f724:	01c00404 	movi	r7,16
   4f728:	3f03890e 	bge	r7,fp,50550 <___vfiprintf_internal_r+0x136c>
   4f72c:	00c00174 	movhi	r3,5
   4f730:	18dabe04 	addi	r3,r3,27384
   4f734:	d8c02415 	stw	r3,144(sp)
   4f738:	8007883a 	mov	r3,r16
   4f73c:	034001c4 	movi	r13,7
   4f740:	e021883a 	mov	r16,fp
   4f744:	da402515 	stw	r9,148(sp)
   4f748:	1839883a 	mov	fp,r3
   4f74c:	00000506 	br	4f764 <___vfiprintf_internal_r+0x580>
   4f750:	29800084 	addi	r6,r5,2
   4f754:	42000204 	addi	r8,r8,8
   4f758:	180b883a 	mov	r5,r3
   4f75c:	843ffc04 	addi	r16,r16,-16
   4f760:	3c000d0e 	bge	r7,r16,4f798 <___vfiprintf_internal_r+0x5b4>
   4f764:	10800404 	addi	r2,r2,16
   4f768:	28c00044 	addi	r3,r5,1
   4f76c:	45c00015 	stw	r23,0(r8)
   4f770:	41c00115 	stw	r7,4(r8)
   4f774:	d8801c15 	stw	r2,112(sp)
   4f778:	d8c01b15 	stw	r3,108(sp)
   4f77c:	68fff40e 	bge	r13,r3,4f750 <__alt_data_end+0xfffe8650>
   4f780:	1002241e 	bne	r2,zero,50014 <___vfiprintf_internal_r+0xe30>
   4f784:	843ffc04 	addi	r16,r16,-16
   4f788:	01800044 	movi	r6,1
   4f78c:	000b883a 	mov	r5,zero
   4f790:	d811883a 	mov	r8,sp
   4f794:	3c3ff316 	blt	r7,r16,4f764 <__alt_data_end+0xfffe8664>
   4f798:	da402517 	ldw	r9,148(sp)
   4f79c:	e007883a 	mov	r3,fp
   4f7a0:	8039883a 	mov	fp,r16
   4f7a4:	1821883a 	mov	r16,r3
   4f7a8:	d8c02417 	ldw	r3,144(sp)
   4f7ac:	1705883a 	add	r2,r2,fp
   4f7b0:	47000115 	stw	fp,4(r8)
   4f7b4:	40c00015 	stw	r3,0(r8)
   4f7b8:	d8801c15 	stw	r2,112(sp)
   4f7bc:	d9801b15 	stw	r6,108(sp)
   4f7c0:	00c001c4 	movi	r3,7
   4f7c4:	19827616 	blt	r3,r6,501a0 <___vfiprintf_internal_r+0xfbc>
   4f7c8:	4cf9c83a 	sub	fp,r9,r19
   4f7cc:	42000204 	addi	r8,r8,8
   4f7d0:	31000044 	addi	r4,r6,1
   4f7d4:	300b883a 	mov	r5,r6
   4f7d8:	07018516 	blt	zero,fp,4fdf0 <___vfiprintf_internal_r+0xc0c>
   4f7dc:	9885883a 	add	r2,r19,r2
   4f7e0:	45400015 	stw	r21,0(r8)
   4f7e4:	44c00115 	stw	r19,4(r8)
   4f7e8:	d8801c15 	stw	r2,112(sp)
   4f7ec:	d9001b15 	stw	r4,108(sp)
   4f7f0:	00c001c4 	movi	r3,7
   4f7f4:	1901dd0e 	bge	r3,r4,4ff6c <___vfiprintf_internal_r+0xd88>
   4f7f8:	1002401e 	bne	r2,zero,500fc <___vfiprintf_internal_r+0xf18>
   4f7fc:	d8001b15 	stw	zero,108(sp)
   4f800:	a2c0010c 	andi	r11,r20,4
   4f804:	58000226 	beq	r11,zero,4f810 <___vfiprintf_internal_r+0x62c>
   4f808:	8ca7c83a 	sub	r19,r17,r18
   4f80c:	04c2f216 	blt	zero,r19,503d8 <___vfiprintf_internal_r+0x11f4>
   4f810:	8c80010e 	bge	r17,r18,4f818 <___vfiprintf_internal_r+0x634>
   4f814:	9023883a 	mov	r17,r18
   4f818:	da802317 	ldw	r10,140(sp)
   4f81c:	5455883a 	add	r10,r10,r17
   4f820:	da802315 	stw	r10,140(sp)
   4f824:	d8001b15 	stw	zero,108(sp)
   4f828:	d811883a 	mov	r8,sp
   4f82c:	003ea206 	br	4f2b8 <__alt_data_end+0xfffe81b8>
   4f830:	a5000814 	ori	r20,r20,32
   4f834:	80c00007 	ldb	r3,0(r16)
   4f838:	003ec906 	br	4f360 <__alt_data_end+0xfffe8260>
   4f83c:	80c00007 	ldb	r3,0(r16)
   4f840:	1b030926 	beq	r3,r12,50468 <___vfiprintf_internal_r+0x1284>
   4f844:	a5000414 	ori	r20,r20,16
   4f848:	003ec506 	br	4f360 <__alt_data_end+0xfffe8260>
   4f84c:	21003fcc 	andi	r4,r4,255
   4f850:	20035e1e 	bne	r4,zero,505cc <___vfiprintf_internal_r+0x13e8>
   4f854:	a080080c 	andi	r2,r20,32
   4f858:	1002a526 	beq	r2,zero,502f0 <___vfiprintf_internal_r+0x110c>
   4f85c:	da802217 	ldw	r10,136(sp)
   4f860:	50800017 	ldw	r2,0(r10)
   4f864:	da802317 	ldw	r10,140(sp)
   4f868:	5007d7fa 	srai	r3,r10,31
   4f86c:	da802217 	ldw	r10,136(sp)
   4f870:	10c00115 	stw	r3,4(r2)
   4f874:	52800104 	addi	r10,r10,4
   4f878:	da802215 	stw	r10,136(sp)
   4f87c:	da802317 	ldw	r10,140(sp)
   4f880:	12800015 	stw	r10,0(r2)
   4f884:	003e8c06 	br	4f2b8 <__alt_data_end+0xfffe81b8>
   4f888:	21003fcc 	andi	r4,r4,255
   4f88c:	2003511e 	bne	r4,zero,505d4 <___vfiprintf_internal_r+0x13f0>
   4f890:	a080080c 	andi	r2,r20,32
   4f894:	1000a126 	beq	r2,zero,4fb1c <___vfiprintf_internal_r+0x938>
   4f898:	da802217 	ldw	r10,136(sp)
   4f89c:	d8001d85 	stb	zero,118(sp)
   4f8a0:	50800204 	addi	r2,r10,8
   4f8a4:	54800017 	ldw	r18,0(r10)
   4f8a8:	54c00117 	ldw	r19,4(r10)
   4f8ac:	4802b416 	blt	r9,zero,50380 <___vfiprintf_internal_r+0x119c>
   4f8b0:	013fdfc4 	movi	r4,-129
   4f8b4:	94c6b03a 	or	r3,r18,r19
   4f8b8:	d8802215 	stw	r2,136(sp)
   4f8bc:	a128703a 	and	r20,r20,r4
   4f8c0:	1800a226 	beq	r3,zero,4fb4c <___vfiprintf_internal_r+0x968>
   4f8c4:	0039883a 	mov	fp,zero
   4f8c8:	dd401a04 	addi	r21,sp,104
   4f8cc:	9006d0fa 	srli	r3,r18,3
   4f8d0:	9808977a 	slli	r4,r19,29
   4f8d4:	9826d0fa 	srli	r19,r19,3
   4f8d8:	948001cc 	andi	r18,r18,7
   4f8dc:	90800c04 	addi	r2,r18,48
   4f8e0:	ad7fffc4 	addi	r21,r21,-1
   4f8e4:	20e4b03a 	or	r18,r4,r3
   4f8e8:	a8800005 	stb	r2,0(r21)
   4f8ec:	94c6b03a 	or	r3,r18,r19
   4f8f0:	183ff61e 	bne	r3,zero,4f8cc <__alt_data_end+0xfffe87cc>
   4f8f4:	a0c0004c 	andi	r3,r20,1
   4f8f8:	18005926 	beq	r3,zero,4fa60 <___vfiprintf_internal_r+0x87c>
   4f8fc:	10803fcc 	andi	r2,r2,255
   4f900:	1080201c 	xori	r2,r2,128
   4f904:	10bfe004 	addi	r2,r2,-128
   4f908:	00c00c04 	movi	r3,48
   4f90c:	10c05426 	beq	r2,r3,4fa60 <___vfiprintf_internal_r+0x87c>
   4f910:	da801e17 	ldw	r10,120(sp)
   4f914:	a8bfffc4 	addi	r2,r21,-1
   4f918:	a8ffffc5 	stb	r3,-1(r21)
   4f91c:	50a7c83a 	sub	r19,r10,r2
   4f920:	102b883a 	mov	r21,r2
   4f924:	003f2f06 	br	4f5e4 <__alt_data_end+0xfffe84e4>
   4f928:	21003fcc 	andi	r4,r4,255
   4f92c:	2003421e 	bne	r4,zero,50638 <___vfiprintf_internal_r+0x1454>
   4f930:	00800174 	movhi	r2,5
   4f934:	109a5e04 	addi	r2,r2,27000
   4f938:	d8802615 	stw	r2,152(sp)
   4f93c:	a080080c 	andi	r2,r20,32
   4f940:	1000aa26 	beq	r2,zero,4fbec <___vfiprintf_internal_r+0xa08>
   4f944:	da802217 	ldw	r10,136(sp)
   4f948:	54800017 	ldw	r18,0(r10)
   4f94c:	54c00117 	ldw	r19,4(r10)
   4f950:	52800204 	addi	r10,r10,8
   4f954:	da802215 	stw	r10,136(sp)
   4f958:	a080004c 	andi	r2,r20,1
   4f95c:	1001d226 	beq	r2,zero,500a8 <___vfiprintf_internal_r+0xec4>
   4f960:	94c4b03a 	or	r2,r18,r19
   4f964:	1002351e 	bne	r2,zero,5023c <___vfiprintf_internal_r+0x1058>
   4f968:	d8001d85 	stb	zero,118(sp)
   4f96c:	48022216 	blt	r9,zero,501f8 <___vfiprintf_internal_r+0x1014>
   4f970:	00bfdfc4 	movi	r2,-129
   4f974:	a0a8703a 	and	r20,r20,r2
   4f978:	003f1506 	br	4f5d0 <__alt_data_end+0xfffe84d0>
   4f97c:	da802217 	ldw	r10,136(sp)
   4f980:	04800044 	movi	r18,1
   4f984:	d8001d85 	stb	zero,118(sp)
   4f988:	50800017 	ldw	r2,0(r10)
   4f98c:	52800104 	addi	r10,r10,4
   4f990:	da802215 	stw	r10,136(sp)
   4f994:	d8801005 	stb	r2,64(sp)
   4f998:	9027883a 	mov	r19,r18
   4f99c:	dd401004 	addi	r21,sp,64
   4f9a0:	0013883a 	mov	r9,zero
   4f9a4:	003f1706 	br	4f604 <__alt_data_end+0xfffe8504>
   4f9a8:	21003fcc 	andi	r4,r4,255
   4f9ac:	2003201e 	bne	r4,zero,50630 <___vfiprintf_internal_r+0x144c>
   4f9b0:	a080080c 	andi	r2,r20,32
   4f9b4:	10004b26 	beq	r2,zero,4fae4 <___vfiprintf_internal_r+0x900>
   4f9b8:	da802217 	ldw	r10,136(sp)
   4f9bc:	50800117 	ldw	r2,4(r10)
   4f9c0:	54800017 	ldw	r18,0(r10)
   4f9c4:	52800204 	addi	r10,r10,8
   4f9c8:	da802215 	stw	r10,136(sp)
   4f9cc:	1027883a 	mov	r19,r2
   4f9d0:	10022c16 	blt	r2,zero,50284 <___vfiprintf_internal_r+0x10a0>
   4f9d4:	df001d83 	ldbu	fp,118(sp)
   4f9d8:	48007216 	blt	r9,zero,4fba4 <___vfiprintf_internal_r+0x9c0>
   4f9dc:	00ffdfc4 	movi	r3,-129
   4f9e0:	94c4b03a 	or	r2,r18,r19
   4f9e4:	a0e8703a 	and	r20,r20,r3
   4f9e8:	1000cc26 	beq	r2,zero,4fd1c <___vfiprintf_internal_r+0xb38>
   4f9ec:	98021026 	beq	r19,zero,50230 <___vfiprintf_internal_r+0x104c>
   4f9f0:	dc402415 	stw	r17,144(sp)
   4f9f4:	dc002515 	stw	r16,148(sp)
   4f9f8:	9823883a 	mov	r17,r19
   4f9fc:	9021883a 	mov	r16,r18
   4fa00:	dd401a04 	addi	r21,sp,104
   4fa04:	4825883a 	mov	r18,r9
   4fa08:	4027883a 	mov	r19,r8
   4fa0c:	8009883a 	mov	r4,r16
   4fa10:	880b883a 	mov	r5,r17
   4fa14:	01800284 	movi	r6,10
   4fa18:	000f883a 	mov	r7,zero
   4fa1c:	00513a00 	call	513a0 <__umoddi3>
   4fa20:	10800c04 	addi	r2,r2,48
   4fa24:	ad7fffc4 	addi	r21,r21,-1
   4fa28:	8009883a 	mov	r4,r16
   4fa2c:	880b883a 	mov	r5,r17
   4fa30:	a8800005 	stb	r2,0(r21)
   4fa34:	01800284 	movi	r6,10
   4fa38:	000f883a 	mov	r7,zero
   4fa3c:	0050e280 	call	50e28 <__udivdi3>
   4fa40:	1021883a 	mov	r16,r2
   4fa44:	10c4b03a 	or	r2,r2,r3
   4fa48:	1823883a 	mov	r17,r3
   4fa4c:	103fef1e 	bne	r2,zero,4fa0c <__alt_data_end+0xfffe890c>
   4fa50:	dc402417 	ldw	r17,144(sp)
   4fa54:	dc002517 	ldw	r16,148(sp)
   4fa58:	9013883a 	mov	r9,r18
   4fa5c:	9811883a 	mov	r8,r19
   4fa60:	da801e17 	ldw	r10,120(sp)
   4fa64:	5567c83a 	sub	r19,r10,r21
   4fa68:	003ede06 	br	4f5e4 <__alt_data_end+0xfffe84e4>
   4fa6c:	38803fcc 	andi	r2,r7,255
   4fa70:	1080201c 	xori	r2,r2,128
   4fa74:	10bfe004 	addi	r2,r2,-128
   4fa78:	1002371e 	bne	r2,zero,50358 <___vfiprintf_internal_r+0x1174>
   4fa7c:	01000044 	movi	r4,1
   4fa80:	01c00804 	movi	r7,32
   4fa84:	80c00007 	ldb	r3,0(r16)
   4fa88:	003e3506 	br	4f360 <__alt_data_end+0xfffe8260>
   4fa8c:	a5000054 	ori	r20,r20,1
   4fa90:	80c00007 	ldb	r3,0(r16)
   4fa94:	003e3206 	br	4f360 <__alt_data_end+0xfffe8260>
   4fa98:	a5002014 	ori	r20,r20,128
   4fa9c:	80c00007 	ldb	r3,0(r16)
   4faa0:	003e2f06 	br	4f360 <__alt_data_end+0xfffe8260>
   4faa4:	8015883a 	mov	r10,r16
   4faa8:	0023883a 	mov	r17,zero
   4faac:	18bff404 	addi	r2,r3,-48
   4fab0:	50c00007 	ldb	r3,0(r10)
   4fab4:	8c4002a4 	muli	r17,r17,10
   4fab8:	84000044 	addi	r16,r16,1
   4fabc:	8015883a 	mov	r10,r16
   4fac0:	1463883a 	add	r17,r2,r17
   4fac4:	18bff404 	addi	r2,r3,-48
   4fac8:	30bff92e 	bgeu	r6,r2,4fab0 <__alt_data_end+0xfffe89b0>
   4facc:	003e2506 	br	4f364 <__alt_data_end+0xfffe8264>
   4fad0:	21003fcc 	andi	r4,r4,255
   4fad4:	2002d41e 	bne	r4,zero,50628 <___vfiprintf_internal_r+0x1444>
   4fad8:	a5000414 	ori	r20,r20,16
   4fadc:	a080080c 	andi	r2,r20,32
   4fae0:	103fb51e 	bne	r2,zero,4f9b8 <__alt_data_end+0xfffe88b8>
   4fae4:	a080040c 	andi	r2,r20,16
   4fae8:	1001f826 	beq	r2,zero,502cc <___vfiprintf_internal_r+0x10e8>
   4faec:	da802217 	ldw	r10,136(sp)
   4faf0:	54800017 	ldw	r18,0(r10)
   4faf4:	52800104 	addi	r10,r10,4
   4faf8:	da802215 	stw	r10,136(sp)
   4fafc:	9027d7fa 	srai	r19,r18,31
   4fb00:	9805883a 	mov	r2,r19
   4fb04:	003fb206 	br	4f9d0 <__alt_data_end+0xfffe88d0>
   4fb08:	21003fcc 	andi	r4,r4,255
   4fb0c:	2002c41e 	bne	r4,zero,50620 <___vfiprintf_internal_r+0x143c>
   4fb10:	a5000414 	ori	r20,r20,16
   4fb14:	a080080c 	andi	r2,r20,32
   4fb18:	103f5f1e 	bne	r2,zero,4f898 <__alt_data_end+0xfffe8798>
   4fb1c:	a080040c 	andi	r2,r20,16
   4fb20:	10020f26 	beq	r2,zero,50360 <___vfiprintf_internal_r+0x117c>
   4fb24:	da802217 	ldw	r10,136(sp)
   4fb28:	d8001d85 	stb	zero,118(sp)
   4fb2c:	0027883a 	mov	r19,zero
   4fb30:	50800104 	addi	r2,r10,4
   4fb34:	54800017 	ldw	r18,0(r10)
   4fb38:	48021116 	blt	r9,zero,50380 <___vfiprintf_internal_r+0x119c>
   4fb3c:	00ffdfc4 	movi	r3,-129
   4fb40:	d8802215 	stw	r2,136(sp)
   4fb44:	a0e8703a 	and	r20,r20,r3
   4fb48:	903f5e1e 	bne	r18,zero,4f8c4 <__alt_data_end+0xfffe87c4>
   4fb4c:	0039883a 	mov	fp,zero
   4fb50:	4802a626 	beq	r9,zero,505ec <___vfiprintf_internal_r+0x1408>
   4fb54:	0025883a 	mov	r18,zero
   4fb58:	0027883a 	mov	r19,zero
   4fb5c:	003f5a06 	br	4f8c8 <__alt_data_end+0xfffe87c8>
   4fb60:	21003fcc 	andi	r4,r4,255
   4fb64:	20029f1e 	bne	r4,zero,505e4 <___vfiprintf_internal_r+0x1400>
   4fb68:	a5000414 	ori	r20,r20,16
   4fb6c:	a080080c 	andi	r2,r20,32
   4fb70:	10005e1e 	bne	r2,zero,4fcec <___vfiprintf_internal_r+0xb08>
   4fb74:	a080040c 	andi	r2,r20,16
   4fb78:	1001a21e 	bne	r2,zero,50204 <___vfiprintf_internal_r+0x1020>
   4fb7c:	a080100c 	andi	r2,r20,64
   4fb80:	d8001d85 	stb	zero,118(sp)
   4fb84:	da802217 	ldw	r10,136(sp)
   4fb88:	1002231e 	bne	r2,zero,50418 <___vfiprintf_internal_r+0x1234>
   4fb8c:	50800104 	addi	r2,r10,4
   4fb90:	54800017 	ldw	r18,0(r10)
   4fb94:	0027883a 	mov	r19,zero
   4fb98:	4801a00e 	bge	r9,zero,5021c <___vfiprintf_internal_r+0x1038>
   4fb9c:	d8802215 	stw	r2,136(sp)
   4fba0:	0039883a 	mov	fp,zero
   4fba4:	94c4b03a 	or	r2,r18,r19
   4fba8:	103f901e 	bne	r2,zero,4f9ec <__alt_data_end+0xfffe88ec>
   4fbac:	00800044 	movi	r2,1
   4fbb0:	10803fcc 	andi	r2,r2,255
   4fbb4:	00c00044 	movi	r3,1
   4fbb8:	10c05926 	beq	r2,r3,4fd20 <___vfiprintf_internal_r+0xb3c>
   4fbbc:	00c00084 	movi	r3,2
   4fbc0:	10ffe41e 	bne	r2,r3,4fb54 <__alt_data_end+0xfffe8a54>
   4fbc4:	0025883a 	mov	r18,zero
   4fbc8:	0027883a 	mov	r19,zero
   4fbcc:	00013d06 	br	500c4 <___vfiprintf_internal_r+0xee0>
   4fbd0:	21003fcc 	andi	r4,r4,255
   4fbd4:	2002811e 	bne	r4,zero,505dc <___vfiprintf_internal_r+0x13f8>
   4fbd8:	00800174 	movhi	r2,5
   4fbdc:	109a5904 	addi	r2,r2,26980
   4fbe0:	d8802615 	stw	r2,152(sp)
   4fbe4:	a080080c 	andi	r2,r20,32
   4fbe8:	103f561e 	bne	r2,zero,4f944 <__alt_data_end+0xfffe8844>
   4fbec:	a080040c 	andi	r2,r20,16
   4fbf0:	1001d126 	beq	r2,zero,50338 <___vfiprintf_internal_r+0x1154>
   4fbf4:	da802217 	ldw	r10,136(sp)
   4fbf8:	0027883a 	mov	r19,zero
   4fbfc:	54800017 	ldw	r18,0(r10)
   4fc00:	52800104 	addi	r10,r10,4
   4fc04:	da802215 	stw	r10,136(sp)
   4fc08:	003f5306 	br	4f958 <__alt_data_end+0xfffe8858>
   4fc0c:	da802217 	ldw	r10,136(sp)
   4fc10:	d8001d85 	stb	zero,118(sp)
   4fc14:	55400017 	ldw	r21,0(r10)
   4fc18:	50c00104 	addi	r3,r10,4
   4fc1c:	a8024226 	beq	r21,zero,50528 <___vfiprintf_internal_r+0x1344>
   4fc20:	48021816 	blt	r9,zero,50484 <___vfiprintf_internal_r+0x12a0>
   4fc24:	480d883a 	mov	r6,r9
   4fc28:	000b883a 	mov	r5,zero
   4fc2c:	a809883a 	mov	r4,r21
   4fc30:	d8c02a15 	stw	r3,168(sp)
   4fc34:	da002b15 	stw	r8,172(sp)
   4fc38:	da402c15 	stw	r9,176(sp)
   4fc3c:	004d6ac0 	call	4d6ac <memchr>
   4fc40:	d8c02a17 	ldw	r3,168(sp)
   4fc44:	da002b17 	ldw	r8,172(sp)
   4fc48:	da402c17 	ldw	r9,176(sp)
   4fc4c:	10024826 	beq	r2,zero,50570 <___vfiprintf_internal_r+0x138c>
   4fc50:	1567c83a 	sub	r19,r2,r21
   4fc54:	df001d83 	ldbu	fp,118(sp)
   4fc58:	d8c02215 	stw	r3,136(sp)
   4fc5c:	0013883a 	mov	r9,zero
   4fc60:	003e6006 	br	4f5e4 <__alt_data_end+0xfffe84e4>
   4fc64:	21003fcc 	andi	r4,r4,255
   4fc68:	203fc026 	beq	r4,zero,4fb6c <__alt_data_end+0xfffe8a6c>
   4fc6c:	d9c01d85 	stb	r7,118(sp)
   4fc70:	003fbe06 	br	4fb6c <__alt_data_end+0xfffe8a6c>
   4fc74:	da802217 	ldw	r10,136(sp)
   4fc78:	54400017 	ldw	r17,0(r10)
   4fc7c:	50800104 	addi	r2,r10,4
   4fc80:	883e3b16 	blt	r17,zero,4f570 <__alt_data_end+0xfffe8470>
   4fc84:	d8802215 	stw	r2,136(sp)
   4fc88:	80c00007 	ldb	r3,0(r16)
   4fc8c:	003db406 	br	4f360 <__alt_data_end+0xfffe8260>
   4fc90:	01000044 	movi	r4,1
   4fc94:	01c00ac4 	movi	r7,43
   4fc98:	80c00007 	ldb	r3,0(r16)
   4fc9c:	003db006 	br	4f360 <__alt_data_end+0xfffe8260>
   4fca0:	80c00007 	ldb	r3,0(r16)
   4fca4:	82800044 	addi	r10,r16,1
   4fca8:	1b423c26 	beq	r3,r13,5059c <___vfiprintf_internal_r+0x13b8>
   4fcac:	18bff404 	addi	r2,r3,-48
   4fcb0:	0013883a 	mov	r9,zero
   4fcb4:	30822b36 	bltu	r6,r2,50564 <___vfiprintf_internal_r+0x1380>
   4fcb8:	50c00007 	ldb	r3,0(r10)
   4fcbc:	4a4002a4 	muli	r9,r9,10
   4fcc0:	54000044 	addi	r16,r10,1
   4fcc4:	8015883a 	mov	r10,r16
   4fcc8:	4893883a 	add	r9,r9,r2
   4fccc:	18bff404 	addi	r2,r3,-48
   4fcd0:	30bff92e 	bgeu	r6,r2,4fcb8 <__alt_data_end+0xfffe8bb8>
   4fcd4:	483da30e 	bge	r9,zero,4f364 <__alt_data_end+0xfffe8264>
   4fcd8:	027fffc4 	movi	r9,-1
   4fcdc:	003da106 	br	4f364 <__alt_data_end+0xfffe8264>
   4fce0:	a5001014 	ori	r20,r20,64
   4fce4:	80c00007 	ldb	r3,0(r16)
   4fce8:	003d9d06 	br	4f360 <__alt_data_end+0xfffe8260>
   4fcec:	da802217 	ldw	r10,136(sp)
   4fcf0:	d8001d85 	stb	zero,118(sp)
   4fcf4:	50c00204 	addi	r3,r10,8
   4fcf8:	54800017 	ldw	r18,0(r10)
   4fcfc:	54c00117 	ldw	r19,4(r10)
   4fd00:	4801ca16 	blt	r9,zero,5042c <___vfiprintf_internal_r+0x1248>
   4fd04:	013fdfc4 	movi	r4,-129
   4fd08:	94c4b03a 	or	r2,r18,r19
   4fd0c:	d8c02215 	stw	r3,136(sp)
   4fd10:	a128703a 	and	r20,r20,r4
   4fd14:	0039883a 	mov	fp,zero
   4fd18:	103f341e 	bne	r2,zero,4f9ec <__alt_data_end+0xfffe88ec>
   4fd1c:	483e2e26 	beq	r9,zero,4f5d8 <__alt_data_end+0xfffe84d8>
   4fd20:	0025883a 	mov	r18,zero
   4fd24:	94800c04 	addi	r18,r18,48
   4fd28:	dc8019c5 	stb	r18,103(sp)
   4fd2c:	dcc02717 	ldw	r19,156(sp)
   4fd30:	dd4019c4 	addi	r21,sp,103
   4fd34:	003e2b06 	br	4f5e4 <__alt_data_end+0xfffe84e4>
   4fd38:	21003fcc 	andi	r4,r4,255
   4fd3c:	2002361e 	bne	r4,zero,50618 <___vfiprintf_internal_r+0x1434>
   4fd40:	1801c126 	beq	r3,zero,50448 <___vfiprintf_internal_r+0x1264>
   4fd44:	04800044 	movi	r18,1
   4fd48:	d8c01005 	stb	r3,64(sp)
   4fd4c:	d8001d85 	stb	zero,118(sp)
   4fd50:	9027883a 	mov	r19,r18
   4fd54:	dd401004 	addi	r21,sp,64
   4fd58:	003f1106 	br	4f9a0 <__alt_data_end+0xfffe88a0>
   4fd5c:	d9402117 	ldw	r5,132(sp)
   4fd60:	d9002017 	ldw	r4,128(sp)
   4fd64:	d9801a04 	addi	r6,sp,104
   4fd68:	d9c02b15 	stw	r7,172(sp)
   4fd6c:	dbc02a15 	stw	r15,168(sp)
   4fd70:	004f0d00 	call	4f0d0 <__sprint_r.part.0>
   4fd74:	d9c02b17 	ldw	r7,172(sp)
   4fd78:	dbc02a17 	ldw	r15,168(sp)
   4fd7c:	10006d1e 	bne	r2,zero,4ff34 <___vfiprintf_internal_r+0xd50>
   4fd80:	d9801b17 	ldw	r6,108(sp)
   4fd84:	d8801c17 	ldw	r2,112(sp)
   4fd88:	d811883a 	mov	r8,sp
   4fd8c:	31400044 	addi	r5,r6,1
   4fd90:	003e3306 	br	4f660 <__alt_data_end+0xfffe8560>
   4fd94:	d9401b17 	ldw	r5,108(sp)
   4fd98:	d8801c17 	ldw	r2,112(sp)
   4fd9c:	29000044 	addi	r4,r5,1
   4fda0:	d8c01d87 	ldb	r3,118(sp)
   4fda4:	183e4d26 	beq	r3,zero,4f6dc <__alt_data_end+0xfffe85dc>
   4fda8:	00c00044 	movi	r3,1
   4fdac:	d9401d84 	addi	r5,sp,118
   4fdb0:	10c5883a 	add	r2,r2,r3
   4fdb4:	41400015 	stw	r5,0(r8)
   4fdb8:	40c00115 	stw	r3,4(r8)
   4fdbc:	d8801c15 	stw	r2,112(sp)
   4fdc0:	d9001b15 	stw	r4,108(sp)
   4fdc4:	014001c4 	movi	r5,7
   4fdc8:	2900a90e 	bge	r5,r4,50070 <___vfiprintf_internal_r+0xe8c>
   4fdcc:	1000da1e 	bne	r2,zero,50138 <___vfiprintf_internal_r+0xf54>
   4fdd0:	7000ab1e 	bne	r14,zero,50080 <___vfiprintf_internal_r+0xe9c>
   4fdd4:	000b883a 	mov	r5,zero
   4fdd8:	1809883a 	mov	r4,r3
   4fddc:	d811883a 	mov	r8,sp
   4fde0:	00c02004 	movi	r3,128
   4fde4:	e0fe4d26 	beq	fp,r3,4f71c <__alt_data_end+0xfffe861c>
   4fde8:	4cf9c83a 	sub	fp,r9,r19
   4fdec:	073e7b0e 	bge	zero,fp,4f7dc <__alt_data_end+0xfffe86dc>
   4fdf0:	01c00404 	movi	r7,16
   4fdf4:	3f01900e 	bge	r7,fp,50438 <___vfiprintf_internal_r+0x1254>
   4fdf8:	00c00174 	movhi	r3,5
   4fdfc:	18dabe04 	addi	r3,r3,27384
   4fe00:	d8c02415 	stw	r3,144(sp)
   4fe04:	034001c4 	movi	r13,7
   4fe08:	00000506 	br	4fe20 <___vfiprintf_internal_r+0xc3c>
   4fe0c:	29000084 	addi	r4,r5,2
   4fe10:	42000204 	addi	r8,r8,8
   4fe14:	180b883a 	mov	r5,r3
   4fe18:	e73ffc04 	addi	fp,fp,-16
   4fe1c:	3f000d0e 	bge	r7,fp,4fe54 <___vfiprintf_internal_r+0xc70>
   4fe20:	10800404 	addi	r2,r2,16
   4fe24:	28c00044 	addi	r3,r5,1
   4fe28:	45c00015 	stw	r23,0(r8)
   4fe2c:	41c00115 	stw	r7,4(r8)
   4fe30:	d8801c15 	stw	r2,112(sp)
   4fe34:	d8c01b15 	stw	r3,108(sp)
   4fe38:	68fff40e 	bge	r13,r3,4fe0c <__alt_data_end+0xfffe8d0c>
   4fe3c:	1000101e 	bne	r2,zero,4fe80 <___vfiprintf_internal_r+0xc9c>
   4fe40:	e73ffc04 	addi	fp,fp,-16
   4fe44:	01000044 	movi	r4,1
   4fe48:	000b883a 	mov	r5,zero
   4fe4c:	d811883a 	mov	r8,sp
   4fe50:	3f3ff316 	blt	r7,fp,4fe20 <__alt_data_end+0xfffe8d20>
   4fe54:	da802417 	ldw	r10,144(sp)
   4fe58:	1705883a 	add	r2,r2,fp
   4fe5c:	47000115 	stw	fp,4(r8)
   4fe60:	42800015 	stw	r10,0(r8)
   4fe64:	d8801c15 	stw	r2,112(sp)
   4fe68:	d9001b15 	stw	r4,108(sp)
   4fe6c:	00c001c4 	movi	r3,7
   4fe70:	19003616 	blt	r3,r4,4ff4c <___vfiprintf_internal_r+0xd68>
   4fe74:	42000204 	addi	r8,r8,8
   4fe78:	21000044 	addi	r4,r4,1
   4fe7c:	003e5706 	br	4f7dc <__alt_data_end+0xfffe86dc>
   4fe80:	d9402117 	ldw	r5,132(sp)
   4fe84:	d9002017 	ldw	r4,128(sp)
   4fe88:	d9801a04 	addi	r6,sp,104
   4fe8c:	d9c02b15 	stw	r7,172(sp)
   4fe90:	db402a15 	stw	r13,168(sp)
   4fe94:	004f0d00 	call	4f0d0 <__sprint_r.part.0>
   4fe98:	d9c02b17 	ldw	r7,172(sp)
   4fe9c:	db402a17 	ldw	r13,168(sp)
   4fea0:	1000241e 	bne	r2,zero,4ff34 <___vfiprintf_internal_r+0xd50>
   4fea4:	d9401b17 	ldw	r5,108(sp)
   4fea8:	d8801c17 	ldw	r2,112(sp)
   4feac:	d811883a 	mov	r8,sp
   4feb0:	29000044 	addi	r4,r5,1
   4feb4:	003fd806 	br	4fe18 <__alt_data_end+0xfffe8d18>
   4feb8:	d9401b17 	ldw	r5,108(sp)
   4febc:	00c00174 	movhi	r3,5
   4fec0:	18dac204 	addi	r3,r3,27400
   4fec4:	d8c02415 	stw	r3,144(sp)
   4fec8:	29400044 	addi	r5,r5,1
   4fecc:	d8c02417 	ldw	r3,144(sp)
   4fed0:	14c5883a 	add	r2,r2,r19
   4fed4:	44c00115 	stw	r19,4(r8)
   4fed8:	40c00015 	stw	r3,0(r8)
   4fedc:	d8801c15 	stw	r2,112(sp)
   4fee0:	d9401b15 	stw	r5,108(sp)
   4fee4:	00c001c4 	movi	r3,7
   4fee8:	1940070e 	bge	r3,r5,4ff08 <___vfiprintf_internal_r+0xd24>
   4feec:	103e4826 	beq	r2,zero,4f810 <__alt_data_end+0xfffe8710>
   4fef0:	d9402117 	ldw	r5,132(sp)
   4fef4:	d9002017 	ldw	r4,128(sp)
   4fef8:	d9801a04 	addi	r6,sp,104
   4fefc:	004f0d00 	call	4f0d0 <__sprint_r.part.0>
   4ff00:	10000c1e 	bne	r2,zero,4ff34 <___vfiprintf_internal_r+0xd50>
   4ff04:	d8801c17 	ldw	r2,112(sp)
   4ff08:	8c80010e 	bge	r17,r18,4ff10 <___vfiprintf_internal_r+0xd2c>
   4ff0c:	9023883a 	mov	r17,r18
   4ff10:	da802317 	ldw	r10,140(sp)
   4ff14:	5455883a 	add	r10,r10,r17
   4ff18:	da802315 	stw	r10,140(sp)
   4ff1c:	103e4126 	beq	r2,zero,4f824 <__alt_data_end+0xfffe8724>
   4ff20:	d9402117 	ldw	r5,132(sp)
   4ff24:	d9002017 	ldw	r4,128(sp)
   4ff28:	d9801a04 	addi	r6,sp,104
   4ff2c:	004f0d00 	call	4f0d0 <__sprint_r.part.0>
   4ff30:	103e3c26 	beq	r2,zero,4f824 <__alt_data_end+0xfffe8724>
   4ff34:	dd002117 	ldw	r20,132(sp)
   4ff38:	a080030b 	ldhu	r2,12(r20)
   4ff3c:	1080100c 	andi	r2,r2,64
   4ff40:	1001231e 	bne	r2,zero,503d0 <___vfiprintf_internal_r+0x11ec>
   4ff44:	d8802317 	ldw	r2,140(sp)
   4ff48:	003d7b06 	br	4f538 <__alt_data_end+0xfffe8438>
   4ff4c:	1000991e 	bne	r2,zero,501b4 <___vfiprintf_internal_r+0xfd0>
   4ff50:	00c00044 	movi	r3,1
   4ff54:	9805883a 	mov	r2,r19
   4ff58:	dd400015 	stw	r21,0(sp)
   4ff5c:	dcc00115 	stw	r19,4(sp)
   4ff60:	dcc01c15 	stw	r19,112(sp)
   4ff64:	d8c01b15 	stw	r3,108(sp)
   4ff68:	d811883a 	mov	r8,sp
   4ff6c:	42000204 	addi	r8,r8,8
   4ff70:	a2c0010c 	andi	r11,r20,4
   4ff74:	583fe426 	beq	r11,zero,4ff08 <__alt_data_end+0xfffe8e08>
   4ff78:	8ca7c83a 	sub	r19,r17,r18
   4ff7c:	04ffe20e 	bge	zero,r19,4ff08 <__alt_data_end+0xfffe8e08>
   4ff80:	01c00404 	movi	r7,16
   4ff84:	3cffcc0e 	bge	r7,r19,4feb8 <__alt_data_end+0xfffe8db8>
   4ff88:	02800174 	movhi	r10,5
   4ff8c:	529ac204 	addi	r10,r10,27400
   4ff90:	d9001b17 	ldw	r4,108(sp)
   4ff94:	da802415 	stw	r10,144(sp)
   4ff98:	382b883a 	mov	r21,r7
   4ff9c:	050001c4 	movi	r20,7
   4ffa0:	df002017 	ldw	fp,128(sp)
   4ffa4:	00000506 	br	4ffbc <___vfiprintf_internal_r+0xdd8>
   4ffa8:	21400084 	addi	r5,r4,2
   4ffac:	42000204 	addi	r8,r8,8
   4ffb0:	1809883a 	mov	r4,r3
   4ffb4:	9cfffc04 	addi	r19,r19,-16
   4ffb8:	acffc40e 	bge	r21,r19,4fecc <__alt_data_end+0xfffe8dcc>
   4ffbc:	10800404 	addi	r2,r2,16
   4ffc0:	20c00044 	addi	r3,r4,1
   4ffc4:	45800015 	stw	r22,0(r8)
   4ffc8:	45400115 	stw	r21,4(r8)
   4ffcc:	d8801c15 	stw	r2,112(sp)
   4ffd0:	d8c01b15 	stw	r3,108(sp)
   4ffd4:	a0fff40e 	bge	r20,r3,4ffa8 <__alt_data_end+0xfffe8ea8>
   4ffd8:	1000041e 	bne	r2,zero,4ffec <___vfiprintf_internal_r+0xe08>
   4ffdc:	01400044 	movi	r5,1
   4ffe0:	0009883a 	mov	r4,zero
   4ffe4:	d811883a 	mov	r8,sp
   4ffe8:	003ff206 	br	4ffb4 <__alt_data_end+0xfffe8eb4>
   4ffec:	d9402117 	ldw	r5,132(sp)
   4fff0:	d9801a04 	addi	r6,sp,104
   4fff4:	e009883a 	mov	r4,fp
   4fff8:	004f0d00 	call	4f0d0 <__sprint_r.part.0>
   4fffc:	103fcd1e 	bne	r2,zero,4ff34 <__alt_data_end+0xfffe8e34>
   50000:	d9001b17 	ldw	r4,108(sp)
   50004:	d8801c17 	ldw	r2,112(sp)
   50008:	d811883a 	mov	r8,sp
   5000c:	21400044 	addi	r5,r4,1
   50010:	003fe806 	br	4ffb4 <__alt_data_end+0xfffe8eb4>
   50014:	d9402117 	ldw	r5,132(sp)
   50018:	d9002017 	ldw	r4,128(sp)
   5001c:	d9801a04 	addi	r6,sp,104
   50020:	d9c02b15 	stw	r7,172(sp)
   50024:	db402a15 	stw	r13,168(sp)
   50028:	004f0d00 	call	4f0d0 <__sprint_r.part.0>
   5002c:	d9c02b17 	ldw	r7,172(sp)
   50030:	db402a17 	ldw	r13,168(sp)
   50034:	103fbf1e 	bne	r2,zero,4ff34 <__alt_data_end+0xfffe8e34>
   50038:	d9401b17 	ldw	r5,108(sp)
   5003c:	d8801c17 	ldw	r2,112(sp)
   50040:	d811883a 	mov	r8,sp
   50044:	29800044 	addi	r6,r5,1
   50048:	003dc406 	br	4f75c <__alt_data_end+0xfffe865c>
   5004c:	1000d21e 	bne	r2,zero,50398 <___vfiprintf_internal_r+0x11b4>
   50050:	d8c01d87 	ldb	r3,118(sp)
   50054:	18009526 	beq	r3,zero,502ac <___vfiprintf_internal_r+0x10c8>
   50058:	00800044 	movi	r2,1
   5005c:	d8c01d84 	addi	r3,sp,118
   50060:	1009883a 	mov	r4,r2
   50064:	d8c00015 	stw	r3,0(sp)
   50068:	d8800115 	stw	r2,4(sp)
   5006c:	d811883a 	mov	r8,sp
   50070:	200b883a 	mov	r5,r4
   50074:	42000204 	addi	r8,r8,8
   50078:	21000044 	addi	r4,r4,1
   5007c:	003d9706 	br	4f6dc <__alt_data_end+0xfffe85dc>
   50080:	d9001d04 	addi	r4,sp,116
   50084:	00800084 	movi	r2,2
   50088:	d9000015 	stw	r4,0(sp)
   5008c:	d8800115 	stw	r2,4(sp)
   50090:	1809883a 	mov	r4,r3
   50094:	d811883a 	mov	r8,sp
   50098:	200b883a 	mov	r5,r4
   5009c:	42000204 	addi	r8,r8,8
   500a0:	21000044 	addi	r4,r4,1
   500a4:	003f4e06 	br	4fde0 <__alt_data_end+0xfffe8ce0>
   500a8:	d8001d85 	stb	zero,118(sp)
   500ac:	48005016 	blt	r9,zero,501f0 <___vfiprintf_internal_r+0x100c>
   500b0:	00ffdfc4 	movi	r3,-129
   500b4:	94c4b03a 	or	r2,r18,r19
   500b8:	a0e8703a 	and	r20,r20,r3
   500bc:	103d4426 	beq	r2,zero,4f5d0 <__alt_data_end+0xfffe84d0>
   500c0:	0039883a 	mov	fp,zero
   500c4:	d9002617 	ldw	r4,152(sp)
   500c8:	dd401a04 	addi	r21,sp,104
   500cc:	908003cc 	andi	r2,r18,15
   500d0:	9806973a 	slli	r3,r19,28
   500d4:	2085883a 	add	r2,r4,r2
   500d8:	9024d13a 	srli	r18,r18,4
   500dc:	10800003 	ldbu	r2,0(r2)
   500e0:	9826d13a 	srli	r19,r19,4
   500e4:	ad7fffc4 	addi	r21,r21,-1
   500e8:	1ca4b03a 	or	r18,r3,r18
   500ec:	a8800005 	stb	r2,0(r21)
   500f0:	94c4b03a 	or	r2,r18,r19
   500f4:	103ff51e 	bne	r2,zero,500cc <__alt_data_end+0xfffe8fcc>
   500f8:	003e5906 	br	4fa60 <__alt_data_end+0xfffe8960>
   500fc:	d9402117 	ldw	r5,132(sp)
   50100:	d9002017 	ldw	r4,128(sp)
   50104:	d9801a04 	addi	r6,sp,104
   50108:	004f0d00 	call	4f0d0 <__sprint_r.part.0>
   5010c:	103f891e 	bne	r2,zero,4ff34 <__alt_data_end+0xfffe8e34>
   50110:	d8801c17 	ldw	r2,112(sp)
   50114:	d811883a 	mov	r8,sp
   50118:	003f9506 	br	4ff70 <__alt_data_end+0xfffe8e70>
   5011c:	d9402117 	ldw	r5,132(sp)
   50120:	d9002017 	ldw	r4,128(sp)
   50124:	d9801a04 	addi	r6,sp,104
   50128:	004f0d00 	call	4f0d0 <__sprint_r.part.0>
   5012c:	103f811e 	bne	r2,zero,4ff34 <__alt_data_end+0xfffe8e34>
   50130:	d811883a 	mov	r8,sp
   50134:	003ced06 	br	4f4ec <__alt_data_end+0xfffe83ec>
   50138:	d9402117 	ldw	r5,132(sp)
   5013c:	d9002017 	ldw	r4,128(sp)
   50140:	d9801a04 	addi	r6,sp,104
   50144:	da402c15 	stw	r9,176(sp)
   50148:	db802a15 	stw	r14,168(sp)
   5014c:	004f0d00 	call	4f0d0 <__sprint_r.part.0>
   50150:	da402c17 	ldw	r9,176(sp)
   50154:	db802a17 	ldw	r14,168(sp)
   50158:	103f761e 	bne	r2,zero,4ff34 <__alt_data_end+0xfffe8e34>
   5015c:	d9401b17 	ldw	r5,108(sp)
   50160:	d8801c17 	ldw	r2,112(sp)
   50164:	d811883a 	mov	r8,sp
   50168:	29000044 	addi	r4,r5,1
   5016c:	003d5b06 	br	4f6dc <__alt_data_end+0xfffe85dc>
   50170:	d9402117 	ldw	r5,132(sp)
   50174:	d9002017 	ldw	r4,128(sp)
   50178:	d9801a04 	addi	r6,sp,104
   5017c:	da402c15 	stw	r9,176(sp)
   50180:	004f0d00 	call	4f0d0 <__sprint_r.part.0>
   50184:	da402c17 	ldw	r9,176(sp)
   50188:	103f6a1e 	bne	r2,zero,4ff34 <__alt_data_end+0xfffe8e34>
   5018c:	d9401b17 	ldw	r5,108(sp)
   50190:	d8801c17 	ldw	r2,112(sp)
   50194:	d811883a 	mov	r8,sp
   50198:	29000044 	addi	r4,r5,1
   5019c:	003f1006 	br	4fde0 <__alt_data_end+0xfffe8ce0>
   501a0:	1000c31e 	bne	r2,zero,504b0 <___vfiprintf_internal_r+0x12cc>
   501a4:	01000044 	movi	r4,1
   501a8:	000b883a 	mov	r5,zero
   501ac:	d811883a 	mov	r8,sp
   501b0:	003f0d06 	br	4fde8 <__alt_data_end+0xfffe8ce8>
   501b4:	d9402117 	ldw	r5,132(sp)
   501b8:	d9002017 	ldw	r4,128(sp)
   501bc:	d9801a04 	addi	r6,sp,104
   501c0:	004f0d00 	call	4f0d0 <__sprint_r.part.0>
   501c4:	103f5b1e 	bne	r2,zero,4ff34 <__alt_data_end+0xfffe8e34>
   501c8:	d9001b17 	ldw	r4,108(sp)
   501cc:	d8801c17 	ldw	r2,112(sp)
   501d0:	d811883a 	mov	r8,sp
   501d4:	21000044 	addi	r4,r4,1
   501d8:	003d8006 	br	4f7dc <__alt_data_end+0xfffe86dc>
   501dc:	01000174 	movhi	r4,5
   501e0:	211a5e04 	addi	r4,r4,27000
   501e4:	d9002615 	stw	r4,152(sp)
   501e8:	d8c02215 	stw	r3,136(sp)
   501ec:	1029883a 	mov	r20,r2
   501f0:	94c4b03a 	or	r2,r18,r19
   501f4:	103fb21e 	bne	r2,zero,500c0 <__alt_data_end+0xfffe8fc0>
   501f8:	0039883a 	mov	fp,zero
   501fc:	00800084 	movi	r2,2
   50200:	003e6b06 	br	4fbb0 <__alt_data_end+0xfffe8ab0>
   50204:	da802217 	ldw	r10,136(sp)
   50208:	d8001d85 	stb	zero,118(sp)
   5020c:	0027883a 	mov	r19,zero
   50210:	50800104 	addi	r2,r10,4
   50214:	54800017 	ldw	r18,0(r10)
   50218:	483e6016 	blt	r9,zero,4fb9c <__alt_data_end+0xfffe8a9c>
   5021c:	00ffdfc4 	movi	r3,-129
   50220:	d8802215 	stw	r2,136(sp)
   50224:	a0e8703a 	and	r20,r20,r3
   50228:	0039883a 	mov	fp,zero
   5022c:	903ebb26 	beq	r18,zero,4fd1c <__alt_data_end+0xfffe8c1c>
   50230:	00800244 	movi	r2,9
   50234:	14bdee36 	bltu	r2,r18,4f9f0 <__alt_data_end+0xfffe88f0>
   50238:	003eba06 	br	4fd24 <__alt_data_end+0xfffe8c24>
   5023c:	00800c04 	movi	r2,48
   50240:	d8c01d45 	stb	r3,117(sp)
   50244:	d8801d05 	stb	r2,116(sp)
   50248:	d8001d85 	stb	zero,118(sp)
   5024c:	a0c00094 	ori	r3,r20,2
   50250:	4800a916 	blt	r9,zero,504f8 <___vfiprintf_internal_r+0x1314>
   50254:	00bfdfc4 	movi	r2,-129
   50258:	a096703a 	and	r11,r20,r2
   5025c:	5d000094 	ori	r20,r11,2
   50260:	0039883a 	mov	fp,zero
   50264:	003f9706 	br	500c4 <__alt_data_end+0xfffe8fc4>
   50268:	8025883a 	mov	r18,r16
   5026c:	003c2e06 	br	4f328 <__alt_data_end+0xfffe8228>
   50270:	00800174 	movhi	r2,5
   50274:	109a5e04 	addi	r2,r2,27000
   50278:	0039883a 	mov	fp,zero
   5027c:	d8802615 	stw	r2,152(sp)
   50280:	003f9006 	br	500c4 <__alt_data_end+0xfffe8fc4>
   50284:	04a5c83a 	sub	r18,zero,r18
   50288:	07000b44 	movi	fp,45
   5028c:	9004c03a 	cmpne	r2,r18,zero
   50290:	04e7c83a 	sub	r19,zero,r19
   50294:	df001d85 	stb	fp,118(sp)
   50298:	98a7c83a 	sub	r19,r19,r2
   5029c:	48009f16 	blt	r9,zero,5051c <___vfiprintf_internal_r+0x1338>
   502a0:	00bfdfc4 	movi	r2,-129
   502a4:	a0a8703a 	and	r20,r20,r2
   502a8:	003dd006 	br	4f9ec <__alt_data_end+0xfffe88ec>
   502ac:	70004c26 	beq	r14,zero,503e0 <___vfiprintf_internal_r+0x11fc>
   502b0:	00800084 	movi	r2,2
   502b4:	d8c01d04 	addi	r3,sp,116
   502b8:	d8c00015 	stw	r3,0(sp)
   502bc:	d8800115 	stw	r2,4(sp)
   502c0:	01000044 	movi	r4,1
   502c4:	d811883a 	mov	r8,sp
   502c8:	003f7306 	br	50098 <__alt_data_end+0xfffe8f98>
   502cc:	a080100c 	andi	r2,r20,64
   502d0:	da802217 	ldw	r10,136(sp)
   502d4:	103e0626 	beq	r2,zero,4faf0 <__alt_data_end+0xfffe89f0>
   502d8:	5480000f 	ldh	r18,0(r10)
   502dc:	52800104 	addi	r10,r10,4
   502e0:	da802215 	stw	r10,136(sp)
   502e4:	9027d7fa 	srai	r19,r18,31
   502e8:	9805883a 	mov	r2,r19
   502ec:	003db806 	br	4f9d0 <__alt_data_end+0xfffe88d0>
   502f0:	a080040c 	andi	r2,r20,16
   502f4:	1000091e 	bne	r2,zero,5031c <___vfiprintf_internal_r+0x1138>
   502f8:	a2c0100c 	andi	r11,r20,64
   502fc:	58000726 	beq	r11,zero,5031c <___vfiprintf_internal_r+0x1138>
   50300:	da802217 	ldw	r10,136(sp)
   50304:	50800017 	ldw	r2,0(r10)
   50308:	52800104 	addi	r10,r10,4
   5030c:	da802215 	stw	r10,136(sp)
   50310:	da802317 	ldw	r10,140(sp)
   50314:	1280000d 	sth	r10,0(r2)
   50318:	003be706 	br	4f2b8 <__alt_data_end+0xfffe81b8>
   5031c:	da802217 	ldw	r10,136(sp)
   50320:	50800017 	ldw	r2,0(r10)
   50324:	52800104 	addi	r10,r10,4
   50328:	da802215 	stw	r10,136(sp)
   5032c:	da802317 	ldw	r10,140(sp)
   50330:	12800015 	stw	r10,0(r2)
   50334:	003be006 	br	4f2b8 <__alt_data_end+0xfffe81b8>
   50338:	a080100c 	andi	r2,r20,64
   5033c:	da802217 	ldw	r10,136(sp)
   50340:	10003026 	beq	r2,zero,50404 <___vfiprintf_internal_r+0x1220>
   50344:	5480000b 	ldhu	r18,0(r10)
   50348:	52800104 	addi	r10,r10,4
   5034c:	0027883a 	mov	r19,zero
   50350:	da802215 	stw	r10,136(sp)
   50354:	003d8006 	br	4f958 <__alt_data_end+0xfffe8858>
   50358:	80c00007 	ldb	r3,0(r16)
   5035c:	003c0006 	br	4f360 <__alt_data_end+0xfffe8260>
   50360:	a080100c 	andi	r2,r20,64
   50364:	d8001d85 	stb	zero,118(sp)
   50368:	da802217 	ldw	r10,136(sp)
   5036c:	1000201e 	bne	r2,zero,503f0 <___vfiprintf_internal_r+0x120c>
   50370:	50800104 	addi	r2,r10,4
   50374:	54800017 	ldw	r18,0(r10)
   50378:	0027883a 	mov	r19,zero
   5037c:	483def0e 	bge	r9,zero,4fb3c <__alt_data_end+0xfffe8a3c>
   50380:	94c6b03a 	or	r3,r18,r19
   50384:	d8802215 	stw	r2,136(sp)
   50388:	183d4e1e 	bne	r3,zero,4f8c4 <__alt_data_end+0xfffe87c4>
   5038c:	0039883a 	mov	fp,zero
   50390:	0005883a 	mov	r2,zero
   50394:	003e0606 	br	4fbb0 <__alt_data_end+0xfffe8ab0>
   50398:	d9402117 	ldw	r5,132(sp)
   5039c:	d9002017 	ldw	r4,128(sp)
   503a0:	d9801a04 	addi	r6,sp,104
   503a4:	da402c15 	stw	r9,176(sp)
   503a8:	db802a15 	stw	r14,168(sp)
   503ac:	004f0d00 	call	4f0d0 <__sprint_r.part.0>
   503b0:	da402c17 	ldw	r9,176(sp)
   503b4:	db802a17 	ldw	r14,168(sp)
   503b8:	103ede1e 	bne	r2,zero,4ff34 <__alt_data_end+0xfffe8e34>
   503bc:	d9401b17 	ldw	r5,108(sp)
   503c0:	d8801c17 	ldw	r2,112(sp)
   503c4:	d811883a 	mov	r8,sp
   503c8:	29000044 	addi	r4,r5,1
   503cc:	003e7406 	br	4fda0 <__alt_data_end+0xfffe8ca0>
   503d0:	00bfffc4 	movi	r2,-1
   503d4:	003c5806 	br	4f538 <__alt_data_end+0xfffe8438>
   503d8:	d811883a 	mov	r8,sp
   503dc:	003ee806 	br	4ff80 <__alt_data_end+0xfffe8e80>
   503e0:	000b883a 	mov	r5,zero
   503e4:	01000044 	movi	r4,1
   503e8:	d811883a 	mov	r8,sp
   503ec:	003e7c06 	br	4fde0 <__alt_data_end+0xfffe8ce0>
   503f0:	50800104 	addi	r2,r10,4
   503f4:	5480000b 	ldhu	r18,0(r10)
   503f8:	0027883a 	mov	r19,zero
   503fc:	483dcf0e 	bge	r9,zero,4fb3c <__alt_data_end+0xfffe8a3c>
   50400:	003fdf06 	br	50380 <__alt_data_end+0xfffe9280>
   50404:	54800017 	ldw	r18,0(r10)
   50408:	52800104 	addi	r10,r10,4
   5040c:	0027883a 	mov	r19,zero
   50410:	da802215 	stw	r10,136(sp)
   50414:	003d5006 	br	4f958 <__alt_data_end+0xfffe8858>
   50418:	50800104 	addi	r2,r10,4
   5041c:	5480000b 	ldhu	r18,0(r10)
   50420:	0027883a 	mov	r19,zero
   50424:	483f7d0e 	bge	r9,zero,5021c <__alt_data_end+0xfffe911c>
   50428:	003ddc06 	br	4fb9c <__alt_data_end+0xfffe8a9c>
   5042c:	d8c02215 	stw	r3,136(sp)
   50430:	0039883a 	mov	fp,zero
   50434:	003ddb06 	br	4fba4 <__alt_data_end+0xfffe8aa4>
   50438:	02800174 	movhi	r10,5
   5043c:	529abe04 	addi	r10,r10,27384
   50440:	da802415 	stw	r10,144(sp)
   50444:	003e8306 	br	4fe54 <__alt_data_end+0xfffe8d54>
   50448:	d8801c17 	ldw	r2,112(sp)
   5044c:	dd002117 	ldw	r20,132(sp)
   50450:	103eb926 	beq	r2,zero,4ff38 <__alt_data_end+0xfffe8e38>
   50454:	d9002017 	ldw	r4,128(sp)
   50458:	d9801a04 	addi	r6,sp,104
   5045c:	a00b883a 	mov	r5,r20
   50460:	004f0d00 	call	4f0d0 <__sprint_r.part.0>
   50464:	003eb406 	br	4ff38 <__alt_data_end+0xfffe8e38>
   50468:	80c00043 	ldbu	r3,1(r16)
   5046c:	a5000814 	ori	r20,r20,32
   50470:	84000044 	addi	r16,r16,1
   50474:	18c03fcc 	andi	r3,r3,255
   50478:	18c0201c 	xori	r3,r3,128
   5047c:	18ffe004 	addi	r3,r3,-128
   50480:	003bb706 	br	4f360 <__alt_data_end+0xfffe8260>
   50484:	a809883a 	mov	r4,r21
   50488:	d8c02a15 	stw	r3,168(sp)
   5048c:	da002b15 	stw	r8,172(sp)
   50490:	00485b80 	call	485b8 <strlen>
   50494:	d8c02a17 	ldw	r3,168(sp)
   50498:	1027883a 	mov	r19,r2
   5049c:	df001d83 	ldbu	fp,118(sp)
   504a0:	d8c02215 	stw	r3,136(sp)
   504a4:	0013883a 	mov	r9,zero
   504a8:	da002b17 	ldw	r8,172(sp)
   504ac:	003c4d06 	br	4f5e4 <__alt_data_end+0xfffe84e4>
   504b0:	d9402117 	ldw	r5,132(sp)
   504b4:	d9002017 	ldw	r4,128(sp)
   504b8:	d9801a04 	addi	r6,sp,104
   504bc:	da402c15 	stw	r9,176(sp)
   504c0:	004f0d00 	call	4f0d0 <__sprint_r.part.0>
   504c4:	da402c17 	ldw	r9,176(sp)
   504c8:	103e9a1e 	bne	r2,zero,4ff34 <__alt_data_end+0xfffe8e34>
   504cc:	d9401b17 	ldw	r5,108(sp)
   504d0:	d8801c17 	ldw	r2,112(sp)
   504d4:	d811883a 	mov	r8,sp
   504d8:	29000044 	addi	r4,r5,1
   504dc:	003e4206 	br	4fde8 <__alt_data_end+0xfffe8ce8>
   504e0:	d9401b17 	ldw	r5,108(sp)
   504e4:	01000174 	movhi	r4,5
   504e8:	211ac204 	addi	r4,r4,27400
   504ec:	d9002415 	stw	r4,144(sp)
   504f0:	29400044 	addi	r5,r5,1
   504f4:	003c6d06 	br	4f6ac <__alt_data_end+0xfffe85ac>
   504f8:	0039883a 	mov	fp,zero
   504fc:	00800084 	movi	r2,2
   50500:	10803fcc 	andi	r2,r2,255
   50504:	01000044 	movi	r4,1
   50508:	11001e26 	beq	r2,r4,50584 <___vfiprintf_internal_r+0x13a0>
   5050c:	01000084 	movi	r4,2
   50510:	11001e1e 	bne	r2,r4,5058c <___vfiprintf_internal_r+0x13a8>
   50514:	1829883a 	mov	r20,r3
   50518:	003eea06 	br	500c4 <__alt_data_end+0xfffe8fc4>
   5051c:	a007883a 	mov	r3,r20
   50520:	00800044 	movi	r2,1
   50524:	003ff606 	br	50500 <__alt_data_end+0xfffe9400>
   50528:	00800184 	movi	r2,6
   5052c:	1240012e 	bgeu	r2,r9,50534 <___vfiprintf_internal_r+0x1350>
   50530:	1013883a 	mov	r9,r2
   50534:	4827883a 	mov	r19,r9
   50538:	4825883a 	mov	r18,r9
   5053c:	48001516 	blt	r9,zero,50594 <___vfiprintf_internal_r+0x13b0>
   50540:	05400174 	movhi	r21,5
   50544:	d8c02215 	stw	r3,136(sp)
   50548:	ad5a6304 	addi	r21,r21,27020
   5054c:	003d1406 	br	4f9a0 <__alt_data_end+0xfffe88a0>
   50550:	02800174 	movhi	r10,5
   50554:	529abe04 	addi	r10,r10,27384
   50558:	da802415 	stw	r10,144(sp)
   5055c:	200d883a 	mov	r6,r4
   50560:	003c9106 	br	4f7a8 <__alt_data_end+0xfffe86a8>
   50564:	5021883a 	mov	r16,r10
   50568:	0013883a 	mov	r9,zero
   5056c:	003b7d06 	br	4f364 <__alt_data_end+0xfffe8264>
   50570:	4827883a 	mov	r19,r9
   50574:	df001d83 	ldbu	fp,118(sp)
   50578:	d8c02215 	stw	r3,136(sp)
   5057c:	0013883a 	mov	r9,zero
   50580:	003c1806 	br	4f5e4 <__alt_data_end+0xfffe84e4>
   50584:	1829883a 	mov	r20,r3
   50588:	003d1806 	br	4f9ec <__alt_data_end+0xfffe88ec>
   5058c:	1829883a 	mov	r20,r3
   50590:	003ccd06 	br	4f8c8 <__alt_data_end+0xfffe87c8>
   50594:	0025883a 	mov	r18,zero
   50598:	003fe906 	br	50540 <__alt_data_end+0xfffe9440>
   5059c:	d8802217 	ldw	r2,136(sp)
   505a0:	80c00043 	ldbu	r3,1(r16)
   505a4:	5021883a 	mov	r16,r10
   505a8:	12400017 	ldw	r9,0(r2)
   505ac:	10800104 	addi	r2,r2,4
   505b0:	d8802215 	stw	r2,136(sp)
   505b4:	483faf0e 	bge	r9,zero,50474 <__alt_data_end+0xfffe9374>
   505b8:	18c03fcc 	andi	r3,r3,255
   505bc:	18c0201c 	xori	r3,r3,128
   505c0:	027fffc4 	movi	r9,-1
   505c4:	18ffe004 	addi	r3,r3,-128
   505c8:	003b6506 	br	4f360 <__alt_data_end+0xfffe8260>
   505cc:	d9c01d85 	stb	r7,118(sp)
   505d0:	003ca006 	br	4f854 <__alt_data_end+0xfffe8754>
   505d4:	d9c01d85 	stb	r7,118(sp)
   505d8:	003cad06 	br	4f890 <__alt_data_end+0xfffe8790>
   505dc:	d9c01d85 	stb	r7,118(sp)
   505e0:	003d7d06 	br	4fbd8 <__alt_data_end+0xfffe8ad8>
   505e4:	d9c01d85 	stb	r7,118(sp)
   505e8:	003d5f06 	br	4fb68 <__alt_data_end+0xfffe8a68>
   505ec:	a080004c 	andi	r2,r20,1
   505f0:	0039883a 	mov	fp,zero
   505f4:	10000526 	beq	r2,zero,5060c <___vfiprintf_internal_r+0x1428>
   505f8:	00800c04 	movi	r2,48
   505fc:	d88019c5 	stb	r2,103(sp)
   50600:	dcc02717 	ldw	r19,156(sp)
   50604:	dd4019c4 	addi	r21,sp,103
   50608:	003bf606 	br	4f5e4 <__alt_data_end+0xfffe84e4>
   5060c:	0027883a 	mov	r19,zero
   50610:	dd401a04 	addi	r21,sp,104
   50614:	003bf306 	br	4f5e4 <__alt_data_end+0xfffe84e4>
   50618:	d9c01d85 	stb	r7,118(sp)
   5061c:	003dc806 	br	4fd40 <__alt_data_end+0xfffe8c40>
   50620:	d9c01d85 	stb	r7,118(sp)
   50624:	003d3a06 	br	4fb10 <__alt_data_end+0xfffe8a10>
   50628:	d9c01d85 	stb	r7,118(sp)
   5062c:	003d2a06 	br	4fad8 <__alt_data_end+0xfffe89d8>
   50630:	d9c01d85 	stb	r7,118(sp)
   50634:	003cde06 	br	4f9b0 <__alt_data_end+0xfffe88b0>
   50638:	d9c01d85 	stb	r7,118(sp)
   5063c:	003cbc06 	br	4f930 <__alt_data_end+0xfffe8830>

00050640 <__vfiprintf_internal>:
   50640:	008001b4 	movhi	r2,6
   50644:	10a1a804 	addi	r2,r2,-31072
   50648:	300f883a 	mov	r7,r6
   5064c:	280d883a 	mov	r6,r5
   50650:	200b883a 	mov	r5,r4
   50654:	11000017 	ldw	r4,0(r2)
   50658:	004f1e41 	jmpi	4f1e4 <___vfiprintf_internal_r>

0005065c <__sbprintf>:
   5065c:	2880030b 	ldhu	r2,12(r5)
   50660:	2ac01917 	ldw	r11,100(r5)
   50664:	2a80038b 	ldhu	r10,14(r5)
   50668:	2a400717 	ldw	r9,28(r5)
   5066c:	2a000917 	ldw	r8,36(r5)
   50670:	defee204 	addi	sp,sp,-1144
   50674:	00c10004 	movi	r3,1024
   50678:	dc011a15 	stw	r16,1128(sp)
   5067c:	10bfff4c 	andi	r2,r2,65533
   50680:	2821883a 	mov	r16,r5
   50684:	d8cb883a 	add	r5,sp,r3
   50688:	dc811c15 	stw	r18,1136(sp)
   5068c:	dc411b15 	stw	r17,1132(sp)
   50690:	dfc11d15 	stw	ra,1140(sp)
   50694:	2025883a 	mov	r18,r4
   50698:	d881030d 	sth	r2,1036(sp)
   5069c:	dac11915 	stw	r11,1124(sp)
   506a0:	da81038d 	sth	r10,1038(sp)
   506a4:	da410715 	stw	r9,1052(sp)
   506a8:	da010915 	stw	r8,1060(sp)
   506ac:	dec10015 	stw	sp,1024(sp)
   506b0:	dec10415 	stw	sp,1040(sp)
   506b4:	d8c10215 	stw	r3,1032(sp)
   506b8:	d8c10515 	stw	r3,1044(sp)
   506bc:	d8010615 	stw	zero,1048(sp)
   506c0:	004f1e40 	call	4f1e4 <___vfiprintf_internal_r>
   506c4:	1023883a 	mov	r17,r2
   506c8:	10000416 	blt	r2,zero,506dc <__sbprintf+0x80>
   506cc:	d9410004 	addi	r5,sp,1024
   506d0:	9009883a 	mov	r4,r18
   506d4:	004c5cc0 	call	4c5cc <_fflush_r>
   506d8:	10000d1e 	bne	r2,zero,50710 <__sbprintf+0xb4>
   506dc:	d881030b 	ldhu	r2,1036(sp)
   506e0:	1080100c 	andi	r2,r2,64
   506e4:	10000326 	beq	r2,zero,506f4 <__sbprintf+0x98>
   506e8:	8080030b 	ldhu	r2,12(r16)
   506ec:	10801014 	ori	r2,r2,64
   506f0:	8080030d 	sth	r2,12(r16)
   506f4:	8805883a 	mov	r2,r17
   506f8:	dfc11d17 	ldw	ra,1140(sp)
   506fc:	dc811c17 	ldw	r18,1136(sp)
   50700:	dc411b17 	ldw	r17,1132(sp)
   50704:	dc011a17 	ldw	r16,1128(sp)
   50708:	dec11e04 	addi	sp,sp,1144
   5070c:	f800283a 	ret
   50710:	047fffc4 	movi	r17,-1
   50714:	003ff106 	br	506dc <__alt_data_end+0xfffe95dc>

00050718 <_calloc_r>:
   50718:	298b383a 	mul	r5,r5,r6
   5071c:	defffe04 	addi	sp,sp,-8
   50720:	dfc00115 	stw	ra,4(sp)
   50724:	dc000015 	stw	r16,0(sp)
   50728:	00477640 	call	47764 <_malloc_r>
   5072c:	10002926 	beq	r2,zero,507d4 <_calloc_r+0xbc>
   50730:	11bfff17 	ldw	r6,-4(r2)
   50734:	1021883a 	mov	r16,r2
   50738:	00bfff04 	movi	r2,-4
   5073c:	308c703a 	and	r6,r6,r2
   50740:	00c00904 	movi	r3,36
   50744:	308d883a 	add	r6,r6,r2
   50748:	19801636 	bltu	r3,r6,507a4 <_calloc_r+0x8c>
   5074c:	008004c4 	movi	r2,19
   50750:	11800b2e 	bgeu	r2,r6,50780 <_calloc_r+0x68>
   50754:	80000015 	stw	zero,0(r16)
   50758:	80000115 	stw	zero,4(r16)
   5075c:	008006c4 	movi	r2,27
   50760:	11801a2e 	bgeu	r2,r6,507cc <_calloc_r+0xb4>
   50764:	80000215 	stw	zero,8(r16)
   50768:	80000315 	stw	zero,12(r16)
   5076c:	30c0151e 	bne	r6,r3,507c4 <_calloc_r+0xac>
   50770:	80000415 	stw	zero,16(r16)
   50774:	80800604 	addi	r2,r16,24
   50778:	80000515 	stw	zero,20(r16)
   5077c:	00000106 	br	50784 <_calloc_r+0x6c>
   50780:	8005883a 	mov	r2,r16
   50784:	10000015 	stw	zero,0(r2)
   50788:	10000115 	stw	zero,4(r2)
   5078c:	10000215 	stw	zero,8(r2)
   50790:	8005883a 	mov	r2,r16
   50794:	dfc00117 	ldw	ra,4(sp)
   50798:	dc000017 	ldw	r16,0(sp)
   5079c:	dec00204 	addi	sp,sp,8
   507a0:	f800283a 	ret
   507a4:	000b883a 	mov	r5,zero
   507a8:	8009883a 	mov	r4,r16
   507ac:	0047f700 	call	47f70 <memset>
   507b0:	8005883a 	mov	r2,r16
   507b4:	dfc00117 	ldw	ra,4(sp)
   507b8:	dc000017 	ldw	r16,0(sp)
   507bc:	dec00204 	addi	sp,sp,8
   507c0:	f800283a 	ret
   507c4:	80800404 	addi	r2,r16,16
   507c8:	003fee06 	br	50784 <__alt_data_end+0xfffe9684>
   507cc:	80800204 	addi	r2,r16,8
   507d0:	003fec06 	br	50784 <__alt_data_end+0xfffe9684>
   507d4:	0005883a 	mov	r2,zero
   507d8:	003fee06 	br	50794 <__alt_data_end+0xfffe9694>

000507dc <_fclose_r>:
   507dc:	28003926 	beq	r5,zero,508c4 <_fclose_r+0xe8>
   507e0:	defffc04 	addi	sp,sp,-16
   507e4:	dc400115 	stw	r17,4(sp)
   507e8:	dc000015 	stw	r16,0(sp)
   507ec:	dfc00315 	stw	ra,12(sp)
   507f0:	dc800215 	stw	r18,8(sp)
   507f4:	2023883a 	mov	r17,r4
   507f8:	2821883a 	mov	r16,r5
   507fc:	20000226 	beq	r4,zero,50808 <_fclose_r+0x2c>
   50800:	20800e17 	ldw	r2,56(r4)
   50804:	10002726 	beq	r2,zero,508a4 <_fclose_r+0xc8>
   50808:	8080030f 	ldh	r2,12(r16)
   5080c:	1000071e 	bne	r2,zero,5082c <_fclose_r+0x50>
   50810:	0005883a 	mov	r2,zero
   50814:	dfc00317 	ldw	ra,12(sp)
   50818:	dc800217 	ldw	r18,8(sp)
   5081c:	dc400117 	ldw	r17,4(sp)
   50820:	dc000017 	ldw	r16,0(sp)
   50824:	dec00404 	addi	sp,sp,16
   50828:	f800283a 	ret
   5082c:	800b883a 	mov	r5,r16
   50830:	8809883a 	mov	r4,r17
   50834:	004c3b00 	call	4c3b0 <__sflush_r>
   50838:	1025883a 	mov	r18,r2
   5083c:	80800b17 	ldw	r2,44(r16)
   50840:	10000426 	beq	r2,zero,50854 <_fclose_r+0x78>
   50844:	81400717 	ldw	r5,28(r16)
   50848:	8809883a 	mov	r4,r17
   5084c:	103ee83a 	callr	r2
   50850:	10001616 	blt	r2,zero,508ac <_fclose_r+0xd0>
   50854:	8080030b 	ldhu	r2,12(r16)
   50858:	1080200c 	andi	r2,r2,128
   5085c:	1000151e 	bne	r2,zero,508b4 <_fclose_r+0xd8>
   50860:	81400c17 	ldw	r5,48(r16)
   50864:	28000526 	beq	r5,zero,5087c <_fclose_r+0xa0>
   50868:	80801004 	addi	r2,r16,64
   5086c:	28800226 	beq	r5,r2,50878 <_fclose_r+0x9c>
   50870:	8809883a 	mov	r4,r17
   50874:	004cbc80 	call	4cbc8 <_free_r>
   50878:	80000c15 	stw	zero,48(r16)
   5087c:	81401117 	ldw	r5,68(r16)
   50880:	28000326 	beq	r5,zero,50890 <_fclose_r+0xb4>
   50884:	8809883a 	mov	r4,r17
   50888:	004cbc80 	call	4cbc8 <_free_r>
   5088c:	80001115 	stw	zero,68(r16)
   50890:	004c9b80 	call	4c9b8 <__sfp_lock_acquire>
   50894:	8000030d 	sth	zero,12(r16)
   50898:	004c9bc0 	call	4c9bc <__sfp_lock_release>
   5089c:	9005883a 	mov	r2,r18
   508a0:	003fdc06 	br	50814 <__alt_data_end+0xfffe9714>
   508a4:	004c9a80 	call	4c9a8 <__sinit>
   508a8:	003fd706 	br	50808 <__alt_data_end+0xfffe9708>
   508ac:	04bfffc4 	movi	r18,-1
   508b0:	003fe806 	br	50854 <__alt_data_end+0xfffe9754>
   508b4:	81400417 	ldw	r5,16(r16)
   508b8:	8809883a 	mov	r4,r17
   508bc:	004cbc80 	call	4cbc8 <_free_r>
   508c0:	003fe706 	br	50860 <__alt_data_end+0xfffe9760>
   508c4:	0005883a 	mov	r2,zero
   508c8:	f800283a 	ret

000508cc <fclose>:
   508cc:	008001b4 	movhi	r2,6
   508d0:	10a1a804 	addi	r2,r2,-31072
   508d4:	200b883a 	mov	r5,r4
   508d8:	11000017 	ldw	r4,0(r2)
   508dc:	00507dc1 	jmpi	507dc <_fclose_r>

000508e0 <__fputwc>:
   508e0:	defff804 	addi	sp,sp,-32
   508e4:	dcc00415 	stw	r19,16(sp)
   508e8:	dc800315 	stw	r18,12(sp)
   508ec:	dc000115 	stw	r16,4(sp)
   508f0:	dfc00715 	stw	ra,28(sp)
   508f4:	dd400615 	stw	r21,24(sp)
   508f8:	dd000515 	stw	r20,20(sp)
   508fc:	dc400215 	stw	r17,8(sp)
   50900:	2027883a 	mov	r19,r4
   50904:	2825883a 	mov	r18,r5
   50908:	3021883a 	mov	r16,r6
   5090c:	004d5f80 	call	4d5f8 <__locale_mb_cur_max>
   50910:	00c00044 	movi	r3,1
   50914:	10c03e26 	beq	r2,r3,50a10 <__fputwc+0x130>
   50918:	81c01704 	addi	r7,r16,92
   5091c:	900d883a 	mov	r6,r18
   50920:	d80b883a 	mov	r5,sp
   50924:	9809883a 	mov	r4,r19
   50928:	0050c400 	call	50c40 <_wcrtomb_r>
   5092c:	1029883a 	mov	r20,r2
   50930:	00bfffc4 	movi	r2,-1
   50934:	a0802026 	beq	r20,r2,509b8 <__fputwc+0xd8>
   50938:	d9400003 	ldbu	r5,0(sp)
   5093c:	a0001c26 	beq	r20,zero,509b0 <__fputwc+0xd0>
   50940:	0023883a 	mov	r17,zero
   50944:	05400284 	movi	r21,10
   50948:	00000906 	br	50970 <__fputwc+0x90>
   5094c:	80800017 	ldw	r2,0(r16)
   50950:	11400005 	stb	r5,0(r2)
   50954:	80c00017 	ldw	r3,0(r16)
   50958:	18c00044 	addi	r3,r3,1
   5095c:	80c00015 	stw	r3,0(r16)
   50960:	8c400044 	addi	r17,r17,1
   50964:	dc45883a 	add	r2,sp,r17
   50968:	8d00112e 	bgeu	r17,r20,509b0 <__fputwc+0xd0>
   5096c:	11400003 	ldbu	r5,0(r2)
   50970:	80c00217 	ldw	r3,8(r16)
   50974:	18ffffc4 	addi	r3,r3,-1
   50978:	80c00215 	stw	r3,8(r16)
   5097c:	183ff30e 	bge	r3,zero,5094c <__alt_data_end+0xfffe984c>
   50980:	80800617 	ldw	r2,24(r16)
   50984:	18801916 	blt	r3,r2,509ec <__fputwc+0x10c>
   50988:	80800017 	ldw	r2,0(r16)
   5098c:	11400005 	stb	r5,0(r2)
   50990:	80800017 	ldw	r2,0(r16)
   50994:	10c00003 	ldbu	r3,0(r2)
   50998:	10800044 	addi	r2,r2,1
   5099c:	1d402326 	beq	r3,r21,50a2c <__fputwc+0x14c>
   509a0:	80800015 	stw	r2,0(r16)
   509a4:	8c400044 	addi	r17,r17,1
   509a8:	dc45883a 	add	r2,sp,r17
   509ac:	8d3fef36 	bltu	r17,r20,5096c <__alt_data_end+0xfffe986c>
   509b0:	9005883a 	mov	r2,r18
   509b4:	00000406 	br	509c8 <__fputwc+0xe8>
   509b8:	80c0030b 	ldhu	r3,12(r16)
   509bc:	a005883a 	mov	r2,r20
   509c0:	18c01014 	ori	r3,r3,64
   509c4:	80c0030d 	sth	r3,12(r16)
   509c8:	dfc00717 	ldw	ra,28(sp)
   509cc:	dd400617 	ldw	r21,24(sp)
   509d0:	dd000517 	ldw	r20,20(sp)
   509d4:	dcc00417 	ldw	r19,16(sp)
   509d8:	dc800317 	ldw	r18,12(sp)
   509dc:	dc400217 	ldw	r17,8(sp)
   509e0:	dc000117 	ldw	r16,4(sp)
   509e4:	dec00804 	addi	sp,sp,32
   509e8:	f800283a 	ret
   509ec:	800d883a 	mov	r6,r16
   509f0:	29403fcc 	andi	r5,r5,255
   509f4:	9809883a 	mov	r4,r19
   509f8:	0050ae80 	call	50ae8 <__swbuf_r>
   509fc:	10bfffe0 	cmpeqi	r2,r2,-1
   50a00:	10803fcc 	andi	r2,r2,255
   50a04:	103fd626 	beq	r2,zero,50960 <__alt_data_end+0xfffe9860>
   50a08:	00bfffc4 	movi	r2,-1
   50a0c:	003fee06 	br	509c8 <__alt_data_end+0xfffe98c8>
   50a10:	90ffffc4 	addi	r3,r18,-1
   50a14:	01003f84 	movi	r4,254
   50a18:	20ffbf36 	bltu	r4,r3,50918 <__alt_data_end+0xfffe9818>
   50a1c:	900b883a 	mov	r5,r18
   50a20:	dc800005 	stb	r18,0(sp)
   50a24:	1029883a 	mov	r20,r2
   50a28:	003fc506 	br	50940 <__alt_data_end+0xfffe9840>
   50a2c:	800d883a 	mov	r6,r16
   50a30:	a80b883a 	mov	r5,r21
   50a34:	9809883a 	mov	r4,r19
   50a38:	0050ae80 	call	50ae8 <__swbuf_r>
   50a3c:	10bfffe0 	cmpeqi	r2,r2,-1
   50a40:	003fef06 	br	50a00 <__alt_data_end+0xfffe9900>

00050a44 <_fputwc_r>:
   50a44:	3080030b 	ldhu	r2,12(r6)
   50a48:	10c8000c 	andi	r3,r2,8192
   50a4c:	1800051e 	bne	r3,zero,50a64 <_fputwc_r+0x20>
   50a50:	30c01917 	ldw	r3,100(r6)
   50a54:	10880014 	ori	r2,r2,8192
   50a58:	3080030d 	sth	r2,12(r6)
   50a5c:	18880014 	ori	r2,r3,8192
   50a60:	30801915 	stw	r2,100(r6)
   50a64:	00508e01 	jmpi	508e0 <__fputwc>

00050a68 <fputwc>:
   50a68:	008001b4 	movhi	r2,6
   50a6c:	defffc04 	addi	sp,sp,-16
   50a70:	10a1a804 	addi	r2,r2,-31072
   50a74:	dc000115 	stw	r16,4(sp)
   50a78:	14000017 	ldw	r16,0(r2)
   50a7c:	dc400215 	stw	r17,8(sp)
   50a80:	dfc00315 	stw	ra,12(sp)
   50a84:	2023883a 	mov	r17,r4
   50a88:	80000226 	beq	r16,zero,50a94 <fputwc+0x2c>
   50a8c:	80800e17 	ldw	r2,56(r16)
   50a90:	10001026 	beq	r2,zero,50ad4 <fputwc+0x6c>
   50a94:	2880030b 	ldhu	r2,12(r5)
   50a98:	10c8000c 	andi	r3,r2,8192
   50a9c:	1800051e 	bne	r3,zero,50ab4 <fputwc+0x4c>
   50aa0:	28c01917 	ldw	r3,100(r5)
   50aa4:	10880014 	ori	r2,r2,8192
   50aa8:	2880030d 	sth	r2,12(r5)
   50aac:	18880014 	ori	r2,r3,8192
   50ab0:	28801915 	stw	r2,100(r5)
   50ab4:	280d883a 	mov	r6,r5
   50ab8:	8009883a 	mov	r4,r16
   50abc:	880b883a 	mov	r5,r17
   50ac0:	dfc00317 	ldw	ra,12(sp)
   50ac4:	dc400217 	ldw	r17,8(sp)
   50ac8:	dc000117 	ldw	r16,4(sp)
   50acc:	dec00404 	addi	sp,sp,16
   50ad0:	00508e01 	jmpi	508e0 <__fputwc>
   50ad4:	8009883a 	mov	r4,r16
   50ad8:	d9400015 	stw	r5,0(sp)
   50adc:	004c9a80 	call	4c9a8 <__sinit>
   50ae0:	d9400017 	ldw	r5,0(sp)
   50ae4:	003feb06 	br	50a94 <__alt_data_end+0xfffe9994>

00050ae8 <__swbuf_r>:
   50ae8:	defffb04 	addi	sp,sp,-20
   50aec:	dcc00315 	stw	r19,12(sp)
   50af0:	dc800215 	stw	r18,8(sp)
   50af4:	dc000015 	stw	r16,0(sp)
   50af8:	dfc00415 	stw	ra,16(sp)
   50afc:	dc400115 	stw	r17,4(sp)
   50b00:	2025883a 	mov	r18,r4
   50b04:	2827883a 	mov	r19,r5
   50b08:	3021883a 	mov	r16,r6
   50b0c:	20000226 	beq	r4,zero,50b18 <__swbuf_r+0x30>
   50b10:	20800e17 	ldw	r2,56(r4)
   50b14:	10004226 	beq	r2,zero,50c20 <__swbuf_r+0x138>
   50b18:	80800617 	ldw	r2,24(r16)
   50b1c:	8100030b 	ldhu	r4,12(r16)
   50b20:	80800215 	stw	r2,8(r16)
   50b24:	2080020c 	andi	r2,r4,8
   50b28:	10003626 	beq	r2,zero,50c04 <__swbuf_r+0x11c>
   50b2c:	80c00417 	ldw	r3,16(r16)
   50b30:	18003426 	beq	r3,zero,50c04 <__swbuf_r+0x11c>
   50b34:	2088000c 	andi	r2,r4,8192
   50b38:	9c403fcc 	andi	r17,r19,255
   50b3c:	10001a26 	beq	r2,zero,50ba8 <__swbuf_r+0xc0>
   50b40:	80800017 	ldw	r2,0(r16)
   50b44:	81000517 	ldw	r4,20(r16)
   50b48:	10c7c83a 	sub	r3,r2,r3
   50b4c:	1900200e 	bge	r3,r4,50bd0 <__swbuf_r+0xe8>
   50b50:	18c00044 	addi	r3,r3,1
   50b54:	81000217 	ldw	r4,8(r16)
   50b58:	11400044 	addi	r5,r2,1
   50b5c:	81400015 	stw	r5,0(r16)
   50b60:	213fffc4 	addi	r4,r4,-1
   50b64:	81000215 	stw	r4,8(r16)
   50b68:	14c00005 	stb	r19,0(r2)
   50b6c:	80800517 	ldw	r2,20(r16)
   50b70:	10c01e26 	beq	r2,r3,50bec <__swbuf_r+0x104>
   50b74:	8080030b 	ldhu	r2,12(r16)
   50b78:	1080004c 	andi	r2,r2,1
   50b7c:	10000226 	beq	r2,zero,50b88 <__swbuf_r+0xa0>
   50b80:	00800284 	movi	r2,10
   50b84:	88801926 	beq	r17,r2,50bec <__swbuf_r+0x104>
   50b88:	8805883a 	mov	r2,r17
   50b8c:	dfc00417 	ldw	ra,16(sp)
   50b90:	dcc00317 	ldw	r19,12(sp)
   50b94:	dc800217 	ldw	r18,8(sp)
   50b98:	dc400117 	ldw	r17,4(sp)
   50b9c:	dc000017 	ldw	r16,0(sp)
   50ba0:	dec00504 	addi	sp,sp,20
   50ba4:	f800283a 	ret
   50ba8:	81401917 	ldw	r5,100(r16)
   50bac:	00b7ffc4 	movi	r2,-8193
   50bb0:	21080014 	ori	r4,r4,8192
   50bb4:	2884703a 	and	r2,r5,r2
   50bb8:	80801915 	stw	r2,100(r16)
   50bbc:	80800017 	ldw	r2,0(r16)
   50bc0:	8100030d 	sth	r4,12(r16)
   50bc4:	81000517 	ldw	r4,20(r16)
   50bc8:	10c7c83a 	sub	r3,r2,r3
   50bcc:	193fe016 	blt	r3,r4,50b50 <__alt_data_end+0xfffe9a50>
   50bd0:	800b883a 	mov	r5,r16
   50bd4:	9009883a 	mov	r4,r18
   50bd8:	004c5cc0 	call	4c5cc <_fflush_r>
   50bdc:	1000071e 	bne	r2,zero,50bfc <__swbuf_r+0x114>
   50be0:	80800017 	ldw	r2,0(r16)
   50be4:	00c00044 	movi	r3,1
   50be8:	003fda06 	br	50b54 <__alt_data_end+0xfffe9a54>
   50bec:	800b883a 	mov	r5,r16
   50bf0:	9009883a 	mov	r4,r18
   50bf4:	004c5cc0 	call	4c5cc <_fflush_r>
   50bf8:	103fe326 	beq	r2,zero,50b88 <__alt_data_end+0xfffe9a88>
   50bfc:	00bfffc4 	movi	r2,-1
   50c00:	003fe206 	br	50b8c <__alt_data_end+0xfffe9a8c>
   50c04:	800b883a 	mov	r5,r16
   50c08:	9009883a 	mov	r4,r18
   50c0c:	004a9800 	call	4a980 <__swsetup_r>
   50c10:	103ffa1e 	bne	r2,zero,50bfc <__alt_data_end+0xfffe9afc>
   50c14:	8100030b 	ldhu	r4,12(r16)
   50c18:	80c00417 	ldw	r3,16(r16)
   50c1c:	003fc506 	br	50b34 <__alt_data_end+0xfffe9a34>
   50c20:	004c9a80 	call	4c9a8 <__sinit>
   50c24:	003fbc06 	br	50b18 <__alt_data_end+0xfffe9a18>

00050c28 <__swbuf>:
   50c28:	008001b4 	movhi	r2,6
   50c2c:	10a1a804 	addi	r2,r2,-31072
   50c30:	280d883a 	mov	r6,r5
   50c34:	200b883a 	mov	r5,r4
   50c38:	11000017 	ldw	r4,0(r2)
   50c3c:	0050ae81 	jmpi	50ae8 <__swbuf_r>

00050c40 <_wcrtomb_r>:
   50c40:	defff604 	addi	sp,sp,-40
   50c44:	008001b4 	movhi	r2,6
   50c48:	dc800815 	stw	r18,32(sp)
   50c4c:	dc400715 	stw	r17,28(sp)
   50c50:	dc000615 	stw	r16,24(sp)
   50c54:	10a1ac04 	addi	r2,r2,-31056
   50c58:	dfc00915 	stw	ra,36(sp)
   50c5c:	2021883a 	mov	r16,r4
   50c60:	3823883a 	mov	r17,r7
   50c64:	14800017 	ldw	r18,0(r2)
   50c68:	28001426 	beq	r5,zero,50cbc <_wcrtomb_r+0x7c>
   50c6c:	d9400415 	stw	r5,16(sp)
   50c70:	d9800515 	stw	r6,20(sp)
   50c74:	004d5ec0 	call	4d5ec <__locale_charset>
   50c78:	d9800517 	ldw	r6,20(sp)
   50c7c:	d9400417 	ldw	r5,16(sp)
   50c80:	100f883a 	mov	r7,r2
   50c84:	dc400015 	stw	r17,0(sp)
   50c88:	8009883a 	mov	r4,r16
   50c8c:	903ee83a 	callr	r18
   50c90:	00ffffc4 	movi	r3,-1
   50c94:	10c0031e 	bne	r2,r3,50ca4 <_wcrtomb_r+0x64>
   50c98:	88000015 	stw	zero,0(r17)
   50c9c:	00c02284 	movi	r3,138
   50ca0:	80c00015 	stw	r3,0(r16)
   50ca4:	dfc00917 	ldw	ra,36(sp)
   50ca8:	dc800817 	ldw	r18,32(sp)
   50cac:	dc400717 	ldw	r17,28(sp)
   50cb0:	dc000617 	ldw	r16,24(sp)
   50cb4:	dec00a04 	addi	sp,sp,40
   50cb8:	f800283a 	ret
   50cbc:	004d5ec0 	call	4d5ec <__locale_charset>
   50cc0:	100f883a 	mov	r7,r2
   50cc4:	dc400015 	stw	r17,0(sp)
   50cc8:	000d883a 	mov	r6,zero
   50ccc:	d9400104 	addi	r5,sp,4
   50cd0:	8009883a 	mov	r4,r16
   50cd4:	903ee83a 	callr	r18
   50cd8:	003fed06 	br	50c90 <__alt_data_end+0xfffe9b90>

00050cdc <wcrtomb>:
   50cdc:	defff604 	addi	sp,sp,-40
   50ce0:	008001b4 	movhi	r2,6
   50ce4:	dc800615 	stw	r18,24(sp)
   50ce8:	dc400515 	stw	r17,20(sp)
   50cec:	10a1a804 	addi	r2,r2,-31072
   50cf0:	dfc00915 	stw	ra,36(sp)
   50cf4:	dd000815 	stw	r20,32(sp)
   50cf8:	dcc00715 	stw	r19,28(sp)
   50cfc:	dc000415 	stw	r16,16(sp)
   50d00:	3025883a 	mov	r18,r6
   50d04:	14400017 	ldw	r17,0(r2)
   50d08:	20001926 	beq	r4,zero,50d70 <wcrtomb+0x94>
   50d0c:	008001b4 	movhi	r2,6
   50d10:	10a1ac04 	addi	r2,r2,-31056
   50d14:	15000017 	ldw	r20,0(r2)
   50d18:	2021883a 	mov	r16,r4
   50d1c:	2827883a 	mov	r19,r5
   50d20:	004d5ec0 	call	4d5ec <__locale_charset>
   50d24:	100f883a 	mov	r7,r2
   50d28:	dc800015 	stw	r18,0(sp)
   50d2c:	980d883a 	mov	r6,r19
   50d30:	800b883a 	mov	r5,r16
   50d34:	8809883a 	mov	r4,r17
   50d38:	a03ee83a 	callr	r20
   50d3c:	00ffffc4 	movi	r3,-1
   50d40:	10c0031e 	bne	r2,r3,50d50 <wcrtomb+0x74>
   50d44:	90000015 	stw	zero,0(r18)
   50d48:	00c02284 	movi	r3,138
   50d4c:	88c00015 	stw	r3,0(r17)
   50d50:	dfc00917 	ldw	ra,36(sp)
   50d54:	dd000817 	ldw	r20,32(sp)
   50d58:	dcc00717 	ldw	r19,28(sp)
   50d5c:	dc800617 	ldw	r18,24(sp)
   50d60:	dc400517 	ldw	r17,20(sp)
   50d64:	dc000417 	ldw	r16,16(sp)
   50d68:	dec00a04 	addi	sp,sp,40
   50d6c:	f800283a 	ret
   50d70:	008001b4 	movhi	r2,6
   50d74:	10a1ac04 	addi	r2,r2,-31056
   50d78:	14000017 	ldw	r16,0(r2)
   50d7c:	004d5ec0 	call	4d5ec <__locale_charset>
   50d80:	100f883a 	mov	r7,r2
   50d84:	dc800015 	stw	r18,0(sp)
   50d88:	000d883a 	mov	r6,zero
   50d8c:	d9400104 	addi	r5,sp,4
   50d90:	8809883a 	mov	r4,r17
   50d94:	803ee83a 	callr	r16
   50d98:	003fe806 	br	50d3c <__alt_data_end+0xfffe9c3c>

00050d9c <__ascii_wctomb>:
   50d9c:	28000526 	beq	r5,zero,50db4 <__ascii_wctomb+0x18>
   50da0:	00803fc4 	movi	r2,255
   50da4:	11800536 	bltu	r2,r6,50dbc <__ascii_wctomb+0x20>
   50da8:	29800005 	stb	r6,0(r5)
   50dac:	00800044 	movi	r2,1
   50db0:	f800283a 	ret
   50db4:	0005883a 	mov	r2,zero
   50db8:	f800283a 	ret
   50dbc:	00802284 	movi	r2,138
   50dc0:	20800015 	stw	r2,0(r4)
   50dc4:	00bfffc4 	movi	r2,-1
   50dc8:	f800283a 	ret

00050dcc <_wctomb_r>:
   50dcc:	008001b4 	movhi	r2,6
   50dd0:	defff904 	addi	sp,sp,-28
   50dd4:	10a1ac04 	addi	r2,r2,-31056
   50dd8:	dfc00615 	stw	ra,24(sp)
   50ddc:	dc400515 	stw	r17,20(sp)
   50de0:	dc000415 	stw	r16,16(sp)
   50de4:	3823883a 	mov	r17,r7
   50de8:	14000017 	ldw	r16,0(r2)
   50dec:	d9000115 	stw	r4,4(sp)
   50df0:	d9400215 	stw	r5,8(sp)
   50df4:	d9800315 	stw	r6,12(sp)
   50df8:	004d5ec0 	call	4d5ec <__locale_charset>
   50dfc:	d9800317 	ldw	r6,12(sp)
   50e00:	d9400217 	ldw	r5,8(sp)
   50e04:	d9000117 	ldw	r4,4(sp)
   50e08:	100f883a 	mov	r7,r2
   50e0c:	dc400015 	stw	r17,0(sp)
   50e10:	803ee83a 	callr	r16
   50e14:	dfc00617 	ldw	ra,24(sp)
   50e18:	dc400517 	ldw	r17,20(sp)
   50e1c:	dc000417 	ldw	r16,16(sp)
   50e20:	dec00704 	addi	sp,sp,28
   50e24:	f800283a 	ret

00050e28 <__udivdi3>:
   50e28:	defff504 	addi	sp,sp,-44
   50e2c:	dcc00415 	stw	r19,16(sp)
   50e30:	dc000115 	stw	r16,4(sp)
   50e34:	dfc00a15 	stw	ra,40(sp)
   50e38:	df000915 	stw	fp,36(sp)
   50e3c:	ddc00815 	stw	r23,32(sp)
   50e40:	dd800715 	stw	r22,28(sp)
   50e44:	dd400615 	stw	r21,24(sp)
   50e48:	dd000515 	stw	r20,20(sp)
   50e4c:	dc800315 	stw	r18,12(sp)
   50e50:	dc400215 	stw	r17,8(sp)
   50e54:	2027883a 	mov	r19,r4
   50e58:	2821883a 	mov	r16,r5
   50e5c:	3800411e 	bne	r7,zero,50f64 <__udivdi3+0x13c>
   50e60:	3023883a 	mov	r17,r6
   50e64:	2025883a 	mov	r18,r4
   50e68:	2980522e 	bgeu	r5,r6,50fb4 <__udivdi3+0x18c>
   50e6c:	00bfffd4 	movui	r2,65535
   50e70:	282d883a 	mov	r22,r5
   50e74:	1180a836 	bltu	r2,r6,51118 <__udivdi3+0x2f0>
   50e78:	00803fc4 	movi	r2,255
   50e7c:	1185803a 	cmpltu	r2,r2,r6
   50e80:	100490fa 	slli	r2,r2,3
   50e84:	3086d83a 	srl	r3,r6,r2
   50e88:	01000174 	movhi	r4,5
   50e8c:	211a1304 	addi	r4,r4,26700
   50e90:	20c7883a 	add	r3,r4,r3
   50e94:	18c00003 	ldbu	r3,0(r3)
   50e98:	1885883a 	add	r2,r3,r2
   50e9c:	00c00804 	movi	r3,32
   50ea0:	1887c83a 	sub	r3,r3,r2
   50ea4:	18000526 	beq	r3,zero,50ebc <__udivdi3+0x94>
   50ea8:	80e0983a 	sll	r16,r16,r3
   50eac:	9884d83a 	srl	r2,r19,r2
   50eb0:	30e2983a 	sll	r17,r6,r3
   50eb4:	98e4983a 	sll	r18,r19,r3
   50eb8:	142cb03a 	or	r22,r2,r16
   50ebc:	882ad43a 	srli	r21,r17,16
   50ec0:	b009883a 	mov	r4,r22
   50ec4:	8d3fffcc 	andi	r20,r17,65535
   50ec8:	a80b883a 	mov	r5,r21
   50ecc:	00432880 	call	43288 <__umodsi3>
   50ed0:	b009883a 	mov	r4,r22
   50ed4:	a80b883a 	mov	r5,r21
   50ed8:	1027883a 	mov	r19,r2
   50edc:	00432240 	call	43224 <__udivsi3>
   50ee0:	102d883a 	mov	r22,r2
   50ee4:	9826943a 	slli	r19,r19,16
   50ee8:	9004d43a 	srli	r2,r18,16
   50eec:	a5a1383a 	mul	r16,r20,r22
   50ef0:	14c4b03a 	or	r2,r2,r19
   50ef4:	1400052e 	bgeu	r2,r16,50f0c <__udivdi3+0xe4>
   50ef8:	1445883a 	add	r2,r2,r17
   50efc:	b0ffffc4 	addi	r3,r22,-1
   50f00:	14400136 	bltu	r2,r17,50f08 <__udivdi3+0xe0>
   50f04:	14012336 	bltu	r2,r16,51394 <__udivdi3+0x56c>
   50f08:	182d883a 	mov	r22,r3
   50f0c:	1421c83a 	sub	r16,r2,r16
   50f10:	a80b883a 	mov	r5,r21
   50f14:	8009883a 	mov	r4,r16
   50f18:	00432880 	call	43288 <__umodsi3>
   50f1c:	1027883a 	mov	r19,r2
   50f20:	a80b883a 	mov	r5,r21
   50f24:	8009883a 	mov	r4,r16
   50f28:	00432240 	call	43224 <__udivsi3>
   50f2c:	9826943a 	slli	r19,r19,16
   50f30:	a0a9383a 	mul	r20,r20,r2
   50f34:	94bfffcc 	andi	r18,r18,65535
   50f38:	94e4b03a 	or	r18,r18,r19
   50f3c:	9500052e 	bgeu	r18,r20,50f54 <__udivdi3+0x12c>
   50f40:	8ca5883a 	add	r18,r17,r18
   50f44:	10ffffc4 	addi	r3,r2,-1
   50f48:	9440f136 	bltu	r18,r17,51310 <__udivdi3+0x4e8>
   50f4c:	9500f02e 	bgeu	r18,r20,51310 <__udivdi3+0x4e8>
   50f50:	10bfff84 	addi	r2,r2,-2
   50f54:	b00c943a 	slli	r6,r22,16
   50f58:	0007883a 	mov	r3,zero
   50f5c:	3084b03a 	or	r2,r6,r2
   50f60:	00005906 	br	510c8 <__udivdi3+0x2a0>
   50f64:	29c05636 	bltu	r5,r7,510c0 <__udivdi3+0x298>
   50f68:	00bfffd4 	movui	r2,65535
   50f6c:	11c0622e 	bgeu	r2,r7,510f8 <__udivdi3+0x2d0>
   50f70:	00804034 	movhi	r2,256
   50f74:	10bfffc4 	addi	r2,r2,-1
   50f78:	11c0ee36 	bltu	r2,r7,51334 <__udivdi3+0x50c>
   50f7c:	00800404 	movi	r2,16
   50f80:	3886d83a 	srl	r3,r7,r2
   50f84:	01000174 	movhi	r4,5
   50f88:	211a1304 	addi	r4,r4,26700
   50f8c:	20c7883a 	add	r3,r4,r3
   50f90:	18c00003 	ldbu	r3,0(r3)
   50f94:	05400804 	movi	r21,32
   50f98:	1885883a 	add	r2,r3,r2
   50f9c:	a8abc83a 	sub	r21,r21,r2
   50fa0:	a800621e 	bne	r21,zero,5112c <__udivdi3+0x304>
   50fa4:	3c00e936 	bltu	r7,r16,5134c <__udivdi3+0x524>
   50fa8:	9985403a 	cmpgeu	r2,r19,r6
   50fac:	0007883a 	mov	r3,zero
   50fb0:	00004506 	br	510c8 <__udivdi3+0x2a0>
   50fb4:	3000041e 	bne	r6,zero,50fc8 <__udivdi3+0x1a0>
   50fb8:	000b883a 	mov	r5,zero
   50fbc:	01000044 	movi	r4,1
   50fc0:	00432240 	call	43224 <__udivsi3>
   50fc4:	1023883a 	mov	r17,r2
   50fc8:	00bfffd4 	movui	r2,65535
   50fcc:	14404e2e 	bgeu	r2,r17,51108 <__udivdi3+0x2e0>
   50fd0:	00804034 	movhi	r2,256
   50fd4:	10bfffc4 	addi	r2,r2,-1
   50fd8:	1440d836 	bltu	r2,r17,5133c <__udivdi3+0x514>
   50fdc:	00800404 	movi	r2,16
   50fe0:	8886d83a 	srl	r3,r17,r2
   50fe4:	01000174 	movhi	r4,5
   50fe8:	211a1304 	addi	r4,r4,26700
   50fec:	20c7883a 	add	r3,r4,r3
   50ff0:	18c00003 	ldbu	r3,0(r3)
   50ff4:	1885883a 	add	r2,r3,r2
   50ff8:	00c00804 	movi	r3,32
   50ffc:	1887c83a 	sub	r3,r3,r2
   51000:	18008f1e 	bne	r3,zero,51240 <__udivdi3+0x418>
   51004:	882ad43a 	srli	r21,r17,16
   51008:	8461c83a 	sub	r16,r16,r17
   5100c:	8d3fffcc 	andi	r20,r17,65535
   51010:	00c00044 	movi	r3,1
   51014:	8009883a 	mov	r4,r16
   51018:	a80b883a 	mov	r5,r21
   5101c:	d8c00015 	stw	r3,0(sp)
   51020:	00432880 	call	43288 <__umodsi3>
   51024:	8009883a 	mov	r4,r16
   51028:	a80b883a 	mov	r5,r21
   5102c:	1027883a 	mov	r19,r2
   51030:	00432240 	call	43224 <__udivsi3>
   51034:	9826943a 	slli	r19,r19,16
   51038:	9008d43a 	srli	r4,r18,16
   5103c:	1521383a 	mul	r16,r2,r20
   51040:	102d883a 	mov	r22,r2
   51044:	24c8b03a 	or	r4,r4,r19
   51048:	d8c00017 	ldw	r3,0(sp)
   5104c:	2400052e 	bgeu	r4,r16,51064 <__udivdi3+0x23c>
   51050:	2449883a 	add	r4,r4,r17
   51054:	b0bfffc4 	addi	r2,r22,-1
   51058:	24400136 	bltu	r4,r17,51060 <__udivdi3+0x238>
   5105c:	2400ca36 	bltu	r4,r16,51388 <__udivdi3+0x560>
   51060:	102d883a 	mov	r22,r2
   51064:	2421c83a 	sub	r16,r4,r16
   51068:	a80b883a 	mov	r5,r21
   5106c:	8009883a 	mov	r4,r16
   51070:	d8c00015 	stw	r3,0(sp)
   51074:	00432880 	call	43288 <__umodsi3>
   51078:	1027883a 	mov	r19,r2
   5107c:	a80b883a 	mov	r5,r21
   51080:	8009883a 	mov	r4,r16
   51084:	00432240 	call	43224 <__udivsi3>
   51088:	9826943a 	slli	r19,r19,16
   5108c:	1529383a 	mul	r20,r2,r20
   51090:	94bfffcc 	andi	r18,r18,65535
   51094:	94e4b03a 	or	r18,r18,r19
   51098:	d8c00017 	ldw	r3,0(sp)
   5109c:	9500052e 	bgeu	r18,r20,510b4 <__udivdi3+0x28c>
   510a0:	8ca5883a 	add	r18,r17,r18
   510a4:	113fffc4 	addi	r4,r2,-1
   510a8:	94409736 	bltu	r18,r17,51308 <__udivdi3+0x4e0>
   510ac:	9500962e 	bgeu	r18,r20,51308 <__udivdi3+0x4e0>
   510b0:	10bfff84 	addi	r2,r2,-2
   510b4:	b00c943a 	slli	r6,r22,16
   510b8:	3084b03a 	or	r2,r6,r2
   510bc:	00000206 	br	510c8 <__udivdi3+0x2a0>
   510c0:	0007883a 	mov	r3,zero
   510c4:	0005883a 	mov	r2,zero
   510c8:	dfc00a17 	ldw	ra,40(sp)
   510cc:	df000917 	ldw	fp,36(sp)
   510d0:	ddc00817 	ldw	r23,32(sp)
   510d4:	dd800717 	ldw	r22,28(sp)
   510d8:	dd400617 	ldw	r21,24(sp)
   510dc:	dd000517 	ldw	r20,20(sp)
   510e0:	dcc00417 	ldw	r19,16(sp)
   510e4:	dc800317 	ldw	r18,12(sp)
   510e8:	dc400217 	ldw	r17,8(sp)
   510ec:	dc000117 	ldw	r16,4(sp)
   510f0:	dec00b04 	addi	sp,sp,44
   510f4:	f800283a 	ret
   510f8:	00803fc4 	movi	r2,255
   510fc:	11c5803a 	cmpltu	r2,r2,r7
   51100:	100490fa 	slli	r2,r2,3
   51104:	003f9e06 	br	50f80 <__alt_data_end+0xfffe9e80>
   51108:	00803fc4 	movi	r2,255
   5110c:	1445803a 	cmpltu	r2,r2,r17
   51110:	100490fa 	slli	r2,r2,3
   51114:	003fb206 	br	50fe0 <__alt_data_end+0xfffe9ee0>
   51118:	00804034 	movhi	r2,256
   5111c:	10bfffc4 	addi	r2,r2,-1
   51120:	11808836 	bltu	r2,r6,51344 <__udivdi3+0x51c>
   51124:	00800404 	movi	r2,16
   51128:	003f5606 	br	50e84 <__alt_data_end+0xfffe9d84>
   5112c:	30aed83a 	srl	r23,r6,r2
   51130:	3d4e983a 	sll	r7,r7,r21
   51134:	80acd83a 	srl	r22,r16,r2
   51138:	9884d83a 	srl	r2,r19,r2
   5113c:	3deeb03a 	or	r23,r7,r23
   51140:	b824d43a 	srli	r18,r23,16
   51144:	8560983a 	sll	r16,r16,r21
   51148:	b009883a 	mov	r4,r22
   5114c:	900b883a 	mov	r5,r18
   51150:	3568983a 	sll	r20,r6,r21
   51154:	1420b03a 	or	r16,r2,r16
   51158:	00432880 	call	43288 <__umodsi3>
   5115c:	b009883a 	mov	r4,r22
   51160:	900b883a 	mov	r5,r18
   51164:	1023883a 	mov	r17,r2
   51168:	00432240 	call	43224 <__udivsi3>
   5116c:	8808943a 	slli	r4,r17,16
   51170:	bf3fffcc 	andi	fp,r23,65535
   51174:	8006d43a 	srli	r3,r16,16
   51178:	e0a3383a 	mul	r17,fp,r2
   5117c:	100d883a 	mov	r6,r2
   51180:	1906b03a 	or	r3,r3,r4
   51184:	1c40042e 	bgeu	r3,r17,51198 <__udivdi3+0x370>
   51188:	1dc7883a 	add	r3,r3,r23
   5118c:	10bfffc4 	addi	r2,r2,-1
   51190:	1dc0752e 	bgeu	r3,r23,51368 <__udivdi3+0x540>
   51194:	100d883a 	mov	r6,r2
   51198:	1c63c83a 	sub	r17,r3,r17
   5119c:	900b883a 	mov	r5,r18
   511a0:	8809883a 	mov	r4,r17
   511a4:	d9800015 	stw	r6,0(sp)
   511a8:	00432880 	call	43288 <__umodsi3>
   511ac:	102d883a 	mov	r22,r2
   511b0:	8809883a 	mov	r4,r17
   511b4:	900b883a 	mov	r5,r18
   511b8:	00432240 	call	43224 <__udivsi3>
   511bc:	b02c943a 	slli	r22,r22,16
   511c0:	e089383a 	mul	r4,fp,r2
   511c4:	843fffcc 	andi	r16,r16,65535
   511c8:	85a0b03a 	or	r16,r16,r22
   511cc:	d9800017 	ldw	r6,0(sp)
   511d0:	8100042e 	bgeu	r16,r4,511e4 <__udivdi3+0x3bc>
   511d4:	85e1883a 	add	r16,r16,r23
   511d8:	10ffffc4 	addi	r3,r2,-1
   511dc:	85c05e2e 	bgeu	r16,r23,51358 <__udivdi3+0x530>
   511e0:	1805883a 	mov	r2,r3
   511e4:	300c943a 	slli	r6,r6,16
   511e8:	a17fffcc 	andi	r5,r20,65535
   511ec:	a028d43a 	srli	r20,r20,16
   511f0:	3084b03a 	or	r2,r6,r2
   511f4:	10ffffcc 	andi	r3,r2,65535
   511f8:	100cd43a 	srli	r6,r2,16
   511fc:	194f383a 	mul	r7,r3,r5
   51200:	1d07383a 	mul	r3,r3,r20
   51204:	314b383a 	mul	r5,r6,r5
   51208:	3810d43a 	srli	r8,r7,16
   5120c:	8121c83a 	sub	r16,r16,r4
   51210:	1947883a 	add	r3,r3,r5
   51214:	40c7883a 	add	r3,r8,r3
   51218:	350d383a 	mul	r6,r6,r20
   5121c:	1940022e 	bgeu	r3,r5,51228 <__udivdi3+0x400>
   51220:	01000074 	movhi	r4,1
   51224:	310d883a 	add	r6,r6,r4
   51228:	1828d43a 	srli	r20,r3,16
   5122c:	a18d883a 	add	r6,r20,r6
   51230:	81803e36 	bltu	r16,r6,5132c <__udivdi3+0x504>
   51234:	81803826 	beq	r16,r6,51318 <__udivdi3+0x4f0>
   51238:	0007883a 	mov	r3,zero
   5123c:	003fa206 	br	510c8 <__alt_data_end+0xfffe9fc8>
   51240:	88e2983a 	sll	r17,r17,r3
   51244:	80a8d83a 	srl	r20,r16,r2
   51248:	80e0983a 	sll	r16,r16,r3
   5124c:	882ad43a 	srli	r21,r17,16
   51250:	9884d83a 	srl	r2,r19,r2
   51254:	a009883a 	mov	r4,r20
   51258:	a80b883a 	mov	r5,r21
   5125c:	142eb03a 	or	r23,r2,r16
   51260:	98e4983a 	sll	r18,r19,r3
   51264:	00432880 	call	43288 <__umodsi3>
   51268:	a009883a 	mov	r4,r20
   5126c:	a80b883a 	mov	r5,r21
   51270:	1021883a 	mov	r16,r2
   51274:	00432240 	call	43224 <__udivsi3>
   51278:	1039883a 	mov	fp,r2
   5127c:	8d3fffcc 	andi	r20,r17,65535
   51280:	8020943a 	slli	r16,r16,16
   51284:	b804d43a 	srli	r2,r23,16
   51288:	a72d383a 	mul	r22,r20,fp
   5128c:	1404b03a 	or	r2,r2,r16
   51290:	1580062e 	bgeu	r2,r22,512ac <__udivdi3+0x484>
   51294:	1445883a 	add	r2,r2,r17
   51298:	e0ffffc4 	addi	r3,fp,-1
   5129c:	14403836 	bltu	r2,r17,51380 <__udivdi3+0x558>
   512a0:	1580372e 	bgeu	r2,r22,51380 <__udivdi3+0x558>
   512a4:	e73fff84 	addi	fp,fp,-2
   512a8:	1445883a 	add	r2,r2,r17
   512ac:	15adc83a 	sub	r22,r2,r22
   512b0:	a80b883a 	mov	r5,r21
   512b4:	b009883a 	mov	r4,r22
   512b8:	00432880 	call	43288 <__umodsi3>
   512bc:	1027883a 	mov	r19,r2
   512c0:	b009883a 	mov	r4,r22
   512c4:	a80b883a 	mov	r5,r21
   512c8:	00432240 	call	43224 <__udivsi3>
   512cc:	9826943a 	slli	r19,r19,16
   512d0:	a0a1383a 	mul	r16,r20,r2
   512d4:	b93fffcc 	andi	r4,r23,65535
   512d8:	24c8b03a 	or	r4,r4,r19
   512dc:	2400062e 	bgeu	r4,r16,512f8 <__udivdi3+0x4d0>
   512e0:	2449883a 	add	r4,r4,r17
   512e4:	10ffffc4 	addi	r3,r2,-1
   512e8:	24402336 	bltu	r4,r17,51378 <__udivdi3+0x550>
   512ec:	2400222e 	bgeu	r4,r16,51378 <__udivdi3+0x550>
   512f0:	10bfff84 	addi	r2,r2,-2
   512f4:	2449883a 	add	r4,r4,r17
   512f8:	e038943a 	slli	fp,fp,16
   512fc:	2421c83a 	sub	r16,r4,r16
   51300:	e086b03a 	or	r3,fp,r2
   51304:	003f4306 	br	51014 <__alt_data_end+0xfffe9f14>
   51308:	2005883a 	mov	r2,r4
   5130c:	003f6906 	br	510b4 <__alt_data_end+0xfffe9fb4>
   51310:	1805883a 	mov	r2,r3
   51314:	003f0f06 	br	50f54 <__alt_data_end+0xfffe9e54>
   51318:	1806943a 	slli	r3,r3,16
   5131c:	9d66983a 	sll	r19,r19,r21
   51320:	39ffffcc 	andi	r7,r7,65535
   51324:	19c7883a 	add	r3,r3,r7
   51328:	98ffc32e 	bgeu	r19,r3,51238 <__alt_data_end+0xfffea138>
   5132c:	10bfffc4 	addi	r2,r2,-1
   51330:	003fc106 	br	51238 <__alt_data_end+0xfffea138>
   51334:	00800604 	movi	r2,24
   51338:	003f1106 	br	50f80 <__alt_data_end+0xfffe9e80>
   5133c:	00800604 	movi	r2,24
   51340:	003f2706 	br	50fe0 <__alt_data_end+0xfffe9ee0>
   51344:	00800604 	movi	r2,24
   51348:	003ece06 	br	50e84 <__alt_data_end+0xfffe9d84>
   5134c:	0007883a 	mov	r3,zero
   51350:	00800044 	movi	r2,1
   51354:	003f5c06 	br	510c8 <__alt_data_end+0xfffe9fc8>
   51358:	813fa12e 	bgeu	r16,r4,511e0 <__alt_data_end+0xfffea0e0>
   5135c:	10bfff84 	addi	r2,r2,-2
   51360:	85e1883a 	add	r16,r16,r23
   51364:	003f9f06 	br	511e4 <__alt_data_end+0xfffea0e4>
   51368:	1c7f8a2e 	bgeu	r3,r17,51194 <__alt_data_end+0xfffea094>
   5136c:	31bfff84 	addi	r6,r6,-2
   51370:	1dc7883a 	add	r3,r3,r23
   51374:	003f8806 	br	51198 <__alt_data_end+0xfffea098>
   51378:	1805883a 	mov	r2,r3
   5137c:	003fde06 	br	512f8 <__alt_data_end+0xfffea1f8>
   51380:	1839883a 	mov	fp,r3
   51384:	003fc906 	br	512ac <__alt_data_end+0xfffea1ac>
   51388:	b5bfff84 	addi	r22,r22,-2
   5138c:	2449883a 	add	r4,r4,r17
   51390:	003f3406 	br	51064 <__alt_data_end+0xfffe9f64>
   51394:	b5bfff84 	addi	r22,r22,-2
   51398:	1445883a 	add	r2,r2,r17
   5139c:	003edb06 	br	50f0c <__alt_data_end+0xfffe9e0c>

000513a0 <__umoddi3>:
   513a0:	defff404 	addi	sp,sp,-48
   513a4:	df000a15 	stw	fp,40(sp)
   513a8:	dc400315 	stw	r17,12(sp)
   513ac:	dc000215 	stw	r16,8(sp)
   513b0:	dfc00b15 	stw	ra,44(sp)
   513b4:	ddc00915 	stw	r23,36(sp)
   513b8:	dd800815 	stw	r22,32(sp)
   513bc:	dd400715 	stw	r21,28(sp)
   513c0:	dd000615 	stw	r20,24(sp)
   513c4:	dcc00515 	stw	r19,20(sp)
   513c8:	dc800415 	stw	r18,16(sp)
   513cc:	2021883a 	mov	r16,r4
   513d0:	2823883a 	mov	r17,r5
   513d4:	2839883a 	mov	fp,r5
   513d8:	38003c1e 	bne	r7,zero,514cc <__umoddi3+0x12c>
   513dc:	3027883a 	mov	r19,r6
   513e0:	2029883a 	mov	r20,r4
   513e4:	2980512e 	bgeu	r5,r6,5152c <__umoddi3+0x18c>
   513e8:	00bfffd4 	movui	r2,65535
   513ec:	11809a36 	bltu	r2,r6,51658 <__umoddi3+0x2b8>
   513f0:	01003fc4 	movi	r4,255
   513f4:	2189803a 	cmpltu	r4,r4,r6
   513f8:	200890fa 	slli	r4,r4,3
   513fc:	3104d83a 	srl	r2,r6,r4
   51400:	00c00174 	movhi	r3,5
   51404:	18da1304 	addi	r3,r3,26700
   51408:	1885883a 	add	r2,r3,r2
   5140c:	10c00003 	ldbu	r3,0(r2)
   51410:	00800804 	movi	r2,32
   51414:	1909883a 	add	r4,r3,r4
   51418:	1125c83a 	sub	r18,r2,r4
   5141c:	90000526 	beq	r18,zero,51434 <__umoddi3+0x94>
   51420:	8ca2983a 	sll	r17,r17,r18
   51424:	8108d83a 	srl	r4,r16,r4
   51428:	34a6983a 	sll	r19,r6,r18
   5142c:	84a8983a 	sll	r20,r16,r18
   51430:	2478b03a 	or	fp,r4,r17
   51434:	982ed43a 	srli	r23,r19,16
   51438:	e009883a 	mov	r4,fp
   5143c:	9dbfffcc 	andi	r22,r19,65535
   51440:	b80b883a 	mov	r5,r23
   51444:	00432880 	call	43288 <__umodsi3>
   51448:	e009883a 	mov	r4,fp
   5144c:	b80b883a 	mov	r5,r23
   51450:	102b883a 	mov	r21,r2
   51454:	00432240 	call	43224 <__udivsi3>
   51458:	a806943a 	slli	r3,r21,16
   5145c:	a008d43a 	srli	r4,r20,16
   51460:	b085383a 	mul	r2,r22,r2
   51464:	20c8b03a 	or	r4,r4,r3
   51468:	2080032e 	bgeu	r4,r2,51478 <__umoddi3+0xd8>
   5146c:	24c9883a 	add	r4,r4,r19
   51470:	24c00136 	bltu	r4,r19,51478 <__umoddi3+0xd8>
   51474:	20811036 	bltu	r4,r2,518b8 <__umoddi3+0x518>
   51478:	20abc83a 	sub	r21,r4,r2
   5147c:	b80b883a 	mov	r5,r23
   51480:	a809883a 	mov	r4,r21
   51484:	00432880 	call	43288 <__umodsi3>
   51488:	1023883a 	mov	r17,r2
   5148c:	b80b883a 	mov	r5,r23
   51490:	a809883a 	mov	r4,r21
   51494:	00432240 	call	43224 <__udivsi3>
   51498:	8822943a 	slli	r17,r17,16
   5149c:	b085383a 	mul	r2,r22,r2
   514a0:	a0ffffcc 	andi	r3,r20,65535
   514a4:	1c46b03a 	or	r3,r3,r17
   514a8:	1880042e 	bgeu	r3,r2,514bc <__umoddi3+0x11c>
   514ac:	1cc7883a 	add	r3,r3,r19
   514b0:	1cc00236 	bltu	r3,r19,514bc <__umoddi3+0x11c>
   514b4:	1880012e 	bgeu	r3,r2,514bc <__umoddi3+0x11c>
   514b8:	1cc7883a 	add	r3,r3,r19
   514bc:	1885c83a 	sub	r2,r3,r2
   514c0:	1484d83a 	srl	r2,r2,r18
   514c4:	0007883a 	mov	r3,zero
   514c8:	00004f06 	br	51608 <__umoddi3+0x268>
   514cc:	29c04c36 	bltu	r5,r7,51600 <__umoddi3+0x260>
   514d0:	00bfffd4 	movui	r2,65535
   514d4:	11c0582e 	bgeu	r2,r7,51638 <__umoddi3+0x298>
   514d8:	00804034 	movhi	r2,256
   514dc:	10bfffc4 	addi	r2,r2,-1
   514e0:	11c0e736 	bltu	r2,r7,51880 <__umoddi3+0x4e0>
   514e4:	01000404 	movi	r4,16
   514e8:	3904d83a 	srl	r2,r7,r4
   514ec:	00c00174 	movhi	r3,5
   514f0:	18da1304 	addi	r3,r3,26700
   514f4:	1885883a 	add	r2,r3,r2
   514f8:	14c00003 	ldbu	r19,0(r2)
   514fc:	00c00804 	movi	r3,32
   51500:	9927883a 	add	r19,r19,r4
   51504:	1ce9c83a 	sub	r20,r3,r19
   51508:	a000581e 	bne	r20,zero,5166c <__umoddi3+0x2cc>
   5150c:	3c400136 	bltu	r7,r17,51514 <__umoddi3+0x174>
   51510:	8180eb36 	bltu	r16,r6,518c0 <__umoddi3+0x520>
   51514:	8185c83a 	sub	r2,r16,r6
   51518:	89e3c83a 	sub	r17,r17,r7
   5151c:	8089803a 	cmpltu	r4,r16,r2
   51520:	8939c83a 	sub	fp,r17,r4
   51524:	e007883a 	mov	r3,fp
   51528:	00003706 	br	51608 <__umoddi3+0x268>
   5152c:	3000041e 	bne	r6,zero,51540 <__umoddi3+0x1a0>
   51530:	000b883a 	mov	r5,zero
   51534:	01000044 	movi	r4,1
   51538:	00432240 	call	43224 <__udivsi3>
   5153c:	1027883a 	mov	r19,r2
   51540:	00bfffd4 	movui	r2,65535
   51544:	14c0402e 	bgeu	r2,r19,51648 <__umoddi3+0x2a8>
   51548:	00804034 	movhi	r2,256
   5154c:	10bfffc4 	addi	r2,r2,-1
   51550:	14c0cd36 	bltu	r2,r19,51888 <__umoddi3+0x4e8>
   51554:	00800404 	movi	r2,16
   51558:	9886d83a 	srl	r3,r19,r2
   5155c:	01000174 	movhi	r4,5
   51560:	211a1304 	addi	r4,r4,26700
   51564:	20c7883a 	add	r3,r4,r3
   51568:	18c00003 	ldbu	r3,0(r3)
   5156c:	1887883a 	add	r3,r3,r2
   51570:	00800804 	movi	r2,32
   51574:	10e5c83a 	sub	r18,r2,r3
   51578:	9000901e 	bne	r18,zero,517bc <__umoddi3+0x41c>
   5157c:	982cd43a 	srli	r22,r19,16
   51580:	8ce3c83a 	sub	r17,r17,r19
   51584:	9d7fffcc 	andi	r21,r19,65535
   51588:	b00b883a 	mov	r5,r22
   5158c:	8809883a 	mov	r4,r17
   51590:	00432880 	call	43288 <__umodsi3>
   51594:	8809883a 	mov	r4,r17
   51598:	b00b883a 	mov	r5,r22
   5159c:	1021883a 	mov	r16,r2
   515a0:	00432240 	call	43224 <__udivsi3>
   515a4:	8006943a 	slli	r3,r16,16
   515a8:	a008d43a 	srli	r4,r20,16
   515ac:	1545383a 	mul	r2,r2,r21
   515b0:	20c8b03a 	or	r4,r4,r3
   515b4:	2080042e 	bgeu	r4,r2,515c8 <__umoddi3+0x228>
   515b8:	24c9883a 	add	r4,r4,r19
   515bc:	24c00236 	bltu	r4,r19,515c8 <__umoddi3+0x228>
   515c0:	2080012e 	bgeu	r4,r2,515c8 <__umoddi3+0x228>
   515c4:	24c9883a 	add	r4,r4,r19
   515c8:	20a1c83a 	sub	r16,r4,r2
   515cc:	b00b883a 	mov	r5,r22
   515d0:	8009883a 	mov	r4,r16
   515d4:	00432880 	call	43288 <__umodsi3>
   515d8:	1023883a 	mov	r17,r2
   515dc:	b00b883a 	mov	r5,r22
   515e0:	8009883a 	mov	r4,r16
   515e4:	00432240 	call	43224 <__udivsi3>
   515e8:	8822943a 	slli	r17,r17,16
   515ec:	1545383a 	mul	r2,r2,r21
   515f0:	a53fffcc 	andi	r20,r20,65535
   515f4:	a446b03a 	or	r3,r20,r17
   515f8:	18bfb02e 	bgeu	r3,r2,514bc <__alt_data_end+0xfffea3bc>
   515fc:	003fab06 	br	514ac <__alt_data_end+0xfffea3ac>
   51600:	2005883a 	mov	r2,r4
   51604:	2807883a 	mov	r3,r5
   51608:	dfc00b17 	ldw	ra,44(sp)
   5160c:	df000a17 	ldw	fp,40(sp)
   51610:	ddc00917 	ldw	r23,36(sp)
   51614:	dd800817 	ldw	r22,32(sp)
   51618:	dd400717 	ldw	r21,28(sp)
   5161c:	dd000617 	ldw	r20,24(sp)
   51620:	dcc00517 	ldw	r19,20(sp)
   51624:	dc800417 	ldw	r18,16(sp)
   51628:	dc400317 	ldw	r17,12(sp)
   5162c:	dc000217 	ldw	r16,8(sp)
   51630:	dec00c04 	addi	sp,sp,48
   51634:	f800283a 	ret
   51638:	04c03fc4 	movi	r19,255
   5163c:	99c9803a 	cmpltu	r4,r19,r7
   51640:	200890fa 	slli	r4,r4,3
   51644:	003fa806 	br	514e8 <__alt_data_end+0xfffea3e8>
   51648:	00803fc4 	movi	r2,255
   5164c:	14c5803a 	cmpltu	r2,r2,r19
   51650:	100490fa 	slli	r2,r2,3
   51654:	003fc006 	br	51558 <__alt_data_end+0xfffea458>
   51658:	00804034 	movhi	r2,256
   5165c:	10bfffc4 	addi	r2,r2,-1
   51660:	11808b36 	bltu	r2,r6,51890 <__umoddi3+0x4f0>
   51664:	01000404 	movi	r4,16
   51668:	003f6406 	br	513fc <__alt_data_end+0xfffea2fc>
   5166c:	34c4d83a 	srl	r2,r6,r19
   51670:	3d0e983a 	sll	r7,r7,r20
   51674:	8cf8d83a 	srl	fp,r17,r19
   51678:	8d10983a 	sll	r8,r17,r20
   5167c:	38aab03a 	or	r21,r7,r2
   51680:	a82cd43a 	srli	r22,r21,16
   51684:	84e2d83a 	srl	r17,r16,r19
   51688:	e009883a 	mov	r4,fp
   5168c:	b00b883a 	mov	r5,r22
   51690:	8a22b03a 	or	r17,r17,r8
   51694:	3524983a 	sll	r18,r6,r20
   51698:	00432880 	call	43288 <__umodsi3>
   5169c:	e009883a 	mov	r4,fp
   516a0:	b00b883a 	mov	r5,r22
   516a4:	102f883a 	mov	r23,r2
   516a8:	00432240 	call	43224 <__udivsi3>
   516ac:	100d883a 	mov	r6,r2
   516b0:	b808943a 	slli	r4,r23,16
   516b4:	aa3fffcc 	andi	r8,r21,65535
   516b8:	8804d43a 	srli	r2,r17,16
   516bc:	41af383a 	mul	r23,r8,r6
   516c0:	8520983a 	sll	r16,r16,r20
   516c4:	1104b03a 	or	r2,r2,r4
   516c8:	15c0042e 	bgeu	r2,r23,516dc <__umoddi3+0x33c>
   516cc:	1545883a 	add	r2,r2,r21
   516d0:	30ffffc4 	addi	r3,r6,-1
   516d4:	1540742e 	bgeu	r2,r21,518a8 <__umoddi3+0x508>
   516d8:	180d883a 	mov	r6,r3
   516dc:	15efc83a 	sub	r23,r2,r23
   516e0:	b00b883a 	mov	r5,r22
   516e4:	b809883a 	mov	r4,r23
   516e8:	d9800115 	stw	r6,4(sp)
   516ec:	da000015 	stw	r8,0(sp)
   516f0:	00432880 	call	43288 <__umodsi3>
   516f4:	b00b883a 	mov	r5,r22
   516f8:	b809883a 	mov	r4,r23
   516fc:	1039883a 	mov	fp,r2
   51700:	00432240 	call	43224 <__udivsi3>
   51704:	da000017 	ldw	r8,0(sp)
   51708:	e038943a 	slli	fp,fp,16
   5170c:	100b883a 	mov	r5,r2
   51710:	4089383a 	mul	r4,r8,r2
   51714:	8a3fffcc 	andi	r8,r17,65535
   51718:	4710b03a 	or	r8,r8,fp
   5171c:	d9800117 	ldw	r6,4(sp)
   51720:	4100042e 	bgeu	r8,r4,51734 <__umoddi3+0x394>
   51724:	4551883a 	add	r8,r8,r21
   51728:	10bfffc4 	addi	r2,r2,-1
   5172c:	45405a2e 	bgeu	r8,r21,51898 <__umoddi3+0x4f8>
   51730:	100b883a 	mov	r5,r2
   51734:	300c943a 	slli	r6,r6,16
   51738:	91ffffcc 	andi	r7,r18,65535
   5173c:	9004d43a 	srli	r2,r18,16
   51740:	314cb03a 	or	r6,r6,r5
   51744:	317fffcc 	andi	r5,r6,65535
   51748:	300cd43a 	srli	r6,r6,16
   5174c:	29d3383a 	mul	r9,r5,r7
   51750:	288b383a 	mul	r5,r5,r2
   51754:	31cf383a 	mul	r7,r6,r7
   51758:	4806d43a 	srli	r3,r9,16
   5175c:	4111c83a 	sub	r8,r8,r4
   51760:	29cb883a 	add	r5,r5,r7
   51764:	194b883a 	add	r5,r3,r5
   51768:	3085383a 	mul	r2,r6,r2
   5176c:	29c0022e 	bgeu	r5,r7,51778 <__umoddi3+0x3d8>
   51770:	00c00074 	movhi	r3,1
   51774:	10c5883a 	add	r2,r2,r3
   51778:	2808d43a 	srli	r4,r5,16
   5177c:	280a943a 	slli	r5,r5,16
   51780:	4a7fffcc 	andi	r9,r9,65535
   51784:	2085883a 	add	r2,r4,r2
   51788:	2a4b883a 	add	r5,r5,r9
   5178c:	40803636 	bltu	r8,r2,51868 <__umoddi3+0x4c8>
   51790:	40804d26 	beq	r8,r2,518c8 <__umoddi3+0x528>
   51794:	4089c83a 	sub	r4,r8,r2
   51798:	280f883a 	mov	r7,r5
   5179c:	81cfc83a 	sub	r7,r16,r7
   517a0:	81c7803a 	cmpltu	r3,r16,r7
   517a4:	20c7c83a 	sub	r3,r4,r3
   517a8:	1cc4983a 	sll	r2,r3,r19
   517ac:	3d0ed83a 	srl	r7,r7,r20
   517b0:	1d06d83a 	srl	r3,r3,r20
   517b4:	11c4b03a 	or	r2,r2,r7
   517b8:	003f9306 	br	51608 <__alt_data_end+0xfffea508>
   517bc:	9ca6983a 	sll	r19,r19,r18
   517c0:	88e8d83a 	srl	r20,r17,r3
   517c4:	80c4d83a 	srl	r2,r16,r3
   517c8:	982cd43a 	srli	r22,r19,16
   517cc:	8ca2983a 	sll	r17,r17,r18
   517d0:	a009883a 	mov	r4,r20
   517d4:	b00b883a 	mov	r5,r22
   517d8:	1478b03a 	or	fp,r2,r17
   517dc:	00432880 	call	43288 <__umodsi3>
   517e0:	a009883a 	mov	r4,r20
   517e4:	b00b883a 	mov	r5,r22
   517e8:	1023883a 	mov	r17,r2
   517ec:	00432240 	call	43224 <__udivsi3>
   517f0:	9d7fffcc 	andi	r21,r19,65535
   517f4:	880a943a 	slli	r5,r17,16
   517f8:	e008d43a 	srli	r4,fp,16
   517fc:	a885383a 	mul	r2,r21,r2
   51800:	84a8983a 	sll	r20,r16,r18
   51804:	2148b03a 	or	r4,r4,r5
   51808:	2080042e 	bgeu	r4,r2,5181c <__umoddi3+0x47c>
   5180c:	24c9883a 	add	r4,r4,r19
   51810:	24c00236 	bltu	r4,r19,5181c <__umoddi3+0x47c>
   51814:	2080012e 	bgeu	r4,r2,5181c <__umoddi3+0x47c>
   51818:	24c9883a 	add	r4,r4,r19
   5181c:	20a3c83a 	sub	r17,r4,r2
   51820:	b00b883a 	mov	r5,r22
   51824:	8809883a 	mov	r4,r17
   51828:	00432880 	call	43288 <__umodsi3>
   5182c:	102f883a 	mov	r23,r2
   51830:	8809883a 	mov	r4,r17
   51834:	b00b883a 	mov	r5,r22
   51838:	00432240 	call	43224 <__udivsi3>
   5183c:	b82e943a 	slli	r23,r23,16
   51840:	a885383a 	mul	r2,r21,r2
   51844:	e13fffcc 	andi	r4,fp,65535
   51848:	25c8b03a 	or	r4,r4,r23
   5184c:	2080042e 	bgeu	r4,r2,51860 <__umoddi3+0x4c0>
   51850:	24c9883a 	add	r4,r4,r19
   51854:	24c00236 	bltu	r4,r19,51860 <__umoddi3+0x4c0>
   51858:	2080012e 	bgeu	r4,r2,51860 <__umoddi3+0x4c0>
   5185c:	24c9883a 	add	r4,r4,r19
   51860:	20a3c83a 	sub	r17,r4,r2
   51864:	003f4806 	br	51588 <__alt_data_end+0xfffea488>
   51868:	2c8fc83a 	sub	r7,r5,r18
   5186c:	1545c83a 	sub	r2,r2,r21
   51870:	29cb803a 	cmpltu	r5,r5,r7
   51874:	1145c83a 	sub	r2,r2,r5
   51878:	4089c83a 	sub	r4,r8,r2
   5187c:	003fc706 	br	5179c <__alt_data_end+0xfffea69c>
   51880:	01000604 	movi	r4,24
   51884:	003f1806 	br	514e8 <__alt_data_end+0xfffea3e8>
   51888:	00800604 	movi	r2,24
   5188c:	003f3206 	br	51558 <__alt_data_end+0xfffea458>
   51890:	01000604 	movi	r4,24
   51894:	003ed906 	br	513fc <__alt_data_end+0xfffea2fc>
   51898:	413fa52e 	bgeu	r8,r4,51730 <__alt_data_end+0xfffea630>
   5189c:	297fff84 	addi	r5,r5,-2
   518a0:	4551883a 	add	r8,r8,r21
   518a4:	003fa306 	br	51734 <__alt_data_end+0xfffea634>
   518a8:	15ff8b2e 	bgeu	r2,r23,516d8 <__alt_data_end+0xfffea5d8>
   518ac:	31bfff84 	addi	r6,r6,-2
   518b0:	1545883a 	add	r2,r2,r21
   518b4:	003f8906 	br	516dc <__alt_data_end+0xfffea5dc>
   518b8:	24c9883a 	add	r4,r4,r19
   518bc:	003eee06 	br	51478 <__alt_data_end+0xfffea378>
   518c0:	8005883a 	mov	r2,r16
   518c4:	003f1706 	br	51524 <__alt_data_end+0xfffea424>
   518c8:	817fe736 	bltu	r16,r5,51868 <__alt_data_end+0xfffea768>
   518cc:	280f883a 	mov	r7,r5
   518d0:	0009883a 	mov	r4,zero
   518d4:	003fb106 	br	5179c <__alt_data_end+0xfffea69c>

000518d8 <__ledf2>:
   518d8:	2804d53a 	srli	r2,r5,20
   518dc:	3810d53a 	srli	r8,r7,20
   518e0:	00c00434 	movhi	r3,16
   518e4:	18ffffc4 	addi	r3,r3,-1
   518e8:	1081ffcc 	andi	r2,r2,2047
   518ec:	0241ffc4 	movi	r9,2047
   518f0:	28d4703a 	and	r10,r5,r3
   518f4:	4201ffcc 	andi	r8,r8,2047
   518f8:	38c6703a 	and	r3,r7,r3
   518fc:	280ad7fa 	srli	r5,r5,31
   51900:	380ed7fa 	srli	r7,r7,31
   51904:	12401f26 	beq	r2,r9,51984 <__ledf2+0xac>
   51908:	0241ffc4 	movi	r9,2047
   5190c:	42401426 	beq	r8,r9,51960 <__ledf2+0x88>
   51910:	1000091e 	bne	r2,zero,51938 <__ledf2+0x60>
   51914:	2296b03a 	or	r11,r4,r10
   51918:	5813003a 	cmpeq	r9,r11,zero
   5191c:	29403fcc 	andi	r5,r5,255
   51920:	40000a1e 	bne	r8,zero,5194c <__ledf2+0x74>
   51924:	30d8b03a 	or	r12,r6,r3
   51928:	6000081e 	bne	r12,zero,5194c <__ledf2+0x74>
   5192c:	0005883a 	mov	r2,zero
   51930:	5800111e 	bne	r11,zero,51978 <__ledf2+0xa0>
   51934:	f800283a 	ret
   51938:	29403fcc 	andi	r5,r5,255
   5193c:	40000c1e 	bne	r8,zero,51970 <__ledf2+0x98>
   51940:	30d2b03a 	or	r9,r6,r3
   51944:	48000c26 	beq	r9,zero,51978 <__ledf2+0xa0>
   51948:	0013883a 	mov	r9,zero
   5194c:	39c03fcc 	andi	r7,r7,255
   51950:	48000826 	beq	r9,zero,51974 <__ledf2+0x9c>
   51954:	38001126 	beq	r7,zero,5199c <__ledf2+0xc4>
   51958:	00800044 	movi	r2,1
   5195c:	f800283a 	ret
   51960:	30d2b03a 	or	r9,r6,r3
   51964:	483fea26 	beq	r9,zero,51910 <__alt_data_end+0xfffea810>
   51968:	00800084 	movi	r2,2
   5196c:	f800283a 	ret
   51970:	39c03fcc 	andi	r7,r7,255
   51974:	39400726 	beq	r7,r5,51994 <__ledf2+0xbc>
   51978:	2800081e 	bne	r5,zero,5199c <__ledf2+0xc4>
   5197c:	00800044 	movi	r2,1
   51980:	f800283a 	ret
   51984:	2292b03a 	or	r9,r4,r10
   51988:	483fdf26 	beq	r9,zero,51908 <__alt_data_end+0xfffea808>
   5198c:	00800084 	movi	r2,2
   51990:	f800283a 	ret
   51994:	4080030e 	bge	r8,r2,519a4 <__ledf2+0xcc>
   51998:	383fef26 	beq	r7,zero,51958 <__alt_data_end+0xfffea858>
   5199c:	00bfffc4 	movi	r2,-1
   519a0:	f800283a 	ret
   519a4:	123feb16 	blt	r2,r8,51954 <__alt_data_end+0xfffea854>
   519a8:	1abff336 	bltu	r3,r10,51978 <__alt_data_end+0xfffea878>
   519ac:	50c00326 	beq	r10,r3,519bc <__ledf2+0xe4>
   519b0:	50c0042e 	bgeu	r10,r3,519c4 <__ledf2+0xec>
   519b4:	283fe81e 	bne	r5,zero,51958 <__alt_data_end+0xfffea858>
   519b8:	003ff806 	br	5199c <__alt_data_end+0xfffea89c>
   519bc:	313fee36 	bltu	r6,r4,51978 <__alt_data_end+0xfffea878>
   519c0:	21bffc36 	bltu	r4,r6,519b4 <__alt_data_end+0xfffea8b4>
   519c4:	0005883a 	mov	r2,zero
   519c8:	f800283a 	ret

000519cc <__floatunsidf>:
   519cc:	defffe04 	addi	sp,sp,-8
   519d0:	dc000015 	stw	r16,0(sp)
   519d4:	dfc00115 	stw	ra,4(sp)
   519d8:	2021883a 	mov	r16,r4
   519dc:	20002226 	beq	r4,zero,51a68 <__floatunsidf+0x9c>
   519e0:	0046f000 	call	46f00 <__clzsi2>
   519e4:	01010784 	movi	r4,1054
   519e8:	2089c83a 	sub	r4,r4,r2
   519ec:	01810cc4 	movi	r6,1075
   519f0:	310dc83a 	sub	r6,r6,r4
   519f4:	00c007c4 	movi	r3,31
   519f8:	1980120e 	bge	r3,r6,51a44 <__floatunsidf+0x78>
   519fc:	00c104c4 	movi	r3,1043
   51a00:	1907c83a 	sub	r3,r3,r4
   51a04:	80ca983a 	sll	r5,r16,r3
   51a08:	00800434 	movhi	r2,16
   51a0c:	10bfffc4 	addi	r2,r2,-1
   51a10:	2101ffcc 	andi	r4,r4,2047
   51a14:	0021883a 	mov	r16,zero
   51a18:	288a703a 	and	r5,r5,r2
   51a1c:	2008953a 	slli	r4,r4,20
   51a20:	00c00434 	movhi	r3,16
   51a24:	18ffffc4 	addi	r3,r3,-1
   51a28:	28c6703a 	and	r3,r5,r3
   51a2c:	8005883a 	mov	r2,r16
   51a30:	1906b03a 	or	r3,r3,r4
   51a34:	dfc00117 	ldw	ra,4(sp)
   51a38:	dc000017 	ldw	r16,0(sp)
   51a3c:	dec00204 	addi	sp,sp,8
   51a40:	f800283a 	ret
   51a44:	00c002c4 	movi	r3,11
   51a48:	188bc83a 	sub	r5,r3,r2
   51a4c:	814ad83a 	srl	r5,r16,r5
   51a50:	00c00434 	movhi	r3,16
   51a54:	18ffffc4 	addi	r3,r3,-1
   51a58:	81a0983a 	sll	r16,r16,r6
   51a5c:	2101ffcc 	andi	r4,r4,2047
   51a60:	28ca703a 	and	r5,r5,r3
   51a64:	003fed06 	br	51a1c <__alt_data_end+0xfffea91c>
   51a68:	0009883a 	mov	r4,zero
   51a6c:	000b883a 	mov	r5,zero
   51a70:	003fea06 	br	51a1c <__alt_data_end+0xfffea91c>

00051a74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   51a74:	defffe04 	addi	sp,sp,-8
   51a78:	dfc00115 	stw	ra,4(sp)
   51a7c:	df000015 	stw	fp,0(sp)
   51a80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   51a84:	d0a00f17 	ldw	r2,-32708(gp)
   51a88:	10000326 	beq	r2,zero,51a98 <alt_get_errno+0x24>
   51a8c:	d0a00f17 	ldw	r2,-32708(gp)
   51a90:	103ee83a 	callr	r2
   51a94:	00000106 	br	51a9c <alt_get_errno+0x28>
   51a98:	d0a71404 	addi	r2,gp,-25520
}
   51a9c:	e037883a 	mov	sp,fp
   51aa0:	dfc00117 	ldw	ra,4(sp)
   51aa4:	df000017 	ldw	fp,0(sp)
   51aa8:	dec00204 	addi	sp,sp,8
   51aac:	f800283a 	ret

00051ab0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   51ab0:	defffb04 	addi	sp,sp,-20
   51ab4:	dfc00415 	stw	ra,16(sp)
   51ab8:	df000315 	stw	fp,12(sp)
   51abc:	df000304 	addi	fp,sp,12
   51ac0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   51ac4:	e0bfff17 	ldw	r2,-4(fp)
   51ac8:	10000616 	blt	r2,zero,51ae4 <close+0x34>
   51acc:	e0bfff17 	ldw	r2,-4(fp)
   51ad0:	10c00324 	muli	r3,r2,12
   51ad4:	00800174 	movhi	r2,5
   51ad8:	109d1304 	addi	r2,r2,29772
   51adc:	1885883a 	add	r2,r3,r2
   51ae0:	00000106 	br	51ae8 <close+0x38>
   51ae4:	0005883a 	mov	r2,zero
   51ae8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   51aec:	e0bffd17 	ldw	r2,-12(fp)
   51af0:	10001926 	beq	r2,zero,51b58 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   51af4:	e0bffd17 	ldw	r2,-12(fp)
   51af8:	10800017 	ldw	r2,0(r2)
   51afc:	10800417 	ldw	r2,16(r2)
   51b00:	10000626 	beq	r2,zero,51b1c <close+0x6c>
   51b04:	e0bffd17 	ldw	r2,-12(fp)
   51b08:	10800017 	ldw	r2,0(r2)
   51b0c:	10800417 	ldw	r2,16(r2)
   51b10:	e13ffd17 	ldw	r4,-12(fp)
   51b14:	103ee83a 	callr	r2
   51b18:	00000106 	br	51b20 <close+0x70>
   51b1c:	0005883a 	mov	r2,zero
   51b20:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   51b24:	e13fff17 	ldw	r4,-4(fp)
   51b28:	00523c40 	call	523c4 <alt_release_fd>
    if (rval < 0)
   51b2c:	e0bffe17 	ldw	r2,-8(fp)
   51b30:	1000070e 	bge	r2,zero,51b50 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   51b34:	0051a740 	call	51a74 <alt_get_errno>
   51b38:	1007883a 	mov	r3,r2
   51b3c:	e0bffe17 	ldw	r2,-8(fp)
   51b40:	0085c83a 	sub	r2,zero,r2
   51b44:	18800015 	stw	r2,0(r3)
      return -1;
   51b48:	00bfffc4 	movi	r2,-1
   51b4c:	00000706 	br	51b6c <close+0xbc>
    }
    return 0;
   51b50:	0005883a 	mov	r2,zero
   51b54:	00000506 	br	51b6c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   51b58:	0051a740 	call	51a74 <alt_get_errno>
   51b5c:	1007883a 	mov	r3,r2
   51b60:	00801444 	movi	r2,81
   51b64:	18800015 	stw	r2,0(r3)
    return -1;
   51b68:	00bfffc4 	movi	r2,-1
  }
}
   51b6c:	e037883a 	mov	sp,fp
   51b70:	dfc00117 	ldw	ra,4(sp)
   51b74:	df000017 	ldw	fp,0(sp)
   51b78:	dec00204 	addi	sp,sp,8
   51b7c:	f800283a 	ret

00051b80 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   51b80:	defffc04 	addi	sp,sp,-16
   51b84:	df000315 	stw	fp,12(sp)
   51b88:	df000304 	addi	fp,sp,12
   51b8c:	e13ffd15 	stw	r4,-12(fp)
   51b90:	e17ffe15 	stw	r5,-8(fp)
   51b94:	e1bfff15 	stw	r6,-4(fp)
  return len;
   51b98:	e0bfff17 	ldw	r2,-4(fp)
}
   51b9c:	e037883a 	mov	sp,fp
   51ba0:	df000017 	ldw	fp,0(sp)
   51ba4:	dec00104 	addi	sp,sp,4
   51ba8:	f800283a 	ret

00051bac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   51bac:	defffe04 	addi	sp,sp,-8
   51bb0:	dfc00115 	stw	ra,4(sp)
   51bb4:	df000015 	stw	fp,0(sp)
   51bb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   51bbc:	d0a00f17 	ldw	r2,-32708(gp)
   51bc0:	10000326 	beq	r2,zero,51bd0 <alt_get_errno+0x24>
   51bc4:	d0a00f17 	ldw	r2,-32708(gp)
   51bc8:	103ee83a 	callr	r2
   51bcc:	00000106 	br	51bd4 <alt_get_errno+0x28>
   51bd0:	d0a71404 	addi	r2,gp,-25520
}
   51bd4:	e037883a 	mov	sp,fp
   51bd8:	dfc00117 	ldw	ra,4(sp)
   51bdc:	df000017 	ldw	fp,0(sp)
   51be0:	dec00204 	addi	sp,sp,8
   51be4:	f800283a 	ret

00051be8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   51be8:	defffb04 	addi	sp,sp,-20
   51bec:	dfc00415 	stw	ra,16(sp)
   51bf0:	df000315 	stw	fp,12(sp)
   51bf4:	df000304 	addi	fp,sp,12
   51bf8:	e13ffe15 	stw	r4,-8(fp)
   51bfc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   51c00:	e0bffe17 	ldw	r2,-8(fp)
   51c04:	10000616 	blt	r2,zero,51c20 <fstat+0x38>
   51c08:	e0bffe17 	ldw	r2,-8(fp)
   51c0c:	10c00324 	muli	r3,r2,12
   51c10:	00800174 	movhi	r2,5
   51c14:	109d1304 	addi	r2,r2,29772
   51c18:	1885883a 	add	r2,r3,r2
   51c1c:	00000106 	br	51c24 <fstat+0x3c>
   51c20:	0005883a 	mov	r2,zero
   51c24:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   51c28:	e0bffd17 	ldw	r2,-12(fp)
   51c2c:	10001026 	beq	r2,zero,51c70 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   51c30:	e0bffd17 	ldw	r2,-12(fp)
   51c34:	10800017 	ldw	r2,0(r2)
   51c38:	10800817 	ldw	r2,32(r2)
   51c3c:	10000726 	beq	r2,zero,51c5c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   51c40:	e0bffd17 	ldw	r2,-12(fp)
   51c44:	10800017 	ldw	r2,0(r2)
   51c48:	10800817 	ldw	r2,32(r2)
   51c4c:	e17fff17 	ldw	r5,-4(fp)
   51c50:	e13ffd17 	ldw	r4,-12(fp)
   51c54:	103ee83a 	callr	r2
   51c58:	00000a06 	br	51c84 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   51c5c:	e0bfff17 	ldw	r2,-4(fp)
   51c60:	00c80004 	movi	r3,8192
   51c64:	10c00115 	stw	r3,4(r2)
      return 0;
   51c68:	0005883a 	mov	r2,zero
   51c6c:	00000506 	br	51c84 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   51c70:	0051bac0 	call	51bac <alt_get_errno>
   51c74:	1007883a 	mov	r3,r2
   51c78:	00801444 	movi	r2,81
   51c7c:	18800015 	stw	r2,0(r3)
    return -1;
   51c80:	00bfffc4 	movi	r2,-1
  }
}
   51c84:	e037883a 	mov	sp,fp
   51c88:	dfc00117 	ldw	ra,4(sp)
   51c8c:	df000017 	ldw	fp,0(sp)
   51c90:	dec00204 	addi	sp,sp,8
   51c94:	f800283a 	ret

00051c98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   51c98:	defffe04 	addi	sp,sp,-8
   51c9c:	dfc00115 	stw	ra,4(sp)
   51ca0:	df000015 	stw	fp,0(sp)
   51ca4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   51ca8:	d0a00f17 	ldw	r2,-32708(gp)
   51cac:	10000326 	beq	r2,zero,51cbc <alt_get_errno+0x24>
   51cb0:	d0a00f17 	ldw	r2,-32708(gp)
   51cb4:	103ee83a 	callr	r2
   51cb8:	00000106 	br	51cc0 <alt_get_errno+0x28>
   51cbc:	d0a71404 	addi	r2,gp,-25520
}
   51cc0:	e037883a 	mov	sp,fp
   51cc4:	dfc00117 	ldw	ra,4(sp)
   51cc8:	df000017 	ldw	fp,0(sp)
   51ccc:	dec00204 	addi	sp,sp,8
   51cd0:	f800283a 	ret

00051cd4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   51cd4:	deffed04 	addi	sp,sp,-76
   51cd8:	dfc01215 	stw	ra,72(sp)
   51cdc:	df001115 	stw	fp,68(sp)
   51ce0:	df001104 	addi	fp,sp,68
   51ce4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   51ce8:	e0bfff17 	ldw	r2,-4(fp)
   51cec:	10000616 	blt	r2,zero,51d08 <isatty+0x34>
   51cf0:	e0bfff17 	ldw	r2,-4(fp)
   51cf4:	10c00324 	muli	r3,r2,12
   51cf8:	00800174 	movhi	r2,5
   51cfc:	109d1304 	addi	r2,r2,29772
   51d00:	1885883a 	add	r2,r3,r2
   51d04:	00000106 	br	51d0c <isatty+0x38>
   51d08:	0005883a 	mov	r2,zero
   51d0c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   51d10:	e0bfef17 	ldw	r2,-68(fp)
   51d14:	10000e26 	beq	r2,zero,51d50 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   51d18:	e0bfef17 	ldw	r2,-68(fp)
   51d1c:	10800017 	ldw	r2,0(r2)
   51d20:	10800817 	ldw	r2,32(r2)
   51d24:	1000021e 	bne	r2,zero,51d30 <isatty+0x5c>
    {
      return 1;
   51d28:	00800044 	movi	r2,1
   51d2c:	00000d06 	br	51d64 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   51d30:	e0bff004 	addi	r2,fp,-64
   51d34:	100b883a 	mov	r5,r2
   51d38:	e13fff17 	ldw	r4,-4(fp)
   51d3c:	0051be80 	call	51be8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   51d40:	e0bff117 	ldw	r2,-60(fp)
   51d44:	10880020 	cmpeqi	r2,r2,8192
   51d48:	10803fcc 	andi	r2,r2,255
   51d4c:	00000506 	br	51d64 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   51d50:	0051c980 	call	51c98 <alt_get_errno>
   51d54:	1007883a 	mov	r3,r2
   51d58:	00801444 	movi	r2,81
   51d5c:	18800015 	stw	r2,0(r3)
    return 0;
   51d60:	0005883a 	mov	r2,zero
  }
}
   51d64:	e037883a 	mov	sp,fp
   51d68:	dfc00117 	ldw	ra,4(sp)
   51d6c:	df000017 	ldw	fp,0(sp)
   51d70:	dec00204 	addi	sp,sp,8
   51d74:	f800283a 	ret

00051d78 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   51d78:	defffc04 	addi	sp,sp,-16
   51d7c:	df000315 	stw	fp,12(sp)
   51d80:	df000304 	addi	fp,sp,12
   51d84:	e13ffd15 	stw	r4,-12(fp)
   51d88:	e17ffe15 	stw	r5,-8(fp)
   51d8c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   51d90:	e0fffe17 	ldw	r3,-8(fp)
   51d94:	e0bffd17 	ldw	r2,-12(fp)
   51d98:	18800c26 	beq	r3,r2,51dcc <alt_load_section+0x54>
  {
    while( to != end )
   51d9c:	00000806 	br	51dc0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   51da0:	e0bffe17 	ldw	r2,-8(fp)
   51da4:	10c00104 	addi	r3,r2,4
   51da8:	e0fffe15 	stw	r3,-8(fp)
   51dac:	e0fffd17 	ldw	r3,-12(fp)
   51db0:	19000104 	addi	r4,r3,4
   51db4:	e13ffd15 	stw	r4,-12(fp)
   51db8:	18c00017 	ldw	r3,0(r3)
   51dbc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   51dc0:	e0fffe17 	ldw	r3,-8(fp)
   51dc4:	e0bfff17 	ldw	r2,-4(fp)
   51dc8:	18bff51e 	bne	r3,r2,51da0 <__alt_data_end+0xfffeaca0>
    {
      *to++ = *from++;
    }
  }
}
   51dcc:	0001883a 	nop
   51dd0:	e037883a 	mov	sp,fp
   51dd4:	df000017 	ldw	fp,0(sp)
   51dd8:	dec00104 	addi	sp,sp,4
   51ddc:	f800283a 	ret

00051de0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   51de0:	defffe04 	addi	sp,sp,-8
   51de4:	dfc00115 	stw	ra,4(sp)
   51de8:	df000015 	stw	fp,0(sp)
   51dec:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   51df0:	018001b4 	movhi	r6,6
   51df4:	31a1cb04 	addi	r6,r6,-30932
   51df8:	01400174 	movhi	r5,5
   51dfc:	295ae004 	addi	r5,r5,27520
   51e00:	010001b4 	movhi	r4,6
   51e04:	2121cb04 	addi	r4,r4,-30932
   51e08:	0051d780 	call	51d78 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   51e0c:	01800134 	movhi	r6,4
   51e10:	31809104 	addi	r6,r6,580
   51e14:	01400134 	movhi	r5,4
   51e18:	29400804 	addi	r5,r5,32
   51e1c:	01000134 	movhi	r4,4
   51e20:	21000804 	addi	r4,r4,32
   51e24:	0051d780 	call	51d78 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   51e28:	01800174 	movhi	r6,5
   51e2c:	319ae004 	addi	r6,r6,27520
   51e30:	01400174 	movhi	r5,5
   51e34:	2959d704 	addi	r5,r5,26460
   51e38:	01000174 	movhi	r4,5
   51e3c:	2119d704 	addi	r4,r4,26460
   51e40:	0051d780 	call	51d78 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   51e44:	005544c0 	call	5544c <alt_dcache_flush_all>
  alt_icache_flush_all();
   51e48:	00558f00 	call	558f0 <alt_icache_flush_all>
}
   51e4c:	0001883a 	nop
   51e50:	e037883a 	mov	sp,fp
   51e54:	dfc00117 	ldw	ra,4(sp)
   51e58:	df000017 	ldw	fp,0(sp)
   51e5c:	dec00204 	addi	sp,sp,8
   51e60:	f800283a 	ret

00051e64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   51e64:	defffe04 	addi	sp,sp,-8
   51e68:	dfc00115 	stw	ra,4(sp)
   51e6c:	df000015 	stw	fp,0(sp)
   51e70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   51e74:	d0a00f17 	ldw	r2,-32708(gp)
   51e78:	10000326 	beq	r2,zero,51e88 <alt_get_errno+0x24>
   51e7c:	d0a00f17 	ldw	r2,-32708(gp)
   51e80:	103ee83a 	callr	r2
   51e84:	00000106 	br	51e8c <alt_get_errno+0x28>
   51e88:	d0a71404 	addi	r2,gp,-25520
}
   51e8c:	e037883a 	mov	sp,fp
   51e90:	dfc00117 	ldw	ra,4(sp)
   51e94:	df000017 	ldw	fp,0(sp)
   51e98:	dec00204 	addi	sp,sp,8
   51e9c:	f800283a 	ret

00051ea0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   51ea0:	defff904 	addi	sp,sp,-28
   51ea4:	dfc00615 	stw	ra,24(sp)
   51ea8:	df000515 	stw	fp,20(sp)
   51eac:	df000504 	addi	fp,sp,20
   51eb0:	e13ffd15 	stw	r4,-12(fp)
   51eb4:	e17ffe15 	stw	r5,-8(fp)
   51eb8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   51ebc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   51ec0:	e0bffd17 	ldw	r2,-12(fp)
   51ec4:	10000616 	blt	r2,zero,51ee0 <lseek+0x40>
   51ec8:	e0bffd17 	ldw	r2,-12(fp)
   51ecc:	10c00324 	muli	r3,r2,12
   51ed0:	00800174 	movhi	r2,5
   51ed4:	109d1304 	addi	r2,r2,29772
   51ed8:	1885883a 	add	r2,r3,r2
   51edc:	00000106 	br	51ee4 <lseek+0x44>
   51ee0:	0005883a 	mov	r2,zero
   51ee4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   51ee8:	e0bffc17 	ldw	r2,-16(fp)
   51eec:	10001026 	beq	r2,zero,51f30 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   51ef0:	e0bffc17 	ldw	r2,-16(fp)
   51ef4:	10800017 	ldw	r2,0(r2)
   51ef8:	10800717 	ldw	r2,28(r2)
   51efc:	10000926 	beq	r2,zero,51f24 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   51f00:	e0bffc17 	ldw	r2,-16(fp)
   51f04:	10800017 	ldw	r2,0(r2)
   51f08:	10800717 	ldw	r2,28(r2)
   51f0c:	e1bfff17 	ldw	r6,-4(fp)
   51f10:	e17ffe17 	ldw	r5,-8(fp)
   51f14:	e13ffc17 	ldw	r4,-16(fp)
   51f18:	103ee83a 	callr	r2
   51f1c:	e0bffb15 	stw	r2,-20(fp)
   51f20:	00000506 	br	51f38 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   51f24:	00bfde84 	movi	r2,-134
   51f28:	e0bffb15 	stw	r2,-20(fp)
   51f2c:	00000206 	br	51f38 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   51f30:	00bfebc4 	movi	r2,-81
   51f34:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   51f38:	e0bffb17 	ldw	r2,-20(fp)
   51f3c:	1000070e 	bge	r2,zero,51f5c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   51f40:	0051e640 	call	51e64 <alt_get_errno>
   51f44:	1007883a 	mov	r3,r2
   51f48:	e0bffb17 	ldw	r2,-20(fp)
   51f4c:	0085c83a 	sub	r2,zero,r2
   51f50:	18800015 	stw	r2,0(r3)
    rc = -1;
   51f54:	00bfffc4 	movi	r2,-1
   51f58:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   51f5c:	e0bffb17 	ldw	r2,-20(fp)
}
   51f60:	e037883a 	mov	sp,fp
   51f64:	dfc00117 	ldw	ra,4(sp)
   51f68:	df000017 	ldw	fp,0(sp)
   51f6c:	dec00204 	addi	sp,sp,8
   51f70:	f800283a 	ret

00051f74 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   51f74:	defffd04 	addi	sp,sp,-12
   51f78:	dfc00215 	stw	ra,8(sp)
   51f7c:	df000115 	stw	fp,4(sp)
   51f80:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   51f84:	0009883a 	mov	r4,zero
   51f88:	00526400 	call	52640 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   51f8c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   51f90:	00526780 	call	52678 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   51f94:	01800174 	movhi	r6,5
   51f98:	319ac904 	addi	r6,r6,27428
   51f9c:	01400174 	movhi	r5,5
   51fa0:	295ac904 	addi	r5,r5,27428
   51fa4:	01000174 	movhi	r4,5
   51fa8:	211ac904 	addi	r4,r4,27428
   51fac:	0055c880 	call	55c88 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   51fb0:	00555740 	call	55574 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   51fb4:	01000174 	movhi	r4,5
   51fb8:	21157504 	addi	r4,r4,21972
   51fbc:	00562600 	call	56260 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   51fc0:	d0a71b17 	ldw	r2,-25492(gp)
   51fc4:	d0e71c17 	ldw	r3,-25488(gp)
   51fc8:	d1271d17 	ldw	r4,-25484(gp)
   51fcc:	200d883a 	mov	r6,r4
   51fd0:	180b883a 	mov	r5,r3
   51fd4:	1009883a 	mov	r4,r2
   51fd8:	0041d540 	call	41d54 <main>
   51fdc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   51fe0:	01000044 	movi	r4,1
   51fe4:	0051ab00 	call	51ab0 <close>
  exit (result);
   51fe8:	e13fff17 	ldw	r4,-4(fp)
   51fec:	00562740 	call	56274 <exit>

00051ff0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   51ff0:	defffe04 	addi	sp,sp,-8
   51ff4:	df000115 	stw	fp,4(sp)
   51ff8:	df000104 	addi	fp,sp,4
   51ffc:	e13fff15 	stw	r4,-4(fp)
}
   52000:	0001883a 	nop
   52004:	e037883a 	mov	sp,fp
   52008:	df000017 	ldw	fp,0(sp)
   5200c:	dec00104 	addi	sp,sp,4
   52010:	f800283a 	ret

00052014 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   52014:	defffe04 	addi	sp,sp,-8
   52018:	df000115 	stw	fp,4(sp)
   5201c:	df000104 	addi	fp,sp,4
   52020:	e13fff15 	stw	r4,-4(fp)
}
   52024:	0001883a 	nop
   52028:	e037883a 	mov	sp,fp
   5202c:	df000017 	ldw	fp,0(sp)
   52030:	dec00104 	addi	sp,sp,4
   52034:	f800283a 	ret

00052038 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   52038:	defffe04 	addi	sp,sp,-8
   5203c:	dfc00115 	stw	ra,4(sp)
   52040:	df000015 	stw	fp,0(sp)
   52044:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   52048:	d0a00f17 	ldw	r2,-32708(gp)
   5204c:	10000326 	beq	r2,zero,5205c <alt_get_errno+0x24>
   52050:	d0a00f17 	ldw	r2,-32708(gp)
   52054:	103ee83a 	callr	r2
   52058:	00000106 	br	52060 <alt_get_errno+0x28>
   5205c:	d0a71404 	addi	r2,gp,-25520
}
   52060:	e037883a 	mov	sp,fp
   52064:	dfc00117 	ldw	ra,4(sp)
   52068:	df000017 	ldw	fp,0(sp)
   5206c:	dec00204 	addi	sp,sp,8
   52070:	f800283a 	ret

00052074 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   52074:	defffd04 	addi	sp,sp,-12
   52078:	df000215 	stw	fp,8(sp)
   5207c:	df000204 	addi	fp,sp,8
   52080:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   52084:	e0bfff17 	ldw	r2,-4(fp)
   52088:	10800217 	ldw	r2,8(r2)
   5208c:	10d00034 	orhi	r3,r2,16384
   52090:	e0bfff17 	ldw	r2,-4(fp)
   52094:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   52098:	e03ffe15 	stw	zero,-8(fp)
   5209c:	00001d06 	br	52114 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   520a0:	00800174 	movhi	r2,5
   520a4:	109d1304 	addi	r2,r2,29772
   520a8:	e0fffe17 	ldw	r3,-8(fp)
   520ac:	18c00324 	muli	r3,r3,12
   520b0:	10c5883a 	add	r2,r2,r3
   520b4:	10c00017 	ldw	r3,0(r2)
   520b8:	e0bfff17 	ldw	r2,-4(fp)
   520bc:	10800017 	ldw	r2,0(r2)
   520c0:	1880111e 	bne	r3,r2,52108 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   520c4:	00800174 	movhi	r2,5
   520c8:	109d1304 	addi	r2,r2,29772
   520cc:	e0fffe17 	ldw	r3,-8(fp)
   520d0:	18c00324 	muli	r3,r3,12
   520d4:	10c5883a 	add	r2,r2,r3
   520d8:	10800204 	addi	r2,r2,8
   520dc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   520e0:	1000090e 	bge	r2,zero,52108 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   520e4:	e0bffe17 	ldw	r2,-8(fp)
   520e8:	10c00324 	muli	r3,r2,12
   520ec:	00800174 	movhi	r2,5
   520f0:	109d1304 	addi	r2,r2,29772
   520f4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   520f8:	e0bfff17 	ldw	r2,-4(fp)
   520fc:	18800226 	beq	r3,r2,52108 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   52100:	00bffcc4 	movi	r2,-13
   52104:	00000806 	br	52128 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   52108:	e0bffe17 	ldw	r2,-8(fp)
   5210c:	10800044 	addi	r2,r2,1
   52110:	e0bffe15 	stw	r2,-8(fp)
   52114:	d0a00e17 	ldw	r2,-32712(gp)
   52118:	1007883a 	mov	r3,r2
   5211c:	e0bffe17 	ldw	r2,-8(fp)
   52120:	18bfdf2e 	bgeu	r3,r2,520a0 <__alt_data_end+0xfffeafa0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   52124:	0005883a 	mov	r2,zero
}
   52128:	e037883a 	mov	sp,fp
   5212c:	df000017 	ldw	fp,0(sp)
   52130:	dec00104 	addi	sp,sp,4
   52134:	f800283a 	ret

00052138 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   52138:	defff604 	addi	sp,sp,-40
   5213c:	dfc00915 	stw	ra,36(sp)
   52140:	df000815 	stw	fp,32(sp)
   52144:	df000804 	addi	fp,sp,32
   52148:	e13ffd15 	stw	r4,-12(fp)
   5214c:	e17ffe15 	stw	r5,-8(fp)
   52150:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   52154:	00bfffc4 	movi	r2,-1
   52158:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   5215c:	00bffb44 	movi	r2,-19
   52160:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   52164:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   52168:	d1600c04 	addi	r5,gp,-32720
   5216c:	e13ffd17 	ldw	r4,-12(fp)
   52170:	00556340 	call	55634 <alt_find_dev>
   52174:	e0bff815 	stw	r2,-32(fp)
   52178:	e0bff817 	ldw	r2,-32(fp)
   5217c:	1000051e 	bne	r2,zero,52194 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   52180:	e13ffd17 	ldw	r4,-12(fp)
   52184:	00556c40 	call	556c4 <alt_find_file>
   52188:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   5218c:	00800044 	movi	r2,1
   52190:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   52194:	e0bff817 	ldw	r2,-32(fp)
   52198:	10002926 	beq	r2,zero,52240 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   5219c:	e13ff817 	ldw	r4,-32(fp)
   521a0:	005584c0 	call	5584c <alt_get_fd>
   521a4:	e0bff915 	stw	r2,-28(fp)
   521a8:	e0bff917 	ldw	r2,-28(fp)
   521ac:	1000030e 	bge	r2,zero,521bc <open+0x84>
    {
      status = index;
   521b0:	e0bff917 	ldw	r2,-28(fp)
   521b4:	e0bffa15 	stw	r2,-24(fp)
   521b8:	00002306 	br	52248 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   521bc:	e0bff917 	ldw	r2,-28(fp)
   521c0:	10c00324 	muli	r3,r2,12
   521c4:	00800174 	movhi	r2,5
   521c8:	109d1304 	addi	r2,r2,29772
   521cc:	1885883a 	add	r2,r3,r2
   521d0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   521d4:	e0fffe17 	ldw	r3,-8(fp)
   521d8:	00900034 	movhi	r2,16384
   521dc:	10bfffc4 	addi	r2,r2,-1
   521e0:	1886703a 	and	r3,r3,r2
   521e4:	e0bffc17 	ldw	r2,-16(fp)
   521e8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   521ec:	e0bffb17 	ldw	r2,-20(fp)
   521f0:	1000051e 	bne	r2,zero,52208 <open+0xd0>
   521f4:	e13ffc17 	ldw	r4,-16(fp)
   521f8:	00520740 	call	52074 <alt_file_locked>
   521fc:	e0bffa15 	stw	r2,-24(fp)
   52200:	e0bffa17 	ldw	r2,-24(fp)
   52204:	10001016 	blt	r2,zero,52248 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   52208:	e0bff817 	ldw	r2,-32(fp)
   5220c:	10800317 	ldw	r2,12(r2)
   52210:	10000826 	beq	r2,zero,52234 <open+0xfc>
   52214:	e0bff817 	ldw	r2,-32(fp)
   52218:	10800317 	ldw	r2,12(r2)
   5221c:	e1ffff17 	ldw	r7,-4(fp)
   52220:	e1bffe17 	ldw	r6,-8(fp)
   52224:	e17ffd17 	ldw	r5,-12(fp)
   52228:	e13ffc17 	ldw	r4,-16(fp)
   5222c:	103ee83a 	callr	r2
   52230:	00000106 	br	52238 <open+0x100>
   52234:	0005883a 	mov	r2,zero
   52238:	e0bffa15 	stw	r2,-24(fp)
   5223c:	00000206 	br	52248 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   52240:	00bffb44 	movi	r2,-19
   52244:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   52248:	e0bffa17 	ldw	r2,-24(fp)
   5224c:	1000090e 	bge	r2,zero,52274 <open+0x13c>
  {
    alt_release_fd (index);  
   52250:	e13ff917 	ldw	r4,-28(fp)
   52254:	00523c40 	call	523c4 <alt_release_fd>
    ALT_ERRNO = -status;
   52258:	00520380 	call	52038 <alt_get_errno>
   5225c:	1007883a 	mov	r3,r2
   52260:	e0bffa17 	ldw	r2,-24(fp)
   52264:	0085c83a 	sub	r2,zero,r2
   52268:	18800015 	stw	r2,0(r3)
    return -1;
   5226c:	00bfffc4 	movi	r2,-1
   52270:	00000106 	br	52278 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   52274:	e0bff917 	ldw	r2,-28(fp)
}
   52278:	e037883a 	mov	sp,fp
   5227c:	dfc00117 	ldw	ra,4(sp)
   52280:	df000017 	ldw	fp,0(sp)
   52284:	dec00204 	addi	sp,sp,8
   52288:	f800283a 	ret

0005228c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   5228c:	defffe04 	addi	sp,sp,-8
   52290:	dfc00115 	stw	ra,4(sp)
   52294:	df000015 	stw	fp,0(sp)
   52298:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   5229c:	d0a00f17 	ldw	r2,-32708(gp)
   522a0:	10000326 	beq	r2,zero,522b0 <alt_get_errno+0x24>
   522a4:	d0a00f17 	ldw	r2,-32708(gp)
   522a8:	103ee83a 	callr	r2
   522ac:	00000106 	br	522b4 <alt_get_errno+0x28>
   522b0:	d0a71404 	addi	r2,gp,-25520
}
   522b4:	e037883a 	mov	sp,fp
   522b8:	dfc00117 	ldw	ra,4(sp)
   522bc:	df000017 	ldw	fp,0(sp)
   522c0:	dec00204 	addi	sp,sp,8
   522c4:	f800283a 	ret

000522c8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   522c8:	defff904 	addi	sp,sp,-28
   522cc:	dfc00615 	stw	ra,24(sp)
   522d0:	df000515 	stw	fp,20(sp)
   522d4:	df000504 	addi	fp,sp,20
   522d8:	e13ffd15 	stw	r4,-12(fp)
   522dc:	e17ffe15 	stw	r5,-8(fp)
   522e0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   522e4:	e0bffd17 	ldw	r2,-12(fp)
   522e8:	10000616 	blt	r2,zero,52304 <read+0x3c>
   522ec:	e0bffd17 	ldw	r2,-12(fp)
   522f0:	10c00324 	muli	r3,r2,12
   522f4:	00800174 	movhi	r2,5
   522f8:	109d1304 	addi	r2,r2,29772
   522fc:	1885883a 	add	r2,r3,r2
   52300:	00000106 	br	52308 <read+0x40>
   52304:	0005883a 	mov	r2,zero
   52308:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   5230c:	e0bffb17 	ldw	r2,-20(fp)
   52310:	10002226 	beq	r2,zero,5239c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   52314:	e0bffb17 	ldw	r2,-20(fp)
   52318:	10800217 	ldw	r2,8(r2)
   5231c:	108000cc 	andi	r2,r2,3
   52320:	10800060 	cmpeqi	r2,r2,1
   52324:	1000181e 	bne	r2,zero,52388 <read+0xc0>
        (fd->dev->read))
   52328:	e0bffb17 	ldw	r2,-20(fp)
   5232c:	10800017 	ldw	r2,0(r2)
   52330:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   52334:	10001426 	beq	r2,zero,52388 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   52338:	e0bffb17 	ldw	r2,-20(fp)
   5233c:	10800017 	ldw	r2,0(r2)
   52340:	10800517 	ldw	r2,20(r2)
   52344:	e0ffff17 	ldw	r3,-4(fp)
   52348:	180d883a 	mov	r6,r3
   5234c:	e17ffe17 	ldw	r5,-8(fp)
   52350:	e13ffb17 	ldw	r4,-20(fp)
   52354:	103ee83a 	callr	r2
   52358:	e0bffc15 	stw	r2,-16(fp)
   5235c:	e0bffc17 	ldw	r2,-16(fp)
   52360:	1000070e 	bge	r2,zero,52380 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   52364:	005228c0 	call	5228c <alt_get_errno>
   52368:	1007883a 	mov	r3,r2
   5236c:	e0bffc17 	ldw	r2,-16(fp)
   52370:	0085c83a 	sub	r2,zero,r2
   52374:	18800015 	stw	r2,0(r3)
          return -1;
   52378:	00bfffc4 	movi	r2,-1
   5237c:	00000c06 	br	523b0 <read+0xe8>
        }
        return rval;
   52380:	e0bffc17 	ldw	r2,-16(fp)
   52384:	00000a06 	br	523b0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   52388:	005228c0 	call	5228c <alt_get_errno>
   5238c:	1007883a 	mov	r3,r2
   52390:	00800344 	movi	r2,13
   52394:	18800015 	stw	r2,0(r3)
   52398:	00000406 	br	523ac <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   5239c:	005228c0 	call	5228c <alt_get_errno>
   523a0:	1007883a 	mov	r3,r2
   523a4:	00801444 	movi	r2,81
   523a8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   523ac:	00bfffc4 	movi	r2,-1
}
   523b0:	e037883a 	mov	sp,fp
   523b4:	dfc00117 	ldw	ra,4(sp)
   523b8:	df000017 	ldw	fp,0(sp)
   523bc:	dec00204 	addi	sp,sp,8
   523c0:	f800283a 	ret

000523c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   523c4:	defffe04 	addi	sp,sp,-8
   523c8:	df000115 	stw	fp,4(sp)
   523cc:	df000104 	addi	fp,sp,4
   523d0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   523d4:	e0bfff17 	ldw	r2,-4(fp)
   523d8:	108000d0 	cmplti	r2,r2,3
   523dc:	10000d1e 	bne	r2,zero,52414 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   523e0:	00800174 	movhi	r2,5
   523e4:	109d1304 	addi	r2,r2,29772
   523e8:	e0ffff17 	ldw	r3,-4(fp)
   523ec:	18c00324 	muli	r3,r3,12
   523f0:	10c5883a 	add	r2,r2,r3
   523f4:	10800204 	addi	r2,r2,8
   523f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   523fc:	00800174 	movhi	r2,5
   52400:	109d1304 	addi	r2,r2,29772
   52404:	e0ffff17 	ldw	r3,-4(fp)
   52408:	18c00324 	muli	r3,r3,12
   5240c:	10c5883a 	add	r2,r2,r3
   52410:	10000015 	stw	zero,0(r2)
  }
}
   52414:	0001883a 	nop
   52418:	e037883a 	mov	sp,fp
   5241c:	df000017 	ldw	fp,0(sp)
   52420:	dec00104 	addi	sp,sp,4
   52424:	f800283a 	ret

00052428 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   52428:	defff904 	addi	sp,sp,-28
   5242c:	df000615 	stw	fp,24(sp)
   52430:	df000604 	addi	fp,sp,24
   52434:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52438:	0005303a 	rdctl	r2,status
   5243c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52440:	e0fffe17 	ldw	r3,-8(fp)
   52444:	00bfff84 	movi	r2,-2
   52448:	1884703a 	and	r2,r3,r2
   5244c:	1001703a 	wrctl	status,r2
  
  return context;
   52450:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   52454:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   52458:	d0a01017 	ldw	r2,-32704(gp)
   5245c:	10c000c4 	addi	r3,r2,3
   52460:	00bfff04 	movi	r2,-4
   52464:	1884703a 	and	r2,r3,r2
   52468:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   5246c:	d0e01017 	ldw	r3,-32704(gp)
   52470:	e0bfff17 	ldw	r2,-4(fp)
   52474:	1887883a 	add	r3,r3,r2
   52478:	008001b4 	movhi	r2,6
   5247c:	109c4004 	addi	r2,r2,28928
   52480:	10c0062e 	bgeu	r2,r3,5249c <sbrk+0x74>
   52484:	e0bffb17 	ldw	r2,-20(fp)
   52488:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5248c:	e0bffa17 	ldw	r2,-24(fp)
   52490:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   52494:	00bfffc4 	movi	r2,-1
   52498:	00000b06 	br	524c8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   5249c:	d0a01017 	ldw	r2,-32704(gp)
   524a0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   524a4:	d0e01017 	ldw	r3,-32704(gp)
   524a8:	e0bfff17 	ldw	r2,-4(fp)
   524ac:	1885883a 	add	r2,r3,r2
   524b0:	d0a01015 	stw	r2,-32704(gp)
   524b4:	e0bffb17 	ldw	r2,-20(fp)
   524b8:	e0bffc15 	stw	r2,-16(fp)
   524bc:	e0bffc17 	ldw	r2,-16(fp)
   524c0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   524c4:	e0bffd17 	ldw	r2,-12(fp)
} 
   524c8:	e037883a 	mov	sp,fp
   524cc:	df000017 	ldw	fp,0(sp)
   524d0:	dec00104 	addi	sp,sp,4
   524d4:	f800283a 	ret

000524d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   524d8:	defffe04 	addi	sp,sp,-8
   524dc:	dfc00115 	stw	ra,4(sp)
   524e0:	df000015 	stw	fp,0(sp)
   524e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   524e8:	d0a00f17 	ldw	r2,-32708(gp)
   524ec:	10000326 	beq	r2,zero,524fc <alt_get_errno+0x24>
   524f0:	d0a00f17 	ldw	r2,-32708(gp)
   524f4:	103ee83a 	callr	r2
   524f8:	00000106 	br	52500 <alt_get_errno+0x28>
   524fc:	d0a71404 	addi	r2,gp,-25520
}
   52500:	e037883a 	mov	sp,fp
   52504:	dfc00117 	ldw	ra,4(sp)
   52508:	df000017 	ldw	fp,0(sp)
   5250c:	dec00204 	addi	sp,sp,8
   52510:	f800283a 	ret

00052514 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   52514:	defff904 	addi	sp,sp,-28
   52518:	dfc00615 	stw	ra,24(sp)
   5251c:	df000515 	stw	fp,20(sp)
   52520:	df000504 	addi	fp,sp,20
   52524:	e13ffd15 	stw	r4,-12(fp)
   52528:	e17ffe15 	stw	r5,-8(fp)
   5252c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   52530:	e0bffd17 	ldw	r2,-12(fp)
   52534:	10000616 	blt	r2,zero,52550 <write+0x3c>
   52538:	e0bffd17 	ldw	r2,-12(fp)
   5253c:	10c00324 	muli	r3,r2,12
   52540:	00800174 	movhi	r2,5
   52544:	109d1304 	addi	r2,r2,29772
   52548:	1885883a 	add	r2,r3,r2
   5254c:	00000106 	br	52554 <write+0x40>
   52550:	0005883a 	mov	r2,zero
   52554:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   52558:	e0bffb17 	ldw	r2,-20(fp)
   5255c:	10002126 	beq	r2,zero,525e4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   52560:	e0bffb17 	ldw	r2,-20(fp)
   52564:	10800217 	ldw	r2,8(r2)
   52568:	108000cc 	andi	r2,r2,3
   5256c:	10001826 	beq	r2,zero,525d0 <write+0xbc>
   52570:	e0bffb17 	ldw	r2,-20(fp)
   52574:	10800017 	ldw	r2,0(r2)
   52578:	10800617 	ldw	r2,24(r2)
   5257c:	10001426 	beq	r2,zero,525d0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   52580:	e0bffb17 	ldw	r2,-20(fp)
   52584:	10800017 	ldw	r2,0(r2)
   52588:	10800617 	ldw	r2,24(r2)
   5258c:	e0ffff17 	ldw	r3,-4(fp)
   52590:	180d883a 	mov	r6,r3
   52594:	e17ffe17 	ldw	r5,-8(fp)
   52598:	e13ffb17 	ldw	r4,-20(fp)
   5259c:	103ee83a 	callr	r2
   525a0:	e0bffc15 	stw	r2,-16(fp)
   525a4:	e0bffc17 	ldw	r2,-16(fp)
   525a8:	1000070e 	bge	r2,zero,525c8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   525ac:	00524d80 	call	524d8 <alt_get_errno>
   525b0:	1007883a 	mov	r3,r2
   525b4:	e0bffc17 	ldw	r2,-16(fp)
   525b8:	0085c83a 	sub	r2,zero,r2
   525bc:	18800015 	stw	r2,0(r3)
        return -1;
   525c0:	00bfffc4 	movi	r2,-1
   525c4:	00000c06 	br	525f8 <write+0xe4>
      }
      return rval;
   525c8:	e0bffc17 	ldw	r2,-16(fp)
   525cc:	00000a06 	br	525f8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   525d0:	00524d80 	call	524d8 <alt_get_errno>
   525d4:	1007883a 	mov	r3,r2
   525d8:	00800344 	movi	r2,13
   525dc:	18800015 	stw	r2,0(r3)
   525e0:	00000406 	br	525f4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   525e4:	00524d80 	call	524d8 <alt_get_errno>
   525e8:	1007883a 	mov	r3,r2
   525ec:	00801444 	movi	r2,81
   525f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   525f4:	00bfffc4 	movi	r2,-1
}
   525f8:	e037883a 	mov	sp,fp
   525fc:	dfc00117 	ldw	ra,4(sp)
   52600:	df000017 	ldw	fp,0(sp)
   52604:	dec00204 	addi	sp,sp,8
   52608:	f800283a 	ret

0005260c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   5260c:	defffd04 	addi	sp,sp,-12
   52610:	dfc00215 	stw	ra,8(sp)
   52614:	df000115 	stw	fp,4(sp)
   52618:	df000104 	addi	fp,sp,4
   5261c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   52620:	d1600c04 	addi	r5,gp,-32720
   52624:	e13fff17 	ldw	r4,-4(fp)
   52628:	00554d00 	call	554d0 <alt_dev_llist_insert>
}
   5262c:	e037883a 	mov	sp,fp
   52630:	dfc00117 	ldw	ra,4(sp)
   52634:	df000017 	ldw	fp,0(sp)
   52638:	dec00204 	addi	sp,sp,8
   5263c:	f800283a 	ret

00052640 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   52640:	defffd04 	addi	sp,sp,-12
   52644:	dfc00215 	stw	ra,8(sp)
   52648:	df000115 	stw	fp,4(sp)
   5264c:	df000104 	addi	fp,sp,4
   52650:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   52654:	00561100 	call	56110 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   52658:	00800044 	movi	r2,1
   5265c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   52660:	0001883a 	nop
   52664:	e037883a 	mov	sp,fp
   52668:	dfc00117 	ldw	ra,4(sp)
   5266c:	df000017 	ldw	fp,0(sp)
   52670:	dec00204 	addi	sp,sp,8
   52674:	f800283a 	ret

00052678 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   52678:	defffe04 	addi	sp,sp,-8
   5267c:	dfc00115 	stw	ra,4(sp)
   52680:	df000015 	stw	fp,0(sp)
   52684:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_I2C_INIT ( I2C_DAC, i2c_dac);
   52688:	01000174 	movhi	r4,5
   5268c:	211d7304 	addi	r4,r4,30156
   52690:	005292c0 	call	5292c <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   52694:	01800044 	movi	r6,1
   52698:	000b883a 	mov	r5,zero
   5269c:	01000174 	movhi	r4,5
   526a0:	211d8b04 	addi	r4,r4,30252
   526a4:	00544400 	call	54440 <altera_avalon_jtag_uart_init>
   526a8:	01000174 	movhi	r4,5
   526ac:	211d8104 	addi	r4,r4,30212
   526b0:	005260c0 	call	5260c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   526b4:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
   526b8:	010001b4 	movhi	r4,6
   526bc:	21219904 	addi	r4,r4,-31132
   526c0:	00557cc0 	call	557cc <alt_fs_reg>
}
   526c4:	0001883a 	nop
   526c8:	e037883a 	mov	sp,fp
   526cc:	dfc00117 	ldw	ra,4(sp)
   526d0:	df000017 	ldw	fp,0(sp)
   526d4:	dec00204 	addi	sp,sp,8
   526d8:	f800283a 	ret

000526dc <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   526dc:	defff904 	addi	sp,sp,-28
   526e0:	dfc00615 	stw	ra,24(sp)
   526e4:	df000515 	stw	fp,20(sp)
   526e8:	df000504 	addi	fp,sp,20
   526ec:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   526f0:	008000b4 	movhi	r2,2
   526f4:	10a1a804 	addi	r2,r2,-31072
   526f8:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   526fc:	e0bfff17 	ldw	r2,-4(fp)
   52700:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   52704:	e0bffc17 	ldw	r2,-16(fp)
   52708:	10800717 	ldw	r2,28(r2)
   5270c:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   52710:	e0bffd17 	ldw	r2,-12(fp)
   52714:	10800217 	ldw	r2,8(r2)
   52718:	10800098 	cmpnei	r2,r2,2
   5271c:	1000251e 	bne	r2,zero,527b4 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   52720:	e0bffd17 	ldw	r2,-12(fp)
   52724:	10c00017 	ldw	r3,0(r2)
   52728:	e0bffd17 	ldw	r2,-12(fp)
   5272c:	10800117 	ldw	r2,4(r2)
   52730:	e13ffe04 	addi	r4,fp,-8
   52734:	200f883a 	mov	r7,r4
   52738:	100d883a 	mov	r6,r2
   5273c:	180b883a 	mov	r5,r3
   52740:	e13ffc17 	ldw	r4,-16(fp)
   52744:	0052e8c0 	call	52e8c <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   52748:	e0bffd17 	ldw	r2,-12(fp)
   5274c:	10c00117 	ldw	r3,4(r2)
   52750:	e0bffe17 	ldw	r2,-8(fp)
   52754:	1887c83a 	sub	r3,r3,r2
   52758:	e0bffd17 	ldw	r2,-12(fp)
   5275c:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   52760:	e0bffd17 	ldw	r2,-12(fp)
   52764:	10c00017 	ldw	r3,0(r2)
   52768:	e0bffe17 	ldw	r2,-8(fp)
   5276c:	1887883a 	add	r3,r3,r2
   52770:	e0bffd17 	ldw	r2,-12(fp)
   52774:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   52778:	e0bffd17 	ldw	r2,-12(fp)
   5277c:	10800117 	ldw	r2,4(r2)
   52780:	10000c26 	beq	r2,zero,527b4 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   52784:	01400704 	movi	r5,28
   52788:	e13ffc17 	ldw	r4,-16(fp)
   5278c:	005402c0 	call	5402c <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   52790:	01400084 	movi	r5,2
   52794:	e13ffc17 	ldw	r4,-16(fp)
   52798:	00540d00 	call	540d0 <alt_avalon_i2c_int_enable>
   5279c:	00000e06 	br	527d8 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   527a0:	e0bffb17 	ldw	r2,-20(fp)
   527a4:	10bfffc4 	addi	r2,r2,-1
   527a8:	e0bffb15 	stw	r2,-20(fp)
   527ac:	e0bffb17 	ldw	r2,-20(fp)
   527b0:	10000426 	beq	r2,zero,527c4 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   527b4:	e13ffc17 	ldw	r4,-16(fp)
   527b8:	0052e480 	call	52e48 <alt_avalon_i2c_is_busy>
   527bc:	103ff81e 	bne	r2,zero,527a0 <__alt_data_end+0xfffeb6a0>
   527c0:	00000106 	br	527c8 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   527c4:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   527c8:	e13ffc17 	ldw	r4,-16(fp)
   527cc:	0052af00 	call	52af0 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   527d0:	e0bffd17 	ldw	r2,-12(fp)
   527d4:	10000215 	stw	zero,8(r2)
}
   527d8:	e037883a 	mov	sp,fp
   527dc:	dfc00117 	ldw	ra,4(sp)
   527e0:	df000017 	ldw	fp,0(sp)
   527e4:	dec00204 	addi	sp,sp,8
   527e8:	f800283a 	ret

000527ec <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   527ec:	defffc04 	addi	sp,sp,-16
   527f0:	dfc00315 	stw	ra,12(sp)
   527f4:	df000215 	stw	fp,8(sp)
   527f8:	df000204 	addi	fp,sp,8
   527fc:	e13ffe15 	stw	r4,-8(fp)
   52800:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   52804:	e0bfff17 	ldw	r2,-4(fp)
   52808:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   5280c:	e1ffff17 	ldw	r7,-4(fp)
   52810:	000d883a 	mov	r6,zero
   52814:	01400174 	movhi	r5,5
   52818:	2949b704 	addi	r5,r5,9948
   5281c:	e13ffe17 	ldw	r4,-8(fp)
   52820:	00528d80 	call	528d8 <alt_avalon_i2c_register_callback>
}
   52824:	0001883a 	nop
   52828:	e037883a 	mov	sp,fp
   5282c:	dfc00117 	ldw	ra,4(sp)
   52830:	df000017 	ldw	fp,0(sp)
   52834:	dec00204 	addi	sp,sp,8
   52838:	f800283a 	ret

0005283c <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   5283c:	defff904 	addi	sp,sp,-28
   52840:	dfc00615 	stw	ra,24(sp)
   52844:	df000515 	stw	fp,20(sp)
   52848:	df000504 	addi	fp,sp,20
   5284c:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   52850:	e0bfff17 	ldw	r2,-4(fp)
   52854:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   52858:	014007c4 	movi	r5,31
   5285c:	e13ffb17 	ldw	r4,-20(fp)
   52860:	00540680 	call	54068 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   52864:	01400704 	movi	r5,28
   52868:	e13ffb17 	ldw	r4,-20(fp)
   5286c:	005402c0 	call	5402c <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   52870:	e0bffb17 	ldw	r2,-20(fp)
   52874:	10800617 	ldw	r2,24(r2)
   52878:	10001126 	beq	r2,zero,528c0 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5287c:	0005303a 	rdctl	r2,status
   52880:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52884:	e0fffd17 	ldw	r3,-12(fp)
   52888:	00bfff84 	movi	r2,-2
   5288c:	1884703a 	and	r2,r3,r2
   52890:	1001703a 	wrctl	status,r2
  
  return context;
   52894:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   52898:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   5289c:	e0bffb17 	ldw	r2,-20(fp)
   528a0:	10800617 	ldw	r2,24(r2)
   528a4:	e13ffb17 	ldw	r4,-20(fp)
   528a8:	103ee83a 	callr	r2
   528ac:	e0bffc17 	ldw	r2,-16(fp)
   528b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   528b4:	e0bffe17 	ldw	r2,-8(fp)
   528b8:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   528bc:	0001883a 	nop
   528c0:	0001883a 	nop
}
   528c4:	e037883a 	mov	sp,fp
   528c8:	dfc00117 	ldw	ra,4(sp)
   528cc:	df000017 	ldw	fp,0(sp)
   528d0:	dec00204 	addi	sp,sp,8
   528d4:	f800283a 	ret

000528d8 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   528d8:	defffb04 	addi	sp,sp,-20
   528dc:	df000415 	stw	fp,16(sp)
   528e0:	df000404 	addi	fp,sp,16
   528e4:	e13ffc15 	stw	r4,-16(fp)
   528e8:	e17ffd15 	stw	r5,-12(fp)
   528ec:	e1bffe15 	stw	r6,-8(fp)
   528f0:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   528f4:	e0bffc17 	ldw	r2,-16(fp)
   528f8:	e0fffd17 	ldw	r3,-12(fp)
   528fc:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   52900:	e0bffc17 	ldw	r2,-16(fp)
   52904:	e0ffff17 	ldw	r3,-4(fp)
   52908:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   5290c:	e0bffc17 	ldw	r2,-16(fp)
   52910:	e0fffe17 	ldw	r3,-8(fp)
   52914:	10c00815 	stw	r3,32(r2)

    return ;
   52918:	0001883a 	nop
}
   5291c:	e037883a 	mov	sp,fp
   52920:	df000017 	ldw	fp,0(sp)
   52924:	dec00104 	addi	sp,sp,4
   52928:	f800283a 	ret

0005292c <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   5292c:	defff704 	addi	sp,sp,-36
   52930:	dfc00815 	stw	ra,32(sp)
   52934:	df000715 	stw	fp,28(sp)
   52938:	df000704 	addi	fp,sp,28
   5293c:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   52940:	e13fff17 	ldw	r4,-4(fp)
   52944:	0052af00 	call	52af0 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   52948:	014007c4 	movi	r5,31
   5294c:	e13fff17 	ldw	r4,-4(fp)
   52950:	00540680 	call	54068 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   52954:	01400704 	movi	r5,28
   52958:	e13fff17 	ldw	r4,-4(fp)
   5295c:	005402c0 	call	5402c <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   52960:	014000c4 	movi	r5,3
   52964:	e13fff17 	ldw	r4,-4(fp)
   52968:	00542740 	call	54274 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   5296c:	014000c4 	movi	r5,3
   52970:	e13fff17 	ldw	r4,-4(fp)
   52974:	00541c40 	call	541c4 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   52978:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   5297c:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   52980:	e0bffb04 	addi	r2,fp,-20
   52984:	018000b4 	movhi	r6,2
   52988:	31a1a804 	addi	r6,r6,-31072
   5298c:	100b883a 	mov	r5,r2
   52990:	e13fff17 	ldw	r4,-4(fp)
   52994:	0052d4c0 	call	52d4c <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   52998:	e0bffb04 	addi	r2,fp,-20
   5299c:	100b883a 	mov	r5,r2
   529a0:	e13fff17 	ldw	r4,-4(fp)
   529a4:	0052bec0 	call	52bec <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   529a8:	d1601104 	addi	r5,gp,-32700
   529ac:	e13fff17 	ldw	r4,-4(fp)
   529b0:	00554d00 	call	554d0 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   529b4:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   529b8:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   529bc:	e0bffa17 	ldw	r2,-24(fp)
   529c0:	10000c1e 	bne	r2,zero,529f4 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   529c4:	e0bfff17 	ldw	r2,-4(fp)
   529c8:	10c00417 	ldw	r3,16(r2)
   529cc:	e0bfff17 	ldw	r2,-4(fp)
   529d0:	10800517 	ldw	r2,20(r2)
   529d4:	d8000015 	stw	zero,0(sp)
   529d8:	e1ffff17 	ldw	r7,-4(fp)
   529dc:	01800174 	movhi	r6,5
   529e0:	318a0f04 	addi	r6,r6,10300
   529e4:	100b883a 	mov	r5,r2
   529e8:	1809883a 	mov	r4,r3
   529ec:	00559240 	call	55924 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   529f0:	00000406 	br	52a04 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   529f4:	01000174 	movhi	r4,5
   529f8:	211ad804 	addi	r4,r4,27488
   529fc:	0055d040 	call	55d04 <alt_printf>
    }

    return;
   52a00:	0001883a 	nop

}
   52a04:	e037883a 	mov	sp,fp
   52a08:	dfc00117 	ldw	ra,4(sp)
   52a0c:	df000017 	ldw	fp,0(sp)
   52a10:	dec00204 	addi	sp,sp,8
   52a14:	f800283a 	ret

00052a18 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   52a18:	defffc04 	addi	sp,sp,-16
   52a1c:	dfc00315 	stw	ra,12(sp)
   52a20:	df000215 	stw	fp,8(sp)
   52a24:	df000204 	addi	fp,sp,8
   52a28:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   52a2c:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   52a30:	d1601104 	addi	r5,gp,-32700
   52a34:	e13fff17 	ldw	r4,-4(fp)
   52a38:	00556340 	call	55634 <alt_find_dev>
   52a3c:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   52a40:	e0bffe17 	ldw	r2,-8(fp)
}
   52a44:	e037883a 	mov	sp,fp
   52a48:	dfc00117 	ldw	ra,4(sp)
   52a4c:	df000017 	ldw	fp,0(sp)
   52a50:	dec00204 	addi	sp,sp,8
   52a54:	f800283a 	ret

00052a58 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   52a58:	defffc04 	addi	sp,sp,-16
   52a5c:	df000315 	stw	fp,12(sp)
   52a60:	df000304 	addi	fp,sp,12
   52a64:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   52a68:	e0bfff17 	ldw	r2,-4(fp)
   52a6c:	10800717 	ldw	r2,28(r2)
   52a70:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   52a74:	e0bfff17 	ldw	r2,-4(fp)
   52a78:	10800317 	ldw	r2,12(r2)
   52a7c:	10800204 	addi	r2,r2,8
   52a80:	10800037 	ldwio	r2,0(r2)
   52a84:	1080004c 	andi	r2,r2,1
   52a88:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   52a8c:	e0bffe17 	ldw	r2,-8(fp)
   52a90:	10000226 	beq	r2,zero,52a9c <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   52a94:	00bffe44 	movi	r2,-7
   52a98:	00001106 	br	52ae0 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   52a9c:	e0bfff17 	ldw	r2,-4(fp)
   52aa0:	10c00617 	ldw	r3,24(r2)
   52aa4:	00800174 	movhi	r2,5
   52aa8:	1089b704 	addi	r2,r2,9948
   52aac:	1880021e 	bne	r3,r2,52ab8 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   52ab0:	e0bffd17 	ldw	r2,-12(fp)
   52ab4:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   52ab8:	e0bfff17 	ldw	r2,-4(fp)
   52abc:	10800317 	ldw	r2,12(r2)
   52ac0:	10800204 	addi	r2,r2,8
   52ac4:	e0ffff17 	ldw	r3,-4(fp)
   52ac8:	18c00317 	ldw	r3,12(r3)
   52acc:	18c00204 	addi	r3,r3,8
   52ad0:	18c00037 	ldwio	r3,0(r3)
   52ad4:	18c00054 	ori	r3,r3,1
   52ad8:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   52adc:	0005883a 	mov	r2,zero
}
   52ae0:	e037883a 	mov	sp,fp
   52ae4:	df000017 	ldw	fp,0(sp)
   52ae8:	dec00104 	addi	sp,sp,4
   52aec:	f800283a 	ret

00052af0 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   52af0:	defffe04 	addi	sp,sp,-8
   52af4:	df000115 	stw	fp,4(sp)
   52af8:	df000104 	addi	fp,sp,4
   52afc:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   52b00:	e0bfff17 	ldw	r2,-4(fp)
   52b04:	10800317 	ldw	r2,12(r2)
   52b08:	10800204 	addi	r2,r2,8
   52b0c:	e0ffff17 	ldw	r3,-4(fp)
   52b10:	18c00317 	ldw	r3,12(r3)
   52b14:	18c00204 	addi	r3,r3,8
   52b18:	19000037 	ldwio	r4,0(r3)
   52b1c:	00ffff84 	movi	r3,-2
   52b20:	20c6703a 	and	r3,r4,r3
   52b24:	10c00035 	stwio	r3,0(r2)

}
   52b28:	0001883a 	nop
   52b2c:	e037883a 	mov	sp,fp
   52b30:	df000017 	ldw	fp,0(sp)
   52b34:	dec00104 	addi	sp,sp,4
   52b38:	f800283a 	ret

00052b3c <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   52b3c:	defffd04 	addi	sp,sp,-12
   52b40:	df000215 	stw	fp,8(sp)
   52b44:	df000204 	addi	fp,sp,8
   52b48:	e13ffe15 	stw	r4,-8(fp)
   52b4c:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   52b50:	e0bffe17 	ldw	r2,-8(fp)
   52b54:	10c00d17 	ldw	r3,52(r2)
   52b58:	e0bfff17 	ldw	r2,-4(fp)
   52b5c:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   52b60:	e0bffe17 	ldw	r2,-8(fp)
   52b64:	10800317 	ldw	r2,12(r2)
   52b68:	10800204 	addi	r2,r2,8
   52b6c:	10800037 	ldwio	r2,0(r2)
   52b70:	1080008c 	andi	r2,r2,2
   52b74:	1005d07a 	srai	r2,r2,1
   52b78:	1007883a 	mov	r3,r2
   52b7c:	e0bfff17 	ldw	r2,-4(fp)
   52b80:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   52b84:	e0bffe17 	ldw	r2,-8(fp)
   52b88:	10800317 	ldw	r2,12(r2)
   52b8c:	10800904 	addi	r2,r2,36
   52b90:	10800037 	ldwio	r2,0(r2)
   52b94:	1007883a 	mov	r3,r2
   52b98:	e0bfff17 	ldw	r2,-4(fp)
   52b9c:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   52ba0:	e0bffe17 	ldw	r2,-8(fp)
   52ba4:	10800317 	ldw	r2,12(r2)
   52ba8:	10800804 	addi	r2,r2,32
   52bac:	10800037 	ldwio	r2,0(r2)
   52bb0:	1007883a 	mov	r3,r2
   52bb4:	e0bfff17 	ldw	r2,-4(fp)
   52bb8:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   52bbc:	e0bffe17 	ldw	r2,-8(fp)
   52bc0:	10800317 	ldw	r2,12(r2)
   52bc4:	10800a04 	addi	r2,r2,40
   52bc8:	10800037 	ldwio	r2,0(r2)
   52bcc:	1007883a 	mov	r3,r2
   52bd0:	e0bfff17 	ldw	r2,-4(fp)
   52bd4:	10c0030d 	sth	r3,12(r2)
}
   52bd8:	0001883a 	nop
   52bdc:	e037883a 	mov	sp,fp
   52be0:	df000017 	ldw	fp,0(sp)
   52be4:	dec00104 	addi	sp,sp,4
   52be8:	f800283a 	ret

00052bec <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   52bec:	defffd04 	addi	sp,sp,-12
   52bf0:	df000215 	stw	fp,8(sp)
   52bf4:	df000204 	addi	fp,sp,8
   52bf8:	e13ffe15 	stw	r4,-8(fp)
   52bfc:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   52c00:	e0bfff17 	ldw	r2,-4(fp)
   52c04:	10c00017 	ldw	r3,0(r2)
   52c08:	e0bffe17 	ldw	r2,-8(fp)
   52c0c:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   52c10:	e0bffe17 	ldw	r2,-8(fp)
   52c14:	10800317 	ldw	r2,12(r2)
   52c18:	10c00204 	addi	r3,r2,8
   52c1c:	e0bffe17 	ldw	r2,-8(fp)
   52c20:	10800317 	ldw	r2,12(r2)
   52c24:	10800204 	addi	r2,r2,8
   52c28:	10800037 	ldwio	r2,0(r2)
   52c2c:	1009883a 	mov	r4,r2
   52c30:	00bfff44 	movi	r2,-3
   52c34:	2088703a 	and	r4,r4,r2
   52c38:	e0bfff17 	ldw	r2,-4(fp)
   52c3c:	10800117 	ldw	r2,4(r2)
   52c40:	1085883a 	add	r2,r2,r2
   52c44:	1080008c 	andi	r2,r2,2
   52c48:	2084b03a 	or	r2,r4,r2
   52c4c:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   52c50:	e0bffe17 	ldw	r2,-8(fp)
   52c54:	10800317 	ldw	r2,12(r2)
   52c58:	10800904 	addi	r2,r2,36
   52c5c:	e0ffff17 	ldw	r3,-4(fp)
   52c60:	18c0020b 	ldhu	r3,8(r3)
   52c64:	18ffffcc 	andi	r3,r3,65535
   52c68:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   52c6c:	e0bffe17 	ldw	r2,-8(fp)
   52c70:	10800317 	ldw	r2,12(r2)
   52c74:	10800804 	addi	r2,r2,32
   52c78:	e0ffff17 	ldw	r3,-4(fp)
   52c7c:	18c0028b 	ldhu	r3,10(r3)
   52c80:	18ffffcc 	andi	r3,r3,65535
   52c84:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   52c88:	e0bffe17 	ldw	r2,-8(fp)
   52c8c:	10800317 	ldw	r2,12(r2)
   52c90:	10800a04 	addi	r2,r2,40
   52c94:	e0ffff17 	ldw	r3,-4(fp)
   52c98:	18c0030b 	ldhu	r3,12(r3)
   52c9c:	18ffffcc 	andi	r3,r3,65535
   52ca0:	10c00035 	stwio	r3,0(r2)
}
   52ca4:	0001883a 	nop
   52ca8:	e037883a 	mov	sp,fp
   52cac:	df000017 	ldw	fp,0(sp)
   52cb0:	dec00104 	addi	sp,sp,4
   52cb4:	f800283a 	ret

00052cb8 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   52cb8:	defffb04 	addi	sp,sp,-20
   52cbc:	dfc00415 	stw	ra,16(sp)
   52cc0:	df000315 	stw	fp,12(sp)
   52cc4:	df000304 	addi	fp,sp,12
   52cc8:	e13ffd15 	stw	r4,-12(fp)
   52ccc:	e17ffe15 	stw	r5,-8(fp)
   52cd0:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   52cd4:	e0bffe17 	ldw	r2,-8(fp)
   52cd8:	1080028b 	ldhu	r2,10(r2)
   52cdc:	10bfffcc 	andi	r2,r2,65535
   52ce0:	10000426 	beq	r2,zero,52cf4 <alt_avalon_i2c_master_config_speed_get+0x3c>
   52ce4:	e0bffe17 	ldw	r2,-8(fp)
   52ce8:	1080020b 	ldhu	r2,8(r2)
   52cec:	10bfffcc 	andi	r2,r2,65535
   52cf0:	1000021e 	bne	r2,zero,52cfc <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   52cf4:	00bfff44 	movi	r2,-3
   52cf8:	00000f06 	br	52d38 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   52cfc:	e0bffd17 	ldw	r2,-12(fp)
   52d00:	11000c17 	ldw	r4,48(r2)
   52d04:	e0bffe17 	ldw	r2,-8(fp)
   52d08:	1080028b 	ldhu	r2,10(r2)
   52d0c:	10ffffcc 	andi	r3,r2,65535
   52d10:	e0bffe17 	ldw	r2,-8(fp)
   52d14:	1080020b 	ldhu	r2,8(r2)
   52d18:	10bfffcc 	andi	r2,r2,65535
   52d1c:	1885883a 	add	r2,r3,r2
   52d20:	100b883a 	mov	r5,r2
   52d24:	00432240 	call	43224 <__udivsi3>
   52d28:	1007883a 	mov	r3,r2
   52d2c:	e0bfff17 	ldw	r2,-4(fp)
   52d30:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   52d34:	0005883a 	mov	r2,zero
}
   52d38:	e037883a 	mov	sp,fp
   52d3c:	dfc00117 	ldw	ra,4(sp)
   52d40:	df000017 	ldw	fp,0(sp)
   52d44:	dec00204 	addi	sp,sp,8
   52d48:	f800283a 	ret

00052d4c <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   52d4c:	defff904 	addi	sp,sp,-28
   52d50:	dfc00615 	stw	ra,24(sp)
   52d54:	df000515 	stw	fp,20(sp)
   52d58:	df000504 	addi	fp,sp,20
   52d5c:	e13ffd15 	stw	r4,-12(fp)
   52d60:	e17ffe15 	stw	r5,-8(fp)
   52d64:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   52d68:	e0ffff17 	ldw	r3,-4(fp)
   52d6c:	008001b4 	movhi	r2,6
   52d70:	1086a004 	addi	r2,r2,6784
   52d74:	10c00436 	bltu	r2,r3,52d88 <alt_avalon_i2c_master_config_speed_set+0x3c>
   52d78:	e0bfff17 	ldw	r2,-4(fp)
   52d7c:	10000226 	beq	r2,zero,52d88 <alt_avalon_i2c_master_config_speed_set+0x3c>
   52d80:	e0bfff17 	ldw	r2,-4(fp)
   52d84:	1000021e 	bne	r2,zero,52d90 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   52d88:	00bfff04 	movi	r2,-4
   52d8c:	00002906 	br	52e34 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   52d90:	e0bffd17 	ldw	r2,-12(fp)
   52d94:	10c00c17 	ldw	r3,48(r2)
   52d98:	e0bfff17 	ldw	r2,-4(fp)
   52d9c:	1085883a 	add	r2,r2,r2
   52da0:	100b883a 	mov	r5,r2
   52da4:	1809883a 	mov	r4,r3
   52da8:	00432240 	call	43224 <__udivsi3>
   52dac:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   52db0:	e0bffb17 	ldw	r2,-20(fp)
   52db4:	10800f04 	addi	r2,r2,60
   52db8:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   52dbc:	e0bffb17 	ldw	r2,-20(fp)
   52dc0:	10bff104 	addi	r2,r2,-60
   52dc4:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   52dc8:	e0ffff17 	ldw	r3,-4(fp)
   52dcc:	008000b4 	movhi	r2,2
   52dd0:	10a1a804 	addi	r2,r2,-31072
   52dd4:	10c0042e 	bgeu	r2,r3,52de8 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   52dd8:	e0bffe17 	ldw	r2,-8(fp)
   52ddc:	00c00044 	movi	r3,1
   52de0:	10c00115 	stw	r3,4(r2)
   52de4:	00000206 	br	52df0 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   52de8:	e0bffe17 	ldw	r2,-8(fp)
   52dec:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   52df0:	e0bffb17 	ldw	r2,-20(fp)
   52df4:	1007883a 	mov	r3,r2
   52df8:	e0bffe17 	ldw	r2,-8(fp)
   52dfc:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   52e00:	e0bffc17 	ldw	r2,-16(fp)
   52e04:	1007883a 	mov	r3,r2
   52e08:	e0bffe17 	ldw	r2,-8(fp)
   52e0c:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   52e10:	e0bffb17 	ldw	r2,-20(fp)
   52e14:	1007883a 	mov	r3,r2
   52e18:	e0bffb17 	ldw	r2,-20(fp)
   52e1c:	1004d07a 	srli	r2,r2,1
   52e20:	1885c83a 	sub	r2,r3,r2
   52e24:	1007883a 	mov	r3,r2
   52e28:	e0bffe17 	ldw	r2,-8(fp)
   52e2c:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   52e30:	0005883a 	mov	r2,zero

}
   52e34:	e037883a 	mov	sp,fp
   52e38:	dfc00117 	ldw	ra,4(sp)
   52e3c:	df000017 	ldw	fp,0(sp)
   52e40:	dec00204 	addi	sp,sp,8
   52e44:	f800283a 	ret

00052e48 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   52e48:	defffe04 	addi	sp,sp,-8
   52e4c:	df000115 	stw	fp,4(sp)
   52e50:	df000104 	addi	fp,sp,4
   52e54:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   52e58:	e0bfff17 	ldw	r2,-4(fp)
   52e5c:	10800317 	ldw	r2,12(r2)
   52e60:	10800504 	addi	r2,r2,20
   52e64:	10800037 	ldwio	r2,0(r2)
   52e68:	1080004c 	andi	r2,r2,1
   52e6c:	10000226 	beq	r2,zero,52e78 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   52e70:	00800044 	movi	r2,1
   52e74:	00000106 	br	52e7c <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   52e78:	0005883a 	mov	r2,zero
}
   52e7c:	e037883a 	mov	sp,fp
   52e80:	df000017 	ldw	fp,0(sp)
   52e84:	dec00104 	addi	sp,sp,4
   52e88:	f800283a 	ret

00052e8c <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   52e8c:	defffb04 	addi	sp,sp,-20
   52e90:	df000415 	stw	fp,16(sp)
   52e94:	df000404 	addi	fp,sp,16
   52e98:	e13ffc15 	stw	r4,-16(fp)
   52e9c:	e17ffd15 	stw	r5,-12(fp)
   52ea0:	e1bffe15 	stw	r6,-8(fp)
   52ea4:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   52ea8:	e0bfff17 	ldw	r2,-4(fp)
   52eac:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   52eb0:	00001406 	br	52f04 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   52eb4:	e0bfff17 	ldw	r2,-4(fp)
   52eb8:	10800017 	ldw	r2,0(r2)
   52ebc:	e0fffd17 	ldw	r3,-12(fp)
   52ec0:	1885883a 	add	r2,r3,r2
   52ec4:	e0fffc17 	ldw	r3,-16(fp)
   52ec8:	18c00317 	ldw	r3,12(r3)
   52ecc:	18c00104 	addi	r3,r3,4
   52ed0:	18c00037 	ldwio	r3,0(r3)
   52ed4:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   52ed8:	e0bfff17 	ldw	r2,-4(fp)
   52edc:	10800017 	ldw	r2,0(r2)
   52ee0:	10c00044 	addi	r3,r2,1
   52ee4:	e0bfff17 	ldw	r2,-4(fp)
   52ee8:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   52eec:	e0bfff17 	ldw	r2,-4(fp)
   52ef0:	10c00017 	ldw	r3,0(r2)
   52ef4:	e0bffe17 	ldw	r2,-8(fp)
   52ef8:	1880021e 	bne	r3,r2,52f04 <alt_avalon_i2c_rx_read_available+0x78>
   52efc:	e0bffe17 	ldw	r2,-8(fp)
   52f00:	1000061e 	bne	r2,zero,52f1c <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   52f04:	e0bffc17 	ldw	r2,-16(fp)
   52f08:	10800317 	ldw	r2,12(r2)
   52f0c:	10800704 	addi	r2,r2,28
   52f10:	10800037 	ldwio	r2,0(r2)
   52f14:	103fe71e 	bne	r2,zero,52eb4 <__alt_data_end+0xfffebdb4>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   52f18:	00000106 	br	52f20 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   52f1c:	0001883a 	nop
    }
}
   52f20:	0001883a 	nop
   52f24:	e037883a 	mov	sp,fp
   52f28:	df000017 	ldw	fp,0(sp)
   52f2c:	dec00104 	addi	sp,sp,4
   52f30:	f800283a 	ret

00052f34 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   52f34:	defffa04 	addi	sp,sp,-24
   52f38:	dfc00515 	stw	ra,20(sp)
   52f3c:	df000415 	stw	fp,16(sp)
   52f40:	df000404 	addi	fp,sp,16
   52f44:	e13ffe15 	stw	r4,-8(fp)
   52f48:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   52f4c:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   52f50:	008000b4 	movhi	r2,2
   52f54:	10a1a804 	addi	r2,r2,-31072
   52f58:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   52f5c:	00000d06 	br	52f94 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   52f60:	e0bffd17 	ldw	r2,-12(fp)
   52f64:	108002a8 	cmpgeui	r2,r2,10
   52f68:	1000021e 	bne	r2,zero,52f74 <alt_avalon_i2c_rx_read+0x40>
   52f6c:	0109c404 	movi	r4,10000
   52f70:	00552f40 	call	552f4 <alt_busy_sleep>
      if (--timeout == 0)
   52f74:	e0bffd17 	ldw	r2,-12(fp)
   52f78:	10bfffc4 	addi	r2,r2,-1
   52f7c:	e0bffd15 	stw	r2,-12(fp)
   52f80:	e0bffd17 	ldw	r2,-12(fp)
   52f84:	1000031e 	bne	r2,zero,52f94 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   52f88:	00bfff84 	movi	r2,-2
   52f8c:	e0bffc15 	stw	r2,-16(fp)
        break;
   52f90:	00000506 	br	52fa8 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   52f94:	e0bffe17 	ldw	r2,-8(fp)
   52f98:	10800317 	ldw	r2,12(r2)
   52f9c:	10800704 	addi	r2,r2,28
   52fa0:	10800037 	ldwio	r2,0(r2)
   52fa4:	103fee26 	beq	r2,zero,52f60 <__alt_data_end+0xfffebe60>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   52fa8:	e0bffe17 	ldw	r2,-8(fp)
   52fac:	10800317 	ldw	r2,12(r2)
   52fb0:	10800104 	addi	r2,r2,4
   52fb4:	10800037 	ldwio	r2,0(r2)
   52fb8:	1007883a 	mov	r3,r2
   52fbc:	e0bfff17 	ldw	r2,-4(fp)
   52fc0:	10c00005 	stb	r3,0(r2)
        
    return status;
   52fc4:	e0bffc17 	ldw	r2,-16(fp)
}
   52fc8:	e037883a 	mov	sp,fp
   52fcc:	dfc00117 	ldw	ra,4(sp)
   52fd0:	df000017 	ldw	fp,0(sp)
   52fd4:	dec00204 	addi	sp,sp,8
   52fd8:	f800283a 	ret

00052fdc <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   52fdc:	defff804 	addi	sp,sp,-32
   52fe0:	dfc00715 	stw	ra,28(sp)
   52fe4:	df000615 	stw	fp,24(sp)
   52fe8:	df000604 	addi	fp,sp,24
   52fec:	e13ffc15 	stw	r4,-16(fp)
   52ff0:	2809883a 	mov	r4,r5
   52ff4:	3007883a 	mov	r3,r6
   52ff8:	3805883a 	mov	r2,r7
   52ffc:	e13ffd05 	stb	r4,-12(fp)
   53000:	e0fffe05 	stb	r3,-8(fp)
   53004:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   53008:	0089c404 	movi	r2,10000
   5300c:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   53010:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   53014:	00000c06 	br	53048 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   53018:	e0bffa17 	ldw	r2,-24(fp)
   5301c:	108002a8 	cmpgeui	r2,r2,10
   53020:	1000021e 	bne	r2,zero,5302c <alt_avalon_i2c_cmd_write+0x50>
   53024:	0109c404 	movi	r4,10000
   53028:	00552f40 	call	552f4 <alt_busy_sleep>
      if (--timeout == 0)
   5302c:	e0bffa17 	ldw	r2,-24(fp)
   53030:	10bfffc4 	addi	r2,r2,-1
   53034:	e0bffa15 	stw	r2,-24(fp)
   53038:	e0bffa17 	ldw	r2,-24(fp)
   5303c:	1000021e 	bne	r2,zero,53048 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   53040:	00bfff84 	movi	r2,-2
   53044:	00001906 	br	530ac <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   53048:	e0bffc17 	ldw	r2,-16(fp)
   5304c:	10800317 	ldw	r2,12(r2)
   53050:	10800404 	addi	r2,r2,16
   53054:	10800037 	ldwio	r2,0(r2)
   53058:	1080004c 	andi	r2,r2,1
   5305c:	103fee26 	beq	r2,zero,53018 <__alt_data_end+0xfffebf18>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   53060:	e0bffc17 	ldw	r2,-16(fp)
   53064:	10800317 	ldw	r2,12(r2)
   53068:	e13ffd03 	ldbu	r4,-12(fp)
   5306c:	e0fffe03 	ldbu	r3,-8(fp)
   53070:	1806927a 	slli	r3,r3,9
   53074:	20c8b03a 	or	r4,r4,r3
   53078:	e0ffff03 	ldbu	r3,-4(fp)
   5307c:	1806923a 	slli	r3,r3,8
   53080:	20c6b03a 	or	r3,r4,r3
   53084:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   53088:	e0bffb04 	addi	r2,fp,-20
   5308c:	100b883a 	mov	r5,r2
   53090:	e13ffc17 	ldw	r4,-16(fp)
   53094:	005321c0 	call	5321c <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   53098:	e0bffb04 	addi	r2,fp,-20
   5309c:	100b883a 	mov	r5,r2
   530a0:	e13ffc17 	ldw	r4,-16(fp)
   530a4:	00532680 	call	53268 <alt_avalon_i2c_check_arblost>
    
    return status;
   530a8:	e0bffb17 	ldw	r2,-20(fp)
}
   530ac:	e037883a 	mov	sp,fp
   530b0:	dfc00117 	ldw	ra,4(sp)
   530b4:	df000017 	ldw	fp,0(sp)
   530b8:	dec00204 	addi	sp,sp,8
   530bc:	f800283a 	ret

000530c0 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   530c0:	defffa04 	addi	sp,sp,-24
   530c4:	dfc00515 	stw	ra,20(sp)
   530c8:	df000415 	stw	fp,16(sp)
   530cc:	df000404 	addi	fp,sp,16
   530d0:	e13ffd15 	stw	r4,-12(fp)
   530d4:	e17ffe15 	stw	r5,-8(fp)
   530d8:	3005883a 	mov	r2,r6
   530dc:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   530e0:	e0bffd17 	ldw	r2,-12(fp)
   530e4:	10800d17 	ldw	r2,52(r2)
   530e8:	10800058 	cmpnei	r2,r2,1
   530ec:	10001c1e 	bne	r2,zero,53160 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   530f0:	e0bffd17 	ldw	r2,-12(fp)
   530f4:	10800917 	ldw	r2,36(r2)
   530f8:	109e0014 	ori	r2,r2,30720
   530fc:	1004d1fa 	srli	r2,r2,7
   53100:	1007883a 	mov	r3,r2
   53104:	00bfff84 	movi	r2,-2
   53108:	1884703a 	and	r2,r3,r2
   5310c:	1007883a 	mov	r3,r2
   53110:	e0bffe17 	ldw	r2,-8(fp)
   53114:	1884b03a 	or	r2,r3,r2
   53118:	10803fcc 	andi	r2,r2,255
   5311c:	e0ffff03 	ldbu	r3,-4(fp)
   53120:	000f883a 	mov	r7,zero
   53124:	180d883a 	mov	r6,r3
   53128:	100b883a 	mov	r5,r2
   5312c:	e13ffd17 	ldw	r4,-12(fp)
   53130:	0052fdc0 	call	52fdc <alt_avalon_i2c_cmd_write>
   53134:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   53138:	e0bffd17 	ldw	r2,-12(fp)
   5313c:	10800917 	ldw	r2,36(r2)
   53140:	10803fcc 	andi	r2,r2,255
   53144:	000f883a 	mov	r7,zero
   53148:	000d883a 	mov	r6,zero
   5314c:	100b883a 	mov	r5,r2
   53150:	e13ffd17 	ldw	r4,-12(fp)
   53154:	0052fdc0 	call	52fdc <alt_avalon_i2c_cmd_write>
   53158:	e0bffc15 	stw	r2,-16(fp)
   5315c:	00000e06 	br	53198 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   53160:	e0bffd17 	ldw	r2,-12(fp)
   53164:	10800917 	ldw	r2,36(r2)
   53168:	1085883a 	add	r2,r2,r2
   5316c:	1007883a 	mov	r3,r2
   53170:	e0bffe17 	ldw	r2,-8(fp)
   53174:	1884b03a 	or	r2,r3,r2
   53178:	10803fcc 	andi	r2,r2,255
   5317c:	e0ffff03 	ldbu	r3,-4(fp)
   53180:	000f883a 	mov	r7,zero
   53184:	180d883a 	mov	r6,r3
   53188:	100b883a 	mov	r5,r2
   5318c:	e13ffd17 	ldw	r4,-12(fp)
   53190:	0052fdc0 	call	52fdc <alt_avalon_i2c_cmd_write>
   53194:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   53198:	e0bffc17 	ldw	r2,-16(fp)
}
   5319c:	e037883a 	mov	sp,fp
   531a0:	dfc00117 	ldw	ra,4(sp)
   531a4:	df000017 	ldw	fp,0(sp)
   531a8:	dec00204 	addi	sp,sp,8
   531ac:	f800283a 	ret

000531b0 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   531b0:	defffd04 	addi	sp,sp,-12
   531b4:	df000215 	stw	fp,8(sp)
   531b8:	df000204 	addi	fp,sp,8
   531bc:	e13ffe15 	stw	r4,-8(fp)
   531c0:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   531c4:	e0bffe17 	ldw	r2,-8(fp)
   531c8:	10c00917 	ldw	r3,36(r2)
   531cc:	e0bfff17 	ldw	r2,-4(fp)
   531d0:	10c00015 	stw	r3,0(r2)
}
   531d4:	0001883a 	nop
   531d8:	e037883a 	mov	sp,fp
   531dc:	df000017 	ldw	fp,0(sp)
   531e0:	dec00104 	addi	sp,sp,4
   531e4:	f800283a 	ret

000531e8 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   531e8:	defffd04 	addi	sp,sp,-12
   531ec:	df000215 	stw	fp,8(sp)
   531f0:	df000204 	addi	fp,sp,8
   531f4:	e13ffe15 	stw	r4,-8(fp)
   531f8:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   531fc:	e0bffe17 	ldw	r2,-8(fp)
   53200:	e0ffff17 	ldw	r3,-4(fp)
   53204:	10c00915 	stw	r3,36(r2)
}
   53208:	0001883a 	nop
   5320c:	e037883a 	mov	sp,fp
   53210:	df000017 	ldw	fp,0(sp)
   53214:	dec00104 	addi	sp,sp,4
   53218:	f800283a 	ret

0005321c <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   5321c:	defffd04 	addi	sp,sp,-12
   53220:	df000215 	stw	fp,8(sp)
   53224:	df000204 	addi	fp,sp,8
   53228:	e13ffe15 	stw	r4,-8(fp)
   5322c:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   53230:	e0bffe17 	ldw	r2,-8(fp)
   53234:	10800317 	ldw	r2,12(r2)
   53238:	10800404 	addi	r2,r2,16
   5323c:	10800037 	ldwio	r2,0(r2)
   53240:	1080010c 	andi	r2,r2,4
   53244:	10000326 	beq	r2,zero,53254 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   53248:	e0bfff17 	ldw	r2,-4(fp)
   5324c:	00fffec4 	movi	r3,-5
   53250:	10c00015 	stw	r3,0(r2)
    }
}
   53254:	0001883a 	nop
   53258:	e037883a 	mov	sp,fp
   5325c:	df000017 	ldw	fp,0(sp)
   53260:	dec00104 	addi	sp,sp,4
   53264:	f800283a 	ret

00053268 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   53268:	defffd04 	addi	sp,sp,-12
   5326c:	df000215 	stw	fp,8(sp)
   53270:	df000204 	addi	fp,sp,8
   53274:	e13ffe15 	stw	r4,-8(fp)
   53278:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   5327c:	e0bffe17 	ldw	r2,-8(fp)
   53280:	10800317 	ldw	r2,12(r2)
   53284:	10800404 	addi	r2,r2,16
   53288:	10800037 	ldwio	r2,0(r2)
   5328c:	1080020c 	andi	r2,r2,8
   53290:	10000326 	beq	r2,zero,532a0 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   53294:	e0bfff17 	ldw	r2,-4(fp)
   53298:	00fffe84 	movi	r3,-6
   5329c:	10c00015 	stw	r3,0(r2)
    }
}
   532a0:	0001883a 	nop
   532a4:	e037883a 	mov	sp,fp
   532a8:	df000017 	ldw	fp,0(sp)
   532ac:	dec00104 	addi	sp,sp,4
   532b0:	f800283a 	ret

000532b4 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   532b4:	defff804 	addi	sp,sp,-32
   532b8:	dfc00715 	stw	ra,28(sp)
   532bc:	df000615 	stw	fp,24(sp)
   532c0:	df000604 	addi	fp,sp,24
   532c4:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   532c8:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   532cc:	e0bfff17 	ldw	r2,-4(fp)
   532d0:	10800717 	ldw	r2,28(r2)
   532d4:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   532d8:	e0bffb17 	ldw	r2,-20(fp)
   532dc:	10800117 	ldw	r2,4(r2)
   532e0:	10800044 	addi	r2,r2,1
   532e4:	1089c424 	muli	r2,r2,10000
   532e8:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   532ec:	e0bffd04 	addi	r2,fp,-12
   532f0:	100b883a 	mov	r5,r2
   532f4:	e13fff17 	ldw	r4,-4(fp)
   532f8:	00541340 	call	54134 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   532fc:	e0bffd17 	ldw	r2,-12(fp)
   53300:	100b883a 	mov	r5,r2
   53304:	e13fff17 	ldw	r4,-4(fp)
   53308:	00540680 	call	54068 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   5330c:	e0bffc04 	addi	r2,fp,-16
   53310:	100b883a 	mov	r5,r2
   53314:	e13fff17 	ldw	r4,-4(fp)
   53318:	005321c0 	call	5321c <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   5331c:	e0bffc17 	ldw	r2,-16(fp)
   53320:	10002226 	beq	r2,zero,533ac <alt_avalon_i2c_interrupt_transaction_status+0xf8>
    {
      if (irq_data->irq_busy)
   53324:	e0bffb17 	ldw	r2,-20(fp)
   53328:	10800217 	ldw	r2,8(r2)
   5332c:	10001d26 	beq	r2,zero,533a4 <alt_avalon_i2c_interrupt_transaction_status+0xf0>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   53330:	00000d06 	br	53368 <alt_avalon_i2c_interrupt_transaction_status+0xb4>
        {
              if (timeout<10) alt_busy_sleep(10000);
   53334:	e0bffa17 	ldw	r2,-24(fp)
   53338:	108002a8 	cmpgeui	r2,r2,10
   5333c:	1000021e 	bne	r2,zero,53348 <alt_avalon_i2c_interrupt_transaction_status+0x94>
   53340:	0109c404 	movi	r4,10000
   53344:	00552f40 	call	552f4 <alt_busy_sleep>
              if (--timeout == 0)
   53348:	e0bffa17 	ldw	r2,-24(fp)
   5334c:	10bfffc4 	addi	r2,r2,-1
   53350:	e0bffa15 	stw	r2,-24(fp)
   53354:	e0bffa17 	ldw	r2,-24(fp)
   53358:	1000031e 	bne	r2,zero,53368 <alt_avalon_i2c_interrupt_transaction_status+0xb4>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   5335c:	00bfff84 	movi	r2,-2
   53360:	e0bffc15 	stw	r2,-16(fp)
                 break;
   53364:	00000306 	br	53374 <alt_avalon_i2c_interrupt_transaction_status+0xc0>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   53368:	e13fff17 	ldw	r4,-4(fp)
   5336c:	0052e480 	call	52e48 <alt_avalon_i2c_is_busy>
   53370:	103ff01e 	bne	r2,zero,53334 <__alt_data_end+0xfffec234>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   53374:	e0bffb17 	ldw	r2,-20(fp)
   53378:	10800017 	ldw	r2,0(r2)
   5337c:	e0fffe04 	addi	r3,fp,-8
   53380:	180f883a 	mov	r7,r3
   53384:	000d883a 	mov	r6,zero
   53388:	100b883a 	mov	r5,r2
   5338c:	e13fff17 	ldw	r4,-4(fp)
   53390:	0052e8c0 	call	52e8c <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   53394:	e13fff17 	ldw	r4,-4(fp)
   53398:	0052af00 	call	52af0 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   5339c:	e0bffb17 	ldw	r2,-20(fp)
   533a0:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   533a4:	e0bffc17 	ldw	r2,-16(fp)
   533a8:	00000a06 	br	533d4 <alt_avalon_i2c_interrupt_transaction_status+0x120>
    }
    
    if (irq_data->irq_busy)
   533ac:	e0bffb17 	ldw	r2,-20(fp)
   533b0:	10800217 	ldw	r2,8(r2)
   533b4:	10000626 	beq	r2,zero,533d0 <alt_avalon_i2c_interrupt_transaction_status+0x11c>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   533b8:	e0bffd17 	ldw	r2,-12(fp)
   533bc:	100b883a 	mov	r5,r2
   533c0:	e13fff17 	ldw	r4,-4(fp)
   533c4:	00540d00 	call	540d0 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   533c8:	00bffe44 	movi	r2,-7
   533cc:	00000106 	br	533d4 <alt_avalon_i2c_interrupt_transaction_status+0x120>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   533d0:	0005883a 	mov	r2,zero
}
   533d4:	e037883a 	mov	sp,fp
   533d8:	dfc00117 	ldw	ra,4(sp)
   533dc:	df000017 	ldw	fp,0(sp)
   533e0:	dec00204 	addi	sp,sp,8
   533e4:	f800283a 	ret

000533e8 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   533e8:	defff704 	addi	sp,sp,-36
   533ec:	dfc00815 	stw	ra,32(sp)
   533f0:	df000715 	stw	fp,28(sp)
   533f4:	df000704 	addi	fp,sp,28
   533f8:	e13ffc15 	stw	r4,-16(fp)
   533fc:	e17ffd15 	stw	r5,-12(fp)
   53400:	e1bffe15 	stw	r6,-8(fp)
   53404:	3805883a 	mov	r2,r7
   53408:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   5340c:	0089c404 	movi	r2,10000
   53410:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   53414:	00002206 	br	534a0 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   53418:	e0bffb17 	ldw	r2,-20(fp)
   5341c:	108002a8 	cmpgeui	r2,r2,10
   53420:	1000021e 	bne	r2,zero,5342c <alt_avalon_i2c_master_tx+0x44>
   53424:	0109c404 	movi	r4,10000
   53428:	00552f40 	call	552f4 <alt_busy_sleep>
      if (use_interrupts)
   5342c:	e0bfff03 	ldbu	r2,-4(fp)
   53430:	10000926 	beq	r2,zero,53458 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   53434:	00800044 	movi	r2,1
   53438:	d8800015 	stw	r2,0(sp)
   5343c:	000f883a 	mov	r7,zero
   53440:	e1bffe17 	ldw	r6,-8(fp)
   53444:	e17ffd17 	ldw	r5,-12(fp)
   53448:	e13ffc17 	ldw	r4,-16(fp)
   5344c:	00539900 	call	53990 <alt_avalon_i2c_master_transmit_using_interrupts>
   53450:	e0bffa15 	stw	r2,-24(fp)
   53454:	00000806 	br	53478 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   53458:	00800044 	movi	r2,1
   5345c:	d8800015 	stw	r2,0(sp)
   53460:	000f883a 	mov	r7,zero
   53464:	e1bffe17 	ldw	r6,-8(fp)
   53468:	e17ffd17 	ldw	r5,-12(fp)
   5346c:	e13ffc17 	ldw	r4,-16(fp)
   53470:	00537d40 	call	537d4 <alt_avalon_i2c_master_transmit>
   53474:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   53478:	e0bffa17 	ldw	r2,-24(fp)
   5347c:	10bffea0 	cmpeqi	r2,r2,-6
   53480:	1000061e 	bne	r2,zero,5349c <alt_avalon_i2c_master_tx+0xb4>
   53484:	e0bffa17 	ldw	r2,-24(fp)
   53488:	10bffee0 	cmpeqi	r2,r2,-5
   5348c:	1000031e 	bne	r2,zero,5349c <alt_avalon_i2c_master_tx+0xb4>
   53490:	e0bffa17 	ldw	r2,-24(fp)
   53494:	10bffe58 	cmpnei	r2,r2,-7
   53498:	1000061e 	bne	r2,zero,534b4 <alt_avalon_i2c_master_tx+0xcc>
   5349c:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   534a0:	e0bffb17 	ldw	r2,-20(fp)
   534a4:	10ffffc4 	addi	r3,r2,-1
   534a8:	e0fffb15 	stw	r3,-20(fp)
   534ac:	103fda1e 	bne	r2,zero,53418 <__alt_data_end+0xfffec318>
   534b0:	00000106 	br	534b8 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   534b4:	0001883a 	nop
    }

    return status;
   534b8:	e0bffa17 	ldw	r2,-24(fp)
}        
   534bc:	e037883a 	mov	sp,fp
   534c0:	dfc00117 	ldw	ra,4(sp)
   534c4:	df000017 	ldw	fp,0(sp)
   534c8:	dec00204 	addi	sp,sp,8
   534cc:	f800283a 	ret

000534d0 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   534d0:	defff704 	addi	sp,sp,-36
   534d4:	dfc00815 	stw	ra,32(sp)
   534d8:	df000715 	stw	fp,28(sp)
   534dc:	df000704 	addi	fp,sp,28
   534e0:	e13ffc15 	stw	r4,-16(fp)
   534e4:	e17ffd15 	stw	r5,-12(fp)
   534e8:	e1bffe15 	stw	r6,-8(fp)
   534ec:	3805883a 	mov	r2,r7
   534f0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   534f4:	0089c404 	movi	r2,10000
   534f8:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   534fc:	e0bfff03 	ldbu	r2,-4(fp)
   53500:	10003426 	beq	r2,zero,535d4 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   53504:	00001706 	br	53564 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   53508:	e0bffb17 	ldw	r2,-20(fp)
   5350c:	108002a8 	cmpgeui	r2,r2,10
   53510:	1000021e 	bne	r2,zero,5351c <alt_avalon_i2c_master_rx+0x4c>
   53514:	0109c404 	movi	r4,10000
   53518:	00552f40 	call	552f4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   5351c:	00800044 	movi	r2,1
   53520:	d8800015 	stw	r2,0(sp)
   53524:	000f883a 	mov	r7,zero
   53528:	e1bffe17 	ldw	r6,-8(fp)
   5352c:	e17ffd17 	ldw	r5,-12(fp)
   53530:	e13ffc17 	ldw	r4,-16(fp)
   53534:	0053da40 	call	53da4 <alt_avalon_i2c_master_receive_using_interrupts>
   53538:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   5353c:	e0bffa17 	ldw	r2,-24(fp)
   53540:	10bffea0 	cmpeqi	r2,r2,-6
   53544:	1000061e 	bne	r2,zero,53560 <alt_avalon_i2c_master_rx+0x90>
   53548:	e0bffa17 	ldw	r2,-24(fp)
   5354c:	10bffee0 	cmpeqi	r2,r2,-5
   53550:	1000031e 	bne	r2,zero,53560 <alt_avalon_i2c_master_rx+0x90>
   53554:	e0bffa17 	ldw	r2,-24(fp)
   53558:	10bffe58 	cmpnei	r2,r2,-7
   5355c:	1000221e 	bne	r2,zero,535e8 <alt_avalon_i2c_master_rx+0x118>
   53560:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   53564:	e0bffb17 	ldw	r2,-20(fp)
   53568:	10ffffc4 	addi	r3,r2,-1
   5356c:	e0fffb15 	stw	r3,-20(fp)
   53570:	103fe51e 	bne	r2,zero,53508 <__alt_data_end+0xfffec408>
   53574:	00001f06 	br	535f4 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   53578:	e0bffb17 	ldw	r2,-20(fp)
   5357c:	108002a8 	cmpgeui	r2,r2,10
   53580:	1000021e 	bne	r2,zero,5358c <alt_avalon_i2c_master_rx+0xbc>
   53584:	0109c404 	movi	r4,10000
   53588:	00552f40 	call	552f4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   5358c:	00800044 	movi	r2,1
   53590:	d8800015 	stw	r2,0(sp)
   53594:	000f883a 	mov	r7,zero
   53598:	e1bffe17 	ldw	r6,-8(fp)
   5359c:	e17ffd17 	ldw	r5,-12(fp)
   535a0:	e13ffc17 	ldw	r4,-16(fp)
   535a4:	0053b980 	call	53b98 <alt_avalon_i2c_master_receive>
   535a8:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   535ac:	e0bffa17 	ldw	r2,-24(fp)
   535b0:	10bffea0 	cmpeqi	r2,r2,-6
   535b4:	1000061e 	bne	r2,zero,535d0 <alt_avalon_i2c_master_rx+0x100>
   535b8:	e0bffa17 	ldw	r2,-24(fp)
   535bc:	10bffee0 	cmpeqi	r2,r2,-5
   535c0:	1000031e 	bne	r2,zero,535d0 <alt_avalon_i2c_master_rx+0x100>
   535c4:	e0bffa17 	ldw	r2,-24(fp)
   535c8:	10bffe58 	cmpnei	r2,r2,-7
   535cc:	1000081e 	bne	r2,zero,535f0 <alt_avalon_i2c_master_rx+0x120>
   535d0:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   535d4:	e0bffb17 	ldw	r2,-20(fp)
   535d8:	10ffffc4 	addi	r3,r2,-1
   535dc:	e0fffb15 	stw	r3,-20(fp)
   535e0:	103fe51e 	bne	r2,zero,53578 <__alt_data_end+0xfffec478>
   535e4:	00000306 	br	535f4 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   535e8:	0001883a 	nop
   535ec:	00000106 	br	535f4 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   535f0:	0001883a 	nop
      }
    }
    
    return status;
   535f4:	e0bffa17 	ldw	r2,-24(fp)
}        
   535f8:	e037883a 	mov	sp,fp
   535fc:	dfc00117 	ldw	ra,4(sp)
   53600:	df000017 	ldw	fp,0(sp)
   53604:	dec00204 	addi	sp,sp,8
   53608:	f800283a 	ret

0005360c <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   5360c:	defff604 	addi	sp,sp,-40
   53610:	dfc00915 	stw	ra,36(sp)
   53614:	df000815 	stw	fp,32(sp)
   53618:	df000804 	addi	fp,sp,32
   5361c:	e13ffb15 	stw	r4,-20(fp)
   53620:	e17ffc15 	stw	r5,-16(fp)
   53624:	e1bffd15 	stw	r6,-12(fp)
   53628:	e1fffe15 	stw	r7,-8(fp)
   5362c:	e0800317 	ldw	r2,12(fp)
   53630:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   53634:	0089c404 	movi	r2,10000
   53638:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   5363c:	e0bfff03 	ldbu	r2,-4(fp)
   53640:	10005626 	beq	r2,zero,5379c <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   53644:	00002806 	br	536e8 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   53648:	e0bffa17 	ldw	r2,-24(fp)
   5364c:	108002a8 	cmpgeui	r2,r2,10
   53650:	1000021e 	bne	r2,zero,5365c <alt_avalon_i2c_master_tx_rx+0x50>
   53654:	0109c404 	movi	r4,10000
   53658:	00552f40 	call	552f4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   5365c:	d8000015 	stw	zero,0(sp)
   53660:	000f883a 	mov	r7,zero
   53664:	e1bffd17 	ldw	r6,-12(fp)
   53668:	e17ffc17 	ldw	r5,-16(fp)
   5366c:	e13ffb17 	ldw	r4,-20(fp)
   53670:	00539900 	call	53990 <alt_avalon_i2c_master_transmit_using_interrupts>
   53674:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   53678:	e0bff917 	ldw	r2,-28(fp)
   5367c:	10bffea0 	cmpeqi	r2,r2,-6
   53680:	1000191e 	bne	r2,zero,536e8 <alt_avalon_i2c_master_tx_rx+0xdc>
   53684:	e0bff917 	ldw	r2,-28(fp)
   53688:	10bffee0 	cmpeqi	r2,r2,-5
   5368c:	1000161e 	bne	r2,zero,536e8 <alt_avalon_i2c_master_tx_rx+0xdc>
   53690:	e0bff917 	ldw	r2,-28(fp)
   53694:	10bffe58 	cmpnei	r2,r2,-7
   53698:	1000011e 	bne	r2,zero,536a0 <alt_avalon_i2c_master_tx_rx+0x94>
   5369c:	00001206 	br	536e8 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   536a0:	00800044 	movi	r2,1
   536a4:	d8800015 	stw	r2,0(sp)
   536a8:	01c00044 	movi	r7,1
   536ac:	e1800217 	ldw	r6,8(fp)
   536b0:	e17ffe17 	ldw	r5,-8(fp)
   536b4:	e13ffb17 	ldw	r4,-20(fp)
   536b8:	0053da40 	call	53da4 <alt_avalon_i2c_master_receive_using_interrupts>
   536bc:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   536c0:	e0bff917 	ldw	r2,-28(fp)
   536c4:	10bffea0 	cmpeqi	r2,r2,-6
   536c8:	1000061e 	bne	r2,zero,536e4 <alt_avalon_i2c_master_tx_rx+0xd8>
   536cc:	e0bff917 	ldw	r2,-28(fp)
   536d0:	10bffee0 	cmpeqi	r2,r2,-5
   536d4:	1000031e 	bne	r2,zero,536e4 <alt_avalon_i2c_master_tx_rx+0xd8>
   536d8:	e0bff917 	ldw	r2,-28(fp)
   536dc:	10bffe58 	cmpnei	r2,r2,-7
   536e0:	1000331e 	bne	r2,zero,537b0 <alt_avalon_i2c_master_tx_rx+0x1a4>
   536e4:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   536e8:	e0bffa17 	ldw	r2,-24(fp)
   536ec:	10ffffc4 	addi	r3,r2,-1
   536f0:	e0fffa15 	stw	r3,-24(fp)
   536f4:	103fd41e 	bne	r2,zero,53648 <__alt_data_end+0xfffec548>
   536f8:	00003006 	br	537bc <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   536fc:	e0bffa17 	ldw	r2,-24(fp)
   53700:	108002a8 	cmpgeui	r2,r2,10
   53704:	1000021e 	bne	r2,zero,53710 <alt_avalon_i2c_master_tx_rx+0x104>
   53708:	0109c404 	movi	r4,10000
   5370c:	00552f40 	call	552f4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   53710:	d8000015 	stw	zero,0(sp)
   53714:	000f883a 	mov	r7,zero
   53718:	e1bffd17 	ldw	r6,-12(fp)
   5371c:	e17ffc17 	ldw	r5,-16(fp)
   53720:	e13ffb17 	ldw	r4,-20(fp)
   53724:	00537d40 	call	537d4 <alt_avalon_i2c_master_transmit>
   53728:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   5372c:	e0bff917 	ldw	r2,-28(fp)
   53730:	10bffea0 	cmpeqi	r2,r2,-6
   53734:	1000191e 	bne	r2,zero,5379c <alt_avalon_i2c_master_tx_rx+0x190>
   53738:	e0bff917 	ldw	r2,-28(fp)
   5373c:	10bffee0 	cmpeqi	r2,r2,-5
   53740:	1000161e 	bne	r2,zero,5379c <alt_avalon_i2c_master_tx_rx+0x190>
   53744:	e0bff917 	ldw	r2,-28(fp)
   53748:	10bffe58 	cmpnei	r2,r2,-7
   5374c:	1000011e 	bne	r2,zero,53754 <alt_avalon_i2c_master_tx_rx+0x148>
   53750:	00001206 	br	5379c <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   53754:	00800044 	movi	r2,1
   53758:	d8800015 	stw	r2,0(sp)
   5375c:	01c00044 	movi	r7,1
   53760:	e1800217 	ldw	r6,8(fp)
   53764:	e17ffe17 	ldw	r5,-8(fp)
   53768:	e13ffb17 	ldw	r4,-20(fp)
   5376c:	0053b980 	call	53b98 <alt_avalon_i2c_master_receive>
   53770:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   53774:	e0bff917 	ldw	r2,-28(fp)
   53778:	10bffea0 	cmpeqi	r2,r2,-6
   5377c:	1000061e 	bne	r2,zero,53798 <alt_avalon_i2c_master_tx_rx+0x18c>
   53780:	e0bff917 	ldw	r2,-28(fp)
   53784:	10bffee0 	cmpeqi	r2,r2,-5
   53788:	1000031e 	bne	r2,zero,53798 <alt_avalon_i2c_master_tx_rx+0x18c>
   5378c:	e0bff917 	ldw	r2,-28(fp)
   53790:	10bffe58 	cmpnei	r2,r2,-7
   53794:	1000081e 	bne	r2,zero,537b8 <alt_avalon_i2c_master_tx_rx+0x1ac>
   53798:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   5379c:	e0bffa17 	ldw	r2,-24(fp)
   537a0:	10ffffc4 	addi	r3,r2,-1
   537a4:	e0fffa15 	stw	r3,-24(fp)
   537a8:	103fd41e 	bne	r2,zero,536fc <__alt_data_end+0xfffec5fc>
   537ac:	00000306 	br	537bc <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   537b0:	0001883a 	nop
   537b4:	00000106 	br	537bc <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   537b8:	0001883a 	nop
      }
    }
    
    return status;
   537bc:	e0bff917 	ldw	r2,-28(fp)
}                                       
   537c0:	e037883a 	mov	sp,fp
   537c4:	dfc00117 	ldw	ra,4(sp)
   537c8:	df000017 	ldw	fp,0(sp)
   537cc:	dec00204 	addi	sp,sp,8
   537d0:	f800283a 	ret

000537d4 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   537d4:	defff704 	addi	sp,sp,-36
   537d8:	dfc00815 	stw	ra,32(sp)
   537dc:	df000715 	stw	fp,28(sp)
   537e0:	df000704 	addi	fp,sp,28
   537e4:	e13ffb15 	stw	r4,-20(fp)
   537e8:	e17ffc15 	stw	r5,-16(fp)
   537ec:	e1bffd15 	stw	r6,-12(fp)
   537f0:	3807883a 	mov	r3,r7
   537f4:	e0800217 	ldw	r2,8(fp)
   537f8:	e0fffe05 	stb	r3,-8(fp)
   537fc:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   53800:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   53804:	e0bffd17 	ldw	r2,-12(fp)
   53808:	1089c424 	muli	r2,r2,10000
   5380c:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   53810:	e0bffd17 	ldw	r2,-12(fp)
   53814:	1000021e 	bne	r2,zero,53820 <alt_avalon_i2c_master_transmit+0x4c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   53818:	0005883a 	mov	r2,zero
   5381c:	00005706 	br	5397c <alt_avalon_i2c_master_transmit+0x1a8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   53820:	e0bffe03 	ldbu	r2,-8(fp)
   53824:	10000a1e 	bne	r2,zero,53850 <alt_avalon_i2c_master_transmit+0x7c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   53828:	e13ffb17 	ldw	r4,-20(fp)
   5382c:	0052a580 	call	52a58 <alt_avalon_i2c_enable>
   53830:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   53834:	e0bffa17 	ldw	r2,-24(fp)
   53838:	10000226 	beq	r2,zero,53844 <alt_avalon_i2c_master_transmit+0x70>
      {
        return status;
   5383c:	e0bffa17 	ldw	r2,-24(fp)
   53840:	00004e06 	br	5397c <alt_avalon_i2c_master_transmit+0x1a8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   53844:	01400704 	movi	r5,28
   53848:	e13ffb17 	ldw	r4,-20(fp)
   5384c:	005402c0 	call	5402c <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   53850:	e0bffe03 	ldbu	r2,-8(fp)
   53854:	100d883a 	mov	r6,r2
   53858:	000b883a 	mov	r5,zero
   5385c:	e13ffb17 	ldw	r4,-20(fp)
   53860:	00530c00 	call	530c0 <alt_avalon_i2c_send_address>
   53864:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   53868:	e0bffa17 	ldw	r2,-24(fp)
   5386c:	1000271e 	bne	r2,zero,5390c <alt_avalon_i2c_master_transmit+0x138>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   53870:	00000f06 	br	538b0 <alt_avalon_i2c_master_transmit+0xdc>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   53874:	e0bffc17 	ldw	r2,-16(fp)
   53878:	10800003 	ldbu	r2,0(r2)
   5387c:	10803fcc 	andi	r2,r2,255
   53880:	000f883a 	mov	r7,zero
   53884:	000d883a 	mov	r6,zero
   53888:	100b883a 	mov	r5,r2
   5388c:	e13ffb17 	ldw	r4,-20(fp)
   53890:	0052fdc0 	call	52fdc <alt_avalon_i2c_cmd_write>
   53894:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   53898:	e0bffc17 	ldw	r2,-16(fp)
   5389c:	10800044 	addi	r2,r2,1
   538a0:	e0bffc15 	stw	r2,-16(fp)
            --size;
   538a4:	e0bffd17 	ldw	r2,-12(fp)
   538a8:	10bfffc4 	addi	r2,r2,-1
   538ac:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   538b0:	e0bffd17 	ldw	r2,-12(fp)
   538b4:	108000b0 	cmpltui	r2,r2,2
   538b8:	1000021e 	bne	r2,zero,538c4 <alt_avalon_i2c_master_transmit+0xf0>
   538bc:	e0bffa17 	ldw	r2,-24(fp)
   538c0:	103fec26 	beq	r2,zero,53874 <__alt_data_end+0xfffec774>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   538c4:	e0bffa17 	ldw	r2,-24(fp)
   538c8:	1000101e 	bne	r2,zero,5390c <alt_avalon_i2c_master_transmit+0x138>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   538cc:	e0bffc17 	ldw	r2,-16(fp)
   538d0:	10800003 	ldbu	r2,0(r2)
   538d4:	10803fcc 	andi	r2,r2,255
   538d8:	e0ffff03 	ldbu	r3,-4(fp)
   538dc:	180f883a 	mov	r7,r3
   538e0:	000d883a 	mov	r6,zero
   538e4:	100b883a 	mov	r5,r2
   538e8:	e13ffb17 	ldw	r4,-20(fp)
   538ec:	0052fdc0 	call	52fdc <alt_avalon_i2c_cmd_write>
   538f0:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   538f4:	e0bffc17 	ldw	r2,-16(fp)
   538f8:	10800044 	addi	r2,r2,1
   538fc:	e0bffc15 	stw	r2,-16(fp)
            --size;
   53900:	e0bffd17 	ldw	r2,-12(fp)
   53904:	10bfffc4 	addi	r2,r2,-1
   53908:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   5390c:	e0bfff03 	ldbu	r2,-4(fp)
   53910:	1000101e 	bne	r2,zero,53954 <alt_avalon_i2c_master_transmit+0x180>
   53914:	e0bffa17 	ldw	r2,-24(fp)
   53918:	10001726 	beq	r2,zero,53978 <alt_avalon_i2c_master_transmit+0x1a4>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   5391c:	00000d06 	br	53954 <alt_avalon_i2c_master_transmit+0x180>
        {
            if (timeout<10) alt_busy_sleep(10000);
   53920:	e0bff917 	ldw	r2,-28(fp)
   53924:	108002a8 	cmpgeui	r2,r2,10
   53928:	1000021e 	bne	r2,zero,53934 <alt_avalon_i2c_master_transmit+0x160>
   5392c:	0109c404 	movi	r4,10000
   53930:	00552f40 	call	552f4 <alt_busy_sleep>
            if (--timeout == 0)
   53934:	e0bff917 	ldw	r2,-28(fp)
   53938:	10bfffc4 	addi	r2,r2,-1
   5393c:	e0bff915 	stw	r2,-28(fp)
   53940:	e0bff917 	ldw	r2,-28(fp)
   53944:	1000031e 	bne	r2,zero,53954 <alt_avalon_i2c_master_transmit+0x180>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   53948:	00bfff84 	movi	r2,-2
   5394c:	e0bffa15 	stw	r2,-24(fp)
               break;
   53950:	00000306 	br	53960 <alt_avalon_i2c_master_transmit+0x18c>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   53954:	e13ffb17 	ldw	r4,-20(fp)
   53958:	0052e480 	call	52e48 <alt_avalon_i2c_is_busy>
   5395c:	103ff01e 	bne	r2,zero,53920 <__alt_data_end+0xfffec820>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   53960:	e0bffa04 	addi	r2,fp,-24
   53964:	100b883a 	mov	r5,r2
   53968:	e13ffb17 	ldw	r4,-20(fp)
   5396c:	005321c0 	call	5321c <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   53970:	e13ffb17 	ldw	r4,-20(fp)
   53974:	0052af00 	call	52af0 <alt_avalon_i2c_disable>
    }


    return status;
   53978:	e0bffa17 	ldw	r2,-24(fp)
}
   5397c:	e037883a 	mov	sp,fp
   53980:	dfc00117 	ldw	ra,4(sp)
   53984:	df000017 	ldw	fp,0(sp)
   53988:	dec00204 	addi	sp,sp,8
   5398c:	f800283a 	ret

00053990 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   53990:	defff604 	addi	sp,sp,-40
   53994:	dfc00915 	stw	ra,36(sp)
   53998:	df000815 	stw	fp,32(sp)
   5399c:	df000804 	addi	fp,sp,32
   539a0:	e13ffb15 	stw	r4,-20(fp)
   539a4:	e17ffc15 	stw	r5,-16(fp)
   539a8:	e1bffd15 	stw	r6,-12(fp)
   539ac:	3807883a 	mov	r3,r7
   539b0:	e0800217 	ldw	r2,8(fp)
   539b4:	e0fffe05 	stb	r3,-8(fp)
   539b8:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   539bc:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   539c0:	e0bffd17 	ldw	r2,-12(fp)
   539c4:	1089c424 	muli	r2,r2,10000
   539c8:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   539cc:	e0bffb17 	ldw	r2,-20(fp)
   539d0:	10800717 	ldw	r2,28(r2)
   539d4:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   539d8:	e0bffd17 	ldw	r2,-12(fp)
   539dc:	1000021e 	bne	r2,zero,539e8 <alt_avalon_i2c_master_transmit_using_interrupts+0x58>
    {
      return ALT_AVALON_I2C_SUCCESS;
   539e0:	0005883a 	mov	r2,zero
   539e4:	00006706 	br	53b84 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   539e8:	e0bffb17 	ldw	r2,-20(fp)
   539ec:	10c00617 	ldw	r3,24(r2)
   539f0:	00800174 	movhi	r2,5
   539f4:	1089b704 	addi	r2,r2,9948
   539f8:	18800226 	beq	r3,r2,53a04 <alt_avalon_i2c_master_transmit_using_interrupts+0x74>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   539fc:	00bfff44 	movi	r2,-3
   53a00:	00006006 	br	53b84 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   53a04:	e0bffe03 	ldbu	r2,-8(fp)
   53a08:	10000a1e 	bne	r2,zero,53a34 <alt_avalon_i2c_master_transmit_using_interrupts+0xa4>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   53a0c:	e13ffb17 	ldw	r4,-20(fp)
   53a10:	0052a580 	call	52a58 <alt_avalon_i2c_enable>
   53a14:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   53a18:	e0bff817 	ldw	r2,-32(fp)
   53a1c:	10000226 	beq	r2,zero,53a28 <alt_avalon_i2c_master_transmit_using_interrupts+0x98>
      {
        return status;
   53a20:	e0bff817 	ldw	r2,-32(fp)
   53a24:	00005706 	br	53b84 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   53a28:	01400704 	movi	r5,28
   53a2c:	e13ffb17 	ldw	r4,-20(fp)
   53a30:	005402c0 	call	5402c <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   53a34:	e0bffe03 	ldbu	r2,-8(fp)
   53a38:	100d883a 	mov	r6,r2
   53a3c:	000b883a 	mov	r5,zero
   53a40:	e13ffb17 	ldw	r4,-20(fp)
   53a44:	00530c00 	call	530c0 <alt_avalon_i2c_send_address>
   53a48:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   53a4c:	e0bff817 	ldw	r2,-32(fp)
   53a50:	1000271e 	bne	r2,zero,53af0 <alt_avalon_i2c_master_transmit_using_interrupts+0x160>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   53a54:	00000f06 	br	53a94 <alt_avalon_i2c_master_transmit_using_interrupts+0x104>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   53a58:	e0bffc17 	ldw	r2,-16(fp)
   53a5c:	10800003 	ldbu	r2,0(r2)
   53a60:	10803fcc 	andi	r2,r2,255
   53a64:	000f883a 	mov	r7,zero
   53a68:	000d883a 	mov	r6,zero
   53a6c:	100b883a 	mov	r5,r2
   53a70:	e13ffb17 	ldw	r4,-20(fp)
   53a74:	0052fdc0 	call	52fdc <alt_avalon_i2c_cmd_write>
   53a78:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   53a7c:	e0bffc17 	ldw	r2,-16(fp)
   53a80:	10800044 	addi	r2,r2,1
   53a84:	e0bffc15 	stw	r2,-16(fp)
            --size;
   53a88:	e0bffd17 	ldw	r2,-12(fp)
   53a8c:	10bfffc4 	addi	r2,r2,-1
   53a90:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   53a94:	e0bffd17 	ldw	r2,-12(fp)
   53a98:	108000b0 	cmpltui	r2,r2,2
   53a9c:	1000021e 	bne	r2,zero,53aa8 <alt_avalon_i2c_master_transmit_using_interrupts+0x118>
   53aa0:	e0bff817 	ldw	r2,-32(fp)
   53aa4:	103fec26 	beq	r2,zero,53a58 <__alt_data_end+0xfffec958>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   53aa8:	e0bff817 	ldw	r2,-32(fp)
   53aac:	1000101e 	bne	r2,zero,53af0 <alt_avalon_i2c_master_transmit_using_interrupts+0x160>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   53ab0:	e0bffc17 	ldw	r2,-16(fp)
   53ab4:	10800003 	ldbu	r2,0(r2)
   53ab8:	10803fcc 	andi	r2,r2,255
   53abc:	e0ffff03 	ldbu	r3,-4(fp)
   53ac0:	180f883a 	mov	r7,r3
   53ac4:	000d883a 	mov	r6,zero
   53ac8:	100b883a 	mov	r5,r2
   53acc:	e13ffb17 	ldw	r4,-20(fp)
   53ad0:	0052fdc0 	call	52fdc <alt_avalon_i2c_cmd_write>
   53ad4:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   53ad8:	e0bffc17 	ldw	r2,-16(fp)
   53adc:	10800044 	addi	r2,r2,1
   53ae0:	e0bffc15 	stw	r2,-16(fp)
            --size;
   53ae4:	e0bffd17 	ldw	r2,-12(fp)
   53ae8:	10bfffc4 	addi	r2,r2,-1
   53aec:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   53af0:	e0bff817 	ldw	r2,-32(fp)
   53af4:	10001426 	beq	r2,zero,53b48 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   53af8:	00000d06 	br	53b30 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   53afc:	e0bff917 	ldw	r2,-28(fp)
   53b00:	108002a8 	cmpgeui	r2,r2,10
   53b04:	1000021e 	bne	r2,zero,53b10 <alt_avalon_i2c_master_transmit_using_interrupts+0x180>
   53b08:	0109c404 	movi	r4,10000
   53b0c:	00552f40 	call	552f4 <alt_busy_sleep>
            if (--timeout == 0)
   53b10:	e0bff917 	ldw	r2,-28(fp)
   53b14:	10bfffc4 	addi	r2,r2,-1
   53b18:	e0bff915 	stw	r2,-28(fp)
   53b1c:	e0bff917 	ldw	r2,-28(fp)
   53b20:	1000031e 	bne	r2,zero,53b30 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   53b24:	00bfff84 	movi	r2,-2
   53b28:	e0bff815 	stw	r2,-32(fp)
               break;
   53b2c:	00000306 	br	53b3c <alt_avalon_i2c_master_transmit_using_interrupts+0x1ac>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   53b30:	e13ffb17 	ldw	r4,-20(fp)
   53b34:	0052e480 	call	52e48 <alt_avalon_i2c_is_busy>
   53b38:	103ff01e 	bne	r2,zero,53afc <__alt_data_end+0xfffec9fc>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   53b3c:	e13ffb17 	ldw	r4,-20(fp)
   53b40:	0052af00 	call	52af0 <alt_avalon_i2c_disable>
   53b44:	00000e06 	br	53b80 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f0>
    }
    else
    {
       if (issue_stop)
   53b48:	e0bfff03 	ldbu	r2,-4(fp)
   53b4c:	10000c26 	beq	r2,zero,53b80 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f0>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   53b50:	01400704 	movi	r5,28
   53b54:	e13ffb17 	ldw	r4,-20(fp)
   53b58:	005402c0 	call	5402c <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   53b5c:	000b883a 	mov	r5,zero
   53b60:	e13ffb17 	ldw	r4,-20(fp)
   53b64:	00542740 	call	54274 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   53b68:	e0bffa17 	ldw	r2,-24(fp)
   53b6c:	00c00044 	movi	r3,1
   53b70:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   53b74:	01400044 	movi	r5,1
   53b78:	e13ffb17 	ldw	r4,-20(fp)
   53b7c:	00540d00 	call	540d0 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   53b80:	e0bff817 	ldw	r2,-32(fp)
}
   53b84:	e037883a 	mov	sp,fp
   53b88:	dfc00117 	ldw	ra,4(sp)
   53b8c:	df000017 	ldw	fp,0(sp)
   53b90:	dec00204 	addi	sp,sp,8
   53b94:	f800283a 	ret

00053b98 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   53b98:	defff404 	addi	sp,sp,-48
   53b9c:	dfc00b15 	stw	ra,44(sp)
   53ba0:	df000a15 	stw	fp,40(sp)
   53ba4:	df000a04 	addi	fp,sp,40
   53ba8:	e13ffb15 	stw	r4,-20(fp)
   53bac:	e17ffc15 	stw	r5,-16(fp)
   53bb0:	e1bffd15 	stw	r6,-12(fp)
   53bb4:	3807883a 	mov	r3,r7
   53bb8:	e0800217 	ldw	r2,8(fp)
   53bbc:	e0fffe05 	stb	r3,-8(fp)
   53bc0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   53bc4:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   53bc8:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   53bcc:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   53bd0:	e0bffd17 	ldw	r2,-12(fp)
   53bd4:	1000021e 	bne	r2,zero,53be0 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   53bd8:	0005883a 	mov	r2,zero
   53bdc:	00006c06 	br	53d90 <alt_avalon_i2c_master_receive+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   53be0:	e0bffe03 	ldbu	r2,-8(fp)
   53be4:	10000a1e 	bne	r2,zero,53c10 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   53be8:	e13ffb17 	ldw	r4,-20(fp)
   53bec:	0052a580 	call	52a58 <alt_avalon_i2c_enable>
   53bf0:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   53bf4:	e0bff917 	ldw	r2,-28(fp)
   53bf8:	10000226 	beq	r2,zero,53c04 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   53bfc:	e0bff917 	ldw	r2,-28(fp)
   53c00:	00006306 	br	53d90 <alt_avalon_i2c_master_receive+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   53c04:	01400704 	movi	r5,28
   53c08:	e13ffb17 	ldw	r4,-20(fp)
   53c0c:	005402c0 	call	5402c <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   53c10:	e0bffe03 	ldbu	r2,-8(fp)
   53c14:	100d883a 	mov	r6,r2
   53c18:	01400044 	movi	r5,1
   53c1c:	e13ffb17 	ldw	r4,-20(fp)
   53c20:	00530c00 	call	530c0 <alt_avalon_i2c_send_address>
   53c24:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   53c28:	e0bff917 	ldw	r2,-28(fp)
   53c2c:	1000341e 	bne	r2,zero,53d00 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   53c30:	00001906 	br	53c98 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   53c34:	000f883a 	mov	r7,zero
   53c38:	000d883a 	mov	r6,zero
   53c3c:	000b883a 	mov	r5,zero
   53c40:	e13ffb17 	ldw	r4,-20(fp)
   53c44:	0052fdc0 	call	52fdc <alt_avalon_i2c_cmd_write>
   53c48:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   53c4c:	e0bff817 	ldw	r2,-32(fp)
   53c50:	10800044 	addi	r2,r2,1
   53c54:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   53c58:	e0bff917 	ldw	r2,-28(fp)
   53c5c:	10000e1e 	bne	r2,zero,53c98 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   53c60:	e0bffa04 	addi	r2,fp,-24
   53c64:	100f883a 	mov	r7,r2
   53c68:	000d883a 	mov	r6,zero
   53c6c:	e17ffc17 	ldw	r5,-16(fp)
   53c70:	e13ffb17 	ldw	r4,-20(fp)
   53c74:	0052e8c0 	call	52e8c <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   53c78:	e0bffa17 	ldw	r2,-24(fp)
   53c7c:	e0fffc17 	ldw	r3,-16(fp)
   53c80:	1885883a 	add	r2,r3,r2
   53c84:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   53c88:	e0bffa17 	ldw	r2,-24(fp)
   53c8c:	e0fff717 	ldw	r3,-36(fp)
   53c90:	1885883a 	add	r2,r3,r2
   53c94:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   53c98:	e0bffd17 	ldw	r2,-12(fp)
   53c9c:	10bfffc4 	addi	r2,r2,-1
   53ca0:	e0fff817 	ldw	r3,-32(fp)
   53ca4:	1880022e 	bgeu	r3,r2,53cb0 <alt_avalon_i2c_master_receive+0x118>
   53ca8:	e0bff917 	ldw	r2,-28(fp)
   53cac:	103fe126 	beq	r2,zero,53c34 <__alt_data_end+0xfffecb34>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   53cb0:	e0bff917 	ldw	r2,-28(fp)
   53cb4:	1000121e 	bne	r2,zero,53d00 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   53cb8:	e0bfff03 	ldbu	r2,-4(fp)
   53cbc:	100f883a 	mov	r7,r2
   53cc0:	000d883a 	mov	r6,zero
   53cc4:	000b883a 	mov	r5,zero
   53cc8:	e13ffb17 	ldw	r4,-20(fp)
   53ccc:	0052fdc0 	call	52fdc <alt_avalon_i2c_cmd_write>
   53cd0:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   53cd4:	00000a06 	br	53d00 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   53cd8:	e17ffc17 	ldw	r5,-16(fp)
   53cdc:	e13ffb17 	ldw	r4,-20(fp)
   53ce0:	0052f340 	call	52f34 <alt_avalon_i2c_rx_read>
   53ce4:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   53ce8:	e0bffc17 	ldw	r2,-16(fp)
   53cec:	10800044 	addi	r2,r2,1
   53cf0:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   53cf4:	e0bff717 	ldw	r2,-36(fp)
   53cf8:	10800044 	addi	r2,r2,1
   53cfc:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   53d00:	e0fff717 	ldw	r3,-36(fp)
   53d04:	e0bffd17 	ldw	r2,-12(fp)
   53d08:	1880022e 	bgeu	r3,r2,53d14 <alt_avalon_i2c_master_receive+0x17c>
   53d0c:	e0bff917 	ldw	r2,-28(fp)
   53d10:	103ff126 	beq	r2,zero,53cd8 <__alt_data_end+0xfffecbd8>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   53d14:	e0bfff03 	ldbu	r2,-4(fp)
   53d18:	1000021e 	bne	r2,zero,53d24 <alt_avalon_i2c_master_receive+0x18c>
   53d1c:	e0bff917 	ldw	r2,-28(fp)
   53d20:	10001a26 	beq	r2,zero,53d8c <alt_avalon_i2c_master_receive+0x1f4>
    {
        timeout=10000 * size;
   53d24:	e0bffd17 	ldw	r2,-12(fp)
   53d28:	1089c424 	muli	r2,r2,10000
   53d2c:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   53d30:	00000d06 	br	53d68 <alt_avalon_i2c_master_receive+0x1d0>
        {
            if (timeout<10) alt_busy_sleep(10000);
   53d34:	e0bff617 	ldw	r2,-40(fp)
   53d38:	108002a8 	cmpgeui	r2,r2,10
   53d3c:	1000021e 	bne	r2,zero,53d48 <alt_avalon_i2c_master_receive+0x1b0>
   53d40:	0109c404 	movi	r4,10000
   53d44:	00552f40 	call	552f4 <alt_busy_sleep>
            if (--timeout == 0)
   53d48:	e0bff617 	ldw	r2,-40(fp)
   53d4c:	10bfffc4 	addi	r2,r2,-1
   53d50:	e0bff615 	stw	r2,-40(fp)
   53d54:	e0bff617 	ldw	r2,-40(fp)
   53d58:	1000031e 	bne	r2,zero,53d68 <alt_avalon_i2c_master_receive+0x1d0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   53d5c:	00bfff84 	movi	r2,-2
   53d60:	e0bff915 	stw	r2,-28(fp)
               break;
   53d64:	00000306 	br	53d74 <alt_avalon_i2c_master_receive+0x1dc>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   53d68:	e13ffb17 	ldw	r4,-20(fp)
   53d6c:	0052e480 	call	52e48 <alt_avalon_i2c_is_busy>
   53d70:	103ff01e 	bne	r2,zero,53d34 <__alt_data_end+0xfffecc34>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   53d74:	e0bff904 	addi	r2,fp,-28
   53d78:	100b883a 	mov	r5,r2
   53d7c:	e13ffb17 	ldw	r4,-20(fp)
   53d80:	005321c0 	call	5321c <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   53d84:	e13ffb17 	ldw	r4,-20(fp)
   53d88:	0052af00 	call	52af0 <alt_avalon_i2c_disable>
    }

    return status;
   53d8c:	e0bff917 	ldw	r2,-28(fp)
}
   53d90:	e037883a 	mov	sp,fp
   53d94:	dfc00117 	ldw	ra,4(sp)
   53d98:	df000017 	ldw	fp,0(sp)
   53d9c:	dec00204 	addi	sp,sp,8
   53da0:	f800283a 	ret

00053da4 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   53da4:	defff504 	addi	sp,sp,-44
   53da8:	dfc00a15 	stw	ra,40(sp)
   53dac:	df000915 	stw	fp,36(sp)
   53db0:	df000904 	addi	fp,sp,36
   53db4:	e13ffb15 	stw	r4,-20(fp)
   53db8:	e17ffc15 	stw	r5,-16(fp)
   53dbc:	e1bffd15 	stw	r6,-12(fp)
   53dc0:	3807883a 	mov	r3,r7
   53dc4:	e0800217 	ldw	r2,8(fp)
   53dc8:	e0fffe05 	stb	r3,-8(fp)
   53dcc:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   53dd0:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   53dd4:	e0bffb17 	ldw	r2,-20(fp)
   53dd8:	10800717 	ldw	r2,28(r2)
   53ddc:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   53de0:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   53de4:	e0bffd17 	ldw	r2,-12(fp)
   53de8:	1000021e 	bne	r2,zero,53df4 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   53dec:	0005883a 	mov	r2,zero
   53df0:	00006206 	br	53f7c <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   53df4:	e0bffb17 	ldw	r2,-20(fp)
   53df8:	10c00617 	ldw	r3,24(r2)
   53dfc:	00800174 	movhi	r2,5
   53e00:	1089b704 	addi	r2,r2,9948
   53e04:	18800226 	beq	r3,r2,53e10 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   53e08:	00bfff44 	movi	r2,-3
   53e0c:	00005b06 	br	53f7c <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   53e10:	e0bffe03 	ldbu	r2,-8(fp)
   53e14:	10000a1e 	bne	r2,zero,53e40 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   53e18:	e13ffb17 	ldw	r4,-20(fp)
   53e1c:	0052a580 	call	52a58 <alt_avalon_i2c_enable>
   53e20:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   53e24:	e0bff717 	ldw	r2,-36(fp)
   53e28:	10000226 	beq	r2,zero,53e34 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   53e2c:	e0bff717 	ldw	r2,-36(fp)
   53e30:	00005206 	br	53f7c <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   53e34:	01400704 	movi	r5,28
   53e38:	e13ffb17 	ldw	r4,-20(fp)
   53e3c:	005402c0 	call	5402c <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   53e40:	e0bffe03 	ldbu	r2,-8(fp)
   53e44:	100d883a 	mov	r6,r2
   53e48:	01400044 	movi	r5,1
   53e4c:	e13ffb17 	ldw	r4,-20(fp)
   53e50:	00530c00 	call	530c0 <alt_avalon_i2c_send_address>
   53e54:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   53e58:	e0bff717 	ldw	r2,-36(fp)
   53e5c:	1000191e 	bne	r2,zero,53ec4 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   53e60:	00000906 	br	53e88 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   53e64:	000f883a 	mov	r7,zero
   53e68:	000d883a 	mov	r6,zero
   53e6c:	000b883a 	mov	r5,zero
   53e70:	e13ffb17 	ldw	r4,-20(fp)
   53e74:	0052fdc0 	call	52fdc <alt_avalon_i2c_cmd_write>
   53e78:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   53e7c:	e0bff917 	ldw	r2,-28(fp)
   53e80:	10800044 	addi	r2,r2,1
   53e84:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   53e88:	e0bffd17 	ldw	r2,-12(fp)
   53e8c:	10bfffc4 	addi	r2,r2,-1
   53e90:	e0fff917 	ldw	r3,-28(fp)
   53e94:	1880022e 	bgeu	r3,r2,53ea0 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   53e98:	e0bff717 	ldw	r2,-36(fp)
   53e9c:	103ff126 	beq	r2,zero,53e64 <__alt_data_end+0xfffecd64>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   53ea0:	e0bff717 	ldw	r2,-36(fp)
   53ea4:	1000071e 	bne	r2,zero,53ec4 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   53ea8:	e0bfff03 	ldbu	r2,-4(fp)
   53eac:	100f883a 	mov	r7,r2
   53eb0:	000d883a 	mov	r6,zero
   53eb4:	000b883a 	mov	r5,zero
   53eb8:	e13ffb17 	ldw	r4,-20(fp)
   53ebc:	0052fdc0 	call	52fdc <alt_avalon_i2c_cmd_write>
   53ec0:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   53ec4:	e0bff717 	ldw	r2,-36(fp)
   53ec8:	10001726 	beq	r2,zero,53f28 <alt_avalon_i2c_master_receive_using_interrupts+0x184>
    {
        timeout=10000 * size;
   53ecc:	e0bffd17 	ldw	r2,-12(fp)
   53ed0:	1089c424 	muli	r2,r2,10000
   53ed4:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   53ed8:	00000d06 	br	53f10 <alt_avalon_i2c_master_receive_using_interrupts+0x16c>
        {
            if (timeout<10) alt_busy_sleep(10000);
   53edc:	e0bff817 	ldw	r2,-32(fp)
   53ee0:	108002a8 	cmpgeui	r2,r2,10
   53ee4:	1000021e 	bne	r2,zero,53ef0 <alt_avalon_i2c_master_receive_using_interrupts+0x14c>
   53ee8:	0109c404 	movi	r4,10000
   53eec:	00552f40 	call	552f4 <alt_busy_sleep>
            if (--timeout == 0)
   53ef0:	e0bff817 	ldw	r2,-32(fp)
   53ef4:	10bfffc4 	addi	r2,r2,-1
   53ef8:	e0bff815 	stw	r2,-32(fp)
   53efc:	e0bff817 	ldw	r2,-32(fp)
   53f00:	1000031e 	bne	r2,zero,53f10 <alt_avalon_i2c_master_receive_using_interrupts+0x16c>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   53f04:	00bfff84 	movi	r2,-2
   53f08:	e0bff715 	stw	r2,-36(fp)
               break;
   53f0c:	00000306 	br	53f1c <alt_avalon_i2c_master_receive_using_interrupts+0x178>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   53f10:	e13ffb17 	ldw	r4,-20(fp)
   53f14:	0052e480 	call	52e48 <alt_avalon_i2c_is_busy>
   53f18:	103ff01e 	bne	r2,zero,53edc <__alt_data_end+0xfffecddc>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   53f1c:	e13ffb17 	ldw	r4,-20(fp)
   53f20:	0052af00 	call	52af0 <alt_avalon_i2c_disable>
   53f24:	00001406 	br	53f78 <alt_avalon_i2c_master_receive_using_interrupts+0x1d4>
    }
    else
    {
       if (issue_stop)
   53f28:	e0bfff03 	ldbu	r2,-4(fp)
   53f2c:	10001226 	beq	r2,zero,53f78 <alt_avalon_i2c_master_receive_using_interrupts+0x1d4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   53f30:	01400704 	movi	r5,28
   53f34:	e13ffb17 	ldw	r4,-20(fp)
   53f38:	005402c0 	call	5402c <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   53f3c:	000b883a 	mov	r5,zero
   53f40:	e13ffb17 	ldw	r4,-20(fp)
   53f44:	00541c40 	call	541c4 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   53f48:	e0bffa17 	ldw	r2,-24(fp)
   53f4c:	00c00084 	movi	r3,2
   53f50:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   53f54:	e0bffa17 	ldw	r2,-24(fp)
   53f58:	e0fffc17 	ldw	r3,-16(fp)
   53f5c:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   53f60:	e0bffa17 	ldw	r2,-24(fp)
   53f64:	e0fffd17 	ldw	r3,-12(fp)
   53f68:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   53f6c:	01400084 	movi	r5,2
   53f70:	e13ffb17 	ldw	r4,-20(fp)
   53f74:	00540d00 	call	540d0 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   53f78:	e0bff717 	ldw	r2,-36(fp)
}
   53f7c:	e037883a 	mov	sp,fp
   53f80:	dfc00117 	ldw	ra,4(sp)
   53f84:	df000017 	ldw	fp,0(sp)
   53f88:	dec00204 	addi	sp,sp,8
   53f8c:	f800283a 	ret

00053f90 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   53f90:	defffd04 	addi	sp,sp,-12
   53f94:	df000215 	stw	fp,8(sp)
   53f98:	df000204 	addi	fp,sp,8
   53f9c:	e13ffe15 	stw	r4,-8(fp)
   53fa0:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   53fa4:	e0bffe17 	ldw	r2,-8(fp)
   53fa8:	10800317 	ldw	r2,12(r2)
   53fac:	10800404 	addi	r2,r2,16
   53fb0:	10c00037 	ldwio	r3,0(r2)
   53fb4:	e0bffe17 	ldw	r2,-8(fp)
   53fb8:	10800317 	ldw	r2,12(r2)
   53fbc:	10800304 	addi	r2,r2,12
   53fc0:	10800037 	ldwio	r2,0(r2)
   53fc4:	1884703a 	and	r2,r3,r2
   53fc8:	1007883a 	mov	r3,r2
   53fcc:	e0bfff17 	ldw	r2,-4(fp)
   53fd0:	10c00015 	stw	r3,0(r2)
}
   53fd4:	0001883a 	nop
   53fd8:	e037883a 	mov	sp,fp
   53fdc:	df000017 	ldw	fp,0(sp)
   53fe0:	dec00104 	addi	sp,sp,4
   53fe4:	f800283a 	ret

00053fe8 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   53fe8:	defffd04 	addi	sp,sp,-12
   53fec:	df000215 	stw	fp,8(sp)
   53ff0:	df000204 	addi	fp,sp,8
   53ff4:	e13ffe15 	stw	r4,-8(fp)
   53ff8:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   53ffc:	e0bffe17 	ldw	r2,-8(fp)
   54000:	10800317 	ldw	r2,12(r2)
   54004:	10800404 	addi	r2,r2,16
   54008:	10800037 	ldwio	r2,0(r2)
   5400c:	1007883a 	mov	r3,r2
   54010:	e0bfff17 	ldw	r2,-4(fp)
   54014:	10c00015 	stw	r3,0(r2)
}
   54018:	0001883a 	nop
   5401c:	e037883a 	mov	sp,fp
   54020:	df000017 	ldw	fp,0(sp)
   54024:	dec00104 	addi	sp,sp,4
   54028:	f800283a 	ret

0005402c <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   5402c:	defffd04 	addi	sp,sp,-12
   54030:	df000215 	stw	fp,8(sp)
   54034:	df000204 	addi	fp,sp,8
   54038:	e13ffe15 	stw	r4,-8(fp)
   5403c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   54040:	e0bffe17 	ldw	r2,-8(fp)
   54044:	10800317 	ldw	r2,12(r2)
   54048:	10800404 	addi	r2,r2,16
   5404c:	e0ffff17 	ldw	r3,-4(fp)
   54050:	10c00035 	stwio	r3,0(r2)
}
   54054:	0001883a 	nop
   54058:	e037883a 	mov	sp,fp
   5405c:	df000017 	ldw	fp,0(sp)
   54060:	dec00104 	addi	sp,sp,4
   54064:	f800283a 	ret

00054068 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   54068:	defffb04 	addi	sp,sp,-20
   5406c:	dfc00415 	stw	ra,16(sp)
   54070:	df000315 	stw	fp,12(sp)
   54074:	df000304 	addi	fp,sp,12
   54078:	e13ffe15 	stw	r4,-8(fp)
   5407c:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   54080:	e17ffd04 	addi	r5,fp,-12
   54084:	e13ffe17 	ldw	r4,-8(fp)
   54088:	00541340 	call	54134 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   5408c:	e0bfff17 	ldw	r2,-4(fp)
   54090:	0086303a 	nor	r3,zero,r2
   54094:	e0bffd17 	ldw	r2,-12(fp)
   54098:	1884703a 	and	r2,r3,r2
   5409c:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   540a0:	e0bffe17 	ldw	r2,-8(fp)
   540a4:	10800317 	ldw	r2,12(r2)
   540a8:	10800304 	addi	r2,r2,12
   540ac:	e0fffd17 	ldw	r3,-12(fp)
   540b0:	18c007cc 	andi	r3,r3,31
   540b4:	10c00035 	stwio	r3,0(r2)
}
   540b8:	0001883a 	nop
   540bc:	e037883a 	mov	sp,fp
   540c0:	dfc00117 	ldw	ra,4(sp)
   540c4:	df000017 	ldw	fp,0(sp)
   540c8:	dec00204 	addi	sp,sp,8
   540cc:	f800283a 	ret

000540d0 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   540d0:	defffb04 	addi	sp,sp,-20
   540d4:	dfc00415 	stw	ra,16(sp)
   540d8:	df000315 	stw	fp,12(sp)
   540dc:	df000304 	addi	fp,sp,12
   540e0:	e13ffe15 	stw	r4,-8(fp)
   540e4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   540e8:	e17ffd04 	addi	r5,fp,-12
   540ec:	e13ffe17 	ldw	r4,-8(fp)
   540f0:	00541340 	call	54134 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   540f4:	e0fffd17 	ldw	r3,-12(fp)
   540f8:	e0bfff17 	ldw	r2,-4(fp)
   540fc:	1884b03a 	or	r2,r3,r2
   54100:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   54104:	e0bffe17 	ldw	r2,-8(fp)
   54108:	10800317 	ldw	r2,12(r2)
   5410c:	10800304 	addi	r2,r2,12
   54110:	e0fffd17 	ldw	r3,-12(fp)
   54114:	18c007cc 	andi	r3,r3,31
   54118:	10c00035 	stwio	r3,0(r2)
}
   5411c:	0001883a 	nop
   54120:	e037883a 	mov	sp,fp
   54124:	dfc00117 	ldw	ra,4(sp)
   54128:	df000017 	ldw	fp,0(sp)
   5412c:	dec00204 	addi	sp,sp,8
   54130:	f800283a 	ret

00054134 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   54134:	defffd04 	addi	sp,sp,-12
   54138:	df000215 	stw	fp,8(sp)
   5413c:	df000204 	addi	fp,sp,8
   54140:	e13ffe15 	stw	r4,-8(fp)
   54144:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   54148:	e0bffe17 	ldw	r2,-8(fp)
   5414c:	10800317 	ldw	r2,12(r2)
   54150:	10800304 	addi	r2,r2,12
   54154:	10800037 	ldwio	r2,0(r2)
   54158:	10c007cc 	andi	r3,r2,31
   5415c:	e0bfff17 	ldw	r2,-4(fp)
   54160:	10c00015 	stw	r3,0(r2)
}
   54164:	0001883a 	nop
   54168:	e037883a 	mov	sp,fp
   5416c:	df000017 	ldw	fp,0(sp)
   54170:	dec00104 	addi	sp,sp,4
   54174:	f800283a 	ret

00054178 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   54178:	defffd04 	addi	sp,sp,-12
   5417c:	df000215 	stw	fp,8(sp)
   54180:	df000204 	addi	fp,sp,8
   54184:	e13ffe15 	stw	r4,-8(fp)
   54188:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   5418c:	e0bffe17 	ldw	r2,-8(fp)
   54190:	10800317 	ldw	r2,12(r2)
   54194:	10800204 	addi	r2,r2,8
   54198:	10800037 	ldwio	r2,0(r2)
   5419c:	10800c0c 	andi	r2,r2,48
   541a0:	1005d13a 	srai	r2,r2,4
   541a4:	1007883a 	mov	r3,r2
   541a8:	e0bfff17 	ldw	r2,-4(fp)
   541ac:	10c00015 	stw	r3,0(r2)
}
   541b0:	0001883a 	nop
   541b4:	e037883a 	mov	sp,fp
   541b8:	df000017 	ldw	fp,0(sp)
   541bc:	dec00104 	addi	sp,sp,4
   541c0:	f800283a 	ret

000541c4 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   541c4:	defffd04 	addi	sp,sp,-12
   541c8:	df000215 	stw	fp,8(sp)
   541cc:	df000204 	addi	fp,sp,8
   541d0:	e13ffe15 	stw	r4,-8(fp)
   541d4:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   541d8:	e0bffe17 	ldw	r2,-8(fp)
   541dc:	10800317 	ldw	r2,12(r2)
   541e0:	10800204 	addi	r2,r2,8
   541e4:	e0fffe17 	ldw	r3,-8(fp)
   541e8:	18c00317 	ldw	r3,12(r3)
   541ec:	18c00204 	addi	r3,r3,8
   541f0:	18c00037 	ldwio	r3,0(r3)
   541f4:	1809883a 	mov	r4,r3
   541f8:	00fff3c4 	movi	r3,-49
   541fc:	20c8703a 	and	r4,r4,r3
   54200:	e0ffff17 	ldw	r3,-4(fp)
   54204:	1806913a 	slli	r3,r3,4
   54208:	18c00c0c 	andi	r3,r3,48
   5420c:	20c6b03a 	or	r3,r4,r3
   54210:	10c00035 	stwio	r3,0(r2)
}
   54214:	0001883a 	nop
   54218:	e037883a 	mov	sp,fp
   5421c:	df000017 	ldw	fp,0(sp)
   54220:	dec00104 	addi	sp,sp,4
   54224:	f800283a 	ret

00054228 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   54228:	defffd04 	addi	sp,sp,-12
   5422c:	df000215 	stw	fp,8(sp)
   54230:	df000204 	addi	fp,sp,8
   54234:	e13ffe15 	stw	r4,-8(fp)
   54238:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   5423c:	e0bffe17 	ldw	r2,-8(fp)
   54240:	10800317 	ldw	r2,12(r2)
   54244:	10800204 	addi	r2,r2,8
   54248:	10800037 	ldwio	r2,0(r2)
   5424c:	1080030c 	andi	r2,r2,12
   54250:	1005d0ba 	srai	r2,r2,2
   54254:	1007883a 	mov	r3,r2
   54258:	e0bfff17 	ldw	r2,-4(fp)
   5425c:	10c00015 	stw	r3,0(r2)
}
   54260:	0001883a 	nop
   54264:	e037883a 	mov	sp,fp
   54268:	df000017 	ldw	fp,0(sp)
   5426c:	dec00104 	addi	sp,sp,4
   54270:	f800283a 	ret

00054274 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   54274:	defffd04 	addi	sp,sp,-12
   54278:	df000215 	stw	fp,8(sp)
   5427c:	df000204 	addi	fp,sp,8
   54280:	e13ffe15 	stw	r4,-8(fp)
   54284:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   54288:	e0bffe17 	ldw	r2,-8(fp)
   5428c:	10800317 	ldw	r2,12(r2)
   54290:	10c00204 	addi	r3,r2,8
   54294:	e0bffe17 	ldw	r2,-8(fp)
   54298:	10800317 	ldw	r2,12(r2)
   5429c:	10800204 	addi	r2,r2,8
   542a0:	10800037 	ldwio	r2,0(r2)
   542a4:	1009883a 	mov	r4,r2
   542a8:	00bffcc4 	movi	r2,-13
   542ac:	2088703a 	and	r4,r4,r2
   542b0:	e0bfff17 	ldw	r2,-4(fp)
   542b4:	1085883a 	add	r2,r2,r2
   542b8:	1085883a 	add	r2,r2,r2
   542bc:	1080030c 	andi	r2,r2,12
   542c0:	2084b03a 	or	r2,r4,r2
   542c4:	18800035 	stwio	r2,0(r3)
}
   542c8:	0001883a 	nop
   542cc:	e037883a 	mov	sp,fp
   542d0:	df000017 	ldw	fp,0(sp)
   542d4:	dec00104 	addi	sp,sp,4
   542d8:	f800283a 	ret

000542dc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   542dc:	defffa04 	addi	sp,sp,-24
   542e0:	dfc00515 	stw	ra,20(sp)
   542e4:	df000415 	stw	fp,16(sp)
   542e8:	df000404 	addi	fp,sp,16
   542ec:	e13ffd15 	stw	r4,-12(fp)
   542f0:	e17ffe15 	stw	r5,-8(fp)
   542f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   542f8:	e0bffd17 	ldw	r2,-12(fp)
   542fc:	10800017 	ldw	r2,0(r2)
   54300:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   54304:	e0bffc17 	ldw	r2,-16(fp)
   54308:	10c00a04 	addi	r3,r2,40
   5430c:	e0bffd17 	ldw	r2,-12(fp)
   54310:	10800217 	ldw	r2,8(r2)
   54314:	100f883a 	mov	r7,r2
   54318:	e1bfff17 	ldw	r6,-4(fp)
   5431c:	e17ffe17 	ldw	r5,-8(fp)
   54320:	1809883a 	mov	r4,r3
   54324:	00549040 	call	54904 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   54328:	e037883a 	mov	sp,fp
   5432c:	dfc00117 	ldw	ra,4(sp)
   54330:	df000017 	ldw	fp,0(sp)
   54334:	dec00204 	addi	sp,sp,8
   54338:	f800283a 	ret

0005433c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   5433c:	defffa04 	addi	sp,sp,-24
   54340:	dfc00515 	stw	ra,20(sp)
   54344:	df000415 	stw	fp,16(sp)
   54348:	df000404 	addi	fp,sp,16
   5434c:	e13ffd15 	stw	r4,-12(fp)
   54350:	e17ffe15 	stw	r5,-8(fp)
   54354:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   54358:	e0bffd17 	ldw	r2,-12(fp)
   5435c:	10800017 	ldw	r2,0(r2)
   54360:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   54364:	e0bffc17 	ldw	r2,-16(fp)
   54368:	10c00a04 	addi	r3,r2,40
   5436c:	e0bffd17 	ldw	r2,-12(fp)
   54370:	10800217 	ldw	r2,8(r2)
   54374:	100f883a 	mov	r7,r2
   54378:	e1bfff17 	ldw	r6,-4(fp)
   5437c:	e17ffe17 	ldw	r5,-8(fp)
   54380:	1809883a 	mov	r4,r3
   54384:	0054b200 	call	54b20 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   54388:	e037883a 	mov	sp,fp
   5438c:	dfc00117 	ldw	ra,4(sp)
   54390:	df000017 	ldw	fp,0(sp)
   54394:	dec00204 	addi	sp,sp,8
   54398:	f800283a 	ret

0005439c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   5439c:	defffc04 	addi	sp,sp,-16
   543a0:	dfc00315 	stw	ra,12(sp)
   543a4:	df000215 	stw	fp,8(sp)
   543a8:	df000204 	addi	fp,sp,8
   543ac:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   543b0:	e0bfff17 	ldw	r2,-4(fp)
   543b4:	10800017 	ldw	r2,0(r2)
   543b8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   543bc:	e0bffe17 	ldw	r2,-8(fp)
   543c0:	10c00a04 	addi	r3,r2,40
   543c4:	e0bfff17 	ldw	r2,-4(fp)
   543c8:	10800217 	ldw	r2,8(r2)
   543cc:	100b883a 	mov	r5,r2
   543d0:	1809883a 	mov	r4,r3
   543d4:	00547ac0 	call	547ac <altera_avalon_jtag_uart_close>
}
   543d8:	e037883a 	mov	sp,fp
   543dc:	dfc00117 	ldw	ra,4(sp)
   543e0:	df000017 	ldw	fp,0(sp)
   543e4:	dec00204 	addi	sp,sp,8
   543e8:	f800283a 	ret

000543ec <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   543ec:	defffa04 	addi	sp,sp,-24
   543f0:	dfc00515 	stw	ra,20(sp)
   543f4:	df000415 	stw	fp,16(sp)
   543f8:	df000404 	addi	fp,sp,16
   543fc:	e13ffd15 	stw	r4,-12(fp)
   54400:	e17ffe15 	stw	r5,-8(fp)
   54404:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   54408:	e0bffd17 	ldw	r2,-12(fp)
   5440c:	10800017 	ldw	r2,0(r2)
   54410:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   54414:	e0bffc17 	ldw	r2,-16(fp)
   54418:	10800a04 	addi	r2,r2,40
   5441c:	e1bfff17 	ldw	r6,-4(fp)
   54420:	e17ffe17 	ldw	r5,-8(fp)
   54424:	1009883a 	mov	r4,r2
   54428:	00548140 	call	54814 <altera_avalon_jtag_uart_ioctl>
}
   5442c:	e037883a 	mov	sp,fp
   54430:	dfc00117 	ldw	ra,4(sp)
   54434:	df000017 	ldw	fp,0(sp)
   54438:	dec00204 	addi	sp,sp,8
   5443c:	f800283a 	ret

00054440 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   54440:	defffa04 	addi	sp,sp,-24
   54444:	dfc00515 	stw	ra,20(sp)
   54448:	df000415 	stw	fp,16(sp)
   5444c:	df000404 	addi	fp,sp,16
   54450:	e13ffd15 	stw	r4,-12(fp)
   54454:	e17ffe15 	stw	r5,-8(fp)
   54458:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   5445c:	e0bffd17 	ldw	r2,-12(fp)
   54460:	00c00044 	movi	r3,1
   54464:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   54468:	e0bffd17 	ldw	r2,-12(fp)
   5446c:	10800017 	ldw	r2,0(r2)
   54470:	10800104 	addi	r2,r2,4
   54474:	1007883a 	mov	r3,r2
   54478:	e0bffd17 	ldw	r2,-12(fp)
   5447c:	10800817 	ldw	r2,32(r2)
   54480:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   54484:	e0bffe17 	ldw	r2,-8(fp)
   54488:	e0ffff17 	ldw	r3,-4(fp)
   5448c:	d8000015 	stw	zero,0(sp)
   54490:	e1fffd17 	ldw	r7,-12(fp)
   54494:	01800174 	movhi	r6,5
   54498:	31914004 	addi	r6,r6,17664
   5449c:	180b883a 	mov	r5,r3
   544a0:	1009883a 	mov	r4,r2
   544a4:	00559240 	call	55924 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   544a8:	e0bffd17 	ldw	r2,-12(fp)
   544ac:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   544b0:	e0bffd17 	ldw	r2,-12(fp)
   544b4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   544b8:	d0e71f17 	ldw	r3,-25476(gp)
   544bc:	e1fffd17 	ldw	r7,-12(fp)
   544c0:	01800174 	movhi	r6,5
   544c4:	3191c304 	addi	r6,r6,18188
   544c8:	180b883a 	mov	r5,r3
   544cc:	1009883a 	mov	r4,r2
   544d0:	00551c80 	call	551c8 <alt_alarm_start>
   544d4:	1000040e 	bge	r2,zero,544e8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   544d8:	e0fffd17 	ldw	r3,-12(fp)
   544dc:	00a00034 	movhi	r2,32768
   544e0:	10bfffc4 	addi	r2,r2,-1
   544e4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   544e8:	0001883a 	nop
   544ec:	e037883a 	mov	sp,fp
   544f0:	dfc00117 	ldw	ra,4(sp)
   544f4:	df000017 	ldw	fp,0(sp)
   544f8:	dec00204 	addi	sp,sp,8
   544fc:	f800283a 	ret

00054500 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   54500:	defff804 	addi	sp,sp,-32
   54504:	df000715 	stw	fp,28(sp)
   54508:	df000704 	addi	fp,sp,28
   5450c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   54510:	e0bfff17 	ldw	r2,-4(fp)
   54514:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   54518:	e0bffb17 	ldw	r2,-20(fp)
   5451c:	10800017 	ldw	r2,0(r2)
   54520:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   54524:	e0bffc17 	ldw	r2,-16(fp)
   54528:	10800104 	addi	r2,r2,4
   5452c:	10800037 	ldwio	r2,0(r2)
   54530:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   54534:	e0bffd17 	ldw	r2,-12(fp)
   54538:	1080c00c 	andi	r2,r2,768
   5453c:	10006d26 	beq	r2,zero,546f4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   54540:	e0bffd17 	ldw	r2,-12(fp)
   54544:	1080400c 	andi	r2,r2,256
   54548:	10003526 	beq	r2,zero,54620 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   5454c:	00800074 	movhi	r2,1
   54550:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   54554:	e0bffb17 	ldw	r2,-20(fp)
   54558:	10800a17 	ldw	r2,40(r2)
   5455c:	10800044 	addi	r2,r2,1
   54560:	1081ffcc 	andi	r2,r2,2047
   54564:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   54568:	e0bffb17 	ldw	r2,-20(fp)
   5456c:	10c00b17 	ldw	r3,44(r2)
   54570:	e0bffe17 	ldw	r2,-8(fp)
   54574:	18801526 	beq	r3,r2,545cc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   54578:	e0bffc17 	ldw	r2,-16(fp)
   5457c:	10800037 	ldwio	r2,0(r2)
   54580:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   54584:	e0bff917 	ldw	r2,-28(fp)
   54588:	10a0000c 	andi	r2,r2,32768
   5458c:	10001126 	beq	r2,zero,545d4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   54590:	e0bffb17 	ldw	r2,-20(fp)
   54594:	10800a17 	ldw	r2,40(r2)
   54598:	e0fff917 	ldw	r3,-28(fp)
   5459c:	1809883a 	mov	r4,r3
   545a0:	e0fffb17 	ldw	r3,-20(fp)
   545a4:	1885883a 	add	r2,r3,r2
   545a8:	10800e04 	addi	r2,r2,56
   545ac:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   545b0:	e0bffb17 	ldw	r2,-20(fp)
   545b4:	10800a17 	ldw	r2,40(r2)
   545b8:	10800044 	addi	r2,r2,1
   545bc:	10c1ffcc 	andi	r3,r2,2047
   545c0:	e0bffb17 	ldw	r2,-20(fp)
   545c4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   545c8:	003fe206 	br	54554 <__alt_data_end+0xfffed454>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   545cc:	0001883a 	nop
   545d0:	00000106 	br	545d8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   545d4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   545d8:	e0bff917 	ldw	r2,-28(fp)
   545dc:	10bfffec 	andhi	r2,r2,65535
   545e0:	10000f26 	beq	r2,zero,54620 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   545e4:	e0bffb17 	ldw	r2,-20(fp)
   545e8:	10c00817 	ldw	r3,32(r2)
   545ec:	00bfff84 	movi	r2,-2
   545f0:	1886703a 	and	r3,r3,r2
   545f4:	e0bffb17 	ldw	r2,-20(fp)
   545f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   545fc:	e0bffc17 	ldw	r2,-16(fp)
   54600:	10800104 	addi	r2,r2,4
   54604:	1007883a 	mov	r3,r2
   54608:	e0bffb17 	ldw	r2,-20(fp)
   5460c:	10800817 	ldw	r2,32(r2)
   54610:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   54614:	e0bffc17 	ldw	r2,-16(fp)
   54618:	10800104 	addi	r2,r2,4
   5461c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   54620:	e0bffd17 	ldw	r2,-12(fp)
   54624:	1080800c 	andi	r2,r2,512
   54628:	103fbe26 	beq	r2,zero,54524 <__alt_data_end+0xfffed424>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   5462c:	e0bffd17 	ldw	r2,-12(fp)
   54630:	1004d43a 	srli	r2,r2,16
   54634:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   54638:	00001406 	br	5468c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   5463c:	e0bffc17 	ldw	r2,-16(fp)
   54640:	e0fffb17 	ldw	r3,-20(fp)
   54644:	18c00d17 	ldw	r3,52(r3)
   54648:	e13ffb17 	ldw	r4,-20(fp)
   5464c:	20c7883a 	add	r3,r4,r3
   54650:	18c20e04 	addi	r3,r3,2104
   54654:	18c00003 	ldbu	r3,0(r3)
   54658:	18c03fcc 	andi	r3,r3,255
   5465c:	18c0201c 	xori	r3,r3,128
   54660:	18ffe004 	addi	r3,r3,-128
   54664:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   54668:	e0bffb17 	ldw	r2,-20(fp)
   5466c:	10800d17 	ldw	r2,52(r2)
   54670:	10800044 	addi	r2,r2,1
   54674:	10c1ffcc 	andi	r3,r2,2047
   54678:	e0bffb17 	ldw	r2,-20(fp)
   5467c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   54680:	e0bffa17 	ldw	r2,-24(fp)
   54684:	10bfffc4 	addi	r2,r2,-1
   54688:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   5468c:	e0bffa17 	ldw	r2,-24(fp)
   54690:	10000526 	beq	r2,zero,546a8 <altera_avalon_jtag_uart_irq+0x1a8>
   54694:	e0bffb17 	ldw	r2,-20(fp)
   54698:	10c00d17 	ldw	r3,52(r2)
   5469c:	e0bffb17 	ldw	r2,-20(fp)
   546a0:	10800c17 	ldw	r2,48(r2)
   546a4:	18bfe51e 	bne	r3,r2,5463c <__alt_data_end+0xfffed53c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   546a8:	e0bffa17 	ldw	r2,-24(fp)
   546ac:	103f9d26 	beq	r2,zero,54524 <__alt_data_end+0xfffed424>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   546b0:	e0bffb17 	ldw	r2,-20(fp)
   546b4:	10c00817 	ldw	r3,32(r2)
   546b8:	00bfff44 	movi	r2,-3
   546bc:	1886703a 	and	r3,r3,r2
   546c0:	e0bffb17 	ldw	r2,-20(fp)
   546c4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   546c8:	e0bffb17 	ldw	r2,-20(fp)
   546cc:	10800017 	ldw	r2,0(r2)
   546d0:	10800104 	addi	r2,r2,4
   546d4:	1007883a 	mov	r3,r2
   546d8:	e0bffb17 	ldw	r2,-20(fp)
   546dc:	10800817 	ldw	r2,32(r2)
   546e0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   546e4:	e0bffc17 	ldw	r2,-16(fp)
   546e8:	10800104 	addi	r2,r2,4
   546ec:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   546f0:	003f8c06 	br	54524 <__alt_data_end+0xfffed424>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   546f4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   546f8:	0001883a 	nop
   546fc:	e037883a 	mov	sp,fp
   54700:	df000017 	ldw	fp,0(sp)
   54704:	dec00104 	addi	sp,sp,4
   54708:	f800283a 	ret

0005470c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   5470c:	defff804 	addi	sp,sp,-32
   54710:	df000715 	stw	fp,28(sp)
   54714:	df000704 	addi	fp,sp,28
   54718:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   5471c:	e0bffb17 	ldw	r2,-20(fp)
   54720:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   54724:	e0bff917 	ldw	r2,-28(fp)
   54728:	10800017 	ldw	r2,0(r2)
   5472c:	10800104 	addi	r2,r2,4
   54730:	10800037 	ldwio	r2,0(r2)
   54734:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   54738:	e0bffa17 	ldw	r2,-24(fp)
   5473c:	1081000c 	andi	r2,r2,1024
   54740:	10000b26 	beq	r2,zero,54770 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   54744:	e0bff917 	ldw	r2,-28(fp)
   54748:	10800017 	ldw	r2,0(r2)
   5474c:	10800104 	addi	r2,r2,4
   54750:	1007883a 	mov	r3,r2
   54754:	e0bff917 	ldw	r2,-28(fp)
   54758:	10800817 	ldw	r2,32(r2)
   5475c:	10810014 	ori	r2,r2,1024
   54760:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   54764:	e0bff917 	ldw	r2,-28(fp)
   54768:	10000915 	stw	zero,36(r2)
   5476c:	00000a06 	br	54798 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   54770:	e0bff917 	ldw	r2,-28(fp)
   54774:	10c00917 	ldw	r3,36(r2)
   54778:	00a00034 	movhi	r2,32768
   5477c:	10bfff04 	addi	r2,r2,-4
   54780:	10c00536 	bltu	r2,r3,54798 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   54784:	e0bff917 	ldw	r2,-28(fp)
   54788:	10800917 	ldw	r2,36(r2)
   5478c:	10c00044 	addi	r3,r2,1
   54790:	e0bff917 	ldw	r2,-28(fp)
   54794:	10c00915 	stw	r3,36(r2)
   54798:	d0a71f17 	ldw	r2,-25476(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   5479c:	e037883a 	mov	sp,fp
   547a0:	df000017 	ldw	fp,0(sp)
   547a4:	dec00104 	addi	sp,sp,4
   547a8:	f800283a 	ret

000547ac <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   547ac:	defffd04 	addi	sp,sp,-12
   547b0:	df000215 	stw	fp,8(sp)
   547b4:	df000204 	addi	fp,sp,8
   547b8:	e13ffe15 	stw	r4,-8(fp)
   547bc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   547c0:	00000506 	br	547d8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   547c4:	e0bfff17 	ldw	r2,-4(fp)
   547c8:	1090000c 	andi	r2,r2,16384
   547cc:	10000226 	beq	r2,zero,547d8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   547d0:	00bffd44 	movi	r2,-11
   547d4:	00000b06 	br	54804 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   547d8:	e0bffe17 	ldw	r2,-8(fp)
   547dc:	10c00d17 	ldw	r3,52(r2)
   547e0:	e0bffe17 	ldw	r2,-8(fp)
   547e4:	10800c17 	ldw	r2,48(r2)
   547e8:	18800526 	beq	r3,r2,54800 <altera_avalon_jtag_uart_close+0x54>
   547ec:	e0bffe17 	ldw	r2,-8(fp)
   547f0:	10c00917 	ldw	r3,36(r2)
   547f4:	e0bffe17 	ldw	r2,-8(fp)
   547f8:	10800117 	ldw	r2,4(r2)
   547fc:	18bff136 	bltu	r3,r2,547c4 <__alt_data_end+0xfffed6c4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   54800:	0005883a 	mov	r2,zero
}
   54804:	e037883a 	mov	sp,fp
   54808:	df000017 	ldw	fp,0(sp)
   5480c:	dec00104 	addi	sp,sp,4
   54810:	f800283a 	ret

00054814 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   54814:	defffa04 	addi	sp,sp,-24
   54818:	df000515 	stw	fp,20(sp)
   5481c:	df000504 	addi	fp,sp,20
   54820:	e13ffd15 	stw	r4,-12(fp)
   54824:	e17ffe15 	stw	r5,-8(fp)
   54828:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   5482c:	00bff9c4 	movi	r2,-25
   54830:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   54834:	e0bffe17 	ldw	r2,-8(fp)
   54838:	10da8060 	cmpeqi	r3,r2,27137
   5483c:	1800031e 	bne	r3,zero,5484c <altera_avalon_jtag_uart_ioctl+0x38>
   54840:	109a80a0 	cmpeqi	r2,r2,27138
   54844:	1000181e 	bne	r2,zero,548a8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   54848:	00002906 	br	548f0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   5484c:	e0bffd17 	ldw	r2,-12(fp)
   54850:	10c00117 	ldw	r3,4(r2)
   54854:	00a00034 	movhi	r2,32768
   54858:	10bfffc4 	addi	r2,r2,-1
   5485c:	18802126 	beq	r3,r2,548e4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   54860:	e0bfff17 	ldw	r2,-4(fp)
   54864:	10800017 	ldw	r2,0(r2)
   54868:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   5486c:	e0bffc17 	ldw	r2,-16(fp)
   54870:	10800090 	cmplti	r2,r2,2
   54874:	1000061e 	bne	r2,zero,54890 <altera_avalon_jtag_uart_ioctl+0x7c>
   54878:	e0fffc17 	ldw	r3,-16(fp)
   5487c:	00a00034 	movhi	r2,32768
   54880:	10bfffc4 	addi	r2,r2,-1
   54884:	18800226 	beq	r3,r2,54890 <altera_avalon_jtag_uart_ioctl+0x7c>
   54888:	e0bffc17 	ldw	r2,-16(fp)
   5488c:	00000206 	br	54898 <altera_avalon_jtag_uart_ioctl+0x84>
   54890:	00a00034 	movhi	r2,32768
   54894:	10bfff84 	addi	r2,r2,-2
   54898:	e0fffd17 	ldw	r3,-12(fp)
   5489c:	18800115 	stw	r2,4(r3)
      rc = 0;
   548a0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   548a4:	00000f06 	br	548e4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   548a8:	e0bffd17 	ldw	r2,-12(fp)
   548ac:	10c00117 	ldw	r3,4(r2)
   548b0:	00a00034 	movhi	r2,32768
   548b4:	10bfffc4 	addi	r2,r2,-1
   548b8:	18800c26 	beq	r3,r2,548ec <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   548bc:	e0bffd17 	ldw	r2,-12(fp)
   548c0:	10c00917 	ldw	r3,36(r2)
   548c4:	e0bffd17 	ldw	r2,-12(fp)
   548c8:	10800117 	ldw	r2,4(r2)
   548cc:	1885803a 	cmpltu	r2,r3,r2
   548d0:	10c03fcc 	andi	r3,r2,255
   548d4:	e0bfff17 	ldw	r2,-4(fp)
   548d8:	10c00015 	stw	r3,0(r2)
      rc = 0;
   548dc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   548e0:	00000206 	br	548ec <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   548e4:	0001883a 	nop
   548e8:	00000106 	br	548f0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   548ec:	0001883a 	nop

  default:
    break;
  }

  return rc;
   548f0:	e0bffb17 	ldw	r2,-20(fp)
}
   548f4:	e037883a 	mov	sp,fp
   548f8:	df000017 	ldw	fp,0(sp)
   548fc:	dec00104 	addi	sp,sp,4
   54900:	f800283a 	ret

00054904 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   54904:	defff304 	addi	sp,sp,-52
   54908:	dfc00c15 	stw	ra,48(sp)
   5490c:	df000b15 	stw	fp,44(sp)
   54910:	df000b04 	addi	fp,sp,44
   54914:	e13ffc15 	stw	r4,-16(fp)
   54918:	e17ffd15 	stw	r5,-12(fp)
   5491c:	e1bffe15 	stw	r6,-8(fp)
   54920:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   54924:	e0bffd17 	ldw	r2,-12(fp)
   54928:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   5492c:	00004706 	br	54a4c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   54930:	e0bffc17 	ldw	r2,-16(fp)
   54934:	10800a17 	ldw	r2,40(r2)
   54938:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   5493c:	e0bffc17 	ldw	r2,-16(fp)
   54940:	10800b17 	ldw	r2,44(r2)
   54944:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   54948:	e0fff717 	ldw	r3,-36(fp)
   5494c:	e0bff817 	ldw	r2,-32(fp)
   54950:	18800536 	bltu	r3,r2,54968 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   54954:	e0fff717 	ldw	r3,-36(fp)
   54958:	e0bff817 	ldw	r2,-32(fp)
   5495c:	1885c83a 	sub	r2,r3,r2
   54960:	e0bff615 	stw	r2,-40(fp)
   54964:	00000406 	br	54978 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   54968:	00c20004 	movi	r3,2048
   5496c:	e0bff817 	ldw	r2,-32(fp)
   54970:	1885c83a 	sub	r2,r3,r2
   54974:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   54978:	e0bff617 	ldw	r2,-40(fp)
   5497c:	10001e26 	beq	r2,zero,549f8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   54980:	e0fffe17 	ldw	r3,-8(fp)
   54984:	e0bff617 	ldw	r2,-40(fp)
   54988:	1880022e 	bgeu	r3,r2,54994 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   5498c:	e0bffe17 	ldw	r2,-8(fp)
   54990:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   54994:	e0bffc17 	ldw	r2,-16(fp)
   54998:	10c00e04 	addi	r3,r2,56
   5499c:	e0bff817 	ldw	r2,-32(fp)
   549a0:	1885883a 	add	r2,r3,r2
   549a4:	e1bff617 	ldw	r6,-40(fp)
   549a8:	100b883a 	mov	r5,r2
   549ac:	e13ff517 	ldw	r4,-44(fp)
   549b0:	004d7900 	call	4d790 <memcpy>
      ptr   += n;
   549b4:	e0fff517 	ldw	r3,-44(fp)
   549b8:	e0bff617 	ldw	r2,-40(fp)
   549bc:	1885883a 	add	r2,r3,r2
   549c0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   549c4:	e0fffe17 	ldw	r3,-8(fp)
   549c8:	e0bff617 	ldw	r2,-40(fp)
   549cc:	1885c83a 	sub	r2,r3,r2
   549d0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   549d4:	e0fff817 	ldw	r3,-32(fp)
   549d8:	e0bff617 	ldw	r2,-40(fp)
   549dc:	1885883a 	add	r2,r3,r2
   549e0:	10c1ffcc 	andi	r3,r2,2047
   549e4:	e0bffc17 	ldw	r2,-16(fp)
   549e8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   549ec:	e0bffe17 	ldw	r2,-8(fp)
   549f0:	00bfcf16 	blt	zero,r2,54930 <__alt_data_end+0xfffed830>
   549f4:	00000106 	br	549fc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   549f8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   549fc:	e0fff517 	ldw	r3,-44(fp)
   54a00:	e0bffd17 	ldw	r2,-12(fp)
   54a04:	1880141e 	bne	r3,r2,54a58 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   54a08:	e0bfff17 	ldw	r2,-4(fp)
   54a0c:	1090000c 	andi	r2,r2,16384
   54a10:	1000131e 	bne	r2,zero,54a60 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   54a14:	0001883a 	nop
   54a18:	e0bffc17 	ldw	r2,-16(fp)
   54a1c:	10c00a17 	ldw	r3,40(r2)
   54a20:	e0bff717 	ldw	r2,-36(fp)
   54a24:	1880051e 	bne	r3,r2,54a3c <altera_avalon_jtag_uart_read+0x138>
   54a28:	e0bffc17 	ldw	r2,-16(fp)
   54a2c:	10c00917 	ldw	r3,36(r2)
   54a30:	e0bffc17 	ldw	r2,-16(fp)
   54a34:	10800117 	ldw	r2,4(r2)
   54a38:	18bff736 	bltu	r3,r2,54a18 <__alt_data_end+0xfffed918>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   54a3c:	e0bffc17 	ldw	r2,-16(fp)
   54a40:	10c00a17 	ldw	r3,40(r2)
   54a44:	e0bff717 	ldw	r2,-36(fp)
   54a48:	18800726 	beq	r3,r2,54a68 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   54a4c:	e0bffe17 	ldw	r2,-8(fp)
   54a50:	00bfb716 	blt	zero,r2,54930 <__alt_data_end+0xfffed830>
   54a54:	00000506 	br	54a6c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   54a58:	0001883a 	nop
   54a5c:	00000306 	br	54a6c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   54a60:	0001883a 	nop
   54a64:	00000106 	br	54a6c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   54a68:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   54a6c:	e0fff517 	ldw	r3,-44(fp)
   54a70:	e0bffd17 	ldw	r2,-12(fp)
   54a74:	18801826 	beq	r3,r2,54ad8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54a78:	0005303a 	rdctl	r2,status
   54a7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54a80:	e0fffb17 	ldw	r3,-20(fp)
   54a84:	00bfff84 	movi	r2,-2
   54a88:	1884703a 	and	r2,r3,r2
   54a8c:	1001703a 	wrctl	status,r2
  
  return context;
   54a90:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   54a94:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   54a98:	e0bffc17 	ldw	r2,-16(fp)
   54a9c:	10800817 	ldw	r2,32(r2)
   54aa0:	10c00054 	ori	r3,r2,1
   54aa4:	e0bffc17 	ldw	r2,-16(fp)
   54aa8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   54aac:	e0bffc17 	ldw	r2,-16(fp)
   54ab0:	10800017 	ldw	r2,0(r2)
   54ab4:	10800104 	addi	r2,r2,4
   54ab8:	1007883a 	mov	r3,r2
   54abc:	e0bffc17 	ldw	r2,-16(fp)
   54ac0:	10800817 	ldw	r2,32(r2)
   54ac4:	18800035 	stwio	r2,0(r3)
   54ac8:	e0bffa17 	ldw	r2,-24(fp)
   54acc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54ad0:	e0bff917 	ldw	r2,-28(fp)
   54ad4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   54ad8:	e0fff517 	ldw	r3,-44(fp)
   54adc:	e0bffd17 	ldw	r2,-12(fp)
   54ae0:	18800426 	beq	r3,r2,54af4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   54ae4:	e0fff517 	ldw	r3,-44(fp)
   54ae8:	e0bffd17 	ldw	r2,-12(fp)
   54aec:	1885c83a 	sub	r2,r3,r2
   54af0:	00000606 	br	54b0c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   54af4:	e0bfff17 	ldw	r2,-4(fp)
   54af8:	1090000c 	andi	r2,r2,16384
   54afc:	10000226 	beq	r2,zero,54b08 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   54b00:	00bffd44 	movi	r2,-11
   54b04:	00000106 	br	54b0c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   54b08:	00bffec4 	movi	r2,-5
}
   54b0c:	e037883a 	mov	sp,fp
   54b10:	dfc00117 	ldw	ra,4(sp)
   54b14:	df000017 	ldw	fp,0(sp)
   54b18:	dec00204 	addi	sp,sp,8
   54b1c:	f800283a 	ret

00054b20 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   54b20:	defff304 	addi	sp,sp,-52
   54b24:	dfc00c15 	stw	ra,48(sp)
   54b28:	df000b15 	stw	fp,44(sp)
   54b2c:	df000b04 	addi	fp,sp,44
   54b30:	e13ffc15 	stw	r4,-16(fp)
   54b34:	e17ffd15 	stw	r5,-12(fp)
   54b38:	e1bffe15 	stw	r6,-8(fp)
   54b3c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   54b40:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   54b44:	e0bffd17 	ldw	r2,-12(fp)
   54b48:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   54b4c:	00003706 	br	54c2c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   54b50:	e0bffc17 	ldw	r2,-16(fp)
   54b54:	10800c17 	ldw	r2,48(r2)
   54b58:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   54b5c:	e0bffc17 	ldw	r2,-16(fp)
   54b60:	10800d17 	ldw	r2,52(r2)
   54b64:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   54b68:	e0fff917 	ldw	r3,-28(fp)
   54b6c:	e0bff517 	ldw	r2,-44(fp)
   54b70:	1880062e 	bgeu	r3,r2,54b8c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   54b74:	e0fff517 	ldw	r3,-44(fp)
   54b78:	e0bff917 	ldw	r2,-28(fp)
   54b7c:	1885c83a 	sub	r2,r3,r2
   54b80:	10bfffc4 	addi	r2,r2,-1
   54b84:	e0bff615 	stw	r2,-40(fp)
   54b88:	00000b06 	br	54bb8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   54b8c:	e0bff517 	ldw	r2,-44(fp)
   54b90:	10000526 	beq	r2,zero,54ba8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   54b94:	00c20004 	movi	r3,2048
   54b98:	e0bff917 	ldw	r2,-28(fp)
   54b9c:	1885c83a 	sub	r2,r3,r2
   54ba0:	e0bff615 	stw	r2,-40(fp)
   54ba4:	00000406 	br	54bb8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   54ba8:	00c1ffc4 	movi	r3,2047
   54bac:	e0bff917 	ldw	r2,-28(fp)
   54bb0:	1885c83a 	sub	r2,r3,r2
   54bb4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   54bb8:	e0bff617 	ldw	r2,-40(fp)
   54bbc:	10001e26 	beq	r2,zero,54c38 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   54bc0:	e0fffe17 	ldw	r3,-8(fp)
   54bc4:	e0bff617 	ldw	r2,-40(fp)
   54bc8:	1880022e 	bgeu	r3,r2,54bd4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   54bcc:	e0bffe17 	ldw	r2,-8(fp)
   54bd0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   54bd4:	e0bffc17 	ldw	r2,-16(fp)
   54bd8:	10c20e04 	addi	r3,r2,2104
   54bdc:	e0bff917 	ldw	r2,-28(fp)
   54be0:	1885883a 	add	r2,r3,r2
   54be4:	e1bff617 	ldw	r6,-40(fp)
   54be8:	e17ffd17 	ldw	r5,-12(fp)
   54bec:	1009883a 	mov	r4,r2
   54bf0:	004d7900 	call	4d790 <memcpy>
      ptr   += n;
   54bf4:	e0fffd17 	ldw	r3,-12(fp)
   54bf8:	e0bff617 	ldw	r2,-40(fp)
   54bfc:	1885883a 	add	r2,r3,r2
   54c00:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   54c04:	e0fffe17 	ldw	r3,-8(fp)
   54c08:	e0bff617 	ldw	r2,-40(fp)
   54c0c:	1885c83a 	sub	r2,r3,r2
   54c10:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   54c14:	e0fff917 	ldw	r3,-28(fp)
   54c18:	e0bff617 	ldw	r2,-40(fp)
   54c1c:	1885883a 	add	r2,r3,r2
   54c20:	10c1ffcc 	andi	r3,r2,2047
   54c24:	e0bffc17 	ldw	r2,-16(fp)
   54c28:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   54c2c:	e0bffe17 	ldw	r2,-8(fp)
   54c30:	00bfc716 	blt	zero,r2,54b50 <__alt_data_end+0xfffeda50>
   54c34:	00000106 	br	54c3c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   54c38:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54c3c:	0005303a 	rdctl	r2,status
   54c40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54c44:	e0fffb17 	ldw	r3,-20(fp)
   54c48:	00bfff84 	movi	r2,-2
   54c4c:	1884703a 	and	r2,r3,r2
   54c50:	1001703a 	wrctl	status,r2
  
  return context;
   54c54:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   54c58:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   54c5c:	e0bffc17 	ldw	r2,-16(fp)
   54c60:	10800817 	ldw	r2,32(r2)
   54c64:	10c00094 	ori	r3,r2,2
   54c68:	e0bffc17 	ldw	r2,-16(fp)
   54c6c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   54c70:	e0bffc17 	ldw	r2,-16(fp)
   54c74:	10800017 	ldw	r2,0(r2)
   54c78:	10800104 	addi	r2,r2,4
   54c7c:	1007883a 	mov	r3,r2
   54c80:	e0bffc17 	ldw	r2,-16(fp)
   54c84:	10800817 	ldw	r2,32(r2)
   54c88:	18800035 	stwio	r2,0(r3)
   54c8c:	e0bffa17 	ldw	r2,-24(fp)
   54c90:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54c94:	e0bff817 	ldw	r2,-32(fp)
   54c98:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   54c9c:	e0bffe17 	ldw	r2,-8(fp)
   54ca0:	0080100e 	bge	zero,r2,54ce4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   54ca4:	e0bfff17 	ldw	r2,-4(fp)
   54ca8:	1090000c 	andi	r2,r2,16384
   54cac:	1000101e 	bne	r2,zero,54cf0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   54cb0:	0001883a 	nop
   54cb4:	e0bffc17 	ldw	r2,-16(fp)
   54cb8:	10c00d17 	ldw	r3,52(r2)
   54cbc:	e0bff517 	ldw	r2,-44(fp)
   54cc0:	1880051e 	bne	r3,r2,54cd8 <altera_avalon_jtag_uart_write+0x1b8>
   54cc4:	e0bffc17 	ldw	r2,-16(fp)
   54cc8:	10c00917 	ldw	r3,36(r2)
   54ccc:	e0bffc17 	ldw	r2,-16(fp)
   54cd0:	10800117 	ldw	r2,4(r2)
   54cd4:	18bff736 	bltu	r3,r2,54cb4 <__alt_data_end+0xfffedbb4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   54cd8:	e0bffc17 	ldw	r2,-16(fp)
   54cdc:	10800917 	ldw	r2,36(r2)
   54ce0:	1000051e 	bne	r2,zero,54cf8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   54ce4:	e0bffe17 	ldw	r2,-8(fp)
   54ce8:	00bfd016 	blt	zero,r2,54c2c <__alt_data_end+0xfffedb2c>
   54cec:	00000306 	br	54cfc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   54cf0:	0001883a 	nop
   54cf4:	00000106 	br	54cfc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   54cf8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   54cfc:	e0fffd17 	ldw	r3,-12(fp)
   54d00:	e0bff717 	ldw	r2,-36(fp)
   54d04:	18800426 	beq	r3,r2,54d18 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   54d08:	e0fffd17 	ldw	r3,-12(fp)
   54d0c:	e0bff717 	ldw	r2,-36(fp)
   54d10:	1885c83a 	sub	r2,r3,r2
   54d14:	00000606 	br	54d30 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   54d18:	e0bfff17 	ldw	r2,-4(fp)
   54d1c:	1090000c 	andi	r2,r2,16384
   54d20:	10000226 	beq	r2,zero,54d2c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   54d24:	00bffd44 	movi	r2,-11
   54d28:	00000106 	br	54d30 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   54d2c:	00bffec4 	movi	r2,-5
}
   54d30:	e037883a 	mov	sp,fp
   54d34:	dfc00117 	ldw	ra,4(sp)
   54d38:	df000017 	ldw	fp,0(sp)
   54d3c:	dec00204 	addi	sp,sp,8
   54d40:	f800283a 	ret

00054d44 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
   54d44:	defff404 	addi	sp,sp,-48
   54d48:	df000b15 	stw	fp,44(sp)
   54d4c:	df000b04 	addi	fp,sp,44
   54d50:	e13ffc15 	stw	r4,-16(fp)
   54d54:	e17ffd15 	stw	r5,-12(fp)
   54d58:	e1bffe15 	stw	r6,-8(fp)
   54d5c:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
   54d60:	e0bffc17 	ldw	r2,-16(fp)
   54d64:	10800017 	ldw	r2,0(r2)
   54d68:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   54d6c:	e0bff517 	ldw	r2,-44(fp)
   54d70:	10800217 	ldw	r2,8(r2)
   54d74:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   54d78:	e0bff617 	ldw	r2,-40(fp)
   54d7c:	10bfffc4 	addi	r2,r2,-1
   54d80:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
   54d84:	e0bffb17 	ldw	r2,-20(fp)
   54d88:	10800044 	addi	r2,r2,1
   54d8c:	e0bffb15 	stw	r2,-20(fp)
   54d90:	e0bffb17 	ldw	r2,-20(fp)
   54d94:	10800003 	ldbu	r2,0(r2)
   54d98:	10803fcc 	andi	r2,r2,255
   54d9c:	1080201c 	xori	r2,r2,128
   54da0:	10bfe004 	addi	r2,r2,-128
   54da4:	103ff71e 	bne	r2,zero,54d84 <__alt_data_end+0xfffedc84>
    ;

  return ptr - string;
   54da8:	e0fffb17 	ldw	r3,-20(fp)
   54dac:	e0bff617 	ldw	r2,-40(fp)
   54db0:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   54db4:	10800044 	addi	r2,r2,1
   54db8:	1007883a 	mov	r3,r2
   54dbc:	e0bffd17 	ldw	r2,-12(fp)
   54dc0:	10c5883a 	add	r2,r2,r3
   54dc4:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
   54dc8:	d0a01304 	addi	r2,gp,-32692
   54dcc:	1007883a 	mov	r3,r2
  r4 = (int)name;
   54dd0:	e0bffd17 	ldw	r2,-12(fp)
   54dd4:	1009883a 	mov	r4,r2
  r5 = flags;
   54dd8:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
   54ddc:	e1bfff17 	ldw	r6,-4(fp)
   54de0:	e0bffd17 	ldw	r2,-12(fp)
   54de4:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   54de8:	e0bff917 	ldw	r2,-28(fp)
   54dec:	10bfffc4 	addi	r2,r2,-1
   54df0:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
   54df4:	e0bffa17 	ldw	r2,-24(fp)
   54df8:	10800044 	addi	r2,r2,1
   54dfc:	e0bffa15 	stw	r2,-24(fp)
   54e00:	e0bffa17 	ldw	r2,-24(fp)
   54e04:	10800003 	ldbu	r2,0(r2)
   54e08:	10803fcc 	andi	r2,r2,255
   54e0c:	1080201c 	xori	r2,r2,128
   54e10:	10bfe004 	addi	r2,r2,-128
   54e14:	103ff71e 	bne	r2,zero,54df4 <__alt_data_end+0xfffedcf4>
    ;

  return ptr - string;
   54e18:	e1fffa17 	ldw	r7,-24(fp)
   54e1c:	e0bff917 	ldw	r2,-28(fp)
   54e20:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
   54e24:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
   54e28:	003da07a 	break	1

  handle = (void *)r2;
   54e2c:	e0bff715 	stw	r2,-36(fp)
  error = r3;
   54e30:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
   54e34:	e0bff817 	ldw	r2,-32(fp)
   54e38:	1000031e 	bne	r2,zero,54e48 <alt_hostfs_open+0x104>
    fd->priv = handle;
   54e3c:	e0bffc17 	ldw	r2,-16(fp)
   54e40:	e0fff717 	ldw	r3,-36(fp)
   54e44:	10c00115 	stw	r3,4(r2)

  return -error;
   54e48:	e0bff817 	ldw	r2,-32(fp)
   54e4c:	0085c83a 	sub	r2,zero,r2
}
   54e50:	e037883a 	mov	sp,fp
   54e54:	df000017 	ldw	fp,0(sp)
   54e58:	dec00104 	addi	sp,sp,4
   54e5c:	f800283a 	ret

00054e60 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
   54e60:	defffd04 	addi	sp,sp,-12
   54e64:	df000215 	stw	fp,8(sp)
   54e68:	df000204 	addi	fp,sp,8
   54e6c:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
   54e70:	d0a01604 	addi	r2,gp,-32680
   54e74:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   54e78:	e0bfff17 	ldw	r2,-4(fp)
   54e7c:	10800117 	ldw	r2,4(r2)
   54e80:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
   54e84:	003da07a 	break	1

  error = r3;
   54e88:	e0fffe15 	stw	r3,-8(fp)

  return -error;
   54e8c:	e0bffe17 	ldw	r2,-8(fp)
   54e90:	0085c83a 	sub	r2,zero,r2
}
   54e94:	e037883a 	mov	sp,fp
   54e98:	df000017 	ldw	fp,0(sp)
   54e9c:	dec00104 	addi	sp,sp,4
   54ea0:	f800283a 	ret

00054ea4 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
   54ea4:	defffa04 	addi	sp,sp,-24
   54ea8:	df000515 	stw	fp,20(sp)
   54eac:	df000504 	addi	fp,sp,20
   54eb0:	e13ffd15 	stw	r4,-12(fp)
   54eb4:	e17ffe15 	stw	r5,-8(fp)
   54eb8:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
   54ebc:	d0a01904 	addi	r2,gp,-32668
   54ec0:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   54ec4:	e0bffd17 	ldw	r2,-12(fp)
   54ec8:	10800117 	ldw	r2,4(r2)
   54ecc:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
   54ed0:	e0bffe17 	ldw	r2,-8(fp)
   54ed4:	100b883a 	mov	r5,r2
  r6 = len;
   54ed8:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
   54edc:	003da07a 	break	1

  rc = r2;
   54ee0:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
   54ee4:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
   54ee8:	e0bffc17 	ldw	r2,-16(fp)
   54eec:	10000326 	beq	r2,zero,54efc <alt_hostfs_read+0x58>
   54ef0:	e0bffc17 	ldw	r2,-16(fp)
   54ef4:	0085c83a 	sub	r2,zero,r2
   54ef8:	00000106 	br	54f00 <alt_hostfs_read+0x5c>
   54efc:	e0bffb17 	ldw	r2,-20(fp)
}
   54f00:	e037883a 	mov	sp,fp
   54f04:	df000017 	ldw	fp,0(sp)
   54f08:	dec00104 	addi	sp,sp,4
   54f0c:	f800283a 	ret

00054f10 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
   54f10:	defffa04 	addi	sp,sp,-24
   54f14:	df000515 	stw	fp,20(sp)
   54f18:	df000504 	addi	fp,sp,20
   54f1c:	e13ffd15 	stw	r4,-12(fp)
   54f20:	e17ffe15 	stw	r5,-8(fp)
   54f24:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
   54f28:	d0a01c04 	addi	r2,gp,-32656
   54f2c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   54f30:	e0bffd17 	ldw	r2,-12(fp)
   54f34:	10800117 	ldw	r2,4(r2)
   54f38:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
   54f3c:	e0bffe17 	ldw	r2,-8(fp)
   54f40:	100b883a 	mov	r5,r2
  r6 = len;
   54f44:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
   54f48:	003da07a 	break	1

  rc = r2;
   54f4c:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
   54f50:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
   54f54:	e0bffc17 	ldw	r2,-16(fp)
   54f58:	10000326 	beq	r2,zero,54f68 <alt_hostfs_write+0x58>
   54f5c:	e0bffc17 	ldw	r2,-16(fp)
   54f60:	0085c83a 	sub	r2,zero,r2
   54f64:	00000106 	br	54f6c <alt_hostfs_write+0x5c>
   54f68:	e0bffb17 	ldw	r2,-20(fp)
}
   54f6c:	e037883a 	mov	sp,fp
   54f70:	df000017 	ldw	fp,0(sp)
   54f74:	dec00104 	addi	sp,sp,4
   54f78:	f800283a 	ret

00054f7c <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
   54f7c:	defffa04 	addi	sp,sp,-24
   54f80:	df000515 	stw	fp,20(sp)
   54f84:	df000504 	addi	fp,sp,20
   54f88:	e13ffd15 	stw	r4,-12(fp)
   54f8c:	e17ffe15 	stw	r5,-8(fp)
   54f90:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
   54f94:	d0a01f04 	addi	r2,gp,-32644
   54f98:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   54f9c:	e0bffd17 	ldw	r2,-12(fp)
   54fa0:	10800117 	ldw	r2,4(r2)
   54fa4:	1009883a 	mov	r4,r2
  r5 = ptr;
   54fa8:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
   54fac:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
   54fb0:	003da07a 	break	1

  rc = r2;
   54fb4:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
   54fb8:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
   54fbc:	e0bffc17 	ldw	r2,-16(fp)
   54fc0:	10000326 	beq	r2,zero,54fd0 <alt_hostfs_seek+0x54>
   54fc4:	e0bffc17 	ldw	r2,-16(fp)
   54fc8:	0085c83a 	sub	r2,zero,r2
   54fcc:	00000106 	br	54fd4 <alt_hostfs_seek+0x58>
   54fd0:	e0bffb17 	ldw	r2,-20(fp)
}
   54fd4:	e037883a 	mov	sp,fp
   54fd8:	df000017 	ldw	fp,0(sp)
   54fdc:	dec00104 	addi	sp,sp,4
   54fe0:	f800283a 	ret

00054fe4 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
   54fe4:	deffe904 	addi	sp,sp,-92
   54fe8:	df001615 	stw	fp,88(sp)
   54fec:	df001604 	addi	fp,sp,88
   54ff0:	e13ffe15 	stw	r4,-8(fp)
   54ff4:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
   54ff8:	d0a02204 	addi	r2,gp,-32632
   54ffc:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   55000:	e0bffe17 	ldw	r2,-8(fp)
   55004:	10800117 	ldw	r2,4(r2)
   55008:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
   5500c:	e0bfee04 	addi	r2,fp,-72
   55010:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
   55014:	003da07a 	break	1

  rc = r2;
   55018:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
   5501c:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
   55020:	e0bfec17 	ldw	r2,-80(fp)
   55024:	1000621e 	bne	r2,zero,551b0 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
   55028:	e0bfee04 	addi	r2,fp,-72
   5502c:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
   55030:	e0bfea17 	ldw	r2,-88(fp)
   55034:	10801004 	addi	r2,r2,64
   55038:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
   5503c:	00001606 	br	55098 <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   55040:	e0bfea17 	ldw	r2,-88(fp)
   55044:	10800017 	ldw	r2,0(r2)
   55048:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
   5504c:	e0bfea17 	ldw	r2,-88(fp)
   55050:	10800017 	ldw	r2,0(r2)
   55054:	10803fec 	andhi	r2,r2,255
   55058:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   5505c:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   55060:	e0bfea17 	ldw	r2,-88(fp)
   55064:	10800017 	ldw	r2,0(r2)
   55068:	10bfc00c 	andi	r2,r2,65280
   5506c:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
   55070:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
   55074:	e0bfea17 	ldw	r2,-88(fp)
   55078:	10800017 	ldw	r2,0(r2)
   5507c:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   55080:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   55084:	e0bfea17 	ldw	r2,-88(fp)
   55088:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
   5508c:	e0bfea17 	ldw	r2,-88(fp)
   55090:	10800104 	addi	r2,r2,4
   55094:	e0bfea15 	stw	r2,-88(fp)
   55098:	e0ffea17 	ldw	r3,-88(fp)
   5509c:	e0bfed17 	ldw	r2,-76(fp)
   550a0:	18bfe736 	bltu	r3,r2,55040 <__alt_data_end+0xfffedf40>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
   550a4:	e0bfff17 	ldw	r2,-4(fp)
   550a8:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
   550ac:	e0bfea17 	ldw	r2,-88(fp)
   550b0:	10800f04 	addi	r2,r2,60
   550b4:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
   550b8:	00000506 	br	550d0 <alt_hostfs_fstat+0xec>
      *ptr = 0;
   550bc:	e0bfea17 	ldw	r2,-88(fp)
   550c0:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
   550c4:	e0bfea17 	ldw	r2,-88(fp)
   550c8:	10800104 	addi	r2,r2,4
   550cc:	e0bfea15 	stw	r2,-88(fp)
   550d0:	e0ffea17 	ldw	r3,-88(fp)
   550d4:	e0bfed17 	ldw	r2,-76(fp)
   550d8:	18bff836 	bltu	r3,r2,550bc <__alt_data_end+0xfffedfbc>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
   550dc:	e0bfee17 	ldw	r2,-72(fp)
   550e0:	1007883a 	mov	r3,r2
   550e4:	e0bfff17 	ldw	r2,-4(fp)
   550e8:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
   550ec:	e0bfef17 	ldw	r2,-68(fp)
   550f0:	1007883a 	mov	r3,r2
   550f4:	e0bfff17 	ldw	r2,-4(fp)
   550f8:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
   550fc:	e0fff017 	ldw	r3,-64(fp)
   55100:	e0bfff17 	ldw	r2,-4(fp)
   55104:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
   55108:	e0bff117 	ldw	r2,-60(fp)
   5510c:	1007883a 	mov	r3,r2
   55110:	e0bfff17 	ldw	r2,-4(fp)
   55114:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
   55118:	e0bff217 	ldw	r2,-56(fp)
   5511c:	1007883a 	mov	r3,r2
   55120:	e0bfff17 	ldw	r2,-4(fp)
   55124:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
   55128:	e0bff317 	ldw	r2,-52(fp)
   5512c:	1007883a 	mov	r3,r2
   55130:	e0bfff17 	ldw	r2,-4(fp)
   55134:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
   55138:	e0bff417 	ldw	r2,-48(fp)
   5513c:	1007883a 	mov	r3,r2
   55140:	e0bfff17 	ldw	r2,-4(fp)
   55144:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
   55148:	e0bff617 	ldw	r2,-40(fp)
   5514c:	1007883a 	mov	r3,r2
   55150:	e0bfff17 	ldw	r2,-4(fp)
   55154:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
   55158:	e0bffb17 	ldw	r2,-20(fp)
   5515c:	1007883a 	mov	r3,r2
   55160:	e0bfff17 	ldw	r2,-4(fp)
   55164:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
   55168:	e0bffc17 	ldw	r2,-16(fp)
   5516c:	1007883a 	mov	r3,r2
   55170:	e0bfff17 	ldw	r2,-4(fp)
   55174:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
   55178:	e0bffd17 	ldw	r2,-12(fp)
   5517c:	1007883a 	mov	r3,r2
   55180:	e0bfff17 	ldw	r2,-4(fp)
   55184:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
   55188:	e0bff817 	ldw	r2,-32(fp)
   5518c:	1007883a 	mov	r3,r2
   55190:	e0bfff17 	ldw	r2,-4(fp)
   55194:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
   55198:	e0bffa17 	ldw	r2,-24(fp)
   5519c:	1007883a 	mov	r3,r2
   551a0:	e0bfff17 	ldw	r2,-4(fp)
   551a4:	10c00c15 	stw	r3,48(r2)

    return rc;
   551a8:	e0bfeb17 	ldw	r2,-84(fp)
   551ac:	00000206 	br	551b8 <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
   551b0:	e0bfec17 	ldw	r2,-80(fp)
   551b4:	0085c83a 	sub	r2,zero,r2
}
   551b8:	e037883a 	mov	sp,fp
   551bc:	df000017 	ldw	fp,0(sp)
   551c0:	dec00104 	addi	sp,sp,4
   551c4:	f800283a 	ret

000551c8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   551c8:	defff504 	addi	sp,sp,-44
   551cc:	df000a15 	stw	fp,40(sp)
   551d0:	df000a04 	addi	fp,sp,40
   551d4:	e13ffc15 	stw	r4,-16(fp)
   551d8:	e17ffd15 	stw	r5,-12(fp)
   551dc:	e1bffe15 	stw	r6,-8(fp)
   551e0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   551e4:	e03ff615 	stw	zero,-40(fp)
   551e8:	d0a71f17 	ldw	r2,-25476(gp)
  
  if (alt_ticks_per_second ())
   551ec:	10003c26 	beq	r2,zero,552e0 <alt_alarm_start+0x118>
  {
    if (alarm)
   551f0:	e0bffc17 	ldw	r2,-16(fp)
   551f4:	10003826 	beq	r2,zero,552d8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   551f8:	e0bffc17 	ldw	r2,-16(fp)
   551fc:	e0fffe17 	ldw	r3,-8(fp)
   55200:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   55204:	e0bffc17 	ldw	r2,-16(fp)
   55208:	e0ffff17 	ldw	r3,-4(fp)
   5520c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55210:	0005303a 	rdctl	r2,status
   55214:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   55218:	e0fff917 	ldw	r3,-28(fp)
   5521c:	00bfff84 	movi	r2,-2
   55220:	1884703a 	and	r2,r3,r2
   55224:	1001703a 	wrctl	status,r2
  
  return context;
   55228:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   5522c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   55230:	d0a72017 	ldw	r2,-25472(gp)
      
      current_nticks = alt_nticks();
   55234:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   55238:	e0fffd17 	ldw	r3,-12(fp)
   5523c:	e0bff617 	ldw	r2,-40(fp)
   55240:	1885883a 	add	r2,r3,r2
   55244:	10c00044 	addi	r3,r2,1
   55248:	e0bffc17 	ldw	r2,-16(fp)
   5524c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   55250:	e0bffc17 	ldw	r2,-16(fp)
   55254:	10c00217 	ldw	r3,8(r2)
   55258:	e0bff617 	ldw	r2,-40(fp)
   5525c:	1880042e 	bgeu	r3,r2,55270 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   55260:	e0bffc17 	ldw	r2,-16(fp)
   55264:	00c00044 	movi	r3,1
   55268:	10c00405 	stb	r3,16(r2)
   5526c:	00000206 	br	55278 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   55270:	e0bffc17 	ldw	r2,-16(fp)
   55274:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   55278:	e0bffc17 	ldw	r2,-16(fp)
   5527c:	d0e02604 	addi	r3,gp,-32616
   55280:	e0fffa15 	stw	r3,-24(fp)
   55284:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   55288:	e0bffb17 	ldw	r2,-20(fp)
   5528c:	e0fffa17 	ldw	r3,-24(fp)
   55290:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   55294:	e0bffa17 	ldw	r2,-24(fp)
   55298:	10c00017 	ldw	r3,0(r2)
   5529c:	e0bffb17 	ldw	r2,-20(fp)
   552a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   552a4:	e0bffa17 	ldw	r2,-24(fp)
   552a8:	10800017 	ldw	r2,0(r2)
   552ac:	e0fffb17 	ldw	r3,-20(fp)
   552b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   552b4:	e0bffa17 	ldw	r2,-24(fp)
   552b8:	e0fffb17 	ldw	r3,-20(fp)
   552bc:	10c00015 	stw	r3,0(r2)
   552c0:	e0bff817 	ldw	r2,-32(fp)
   552c4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   552c8:	e0bff717 	ldw	r2,-36(fp)
   552cc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   552d0:	0005883a 	mov	r2,zero
   552d4:	00000306 	br	552e4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   552d8:	00bffa84 	movi	r2,-22
   552dc:	00000106 	br	552e4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   552e0:	00bfde84 	movi	r2,-134
  }
}
   552e4:	e037883a 	mov	sp,fp
   552e8:	df000017 	ldw	fp,0(sp)
   552ec:	dec00104 	addi	sp,sp,4
   552f0:	f800283a 	ret

000552f4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   552f4:	defffa04 	addi	sp,sp,-24
   552f8:	dfc00515 	stw	ra,20(sp)
   552fc:	df000415 	stw	fp,16(sp)
   55300:	df000404 	addi	fp,sp,16
   55304:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   55308:	008000c4 	movi	r2,3
   5530c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   55310:	e0fffd17 	ldw	r3,-12(fp)
   55314:	008003f4 	movhi	r2,15
   55318:	10909004 	addi	r2,r2,16960
   5531c:	1885383a 	mul	r2,r3,r2
   55320:	100b883a 	mov	r5,r2
   55324:	01017db4 	movhi	r4,1526
   55328:	21384004 	addi	r4,r4,-7936
   5532c:	00432240 	call	43224 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   55330:	100b883a 	mov	r5,r2
   55334:	01200034 	movhi	r4,32768
   55338:	213fffc4 	addi	r4,r4,-1
   5533c:	00432240 	call	43224 <__udivsi3>
   55340:	100b883a 	mov	r5,r2
   55344:	e13fff17 	ldw	r4,-4(fp)
   55348:	00432240 	call	43224 <__udivsi3>
   5534c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   55350:	e0bffe17 	ldw	r2,-8(fp)
   55354:	10002a26 	beq	r2,zero,55400 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   55358:	e03ffc15 	stw	zero,-16(fp)
   5535c:	00001706 	br	553bc <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   55360:	00a00034 	movhi	r2,32768
   55364:	10bfffc4 	addi	r2,r2,-1
   55368:	10bfffc4 	addi	r2,r2,-1
   5536c:	103ffe1e 	bne	r2,zero,55368 <__alt_data_end+0xfffee268>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   55370:	e0fffd17 	ldw	r3,-12(fp)
   55374:	008003f4 	movhi	r2,15
   55378:	10909004 	addi	r2,r2,16960
   5537c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   55380:	100b883a 	mov	r5,r2
   55384:	01017db4 	movhi	r4,1526
   55388:	21384004 	addi	r4,r4,-7936
   5538c:	00432240 	call	43224 <__udivsi3>
   55390:	100b883a 	mov	r5,r2
   55394:	01200034 	movhi	r4,32768
   55398:	213fffc4 	addi	r4,r4,-1
   5539c:	00432240 	call	43224 <__udivsi3>
   553a0:	1007883a 	mov	r3,r2
   553a4:	e0bfff17 	ldw	r2,-4(fp)
   553a8:	10c5c83a 	sub	r2,r2,r3
   553ac:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   553b0:	e0bffc17 	ldw	r2,-16(fp)
   553b4:	10800044 	addi	r2,r2,1
   553b8:	e0bffc15 	stw	r2,-16(fp)
   553bc:	e0fffc17 	ldw	r3,-16(fp)
   553c0:	e0bffe17 	ldw	r2,-8(fp)
   553c4:	18bfe616 	blt	r3,r2,55360 <__alt_data_end+0xfffee260>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   553c8:	e0fffd17 	ldw	r3,-12(fp)
   553cc:	008003f4 	movhi	r2,15
   553d0:	10909004 	addi	r2,r2,16960
   553d4:	1885383a 	mul	r2,r3,r2
   553d8:	100b883a 	mov	r5,r2
   553dc:	01017db4 	movhi	r4,1526
   553e0:	21384004 	addi	r4,r4,-7936
   553e4:	00432240 	call	43224 <__udivsi3>
   553e8:	1007883a 	mov	r3,r2
   553ec:	e0bfff17 	ldw	r2,-4(fp)
   553f0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   553f4:	10bfffc4 	addi	r2,r2,-1
   553f8:	103ffe1e 	bne	r2,zero,553f4 <__alt_data_end+0xfffee2f4>
   553fc:	00000d06 	br	55434 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   55400:	e0fffd17 	ldw	r3,-12(fp)
   55404:	008003f4 	movhi	r2,15
   55408:	10909004 	addi	r2,r2,16960
   5540c:	1885383a 	mul	r2,r3,r2
   55410:	100b883a 	mov	r5,r2
   55414:	01017db4 	movhi	r4,1526
   55418:	21384004 	addi	r4,r4,-7936
   5541c:	00432240 	call	43224 <__udivsi3>
   55420:	1007883a 	mov	r3,r2
   55424:	e0bfff17 	ldw	r2,-4(fp)
   55428:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   5542c:	10bfffc4 	addi	r2,r2,-1
   55430:	00bffe16 	blt	zero,r2,5542c <__alt_data_end+0xfffee32c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   55434:	0005883a 	mov	r2,zero
}
   55438:	e037883a 	mov	sp,fp
   5543c:	dfc00117 	ldw	ra,4(sp)
   55440:	df000017 	ldw	fp,0(sp)
   55444:	dec00204 	addi	sp,sp,8
   55448:	f800283a 	ret

0005544c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   5544c:	defffe04 	addi	sp,sp,-8
   55450:	df000115 	stw	fp,4(sp)
   55454:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   55458:	e03fff15 	stw	zero,-4(fp)
   5545c:	00000506 	br	55474 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   55460:	e0bfff17 	ldw	r2,-4(fp)
   55464:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   55468:	e0bfff17 	ldw	r2,-4(fp)
   5546c:	10800804 	addi	r2,r2,32
   55470:	e0bfff15 	stw	r2,-4(fp)
   55474:	e0bfff17 	ldw	r2,-4(fp)
   55478:	10820030 	cmpltui	r2,r2,2048
   5547c:	103ff81e 	bne	r2,zero,55460 <__alt_data_end+0xfffee360>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   55480:	0001883a 	nop
   55484:	e037883a 	mov	sp,fp
   55488:	df000017 	ldw	fp,0(sp)
   5548c:	dec00104 	addi	sp,sp,4
   55490:	f800283a 	ret

00055494 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   55494:	defffe04 	addi	sp,sp,-8
   55498:	dfc00115 	stw	ra,4(sp)
   5549c:	df000015 	stw	fp,0(sp)
   554a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   554a4:	d0a00f17 	ldw	r2,-32708(gp)
   554a8:	10000326 	beq	r2,zero,554b8 <alt_get_errno+0x24>
   554ac:	d0a00f17 	ldw	r2,-32708(gp)
   554b0:	103ee83a 	callr	r2
   554b4:	00000106 	br	554bc <alt_get_errno+0x28>
   554b8:	d0a71404 	addi	r2,gp,-25520
}
   554bc:	e037883a 	mov	sp,fp
   554c0:	dfc00117 	ldw	ra,4(sp)
   554c4:	df000017 	ldw	fp,0(sp)
   554c8:	dec00204 	addi	sp,sp,8
   554cc:	f800283a 	ret

000554d0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   554d0:	defffa04 	addi	sp,sp,-24
   554d4:	dfc00515 	stw	ra,20(sp)
   554d8:	df000415 	stw	fp,16(sp)
   554dc:	df000404 	addi	fp,sp,16
   554e0:	e13ffe15 	stw	r4,-8(fp)
   554e4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   554e8:	e0bffe17 	ldw	r2,-8(fp)
   554ec:	10000326 	beq	r2,zero,554fc <alt_dev_llist_insert+0x2c>
   554f0:	e0bffe17 	ldw	r2,-8(fp)
   554f4:	10800217 	ldw	r2,8(r2)
   554f8:	1000061e 	bne	r2,zero,55514 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   554fc:	00554940 	call	55494 <alt_get_errno>
   55500:	1007883a 	mov	r3,r2
   55504:	00800584 	movi	r2,22
   55508:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   5550c:	00bffa84 	movi	r2,-22
   55510:	00001306 	br	55560 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   55514:	e0bffe17 	ldw	r2,-8(fp)
   55518:	e0ffff17 	ldw	r3,-4(fp)
   5551c:	e0fffc15 	stw	r3,-16(fp)
   55520:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   55524:	e0bffd17 	ldw	r2,-12(fp)
   55528:	e0fffc17 	ldw	r3,-16(fp)
   5552c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   55530:	e0bffc17 	ldw	r2,-16(fp)
   55534:	10c00017 	ldw	r3,0(r2)
   55538:	e0bffd17 	ldw	r2,-12(fp)
   5553c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   55540:	e0bffc17 	ldw	r2,-16(fp)
   55544:	10800017 	ldw	r2,0(r2)
   55548:	e0fffd17 	ldw	r3,-12(fp)
   5554c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   55550:	e0bffc17 	ldw	r2,-16(fp)
   55554:	e0fffd17 	ldw	r3,-12(fp)
   55558:	10c00015 	stw	r3,0(r2)

  return 0;  
   5555c:	0005883a 	mov	r2,zero
}
   55560:	e037883a 	mov	sp,fp
   55564:	dfc00117 	ldw	ra,4(sp)
   55568:	df000017 	ldw	fp,0(sp)
   5556c:	dec00204 	addi	sp,sp,8
   55570:	f800283a 	ret

00055574 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   55574:	defffd04 	addi	sp,sp,-12
   55578:	dfc00215 	stw	ra,8(sp)
   5557c:	df000115 	stw	fp,4(sp)
   55580:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   55584:	00800174 	movhi	r2,5
   55588:	1099d604 	addi	r2,r2,26456
   5558c:	e0bfff15 	stw	r2,-4(fp)
   55590:	00000606 	br	555ac <_do_ctors+0x38>
        (*ctor) (); 
   55594:	e0bfff17 	ldw	r2,-4(fp)
   55598:	10800017 	ldw	r2,0(r2)
   5559c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   555a0:	e0bfff17 	ldw	r2,-4(fp)
   555a4:	10bfff04 	addi	r2,r2,-4
   555a8:	e0bfff15 	stw	r2,-4(fp)
   555ac:	e0ffff17 	ldw	r3,-4(fp)
   555b0:	00800174 	movhi	r2,5
   555b4:	1099d704 	addi	r2,r2,26460
   555b8:	18bff62e 	bgeu	r3,r2,55594 <__alt_data_end+0xfffee494>
        (*ctor) (); 
}
   555bc:	0001883a 	nop
   555c0:	e037883a 	mov	sp,fp
   555c4:	dfc00117 	ldw	ra,4(sp)
   555c8:	df000017 	ldw	fp,0(sp)
   555cc:	dec00204 	addi	sp,sp,8
   555d0:	f800283a 	ret

000555d4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   555d4:	defffd04 	addi	sp,sp,-12
   555d8:	dfc00215 	stw	ra,8(sp)
   555dc:	df000115 	stw	fp,4(sp)
   555e0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   555e4:	00800174 	movhi	r2,5
   555e8:	1099d604 	addi	r2,r2,26456
   555ec:	e0bfff15 	stw	r2,-4(fp)
   555f0:	00000606 	br	5560c <_do_dtors+0x38>
        (*dtor) (); 
   555f4:	e0bfff17 	ldw	r2,-4(fp)
   555f8:	10800017 	ldw	r2,0(r2)
   555fc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   55600:	e0bfff17 	ldw	r2,-4(fp)
   55604:	10bfff04 	addi	r2,r2,-4
   55608:	e0bfff15 	stw	r2,-4(fp)
   5560c:	e0ffff17 	ldw	r3,-4(fp)
   55610:	00800174 	movhi	r2,5
   55614:	1099d704 	addi	r2,r2,26460
   55618:	18bff62e 	bgeu	r3,r2,555f4 <__alt_data_end+0xfffee4f4>
        (*dtor) (); 
}
   5561c:	0001883a 	nop
   55620:	e037883a 	mov	sp,fp
   55624:	dfc00117 	ldw	ra,4(sp)
   55628:	df000017 	ldw	fp,0(sp)
   5562c:	dec00204 	addi	sp,sp,8
   55630:	f800283a 	ret

00055634 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   55634:	defffa04 	addi	sp,sp,-24
   55638:	dfc00515 	stw	ra,20(sp)
   5563c:	df000415 	stw	fp,16(sp)
   55640:	df000404 	addi	fp,sp,16
   55644:	e13ffe15 	stw	r4,-8(fp)
   55648:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   5564c:	e0bfff17 	ldw	r2,-4(fp)
   55650:	10800017 	ldw	r2,0(r2)
   55654:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   55658:	e13ffe17 	ldw	r4,-8(fp)
   5565c:	00485b80 	call	485b8 <strlen>
   55660:	10800044 	addi	r2,r2,1
   55664:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   55668:	00000d06 	br	556a0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   5566c:	e0bffc17 	ldw	r2,-16(fp)
   55670:	10800217 	ldw	r2,8(r2)
   55674:	e0fffd17 	ldw	r3,-12(fp)
   55678:	180d883a 	mov	r6,r3
   5567c:	e17ffe17 	ldw	r5,-8(fp)
   55680:	1009883a 	mov	r4,r2
   55684:	00562ac0 	call	562ac <memcmp>
   55688:	1000021e 	bne	r2,zero,55694 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   5568c:	e0bffc17 	ldw	r2,-16(fp)
   55690:	00000706 	br	556b0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   55694:	e0bffc17 	ldw	r2,-16(fp)
   55698:	10800017 	ldw	r2,0(r2)
   5569c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   556a0:	e0fffc17 	ldw	r3,-16(fp)
   556a4:	e0bfff17 	ldw	r2,-4(fp)
   556a8:	18bff01e 	bne	r3,r2,5566c <__alt_data_end+0xfffee56c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   556ac:	0005883a 	mov	r2,zero
}
   556b0:	e037883a 	mov	sp,fp
   556b4:	dfc00117 	ldw	ra,4(sp)
   556b8:	df000017 	ldw	fp,0(sp)
   556bc:	dec00204 	addi	sp,sp,8
   556c0:	f800283a 	ret

000556c4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   556c4:	defffb04 	addi	sp,sp,-20
   556c8:	dfc00415 	stw	ra,16(sp)
   556cc:	df000315 	stw	fp,12(sp)
   556d0:	df000304 	addi	fp,sp,12
   556d4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   556d8:	d0a00a17 	ldw	r2,-32728(gp)
   556dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   556e0:	00003106 	br	557a8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   556e4:	e0bffd17 	ldw	r2,-12(fp)
   556e8:	10800217 	ldw	r2,8(r2)
   556ec:	1009883a 	mov	r4,r2
   556f0:	00485b80 	call	485b8 <strlen>
   556f4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   556f8:	e0bffd17 	ldw	r2,-12(fp)
   556fc:	10c00217 	ldw	r3,8(r2)
   55700:	e0bffe17 	ldw	r2,-8(fp)
   55704:	10bfffc4 	addi	r2,r2,-1
   55708:	1885883a 	add	r2,r3,r2
   5570c:	10800003 	ldbu	r2,0(r2)
   55710:	10803fcc 	andi	r2,r2,255
   55714:	1080201c 	xori	r2,r2,128
   55718:	10bfe004 	addi	r2,r2,-128
   5571c:	10800bd8 	cmpnei	r2,r2,47
   55720:	1000031e 	bne	r2,zero,55730 <alt_find_file+0x6c>
    {
      len -= 1;
   55724:	e0bffe17 	ldw	r2,-8(fp)
   55728:	10bfffc4 	addi	r2,r2,-1
   5572c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   55730:	e0bffe17 	ldw	r2,-8(fp)
   55734:	e0ffff17 	ldw	r3,-4(fp)
   55738:	1885883a 	add	r2,r3,r2
   5573c:	10800003 	ldbu	r2,0(r2)
   55740:	10803fcc 	andi	r2,r2,255
   55744:	1080201c 	xori	r2,r2,128
   55748:	10bfe004 	addi	r2,r2,-128
   5574c:	10800be0 	cmpeqi	r2,r2,47
   55750:	1000081e 	bne	r2,zero,55774 <alt_find_file+0xb0>
   55754:	e0bffe17 	ldw	r2,-8(fp)
   55758:	e0ffff17 	ldw	r3,-4(fp)
   5575c:	1885883a 	add	r2,r3,r2
   55760:	10800003 	ldbu	r2,0(r2)
   55764:	10803fcc 	andi	r2,r2,255
   55768:	1080201c 	xori	r2,r2,128
   5576c:	10bfe004 	addi	r2,r2,-128
   55770:	10000a1e 	bne	r2,zero,5579c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   55774:	e0bffd17 	ldw	r2,-12(fp)
   55778:	10800217 	ldw	r2,8(r2)
   5577c:	e0fffe17 	ldw	r3,-8(fp)
   55780:	180d883a 	mov	r6,r3
   55784:	e17fff17 	ldw	r5,-4(fp)
   55788:	1009883a 	mov	r4,r2
   5578c:	00562ac0 	call	562ac <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   55790:	1000021e 	bne	r2,zero,5579c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   55794:	e0bffd17 	ldw	r2,-12(fp)
   55798:	00000706 	br	557b8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   5579c:	e0bffd17 	ldw	r2,-12(fp)
   557a0:	10800017 	ldw	r2,0(r2)
   557a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   557a8:	e0fffd17 	ldw	r3,-12(fp)
   557ac:	d0a00a04 	addi	r2,gp,-32728
   557b0:	18bfcc1e 	bne	r3,r2,556e4 <__alt_data_end+0xfffee5e4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   557b4:	0005883a 	mov	r2,zero
}
   557b8:	e037883a 	mov	sp,fp
   557bc:	dfc00117 	ldw	ra,4(sp)
   557c0:	df000017 	ldw	fp,0(sp)
   557c4:	dec00204 	addi	sp,sp,8
   557c8:	f800283a 	ret

000557cc <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
   557cc:	defffc04 	addi	sp,sp,-16
   557d0:	df000315 	stw	fp,12(sp)
   557d4:	df000304 	addi	fp,sp,12
   557d8:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
   557dc:	e0bfff17 	ldw	r2,-4(fp)
   557e0:	10800217 	ldw	r2,8(r2)
   557e4:	1000021e 	bne	r2,zero,557f0 <alt_fs_reg+0x24>
  {
    return -ENODEV;
   557e8:	00bffb44 	movi	r2,-19
   557ec:	00001306 	br	5583c <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
   557f0:	e0bfff17 	ldw	r2,-4(fp)
   557f4:	d0e00a04 	addi	r3,gp,-32728
   557f8:	e0fffd15 	stw	r3,-12(fp)
   557fc:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   55800:	e0bffe17 	ldw	r2,-8(fp)
   55804:	e0fffd17 	ldw	r3,-12(fp)
   55808:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   5580c:	e0bffd17 	ldw	r2,-12(fp)
   55810:	10c00017 	ldw	r3,0(r2)
   55814:	e0bffe17 	ldw	r2,-8(fp)
   55818:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   5581c:	e0bffd17 	ldw	r2,-12(fp)
   55820:	10800017 	ldw	r2,0(r2)
   55824:	e0fffe17 	ldw	r3,-8(fp)
   55828:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   5582c:	e0bffd17 	ldw	r2,-12(fp)
   55830:	e0fffe17 	ldw	r3,-8(fp)
   55834:	10c00015 	stw	r3,0(r2)

  return 0;
   55838:	0005883a 	mov	r2,zero
} 
   5583c:	e037883a 	mov	sp,fp
   55840:	df000017 	ldw	fp,0(sp)
   55844:	dec00104 	addi	sp,sp,4
   55848:	f800283a 	ret

0005584c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   5584c:	defffc04 	addi	sp,sp,-16
   55850:	df000315 	stw	fp,12(sp)
   55854:	df000304 	addi	fp,sp,12
   55858:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   5585c:	00bffa04 	movi	r2,-24
   55860:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   55864:	e03ffd15 	stw	zero,-12(fp)
   55868:	00001906 	br	558d0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   5586c:	00800174 	movhi	r2,5
   55870:	109d1304 	addi	r2,r2,29772
   55874:	e0fffd17 	ldw	r3,-12(fp)
   55878:	18c00324 	muli	r3,r3,12
   5587c:	10c5883a 	add	r2,r2,r3
   55880:	10800017 	ldw	r2,0(r2)
   55884:	10000f1e 	bne	r2,zero,558c4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   55888:	00800174 	movhi	r2,5
   5588c:	109d1304 	addi	r2,r2,29772
   55890:	e0fffd17 	ldw	r3,-12(fp)
   55894:	18c00324 	muli	r3,r3,12
   55898:	10c5883a 	add	r2,r2,r3
   5589c:	e0ffff17 	ldw	r3,-4(fp)
   558a0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   558a4:	d0e00e17 	ldw	r3,-32712(gp)
   558a8:	e0bffd17 	ldw	r2,-12(fp)
   558ac:	1880020e 	bge	r3,r2,558b8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   558b0:	e0bffd17 	ldw	r2,-12(fp)
   558b4:	d0a00e15 	stw	r2,-32712(gp)
      }
      rc = i;
   558b8:	e0bffd17 	ldw	r2,-12(fp)
   558bc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   558c0:	00000606 	br	558dc <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   558c4:	e0bffd17 	ldw	r2,-12(fp)
   558c8:	10800044 	addi	r2,r2,1
   558cc:	e0bffd15 	stw	r2,-12(fp)
   558d0:	e0bffd17 	ldw	r2,-12(fp)
   558d4:	10800810 	cmplti	r2,r2,32
   558d8:	103fe41e 	bne	r2,zero,5586c <__alt_data_end+0xfffee76c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   558dc:	e0bffe17 	ldw	r2,-8(fp)
}
   558e0:	e037883a 	mov	sp,fp
   558e4:	df000017 	ldw	fp,0(sp)
   558e8:	dec00104 	addi	sp,sp,4
   558ec:	f800283a 	ret

000558f0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   558f0:	defffe04 	addi	sp,sp,-8
   558f4:	dfc00115 	stw	ra,4(sp)
   558f8:	df000015 	stw	fp,0(sp)
   558fc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   55900:	01440004 	movi	r5,4096
   55904:	0009883a 	mov	r4,zero
   55908:	00561340 	call	56134 <alt_icache_flush>
#endif
}
   5590c:	0001883a 	nop
   55910:	e037883a 	mov	sp,fp
   55914:	dfc00117 	ldw	ra,4(sp)
   55918:	df000017 	ldw	fp,0(sp)
   5591c:	dec00204 	addi	sp,sp,8
   55920:	f800283a 	ret

00055924 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   55924:	defff904 	addi	sp,sp,-28
   55928:	dfc00615 	stw	ra,24(sp)
   5592c:	df000515 	stw	fp,20(sp)
   55930:	df000504 	addi	fp,sp,20
   55934:	e13ffc15 	stw	r4,-16(fp)
   55938:	e17ffd15 	stw	r5,-12(fp)
   5593c:	e1bffe15 	stw	r6,-8(fp)
   55940:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   55944:	e0800217 	ldw	r2,8(fp)
   55948:	d8800015 	stw	r2,0(sp)
   5594c:	e1ffff17 	ldw	r7,-4(fp)
   55950:	e1bffe17 	ldw	r6,-8(fp)
   55954:	e17ffd17 	ldw	r5,-12(fp)
   55958:	e13ffc17 	ldw	r4,-16(fp)
   5595c:	0055ad40 	call	55ad4 <alt_iic_isr_register>
}  
   55960:	e037883a 	mov	sp,fp
   55964:	dfc00117 	ldw	ra,4(sp)
   55968:	df000017 	ldw	fp,0(sp)
   5596c:	dec00204 	addi	sp,sp,8
   55970:	f800283a 	ret

00055974 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   55974:	defff904 	addi	sp,sp,-28
   55978:	df000615 	stw	fp,24(sp)
   5597c:	df000604 	addi	fp,sp,24
   55980:	e13ffe15 	stw	r4,-8(fp)
   55984:	e17fff15 	stw	r5,-4(fp)
   55988:	e0bfff17 	ldw	r2,-4(fp)
   5598c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55990:	0005303a 	rdctl	r2,status
   55994:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   55998:	e0fffb17 	ldw	r3,-20(fp)
   5599c:	00bfff84 	movi	r2,-2
   559a0:	1884703a 	and	r2,r3,r2
   559a4:	1001703a 	wrctl	status,r2
  
  return context;
   559a8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   559ac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   559b0:	00c00044 	movi	r3,1
   559b4:	e0bffa17 	ldw	r2,-24(fp)
   559b8:	1884983a 	sll	r2,r3,r2
   559bc:	1007883a 	mov	r3,r2
   559c0:	d0a71e17 	ldw	r2,-25480(gp)
   559c4:	1884b03a 	or	r2,r3,r2
   559c8:	d0a71e15 	stw	r2,-25480(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   559cc:	d0a71e17 	ldw	r2,-25480(gp)
   559d0:	100170fa 	wrctl	ienable,r2
   559d4:	e0bffc17 	ldw	r2,-16(fp)
   559d8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   559dc:	e0bffd17 	ldw	r2,-12(fp)
   559e0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   559e4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   559e8:	0001883a 	nop
}
   559ec:	e037883a 	mov	sp,fp
   559f0:	df000017 	ldw	fp,0(sp)
   559f4:	dec00104 	addi	sp,sp,4
   559f8:	f800283a 	ret

000559fc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   559fc:	defff904 	addi	sp,sp,-28
   55a00:	df000615 	stw	fp,24(sp)
   55a04:	df000604 	addi	fp,sp,24
   55a08:	e13ffe15 	stw	r4,-8(fp)
   55a0c:	e17fff15 	stw	r5,-4(fp)
   55a10:	e0bfff17 	ldw	r2,-4(fp)
   55a14:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55a18:	0005303a 	rdctl	r2,status
   55a1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   55a20:	e0fffb17 	ldw	r3,-20(fp)
   55a24:	00bfff84 	movi	r2,-2
   55a28:	1884703a 	and	r2,r3,r2
   55a2c:	1001703a 	wrctl	status,r2
  
  return context;
   55a30:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   55a34:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   55a38:	00c00044 	movi	r3,1
   55a3c:	e0bffa17 	ldw	r2,-24(fp)
   55a40:	1884983a 	sll	r2,r3,r2
   55a44:	0084303a 	nor	r2,zero,r2
   55a48:	1007883a 	mov	r3,r2
   55a4c:	d0a71e17 	ldw	r2,-25480(gp)
   55a50:	1884703a 	and	r2,r3,r2
   55a54:	d0a71e15 	stw	r2,-25480(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   55a58:	d0a71e17 	ldw	r2,-25480(gp)
   55a5c:	100170fa 	wrctl	ienable,r2
   55a60:	e0bffc17 	ldw	r2,-16(fp)
   55a64:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   55a68:	e0bffd17 	ldw	r2,-12(fp)
   55a6c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   55a70:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   55a74:	0001883a 	nop
}
   55a78:	e037883a 	mov	sp,fp
   55a7c:	df000017 	ldw	fp,0(sp)
   55a80:	dec00104 	addi	sp,sp,4
   55a84:	f800283a 	ret

00055a88 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   55a88:	defffc04 	addi	sp,sp,-16
   55a8c:	df000315 	stw	fp,12(sp)
   55a90:	df000304 	addi	fp,sp,12
   55a94:	e13ffe15 	stw	r4,-8(fp)
   55a98:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   55a9c:	000530fa 	rdctl	r2,ienable
   55aa0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   55aa4:	00c00044 	movi	r3,1
   55aa8:	e0bfff17 	ldw	r2,-4(fp)
   55aac:	1884983a 	sll	r2,r3,r2
   55ab0:	1007883a 	mov	r3,r2
   55ab4:	e0bffd17 	ldw	r2,-12(fp)
   55ab8:	1884703a 	and	r2,r3,r2
   55abc:	1004c03a 	cmpne	r2,r2,zero
   55ac0:	10803fcc 	andi	r2,r2,255
}
   55ac4:	e037883a 	mov	sp,fp
   55ac8:	df000017 	ldw	fp,0(sp)
   55acc:	dec00104 	addi	sp,sp,4
   55ad0:	f800283a 	ret

00055ad4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   55ad4:	defff504 	addi	sp,sp,-44
   55ad8:	dfc00a15 	stw	ra,40(sp)
   55adc:	df000915 	stw	fp,36(sp)
   55ae0:	df000904 	addi	fp,sp,36
   55ae4:	e13ffc15 	stw	r4,-16(fp)
   55ae8:	e17ffd15 	stw	r5,-12(fp)
   55aec:	e1bffe15 	stw	r6,-8(fp)
   55af0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   55af4:	00bffa84 	movi	r2,-22
   55af8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   55afc:	e0bffd17 	ldw	r2,-12(fp)
   55b00:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   55b04:	e0bff817 	ldw	r2,-32(fp)
   55b08:	10800808 	cmpgei	r2,r2,32
   55b0c:	1000271e 	bne	r2,zero,55bac <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55b10:	0005303a 	rdctl	r2,status
   55b14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   55b18:	e0fffb17 	ldw	r3,-20(fp)
   55b1c:	00bfff84 	movi	r2,-2
   55b20:	1884703a 	and	r2,r3,r2
   55b24:	1001703a 	wrctl	status,r2
  
  return context;
   55b28:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   55b2c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   55b30:	008001b4 	movhi	r2,6
   55b34:	10a8cf04 	addi	r2,r2,-23748
   55b38:	e0fff817 	ldw	r3,-32(fp)
   55b3c:	180690fa 	slli	r3,r3,3
   55b40:	10c5883a 	add	r2,r2,r3
   55b44:	e0fffe17 	ldw	r3,-8(fp)
   55b48:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   55b4c:	008001b4 	movhi	r2,6
   55b50:	10a8cf04 	addi	r2,r2,-23748
   55b54:	e0fff817 	ldw	r3,-32(fp)
   55b58:	180690fa 	slli	r3,r3,3
   55b5c:	10c5883a 	add	r2,r2,r3
   55b60:	10800104 	addi	r2,r2,4
   55b64:	e0ffff17 	ldw	r3,-4(fp)
   55b68:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   55b6c:	e0bffe17 	ldw	r2,-8(fp)
   55b70:	10000526 	beq	r2,zero,55b88 <alt_iic_isr_register+0xb4>
   55b74:	e0bff817 	ldw	r2,-32(fp)
   55b78:	100b883a 	mov	r5,r2
   55b7c:	e13ffc17 	ldw	r4,-16(fp)
   55b80:	00559740 	call	55974 <alt_ic_irq_enable>
   55b84:	00000406 	br	55b98 <alt_iic_isr_register+0xc4>
   55b88:	e0bff817 	ldw	r2,-32(fp)
   55b8c:	100b883a 	mov	r5,r2
   55b90:	e13ffc17 	ldw	r4,-16(fp)
   55b94:	00559fc0 	call	559fc <alt_ic_irq_disable>
   55b98:	e0bff715 	stw	r2,-36(fp)
   55b9c:	e0bffa17 	ldw	r2,-24(fp)
   55ba0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   55ba4:	e0bff917 	ldw	r2,-28(fp)
   55ba8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   55bac:	e0bff717 	ldw	r2,-36(fp)
}
   55bb0:	e037883a 	mov	sp,fp
   55bb4:	dfc00117 	ldw	ra,4(sp)
   55bb8:	df000017 	ldw	fp,0(sp)
   55bbc:	dec00204 	addi	sp,sp,8
   55bc0:	f800283a 	ret

00055bc4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   55bc4:	defff904 	addi	sp,sp,-28
   55bc8:	dfc00615 	stw	ra,24(sp)
   55bcc:	df000515 	stw	fp,20(sp)
   55bd0:	df000504 	addi	fp,sp,20
   55bd4:	e13ffc15 	stw	r4,-16(fp)
   55bd8:	e17ffd15 	stw	r5,-12(fp)
   55bdc:	e1bffe15 	stw	r6,-8(fp)
   55be0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   55be4:	e1bfff17 	ldw	r6,-4(fp)
   55be8:	e17ffe17 	ldw	r5,-8(fp)
   55bec:	e13ffd17 	ldw	r4,-12(fp)
   55bf0:	00521380 	call	52138 <open>
   55bf4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   55bf8:	e0bffb17 	ldw	r2,-20(fp)
   55bfc:	10001c16 	blt	r2,zero,55c70 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   55c00:	00800174 	movhi	r2,5
   55c04:	109d1304 	addi	r2,r2,29772
   55c08:	e0fffb17 	ldw	r3,-20(fp)
   55c0c:	18c00324 	muli	r3,r3,12
   55c10:	10c5883a 	add	r2,r2,r3
   55c14:	10c00017 	ldw	r3,0(r2)
   55c18:	e0bffc17 	ldw	r2,-16(fp)
   55c1c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   55c20:	00800174 	movhi	r2,5
   55c24:	109d1304 	addi	r2,r2,29772
   55c28:	e0fffb17 	ldw	r3,-20(fp)
   55c2c:	18c00324 	muli	r3,r3,12
   55c30:	10c5883a 	add	r2,r2,r3
   55c34:	10800104 	addi	r2,r2,4
   55c38:	10c00017 	ldw	r3,0(r2)
   55c3c:	e0bffc17 	ldw	r2,-16(fp)
   55c40:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   55c44:	00800174 	movhi	r2,5
   55c48:	109d1304 	addi	r2,r2,29772
   55c4c:	e0fffb17 	ldw	r3,-20(fp)
   55c50:	18c00324 	muli	r3,r3,12
   55c54:	10c5883a 	add	r2,r2,r3
   55c58:	10800204 	addi	r2,r2,8
   55c5c:	10c00017 	ldw	r3,0(r2)
   55c60:	e0bffc17 	ldw	r2,-16(fp)
   55c64:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   55c68:	e13ffb17 	ldw	r4,-20(fp)
   55c6c:	00523c40 	call	523c4 <alt_release_fd>
  }
} 
   55c70:	0001883a 	nop
   55c74:	e037883a 	mov	sp,fp
   55c78:	dfc00117 	ldw	ra,4(sp)
   55c7c:	df000017 	ldw	fp,0(sp)
   55c80:	dec00204 	addi	sp,sp,8
   55c84:	f800283a 	ret

00055c88 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   55c88:	defffb04 	addi	sp,sp,-20
   55c8c:	dfc00415 	stw	ra,16(sp)
   55c90:	df000315 	stw	fp,12(sp)
   55c94:	df000304 	addi	fp,sp,12
   55c98:	e13ffd15 	stw	r4,-12(fp)
   55c9c:	e17ffe15 	stw	r5,-8(fp)
   55ca0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   55ca4:	01c07fc4 	movi	r7,511
   55ca8:	01800044 	movi	r6,1
   55cac:	e17ffd17 	ldw	r5,-12(fp)
   55cb0:	01000174 	movhi	r4,5
   55cb4:	211d1604 	addi	r4,r4,29784
   55cb8:	0055bc40 	call	55bc4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   55cbc:	01c07fc4 	movi	r7,511
   55cc0:	000d883a 	mov	r6,zero
   55cc4:	e17ffe17 	ldw	r5,-8(fp)
   55cc8:	01000174 	movhi	r4,5
   55ccc:	211d1304 	addi	r4,r4,29772
   55cd0:	0055bc40 	call	55bc4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   55cd4:	01c07fc4 	movi	r7,511
   55cd8:	01800044 	movi	r6,1
   55cdc:	e17fff17 	ldw	r5,-4(fp)
   55ce0:	01000174 	movhi	r4,5
   55ce4:	211d1904 	addi	r4,r4,29796
   55ce8:	0055bc40 	call	55bc4 <alt_open_fd>
}  
   55cec:	0001883a 	nop
   55cf0:	e037883a 	mov	sp,fp
   55cf4:	dfc00117 	ldw	ra,4(sp)
   55cf8:	df000017 	ldw	fp,0(sp)
   55cfc:	dec00204 	addi	sp,sp,8
   55d00:	f800283a 	ret

00055d04 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   55d04:	defff204 	addi	sp,sp,-56
   55d08:	dfc00a15 	stw	ra,40(sp)
   55d0c:	df000915 	stw	fp,36(sp)
   55d10:	df000904 	addi	fp,sp,36
   55d14:	e13fff15 	stw	r4,-4(fp)
   55d18:	e1400215 	stw	r5,8(fp)
   55d1c:	e1800315 	stw	r6,12(fp)
   55d20:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   55d24:	e0800204 	addi	r2,fp,8
   55d28:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   55d2c:	e0bfff17 	ldw	r2,-4(fp)
   55d30:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   55d34:	00006f06 	br	55ef4 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   55d38:	e0bff807 	ldb	r2,-32(fp)
   55d3c:	10800960 	cmpeqi	r2,r2,37
   55d40:	1000041e 	bne	r2,zero,55d54 <alt_printf+0x50>
        {
            alt_putchar(c);
   55d44:	e0bff807 	ldb	r2,-32(fp)
   55d48:	1009883a 	mov	r4,r2
   55d4c:	0055f300 	call	55f30 <alt_putchar>
   55d50:	00006806 	br	55ef4 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   55d54:	e0bff717 	ldw	r2,-36(fp)
   55d58:	10c00044 	addi	r3,r2,1
   55d5c:	e0fff715 	stw	r3,-36(fp)
   55d60:	10800003 	ldbu	r2,0(r2)
   55d64:	e0bff805 	stb	r2,-32(fp)
   55d68:	e0bff807 	ldb	r2,-32(fp)
   55d6c:	10006926 	beq	r2,zero,55f14 <alt_printf+0x210>
            {
                if (c == '%')
   55d70:	e0bff807 	ldb	r2,-32(fp)
   55d74:	10800958 	cmpnei	r2,r2,37
   55d78:	1000041e 	bne	r2,zero,55d8c <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   55d7c:	e0bff807 	ldb	r2,-32(fp)
   55d80:	1009883a 	mov	r4,r2
   55d84:	0055f300 	call	55f30 <alt_putchar>
   55d88:	00005a06 	br	55ef4 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   55d8c:	e0bff807 	ldb	r2,-32(fp)
   55d90:	108018d8 	cmpnei	r2,r2,99
   55d94:	1000081e 	bne	r2,zero,55db8 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   55d98:	e0bffe17 	ldw	r2,-8(fp)
   55d9c:	10c00104 	addi	r3,r2,4
   55da0:	e0fffe15 	stw	r3,-8(fp)
   55da4:	10800017 	ldw	r2,0(r2)
   55da8:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   55dac:	e13ffd17 	ldw	r4,-12(fp)
   55db0:	0055f300 	call	55f30 <alt_putchar>
   55db4:	00004f06 	br	55ef4 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   55db8:	e0bff807 	ldb	r2,-32(fp)
   55dbc:	10801e18 	cmpnei	r2,r2,120
   55dc0:	1000341e 	bne	r2,zero,55e94 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   55dc4:	e0bffe17 	ldw	r2,-8(fp)
   55dc8:	10c00104 	addi	r3,r2,4
   55dcc:	e0fffe15 	stw	r3,-8(fp)
   55dd0:	10800017 	ldw	r2,0(r2)
   55dd4:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   55dd8:	e0bffb17 	ldw	r2,-20(fp)
   55ddc:	1000031e 	bne	r2,zero,55dec <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   55de0:	01000c04 	movi	r4,48
   55de4:	0055f300 	call	55f30 <alt_putchar>
                        continue;
   55de8:	00004206 	br	55ef4 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   55dec:	00800704 	movi	r2,28
   55df0:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   55df4:	00000306 	br	55e04 <alt_printf+0x100>
                        digit_shift -= 4;
   55df8:	e0bff917 	ldw	r2,-28(fp)
   55dfc:	10bfff04 	addi	r2,r2,-4
   55e00:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   55e04:	00c003c4 	movi	r3,15
   55e08:	e0bff917 	ldw	r2,-28(fp)
   55e0c:	1884983a 	sll	r2,r3,r2
   55e10:	1007883a 	mov	r3,r2
   55e14:	e0bffb17 	ldw	r2,-20(fp)
   55e18:	1884703a 	and	r2,r3,r2
   55e1c:	103ff626 	beq	r2,zero,55df8 <__alt_data_end+0xfffeecf8>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   55e20:	00001906 	br	55e88 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   55e24:	00c003c4 	movi	r3,15
   55e28:	e0bff917 	ldw	r2,-28(fp)
   55e2c:	1884983a 	sll	r2,r3,r2
   55e30:	1007883a 	mov	r3,r2
   55e34:	e0bffb17 	ldw	r2,-20(fp)
   55e38:	1886703a 	and	r3,r3,r2
   55e3c:	e0bff917 	ldw	r2,-28(fp)
   55e40:	1884d83a 	srl	r2,r3,r2
   55e44:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   55e48:	e0bffc17 	ldw	r2,-16(fp)
   55e4c:	108002a8 	cmpgeui	r2,r2,10
   55e50:	1000041e 	bne	r2,zero,55e64 <alt_printf+0x160>
                            c = '0' + digit;
   55e54:	e0bffc17 	ldw	r2,-16(fp)
   55e58:	10800c04 	addi	r2,r2,48
   55e5c:	e0bff805 	stb	r2,-32(fp)
   55e60:	00000306 	br	55e70 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   55e64:	e0bffc17 	ldw	r2,-16(fp)
   55e68:	108015c4 	addi	r2,r2,87
   55e6c:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   55e70:	e0bff807 	ldb	r2,-32(fp)
   55e74:	1009883a 	mov	r4,r2
   55e78:	0055f300 	call	55f30 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   55e7c:	e0bff917 	ldw	r2,-28(fp)
   55e80:	10bfff04 	addi	r2,r2,-4
   55e84:	e0bff915 	stw	r2,-28(fp)
   55e88:	e0bff917 	ldw	r2,-28(fp)
   55e8c:	103fe50e 	bge	r2,zero,55e24 <__alt_data_end+0xfffeed24>
   55e90:	00001806 	br	55ef4 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   55e94:	e0bff807 	ldb	r2,-32(fp)
   55e98:	10801cd8 	cmpnei	r2,r2,115
   55e9c:	1000151e 	bne	r2,zero,55ef4 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   55ea0:	e0bffe17 	ldw	r2,-8(fp)
   55ea4:	10c00104 	addi	r3,r2,4
   55ea8:	e0fffe15 	stw	r3,-8(fp)
   55eac:	10800017 	ldw	r2,0(r2)
   55eb0:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   55eb4:	00000906 	br	55edc <alt_printf+0x1d8>
                      alt_putchar(*s++);
   55eb8:	e0bffa17 	ldw	r2,-24(fp)
   55ebc:	10c00044 	addi	r3,r2,1
   55ec0:	e0fffa15 	stw	r3,-24(fp)
   55ec4:	10800003 	ldbu	r2,0(r2)
   55ec8:	10803fcc 	andi	r2,r2,255
   55ecc:	1080201c 	xori	r2,r2,128
   55ed0:	10bfe004 	addi	r2,r2,-128
   55ed4:	1009883a 	mov	r4,r2
   55ed8:	0055f300 	call	55f30 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   55edc:	e0bffa17 	ldw	r2,-24(fp)
   55ee0:	10800003 	ldbu	r2,0(r2)
   55ee4:	10803fcc 	andi	r2,r2,255
   55ee8:	1080201c 	xori	r2,r2,128
   55eec:	10bfe004 	addi	r2,r2,-128
   55ef0:	103ff11e 	bne	r2,zero,55eb8 <__alt_data_end+0xfffeedb8>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   55ef4:	e0bff717 	ldw	r2,-36(fp)
   55ef8:	10c00044 	addi	r3,r2,1
   55efc:	e0fff715 	stw	r3,-36(fp)
   55f00:	10800003 	ldbu	r2,0(r2)
   55f04:	e0bff805 	stb	r2,-32(fp)
   55f08:	e0bff807 	ldb	r2,-32(fp)
   55f0c:	103f8a1e 	bne	r2,zero,55d38 <__alt_data_end+0xfffeec38>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   55f10:	00000106 	br	55f18 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   55f14:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   55f18:	0001883a 	nop
   55f1c:	e037883a 	mov	sp,fp
   55f20:	dfc00117 	ldw	ra,4(sp)
   55f24:	df000017 	ldw	fp,0(sp)
   55f28:	dec00504 	addi	sp,sp,20
   55f2c:	f800283a 	ret

00055f30 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   55f30:	defffd04 	addi	sp,sp,-12
   55f34:	dfc00215 	stw	ra,8(sp)
   55f38:	df000115 	stw	fp,4(sp)
   55f3c:	df000104 	addi	fp,sp,4
   55f40:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   55f44:	d0a00517 	ldw	r2,-32748(gp)
   55f48:	10800217 	ldw	r2,8(r2)
   55f4c:	100b883a 	mov	r5,r2
   55f50:	e13fff17 	ldw	r4,-4(fp)
   55f54:	00563c80 	call	563c8 <putc>
#endif
#endif
}
   55f58:	e037883a 	mov	sp,fp
   55f5c:	dfc00117 	ldw	ra,4(sp)
   55f60:	df000017 	ldw	fp,0(sp)
   55f64:	dec00204 	addi	sp,sp,8
   55f68:	f800283a 	ret

00055f6c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   55f6c:	defffa04 	addi	sp,sp,-24
   55f70:	df000515 	stw	fp,20(sp)
   55f74:	df000504 	addi	fp,sp,20
   55f78:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55f7c:	0005303a 	rdctl	r2,status
   55f80:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   55f84:	e0fffc17 	ldw	r3,-16(fp)
   55f88:	00bfff84 	movi	r2,-2
   55f8c:	1884703a 	and	r2,r3,r2
   55f90:	1001703a 	wrctl	status,r2
  
  return context;
   55f94:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   55f98:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   55f9c:	e0bfff17 	ldw	r2,-4(fp)
   55fa0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   55fa4:	e0bffd17 	ldw	r2,-12(fp)
   55fa8:	10800017 	ldw	r2,0(r2)
   55fac:	e0fffd17 	ldw	r3,-12(fp)
   55fb0:	18c00117 	ldw	r3,4(r3)
   55fb4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   55fb8:	e0bffd17 	ldw	r2,-12(fp)
   55fbc:	10800117 	ldw	r2,4(r2)
   55fc0:	e0fffd17 	ldw	r3,-12(fp)
   55fc4:	18c00017 	ldw	r3,0(r3)
   55fc8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   55fcc:	e0bffd17 	ldw	r2,-12(fp)
   55fd0:	e0fffd17 	ldw	r3,-12(fp)
   55fd4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   55fd8:	e0bffd17 	ldw	r2,-12(fp)
   55fdc:	e0fffd17 	ldw	r3,-12(fp)
   55fe0:	10c00015 	stw	r3,0(r2)
   55fe4:	e0bffb17 	ldw	r2,-20(fp)
   55fe8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   55fec:	e0bffe17 	ldw	r2,-8(fp)
   55ff0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   55ff4:	0001883a 	nop
   55ff8:	e037883a 	mov	sp,fp
   55ffc:	df000017 	ldw	fp,0(sp)
   56000:	dec00104 	addi	sp,sp,4
   56004:	f800283a 	ret

00056008 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   56008:	defffb04 	addi	sp,sp,-20
   5600c:	dfc00415 	stw	ra,16(sp)
   56010:	df000315 	stw	fp,12(sp)
   56014:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   56018:	d0a02617 	ldw	r2,-32616(gp)
   5601c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   56020:	d0a72017 	ldw	r2,-25472(gp)
   56024:	10800044 	addi	r2,r2,1
   56028:	d0a72015 	stw	r2,-25472(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   5602c:	00002e06 	br	560e8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   56030:	e0bffd17 	ldw	r2,-12(fp)
   56034:	10800017 	ldw	r2,0(r2)
   56038:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   5603c:	e0bffd17 	ldw	r2,-12(fp)
   56040:	10800403 	ldbu	r2,16(r2)
   56044:	10803fcc 	andi	r2,r2,255
   56048:	10000426 	beq	r2,zero,5605c <alt_tick+0x54>
   5604c:	d0a72017 	ldw	r2,-25472(gp)
   56050:	1000021e 	bne	r2,zero,5605c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   56054:	e0bffd17 	ldw	r2,-12(fp)
   56058:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   5605c:	e0bffd17 	ldw	r2,-12(fp)
   56060:	10800217 	ldw	r2,8(r2)
   56064:	d0e72017 	ldw	r3,-25472(gp)
   56068:	18801d36 	bltu	r3,r2,560e0 <alt_tick+0xd8>
   5606c:	e0bffd17 	ldw	r2,-12(fp)
   56070:	10800403 	ldbu	r2,16(r2)
   56074:	10803fcc 	andi	r2,r2,255
   56078:	1000191e 	bne	r2,zero,560e0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   5607c:	e0bffd17 	ldw	r2,-12(fp)
   56080:	10800317 	ldw	r2,12(r2)
   56084:	e0fffd17 	ldw	r3,-12(fp)
   56088:	18c00517 	ldw	r3,20(r3)
   5608c:	1809883a 	mov	r4,r3
   56090:	103ee83a 	callr	r2
   56094:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   56098:	e0bfff17 	ldw	r2,-4(fp)
   5609c:	1000031e 	bne	r2,zero,560ac <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   560a0:	e13ffd17 	ldw	r4,-12(fp)
   560a4:	0055f6c0 	call	55f6c <alt_alarm_stop>
   560a8:	00000d06 	br	560e0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   560ac:	e0bffd17 	ldw	r2,-12(fp)
   560b0:	10c00217 	ldw	r3,8(r2)
   560b4:	e0bfff17 	ldw	r2,-4(fp)
   560b8:	1887883a 	add	r3,r3,r2
   560bc:	e0bffd17 	ldw	r2,-12(fp)
   560c0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   560c4:	e0bffd17 	ldw	r2,-12(fp)
   560c8:	10c00217 	ldw	r3,8(r2)
   560cc:	d0a72017 	ldw	r2,-25472(gp)
   560d0:	1880032e 	bgeu	r3,r2,560e0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   560d4:	e0bffd17 	ldw	r2,-12(fp)
   560d8:	00c00044 	movi	r3,1
   560dc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   560e0:	e0bffe17 	ldw	r2,-8(fp)
   560e4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   560e8:	e0fffd17 	ldw	r3,-12(fp)
   560ec:	d0a02604 	addi	r2,gp,-32616
   560f0:	18bfcf1e 	bne	r3,r2,56030 <__alt_data_end+0xfffeef30>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   560f4:	0001883a 	nop
}
   560f8:	0001883a 	nop
   560fc:	e037883a 	mov	sp,fp
   56100:	dfc00117 	ldw	ra,4(sp)
   56104:	df000017 	ldw	fp,0(sp)
   56108:	dec00204 	addi	sp,sp,8
   5610c:	f800283a 	ret

00056110 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   56110:	deffff04 	addi	sp,sp,-4
   56114:	df000015 	stw	fp,0(sp)
   56118:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   5611c:	000170fa 	wrctl	ienable,zero
}
   56120:	0001883a 	nop
   56124:	e037883a 	mov	sp,fp
   56128:	df000017 	ldw	fp,0(sp)
   5612c:	dec00104 	addi	sp,sp,4
   56130:	f800283a 	ret

00056134 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   56134:	defffb04 	addi	sp,sp,-20
   56138:	df000415 	stw	fp,16(sp)
   5613c:	df000404 	addi	fp,sp,16
   56140:	e13ffe15 	stw	r4,-8(fp)
   56144:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   56148:	e0bfff17 	ldw	r2,-4(fp)
   5614c:	10840070 	cmpltui	r2,r2,4097
   56150:	1000021e 	bne	r2,zero,5615c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   56154:	00840004 	movi	r2,4096
   56158:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   5615c:	e0fffe17 	ldw	r3,-8(fp)
   56160:	e0bfff17 	ldw	r2,-4(fp)
   56164:	1885883a 	add	r2,r3,r2
   56168:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   5616c:	e0bffe17 	ldw	r2,-8(fp)
   56170:	e0bffc15 	stw	r2,-16(fp)
   56174:	00000506 	br	5618c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   56178:	e0bffc17 	ldw	r2,-16(fp)
   5617c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   56180:	e0bffc17 	ldw	r2,-16(fp)
   56184:	10800804 	addi	r2,r2,32
   56188:	e0bffc15 	stw	r2,-16(fp)
   5618c:	e0fffc17 	ldw	r3,-16(fp)
   56190:	e0bffd17 	ldw	r2,-12(fp)
   56194:	18bff836 	bltu	r3,r2,56178 <__alt_data_end+0xfffef078>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   56198:	e0bffe17 	ldw	r2,-8(fp)
   5619c:	108007cc 	andi	r2,r2,31
   561a0:	10000226 	beq	r2,zero,561ac <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   561a4:	e0bffc17 	ldw	r2,-16(fp)
   561a8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   561ac:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   561b0:	0001883a 	nop
   561b4:	e037883a 	mov	sp,fp
   561b8:	df000017 	ldw	fp,0(sp)
   561bc:	dec00104 	addi	sp,sp,4
   561c0:	f800283a 	ret

000561c4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   561c4:	defffe04 	addi	sp,sp,-8
   561c8:	df000115 	stw	fp,4(sp)
   561cc:	df000104 	addi	fp,sp,4
   561d0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   561d4:	e0bfff17 	ldw	r2,-4(fp)
   561d8:	10bffe84 	addi	r2,r2,-6
   561dc:	10c00428 	cmpgeui	r3,r2,16
   561e0:	18001a1e 	bne	r3,zero,5624c <alt_exception_cause_generated_bad_addr+0x88>
   561e4:	100690ba 	slli	r3,r2,2
   561e8:	00800174 	movhi	r2,5
   561ec:	10987f04 	addi	r2,r2,25084
   561f0:	1885883a 	add	r2,r3,r2
   561f4:	10800017 	ldw	r2,0(r2)
   561f8:	1000683a 	jmp	r2
   561fc:	0005623c 	xorhi	zero,zero,5512
   56200:	0005623c 	xorhi	zero,zero,5512
   56204:	0005624c 	andi	zero,zero,5513
   56208:	0005624c 	andi	zero,zero,5513
   5620c:	0005624c 	andi	zero,zero,5513
   56210:	0005623c 	xorhi	zero,zero,5512
   56214:	00056244 	movi	zero,5513
   56218:	0005624c 	andi	zero,zero,5513
   5621c:	0005623c 	xorhi	zero,zero,5512
   56220:	0005623c 	xorhi	zero,zero,5512
   56224:	0005624c 	andi	zero,zero,5513
   56228:	0005623c 	xorhi	zero,zero,5512
   5622c:	00056244 	movi	zero,5513
   56230:	0005624c 	andi	zero,zero,5513
   56234:	0005624c 	andi	zero,zero,5513
   56238:	0005623c 	xorhi	zero,zero,5512
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   5623c:	00800044 	movi	r2,1
   56240:	00000306 	br	56250 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   56244:	0005883a 	mov	r2,zero
   56248:	00000106 	br	56250 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   5624c:	0005883a 	mov	r2,zero
  }
}
   56250:	e037883a 	mov	sp,fp
   56254:	df000017 	ldw	fp,0(sp)
   56258:	dec00104 	addi	sp,sp,4
   5625c:	f800283a 	ret

00056260 <atexit>:
   56260:	200b883a 	mov	r5,r4
   56264:	000f883a 	mov	r7,zero
   56268:	000d883a 	mov	r6,zero
   5626c:	0009883a 	mov	r4,zero
   56270:	00564901 	jmpi	56490 <__register_exitproc>

00056274 <exit>:
   56274:	defffe04 	addi	sp,sp,-8
   56278:	000b883a 	mov	r5,zero
   5627c:	dc000015 	stw	r16,0(sp)
   56280:	dfc00115 	stw	ra,4(sp)
   56284:	2021883a 	mov	r16,r4
   56288:	00565a80 	call	565a8 <__call_exitprocs>
   5628c:	008001b4 	movhi	r2,6
   56290:	10a1a704 	addi	r2,r2,-31076
   56294:	11000017 	ldw	r4,0(r2)
   56298:	20800f17 	ldw	r2,60(r4)
   5629c:	10000126 	beq	r2,zero,562a4 <exit+0x30>
   562a0:	103ee83a 	callr	r2
   562a4:	8009883a 	mov	r4,r16
   562a8:	00567280 	call	56728 <_exit>

000562ac <memcmp>:
   562ac:	01c000c4 	movi	r7,3
   562b0:	3980192e 	bgeu	r7,r6,56318 <memcmp+0x6c>
   562b4:	2144b03a 	or	r2,r4,r5
   562b8:	11c4703a 	and	r2,r2,r7
   562bc:	10000f26 	beq	r2,zero,562fc <memcmp+0x50>
   562c0:	20800003 	ldbu	r2,0(r4)
   562c4:	28c00003 	ldbu	r3,0(r5)
   562c8:	10c0151e 	bne	r2,r3,56320 <memcmp+0x74>
   562cc:	31bfff84 	addi	r6,r6,-2
   562d0:	01ffffc4 	movi	r7,-1
   562d4:	00000406 	br	562e8 <memcmp+0x3c>
   562d8:	20800003 	ldbu	r2,0(r4)
   562dc:	28c00003 	ldbu	r3,0(r5)
   562e0:	31bfffc4 	addi	r6,r6,-1
   562e4:	10c00e1e 	bne	r2,r3,56320 <memcmp+0x74>
   562e8:	21000044 	addi	r4,r4,1
   562ec:	29400044 	addi	r5,r5,1
   562f0:	31fff91e 	bne	r6,r7,562d8 <__alt_data_end+0xfffef1d8>
   562f4:	0005883a 	mov	r2,zero
   562f8:	f800283a 	ret
   562fc:	20c00017 	ldw	r3,0(r4)
   56300:	28800017 	ldw	r2,0(r5)
   56304:	18bfee1e 	bne	r3,r2,562c0 <__alt_data_end+0xfffef1c0>
   56308:	31bfff04 	addi	r6,r6,-4
   5630c:	21000104 	addi	r4,r4,4
   56310:	29400104 	addi	r5,r5,4
   56314:	39bff936 	bltu	r7,r6,562fc <__alt_data_end+0xfffef1fc>
   56318:	303fe91e 	bne	r6,zero,562c0 <__alt_data_end+0xfffef1c0>
   5631c:	003ff506 	br	562f4 <__alt_data_end+0xfffef1f4>
   56320:	10c5c83a 	sub	r2,r2,r3
   56324:	f800283a 	ret

00056328 <_putc_r>:
   56328:	defffc04 	addi	sp,sp,-16
   5632c:	dc000215 	stw	r16,8(sp)
   56330:	dfc00315 	stw	ra,12(sp)
   56334:	2021883a 	mov	r16,r4
   56338:	20000226 	beq	r4,zero,56344 <_putc_r+0x1c>
   5633c:	20800e17 	ldw	r2,56(r4)
   56340:	10001b26 	beq	r2,zero,563b0 <_putc_r+0x88>
   56344:	30800217 	ldw	r2,8(r6)
   56348:	10bfffc4 	addi	r2,r2,-1
   5634c:	30800215 	stw	r2,8(r6)
   56350:	10000a16 	blt	r2,zero,5637c <_putc_r+0x54>
   56354:	30800017 	ldw	r2,0(r6)
   56358:	11400005 	stb	r5,0(r2)
   5635c:	30800017 	ldw	r2,0(r6)
   56360:	10c00044 	addi	r3,r2,1
   56364:	30c00015 	stw	r3,0(r6)
   56368:	10800003 	ldbu	r2,0(r2)
   5636c:	dfc00317 	ldw	ra,12(sp)
   56370:	dc000217 	ldw	r16,8(sp)
   56374:	dec00404 	addi	sp,sp,16
   56378:	f800283a 	ret
   5637c:	30c00617 	ldw	r3,24(r6)
   56380:	10c00616 	blt	r2,r3,5639c <_putc_r+0x74>
   56384:	30800017 	ldw	r2,0(r6)
   56388:	00c00284 	movi	r3,10
   5638c:	11400005 	stb	r5,0(r2)
   56390:	30800017 	ldw	r2,0(r6)
   56394:	11400003 	ldbu	r5,0(r2)
   56398:	28fff11e 	bne	r5,r3,56360 <__alt_data_end+0xfffef260>
   5639c:	8009883a 	mov	r4,r16
   563a0:	dfc00317 	ldw	ra,12(sp)
   563a4:	dc000217 	ldw	r16,8(sp)
   563a8:	dec00404 	addi	sp,sp,16
   563ac:	0050ae81 	jmpi	50ae8 <__swbuf_r>
   563b0:	d9400015 	stw	r5,0(sp)
   563b4:	d9800115 	stw	r6,4(sp)
   563b8:	004c9a80 	call	4c9a8 <__sinit>
   563bc:	d9800117 	ldw	r6,4(sp)
   563c0:	d9400017 	ldw	r5,0(sp)
   563c4:	003fdf06 	br	56344 <__alt_data_end+0xfffef244>

000563c8 <putc>:
   563c8:	008001b4 	movhi	r2,6
   563cc:	defffc04 	addi	sp,sp,-16
   563d0:	10a1a804 	addi	r2,r2,-31072
   563d4:	dc000115 	stw	r16,4(sp)
   563d8:	14000017 	ldw	r16,0(r2)
   563dc:	dc400215 	stw	r17,8(sp)
   563e0:	dfc00315 	stw	ra,12(sp)
   563e4:	2023883a 	mov	r17,r4
   563e8:	80000226 	beq	r16,zero,563f4 <putc+0x2c>
   563ec:	80800e17 	ldw	r2,56(r16)
   563f0:	10001a26 	beq	r2,zero,5645c <putc+0x94>
   563f4:	28800217 	ldw	r2,8(r5)
   563f8:	10bfffc4 	addi	r2,r2,-1
   563fc:	28800215 	stw	r2,8(r5)
   56400:	10000b16 	blt	r2,zero,56430 <putc+0x68>
   56404:	28800017 	ldw	r2,0(r5)
   56408:	14400005 	stb	r17,0(r2)
   5640c:	28800017 	ldw	r2,0(r5)
   56410:	10c00044 	addi	r3,r2,1
   56414:	28c00015 	stw	r3,0(r5)
   56418:	10800003 	ldbu	r2,0(r2)
   5641c:	dfc00317 	ldw	ra,12(sp)
   56420:	dc400217 	ldw	r17,8(sp)
   56424:	dc000117 	ldw	r16,4(sp)
   56428:	dec00404 	addi	sp,sp,16
   5642c:	f800283a 	ret
   56430:	28c00617 	ldw	r3,24(r5)
   56434:	10c00e16 	blt	r2,r3,56470 <putc+0xa8>
   56438:	28800017 	ldw	r2,0(r5)
   5643c:	01000284 	movi	r4,10
   56440:	14400005 	stb	r17,0(r2)
   56444:	28800017 	ldw	r2,0(r5)
   56448:	10c00003 	ldbu	r3,0(r2)
   5644c:	193ff01e 	bne	r3,r4,56410 <__alt_data_end+0xfffef310>
   56450:	280d883a 	mov	r6,r5
   56454:	180b883a 	mov	r5,r3
   56458:	00000706 	br	56478 <putc+0xb0>
   5645c:	8009883a 	mov	r4,r16
   56460:	d9400015 	stw	r5,0(sp)
   56464:	004c9a80 	call	4c9a8 <__sinit>
   56468:	d9400017 	ldw	r5,0(sp)
   5646c:	003fe106 	br	563f4 <__alt_data_end+0xfffef2f4>
   56470:	280d883a 	mov	r6,r5
   56474:	880b883a 	mov	r5,r17
   56478:	8009883a 	mov	r4,r16
   5647c:	dfc00317 	ldw	ra,12(sp)
   56480:	dc400217 	ldw	r17,8(sp)
   56484:	dc000117 	ldw	r16,4(sp)
   56488:	dec00404 	addi	sp,sp,16
   5648c:	0050ae81 	jmpi	50ae8 <__swbuf_r>

00056490 <__register_exitproc>:
   56490:	defffa04 	addi	sp,sp,-24
   56494:	dc000315 	stw	r16,12(sp)
   56498:	040001b4 	movhi	r16,6
   5649c:	8421a704 	addi	r16,r16,-31076
   564a0:	80c00017 	ldw	r3,0(r16)
   564a4:	dc400415 	stw	r17,16(sp)
   564a8:	dfc00515 	stw	ra,20(sp)
   564ac:	18805217 	ldw	r2,328(r3)
   564b0:	2023883a 	mov	r17,r4
   564b4:	10003726 	beq	r2,zero,56594 <__register_exitproc+0x104>
   564b8:	10c00117 	ldw	r3,4(r2)
   564bc:	010007c4 	movi	r4,31
   564c0:	20c00e16 	blt	r4,r3,564fc <__register_exitproc+0x6c>
   564c4:	1a000044 	addi	r8,r3,1
   564c8:	8800221e 	bne	r17,zero,56554 <__register_exitproc+0xc4>
   564cc:	18c00084 	addi	r3,r3,2
   564d0:	18c7883a 	add	r3,r3,r3
   564d4:	18c7883a 	add	r3,r3,r3
   564d8:	12000115 	stw	r8,4(r2)
   564dc:	10c7883a 	add	r3,r2,r3
   564e0:	19400015 	stw	r5,0(r3)
   564e4:	0005883a 	mov	r2,zero
   564e8:	dfc00517 	ldw	ra,20(sp)
   564ec:	dc400417 	ldw	r17,16(sp)
   564f0:	dc000317 	ldw	r16,12(sp)
   564f4:	dec00604 	addi	sp,sp,24
   564f8:	f800283a 	ret
   564fc:	00800034 	movhi	r2,0
   56500:	10800004 	addi	r2,r2,0
   56504:	10002626 	beq	r2,zero,565a0 <__register_exitproc+0x110>
   56508:	01006404 	movi	r4,400
   5650c:	d9400015 	stw	r5,0(sp)
   56510:	d9800115 	stw	r6,4(sp)
   56514:	d9c00215 	stw	r7,8(sp)
   56518:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>
   5651c:	d9400017 	ldw	r5,0(sp)
   56520:	d9800117 	ldw	r6,4(sp)
   56524:	d9c00217 	ldw	r7,8(sp)
   56528:	10001d26 	beq	r2,zero,565a0 <__register_exitproc+0x110>
   5652c:	81000017 	ldw	r4,0(r16)
   56530:	10000115 	stw	zero,4(r2)
   56534:	02000044 	movi	r8,1
   56538:	22405217 	ldw	r9,328(r4)
   5653c:	0007883a 	mov	r3,zero
   56540:	12400015 	stw	r9,0(r2)
   56544:	20805215 	stw	r2,328(r4)
   56548:	10006215 	stw	zero,392(r2)
   5654c:	10006315 	stw	zero,396(r2)
   56550:	883fde26 	beq	r17,zero,564cc <__alt_data_end+0xfffef3cc>
   56554:	18c9883a 	add	r4,r3,r3
   56558:	2109883a 	add	r4,r4,r4
   5655c:	1109883a 	add	r4,r2,r4
   56560:	21802215 	stw	r6,136(r4)
   56564:	01800044 	movi	r6,1
   56568:	12406217 	ldw	r9,392(r2)
   5656c:	30cc983a 	sll	r6,r6,r3
   56570:	4992b03a 	or	r9,r9,r6
   56574:	12406215 	stw	r9,392(r2)
   56578:	21c04215 	stw	r7,264(r4)
   5657c:	01000084 	movi	r4,2
   56580:	893fd21e 	bne	r17,r4,564cc <__alt_data_end+0xfffef3cc>
   56584:	11006317 	ldw	r4,396(r2)
   56588:	218cb03a 	or	r6,r4,r6
   5658c:	11806315 	stw	r6,396(r2)
   56590:	003fce06 	br	564cc <__alt_data_end+0xfffef3cc>
   56594:	18805304 	addi	r2,r3,332
   56598:	18805215 	stw	r2,328(r3)
   5659c:	003fc606 	br	564b8 <__alt_data_end+0xfffef3b8>
   565a0:	00bfffc4 	movi	r2,-1
   565a4:	003fd006 	br	564e8 <__alt_data_end+0xfffef3e8>

000565a8 <__call_exitprocs>:
   565a8:	defff504 	addi	sp,sp,-44
   565ac:	df000915 	stw	fp,36(sp)
   565b0:	dd400615 	stw	r21,24(sp)
   565b4:	dc800315 	stw	r18,12(sp)
   565b8:	dfc00a15 	stw	ra,40(sp)
   565bc:	ddc00815 	stw	r23,32(sp)
   565c0:	dd800715 	stw	r22,28(sp)
   565c4:	dd000515 	stw	r20,20(sp)
   565c8:	dcc00415 	stw	r19,16(sp)
   565cc:	dc400215 	stw	r17,8(sp)
   565d0:	dc000115 	stw	r16,4(sp)
   565d4:	d9000015 	stw	r4,0(sp)
   565d8:	2839883a 	mov	fp,r5
   565dc:	04800044 	movi	r18,1
   565e0:	057fffc4 	movi	r21,-1
   565e4:	008001b4 	movhi	r2,6
   565e8:	10a1a704 	addi	r2,r2,-31076
   565ec:	12000017 	ldw	r8,0(r2)
   565f0:	45005217 	ldw	r20,328(r8)
   565f4:	44c05204 	addi	r19,r8,328
   565f8:	a0001c26 	beq	r20,zero,5666c <__call_exitprocs+0xc4>
   565fc:	a0800117 	ldw	r2,4(r20)
   56600:	15ffffc4 	addi	r23,r2,-1
   56604:	b8000d16 	blt	r23,zero,5663c <__call_exitprocs+0x94>
   56608:	14000044 	addi	r16,r2,1
   5660c:	8421883a 	add	r16,r16,r16
   56610:	8421883a 	add	r16,r16,r16
   56614:	84402004 	addi	r17,r16,128
   56618:	a463883a 	add	r17,r20,r17
   5661c:	a421883a 	add	r16,r20,r16
   56620:	e0001e26 	beq	fp,zero,5669c <__call_exitprocs+0xf4>
   56624:	80804017 	ldw	r2,256(r16)
   56628:	e0801c26 	beq	fp,r2,5669c <__call_exitprocs+0xf4>
   5662c:	bdffffc4 	addi	r23,r23,-1
   56630:	843fff04 	addi	r16,r16,-4
   56634:	8c7fff04 	addi	r17,r17,-4
   56638:	bd7ff91e 	bne	r23,r21,56620 <__alt_data_end+0xfffef520>
   5663c:	00800034 	movhi	r2,0
   56640:	10800004 	addi	r2,r2,0
   56644:	10000926 	beq	r2,zero,5666c <__call_exitprocs+0xc4>
   56648:	a0800117 	ldw	r2,4(r20)
   5664c:	1000301e 	bne	r2,zero,56710 <__call_exitprocs+0x168>
   56650:	a0800017 	ldw	r2,0(r20)
   56654:	10003226 	beq	r2,zero,56720 <__call_exitprocs+0x178>
   56658:	a009883a 	mov	r4,r20
   5665c:	98800015 	stw	r2,0(r19)
   56660:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>
   56664:	9d000017 	ldw	r20,0(r19)
   56668:	a03fe41e 	bne	r20,zero,565fc <__alt_data_end+0xfffef4fc>
   5666c:	dfc00a17 	ldw	ra,40(sp)
   56670:	df000917 	ldw	fp,36(sp)
   56674:	ddc00817 	ldw	r23,32(sp)
   56678:	dd800717 	ldw	r22,28(sp)
   5667c:	dd400617 	ldw	r21,24(sp)
   56680:	dd000517 	ldw	r20,20(sp)
   56684:	dcc00417 	ldw	r19,16(sp)
   56688:	dc800317 	ldw	r18,12(sp)
   5668c:	dc400217 	ldw	r17,8(sp)
   56690:	dc000117 	ldw	r16,4(sp)
   56694:	dec00b04 	addi	sp,sp,44
   56698:	f800283a 	ret
   5669c:	a0800117 	ldw	r2,4(r20)
   566a0:	80c00017 	ldw	r3,0(r16)
   566a4:	10bfffc4 	addi	r2,r2,-1
   566a8:	15c01426 	beq	r2,r23,566fc <__call_exitprocs+0x154>
   566ac:	80000015 	stw	zero,0(r16)
   566b0:	183fde26 	beq	r3,zero,5662c <__alt_data_end+0xfffef52c>
   566b4:	95c8983a 	sll	r4,r18,r23
   566b8:	a0806217 	ldw	r2,392(r20)
   566bc:	a5800117 	ldw	r22,4(r20)
   566c0:	2084703a 	and	r2,r4,r2
   566c4:	10000b26 	beq	r2,zero,566f4 <__call_exitprocs+0x14c>
   566c8:	a0806317 	ldw	r2,396(r20)
   566cc:	2088703a 	and	r4,r4,r2
   566d0:	20000c1e 	bne	r4,zero,56704 <__call_exitprocs+0x15c>
   566d4:	89400017 	ldw	r5,0(r17)
   566d8:	d9000017 	ldw	r4,0(sp)
   566dc:	183ee83a 	callr	r3
   566e0:	a0800117 	ldw	r2,4(r20)
   566e4:	15bfbf1e 	bne	r2,r22,565e4 <__alt_data_end+0xfffef4e4>
   566e8:	98800017 	ldw	r2,0(r19)
   566ec:	153fcf26 	beq	r2,r20,5662c <__alt_data_end+0xfffef52c>
   566f0:	003fbc06 	br	565e4 <__alt_data_end+0xfffef4e4>
   566f4:	183ee83a 	callr	r3
   566f8:	003ff906 	br	566e0 <__alt_data_end+0xfffef5e0>
   566fc:	a5c00115 	stw	r23,4(r20)
   56700:	003feb06 	br	566b0 <__alt_data_end+0xfffef5b0>
   56704:	89000017 	ldw	r4,0(r17)
   56708:	183ee83a 	callr	r3
   5670c:	003ff406 	br	566e0 <__alt_data_end+0xfffef5e0>
   56710:	a0800017 	ldw	r2,0(r20)
   56714:	a027883a 	mov	r19,r20
   56718:	1029883a 	mov	r20,r2
   5671c:	003fb606 	br	565f8 <__alt_data_end+0xfffef4f8>
   56720:	0005883a 	mov	r2,zero
   56724:	003ffb06 	br	56714 <__alt_data_end+0xfffef614>

00056728 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   56728:	defffd04 	addi	sp,sp,-12
   5672c:	df000215 	stw	fp,8(sp)
   56730:	df000204 	addi	fp,sp,8
   56734:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   56738:	0001883a 	nop
   5673c:	e0bfff17 	ldw	r2,-4(fp)
   56740:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   56744:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   56748:	10000226 	beq	r2,zero,56754 <_exit+0x2c>
    ALT_SIM_FAIL();
   5674c:	002af070 	cmpltui	zero,zero,43969
   56750:	00000106 	br	56758 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   56754:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   56758:	003fff06 	br	56758 <__alt_data_end+0xfffef658>
