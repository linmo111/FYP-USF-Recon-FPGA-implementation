#include <stdio.h>
#include <math.h>

#define ALT_CI_RECONSTRUCTION_TOP_0(A) __builtin_custom_fnf(ALT_CI_RECONSTRUCTION_TOP_0_N,(A))
#define ALT_CI_RECONSTRUCTION_TOP_0_N 0x1



typedef struct {
    float lam;
    float prev_y;
    float prev_eps;
    int initialized;
} UnlimitedSamplerReconstructor;

/* Initialize the reconstructor */
void initReconstructor(UnlimitedSamplerReconstructor *recon, float lam) {
    recon->lam = lam;
    recon->prev_y = 0.0;
    recon->prev_eps = 0.0;
    recon->initialized = 0;
}

/* Centered modulo function into [-¦Ë, ¦Ë) */
float modulo(float x, float lam) {
    float two_lam = 2.0 * lam;
    float mod = fmod(x + lam, two_lam);
    if (mod < 0) mod += two_lam;
    return mod - lam;
}

/* Update function: process one sample */
float update(UnlimitedSamplerReconstructor *recon, float yk) {
    if (!recon->initialized) {
        recon->prev_y = yk;
        recon->initialized = 1;
        return yk;  // First sample, return as is
    }

    // Step 1: Compute ¦¤y[k]
    float dy = yk - recon->prev_y;

    // Step 2: Apply modulo to ¦¤y[k]
    float mod_dy = modulo(dy, recon->lam);

    // Step 3: Compute ¦¤¦Å[k]
    float delta_eps = mod_dy - dy;

    // Step 4: Update ¦Å[k], round to nearest 2¦Ë
    recon->prev_eps += delta_eps;
    float eps_k = 2.0 * recon->lam * round(recon->prev_eps / (2.0 * recon->lam));

    // Step 5: Recover g[k]
    float gk = yk + eps_k;

    // Update state
    recon->prev_y = yk;

    return gk;
}


#define MA_WINDOW_SIZE 100  // Size of the moving average window

typedef struct {
    float buffer[MA_WINDOW_SIZE];
    int index;
    int count;
    float sum;
} MovingAverage;

/* Initialize the moving average filter */
void initMovingAverage(MovingAverage *ma) {
    ma->index = 0;
    ma->count = 0;
    ma->sum = 0.0;

    for (int i = 0; i < MA_WINDOW_SIZE; i++) {
        ma->buffer[i] = 0.0;
    }
}

/* Update the moving average with a new sample */
float updateMovingAverage(MovingAverage *ma, float new_sample) {
    // Remove the oldest sample from the sum
    ma->sum -= ma->buffer[ma->index];

    // Add the new sample to the buffer and sum
    ma->buffer[ma->index] = new_sample;
    ma->sum += new_sample;

    // Update the index (circular buffer)
    ma->index = (ma->index + 1) % MA_WINDOW_SIZE;

    // Update the count (if less than window size)
    if (ma->count < MA_WINDOW_SIZE) {
        ma->count++;
    }

    // Compute the moving average
    return ma->sum / ma->count;
}

















int main() {
	float lam=0.75;
    UnlimitedSamplerReconstructor recon;
    initReconstructor(&recon, lam);

    MovingAverage ma;
    initMovingAverage(&ma);
    // Example float32 data (converted from your file)
	float data[] = {0.0f, 0.0f,1.0f,0.0f,1.0f, 1.0f,  0.0f,0.0f, 0.0f,0.0f,0.0f,0.0f, 0.0f,  0.0f};
//    float data[] = {0.0f, 0.0f,1.75f,0.0f,1.75f, 1.75f,  1.75f,0.0f, 0.0f,0.0f,0.0f,0.0f, 0.0f,  0.0f};  // <- Replace with your actual values
//    float data[] = {-0.0175935030f, -0.0175935030ff,-0.0175935030f,-0.0175935030f,-0.0175935030f, 0.0f};  // <- Replace with your actual values


    int data_len = sizeof(data) / sizeof(data[0]);
    float sum=0;
    // Print the array contents
    printf("running");
    for (int i = 0; i < data_len; i++) {
//        printf("data[%d] = %f\n", i, data[i]);
    	printf("\n")
        printf("data out [%d] = %f\n ", i, ALT_CI_RECONSTRUCTION_TOP_0(data[i]));
        float reconstructed_val=update(&recon, data[i]);
        printf("reconstructed_val [%d] = %f\n ", i, reconstructed_val);
        float avg = updateMovingAverage(&ma, reconstructed_val);
        printf("reference avg out [%d] = %f\n ", i, avg);
        printf("reference data out [%d] = %f\n ", i, reconstructed_val-avg);

    }

    return 0;
}
